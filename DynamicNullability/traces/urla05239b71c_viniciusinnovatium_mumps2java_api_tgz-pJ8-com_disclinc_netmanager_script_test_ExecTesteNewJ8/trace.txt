Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

missing variables in newEnterExitRel:
  parent = br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::ENTER
  child = br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@7c140b85
parent varinfos missing from parent_to_child_map:
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
rel.parent_to_child_map:
    br.com.innovatium.mumps2java.datastructure.Tree.this => orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
    br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous)
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))-1
child.var_infos:
    this
    br.com.innovatium.mumps2java.datastructure.Tree.this
    br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous)
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))-1
End of diagnostics for newEnterExitRel(br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::ENTER, br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::EXIT)
missing variables in newEnterExitRel:
  parent = br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::ENTER
  child = br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@73c2a7e1
parent varinfos missing from parent_to_child_map:
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
rel.parent_to_child_map:
    br.com.innovatium.mumps2java.datastructure.Tree.this => orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
    br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous)
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))-1
child.var_infos:
    this
    br.com.innovatium.mumps2java.datastructure.Tree.this
    br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous)
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))-1
End of diagnostics for newEnterExitRel(br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::ENTER, br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::EXIT)
missing variables in newEnterExitRel:
  parent = br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes.MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree):::ENTER
  child = br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes.MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@7a9cf248
parent varinfos missing from parent_to_child_map:
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.mergeSubnodesOperation.dest[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.mergeSubnodesOperation.orig[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.parent.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.subnode.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.next.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   arg1.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel]
   arg1.previous.subs[br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[arg1.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[arg1.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subs[arg1.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[arg1.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[arg1.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[arg1.currentStackLevel-1]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[arg1.currentStackLevel]
   br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[arg1.currentStackLevel-1]
rel.parent_to_child_map:
    br.com.innovatium.mumps2java.datastructure.Tree.this => orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
    br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..] => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName() => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName())
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next)
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous => orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous)
    arg1 => orig(arg1)
    arg1.currentStackLevel => orig(arg1.currentStackLevel)
    arg1.stack => orig(arg1.stack)
    arg1.stack.mapLevel => orig(arg1.stack.mapLevel)
    arg1.stack.mapLevel.getClass().getName() => orig(arg1.stack.mapLevel.getClass().getName())
    arg1.keyValue => orig(arg1.keyValue)
    arg1.keyValue.getClass().getName() => orig(arg1.keyValue.getClass().getName())
    arg1.killSubnodesOperation => orig(arg1.killSubnodesOperation)
    arg1.addSubnodesOperation => orig(arg1.addSubnodesOperation)
    arg1.mergeSubnodesOperation => orig(arg1.mergeSubnodesOperation)
    arg1.mergeSubnodesOperation.dest => orig(arg1.mergeSubnodesOperation.dest)
    arg1.mergeSubnodesOperation.dest.getClass().getName() => orig(arg1.mergeSubnodesOperation.dest.getClass().getName())
    arg1.mergeSubnodesOperation.dest[..] => orig(arg1.mergeSubnodesOperation.dest[..])
    arg1.mergeSubnodesOperation.dest[..].getClass().getName() => orig(arg1.mergeSubnodesOperation.dest[..].getClass().getName())
    arg1.mergeSubnodesOperation.orig => orig(arg1.mergeSubnodesOperation.orig)
    arg1.mergeSubnodesOperation.orig.getClass().getName() => orig(arg1.mergeSubnodesOperation.orig.getClass().getName())
    arg1.mergeSubnodesOperation.orig[..] => orig(arg1.mergeSubnodesOperation.orig[..])
    arg1.mergeSubnodesOperation.orig[..].getClass().getName() => orig(arg1.mergeSubnodesOperation.orig[..].getClass().getName())
    arg1.mergeSubnodesOperation.tree => orig(arg1.mergeSubnodesOperation.tree)
    arg1.subs => orig(arg1.subs)
    arg1.subs.getClass().getName() => orig(arg1.subs.getClass().getName())
    arg1.subs[..] => orig(arg1.subs[..])
    arg1.subs[..].getClass().getName() => orig(arg1.subs[..].getClass().getName())
    arg1.key => orig(arg1.key)
    arg1.key.toString => orig(arg1.key.toString)
    arg1.susbscript => orig(arg1.susbscript)
    arg1.susbscript.getClass().getName() => orig(arg1.susbscript.getClass().getName())
    arg1.isNumeric => orig(arg1.isNumeric)
    arg1.stackLevel => orig(arg1.stackLevel)
    arg1.value => orig(arg1.value)
    arg1.value.getClass().getName() => orig(arg1.value.getClass().getName())
    arg1.parent => orig(arg1.parent)
    arg1.parent.subs => orig(arg1.parent.subs)
    arg1.parent.subs.getClass().getName() => orig(arg1.parent.subs.getClass().getName())
    arg1.parent.subs[..] => orig(arg1.parent.subs[..])
    arg1.parent.subs[..].getClass().getName() => orig(arg1.parent.subs[..].getClass().getName())
    arg1.parent.key => orig(arg1.parent.key)
    arg1.parent.key.toString => orig(arg1.parent.key.toString)
    arg1.parent.susbscript => orig(arg1.parent.susbscript)
    arg1.parent.susbscript.getClass().getName() => orig(arg1.parent.susbscript.getClass().getName())
    arg1.parent.isNumeric => orig(arg1.parent.isNumeric)
    arg1.parent.stackLevel => orig(arg1.parent.stackLevel)
    arg1.parent.value => orig(arg1.parent.value)
    arg1.parent.value.getClass().getName() => orig(arg1.parent.value.getClass().getName())
    arg1.parent.parent => orig(arg1.parent.parent)
    arg1.parent.subnode => orig(arg1.parent.subnode)
    arg1.parent.next => orig(arg1.parent.next)
    arg1.parent.previous => orig(arg1.parent.previous)
    arg1.subnode => orig(arg1.subnode)
    arg1.subnode.subs => orig(arg1.subnode.subs)
    arg1.subnode.subs.getClass().getName() => orig(arg1.subnode.subs.getClass().getName())
    arg1.subnode.subs[..] => orig(arg1.subnode.subs[..])
    arg1.subnode.subs[..].getClass().getName() => orig(arg1.subnode.subs[..].getClass().getName())
    arg1.subnode.key => orig(arg1.subnode.key)
    arg1.subnode.key.toString => orig(arg1.subnode.key.toString)
    arg1.subnode.susbscript => orig(arg1.subnode.susbscript)
    arg1.subnode.susbscript.getClass().getName() => orig(arg1.subnode.susbscript.getClass().getName())
    arg1.subnode.isNumeric => orig(arg1.subnode.isNumeric)
    arg1.subnode.stackLevel => orig(arg1.subnode.stackLevel)
    arg1.subnode.value => orig(arg1.subnode.value)
    arg1.subnode.value.getClass().getName() => orig(arg1.subnode.value.getClass().getName())
    arg1.subnode.parent => orig(arg1.subnode.parent)
    arg1.subnode.subnode => orig(arg1.subnode.subnode)
    arg1.subnode.next => orig(arg1.subnode.next)
    arg1.subnode.previous => orig(arg1.subnode.previous)
    arg1.next => orig(arg1.next)
    arg1.next.subs => orig(arg1.next.subs)
    arg1.next.subs.getClass().getName() => orig(arg1.next.subs.getClass().getName())
    arg1.next.subs[..] => orig(arg1.next.subs[..])
    arg1.next.subs[..].getClass().getName() => orig(arg1.next.subs[..].getClass().getName())
    arg1.next.key => orig(arg1.next.key)
    arg1.next.key.toString => orig(arg1.next.key.toString)
    arg1.next.susbscript => orig(arg1.next.susbscript)
    arg1.next.susbscript.getClass().getName() => orig(arg1.next.susbscript.getClass().getName())
    arg1.next.isNumeric => orig(arg1.next.isNumeric)
    arg1.next.stackLevel => orig(arg1.next.stackLevel)
    arg1.next.value => orig(arg1.next.value)
    arg1.next.value.getClass().getName() => orig(arg1.next.value.getClass().getName())
    arg1.next.parent => orig(arg1.next.parent)
    arg1.next.subnode => orig(arg1.next.subnode)
    arg1.next.next => orig(arg1.next.next)
    arg1.next.previous => orig(arg1.next.previous)
    arg1.previous => orig(arg1.previous)
    arg1.previous.subs => orig(arg1.previous.subs)
    arg1.previous.subs.getClass().getName() => orig(arg1.previous.subs.getClass().getName())
    arg1.previous.subs[..] => orig(arg1.previous.subs[..])
    arg1.previous.subs[..].getClass().getName() => orig(arg1.previous.subs[..].getClass().getName())
    arg1.previous.key => orig(arg1.previous.key)
    arg1.previous.key.toString => orig(arg1.previous.key.toString)
    arg1.previous.susbscript => orig(arg1.previous.susbscript)
    arg1.previous.susbscript.getClass().getName() => orig(arg1.previous.susbscript.getClass().getName())
    arg1.previous.isNumeric => orig(arg1.previous.isNumeric)
    arg1.previous.stackLevel => orig(arg1.previous.stackLevel)
    arg1.previous.value => orig(arg1.previous.value)
    arg1.previous.value.getClass().getName() => orig(arg1.previous.value.getClass().getName())
    arg1.previous.parent => orig(arg1.previous.parent)
    arg1.previous.subnode => orig(arg1.previous.subnode)
    arg1.previous.next => orig(arg1.previous.next)
    arg1.previous.previous => orig(arg1.previous.previous)
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]) => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])-1 => orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))-1
    size(arg1.mergeSubnodesOperation.dest[..]) => orig(size(arg1.mergeSubnodesOperation.dest[..]))
    size(arg1.mergeSubnodesOperation.dest[..])-1 => orig(size(arg1.mergeSubnodesOperation.dest[..]))-1
    size(arg1.mergeSubnodesOperation.orig[..]) => orig(size(arg1.mergeSubnodesOperation.orig[..]))
    size(arg1.mergeSubnodesOperation.orig[..])-1 => orig(size(arg1.mergeSubnodesOperation.orig[..]))-1
    size(arg1.subs[..]) => orig(size(arg1.subs[..]))
    size(arg1.subs[..])-1 => orig(size(arg1.subs[..]))-1
    size(arg1.parent.subs[..]) => orig(size(arg1.parent.subs[..]))
    size(arg1.parent.subs[..])-1 => orig(size(arg1.parent.subs[..]))-1
    size(arg1.subnode.subs[..]) => orig(size(arg1.subnode.subs[..]))
    size(arg1.subnode.subs[..])-1 => orig(size(arg1.subnode.subs[..]))-1
    size(arg1.next.subs[..]) => orig(size(arg1.next.subs[..]))
    size(arg1.next.subs[..])-1 => orig(size(arg1.next.subs[..]))-1
    size(arg1.previous.subs[..]) => orig(size(arg1.previous.subs[..]))
    size(arg1.previous.subs[..])-1 => orig(size(arg1.previous.subs[..]))-1
child.var_infos:
    this
    this.dest
    this.dest.getClass().getName()
    this.dest[..]
    this.dest[..].getClass().getName()
    this.orig
    this.orig.getClass().getName()
    this.orig[..]
    this.orig[..].getClass().getName()
    this.tree
    this.tree.currentStackLevel
    this.tree.stack
    this.tree.stack.mapLevel
    this.tree.stack.mapLevel.getClass().getName()
    this.tree.keyValue
    this.tree.keyValue.getClass().getName()
    this.tree.killSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this
    this.tree.addSubnodesOperation
    this.tree.mergeSubnodesOperation
    this.tree.mergeSubnodesOperation.dest
    this.tree.mergeSubnodesOperation.dest.getClass().getName()
    this.tree.mergeSubnodesOperation.dest[..]
    this.tree.mergeSubnodesOperation.dest[..].getClass().getName()
    this.tree.mergeSubnodesOperation.orig
    this.tree.mergeSubnodesOperation.orig.getClass().getName()
    this.tree.mergeSubnodesOperation.orig[..]
    this.tree.mergeSubnodesOperation.orig[..].getClass().getName()
    this.tree.mergeSubnodesOperation.tree
    this.tree.subs
    this.tree.subs.getClass().getName()
    this.tree.subs[..]
    this.tree.subs[..].getClass().getName()
    this.tree.key
    this.tree.key.toString
    this.tree.susbscript
    this.tree.susbscript.getClass().getName()
    this.tree.isNumeric
    this.tree.stackLevel
    this.tree.value
    this.tree.value.getClass().getName()
    this.tree.parent
    this.tree.parent.subs
    this.tree.parent.subs.getClass().getName()
    this.tree.parent.subs[..]
    this.tree.parent.subs[..].getClass().getName()
    this.tree.parent.key
    this.tree.parent.key.toString
    this.tree.parent.susbscript
    this.tree.parent.susbscript.getClass().getName()
    this.tree.parent.isNumeric
    this.tree.parent.stackLevel
    this.tree.parent.value
    this.tree.parent.value.getClass().getName()
    this.tree.parent.parent
    this.tree.parent.subnode
    this.tree.parent.next
    this.tree.parent.previous
    this.tree.subnode
    this.tree.subnode.subs
    this.tree.subnode.subs.getClass().getName()
    this.tree.subnode.subs[..]
    this.tree.subnode.subs[..].getClass().getName()
    this.tree.subnode.key
    this.tree.subnode.key.toString
    this.tree.subnode.susbscript
    this.tree.subnode.susbscript.getClass().getName()
    this.tree.subnode.isNumeric
    this.tree.subnode.stackLevel
    this.tree.subnode.value
    this.tree.subnode.value.getClass().getName()
    this.tree.subnode.parent
    this.tree.subnode.subnode
    this.tree.subnode.next
    this.tree.subnode.previous
    this.tree.next
    this.tree.next.subs
    this.tree.next.subs.getClass().getName()
    this.tree.next.subs[..]
    this.tree.next.subs[..].getClass().getName()
    this.tree.next.key
    this.tree.next.key.toString
    this.tree.next.susbscript
    this.tree.next.susbscript.getClass().getName()
    this.tree.next.isNumeric
    this.tree.next.stackLevel
    this.tree.next.value
    this.tree.next.value.getClass().getName()
    this.tree.next.parent
    this.tree.next.subnode
    this.tree.next.next
    this.tree.next.previous
    this.tree.previous
    this.tree.previous.subs
    this.tree.previous.subs.getClass().getName()
    this.tree.previous.subs[..]
    this.tree.previous.subs[..].getClass().getName()
    this.tree.previous.key
    this.tree.previous.key.toString
    this.tree.previous.susbscript
    this.tree.previous.susbscript.getClass().getName()
    this.tree.previous.isNumeric
    this.tree.previous.stackLevel
    this.tree.previous.value
    this.tree.previous.value.getClass().getName()
    this.tree.previous.parent
    this.tree.previous.subnode
    this.tree.previous.next
    this.tree.previous.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
    br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName()
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next
    br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous
    arg1
    arg1.currentStackLevel
    arg1.stack
    arg1.stack.mapLevel
    arg1.stack.mapLevel.getClass().getName()
    arg1.keyValue
    arg1.keyValue.getClass().getName()
    arg1.killSubnodesOperation
    arg1.addSubnodesOperation
    arg1.mergeSubnodesOperation
    arg1.mergeSubnodesOperation.dest
    arg1.mergeSubnodesOperation.dest.getClass().getName()
    arg1.mergeSubnodesOperation.dest[..]
    arg1.mergeSubnodesOperation.dest[..].getClass().getName()
    arg1.mergeSubnodesOperation.orig
    arg1.mergeSubnodesOperation.orig.getClass().getName()
    arg1.mergeSubnodesOperation.orig[..]
    arg1.mergeSubnodesOperation.orig[..].getClass().getName()
    arg1.mergeSubnodesOperation.tree
    arg1.subs
    arg1.subs.getClass().getName()
    arg1.subs[..]
    arg1.subs[..].getClass().getName()
    arg1.key
    arg1.key.toString
    arg1.susbscript
    arg1.susbscript.getClass().getName()
    arg1.isNumeric
    arg1.stackLevel
    arg1.value
    arg1.value.getClass().getName()
    arg1.parent
    arg1.parent.subs
    arg1.parent.subs.getClass().getName()
    arg1.parent.subs[..]
    arg1.parent.subs[..].getClass().getName()
    arg1.parent.key
    arg1.parent.key.toString
    arg1.parent.susbscript
    arg1.parent.susbscript.getClass().getName()
    arg1.parent.isNumeric
    arg1.parent.stackLevel
    arg1.parent.value
    arg1.parent.value.getClass().getName()
    arg1.parent.parent
    arg1.parent.subnode
    arg1.parent.next
    arg1.parent.previous
    arg1.subnode
    arg1.subnode.subs
    arg1.subnode.subs.getClass().getName()
    arg1.subnode.subs[..]
    arg1.subnode.subs[..].getClass().getName()
    arg1.subnode.key
    arg1.subnode.key.toString
    arg1.subnode.susbscript
    arg1.subnode.susbscript.getClass().getName()
    arg1.subnode.isNumeric
    arg1.subnode.stackLevel
    arg1.subnode.value
    arg1.subnode.value.getClass().getName()
    arg1.subnode.parent
    arg1.subnode.subnode
    arg1.subnode.next
    arg1.subnode.previous
    arg1.next
    arg1.next.subs
    arg1.next.subs.getClass().getName()
    arg1.next.subs[..]
    arg1.next.subs[..].getClass().getName()
    arg1.next.key
    arg1.next.key.toString
    arg1.next.susbscript
    arg1.next.susbscript.getClass().getName()
    arg1.next.isNumeric
    arg1.next.stackLevel
    arg1.next.value
    arg1.next.value.getClass().getName()
    arg1.next.parent
    arg1.next.subnode
    arg1.next.next
    arg1.next.previous
    arg1.previous
    arg1.previous.subs
    arg1.previous.subs.getClass().getName()
    arg1.previous.subs[..]
    arg1.previous.subs[..].getClass().getName()
    arg1.previous.key
    arg1.previous.key.toString
    arg1.previous.susbscript
    arg1.previous.susbscript.getClass().getName()
    arg1.previous.isNumeric
    arg1.previous.stackLevel
    arg1.previous.value
    arg1.previous.value.getClass().getName()
    arg1.previous.parent
    arg1.previous.subnode
    arg1.previous.next
    arg1.previous.previous
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..].getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.key.toString)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.susbscript.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.isNumeric)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.stackLevel)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.value.getClass().getName())
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.parent)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subnode)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.next)
    orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.previous)
    orig(arg1)
    orig(arg1.currentStackLevel)
    orig(arg1.stack)
    orig(arg1.stack.mapLevel)
    orig(arg1.stack.mapLevel.getClass().getName())
    orig(arg1.keyValue)
    orig(arg1.keyValue.getClass().getName())
    orig(arg1.killSubnodesOperation)
    orig(arg1.addSubnodesOperation)
    orig(arg1.mergeSubnodesOperation)
    orig(arg1.mergeSubnodesOperation.dest)
    orig(arg1.mergeSubnodesOperation.dest.getClass().getName())
    orig(arg1.mergeSubnodesOperation.dest[..])
    orig(arg1.mergeSubnodesOperation.dest[..].getClass().getName())
    orig(arg1.mergeSubnodesOperation.orig)
    orig(arg1.mergeSubnodesOperation.orig.getClass().getName())
    orig(arg1.mergeSubnodesOperation.orig[..])
    orig(arg1.mergeSubnodesOperation.orig[..].getClass().getName())
    orig(arg1.mergeSubnodesOperation.tree)
    orig(arg1.subs)
    orig(arg1.subs.getClass().getName())
    orig(arg1.subs[..])
    orig(arg1.subs[..].getClass().getName())
    orig(arg1.key)
    orig(arg1.key.toString)
    orig(arg1.susbscript)
    orig(arg1.susbscript.getClass().getName())
    orig(arg1.isNumeric)
    orig(arg1.stackLevel)
    orig(arg1.value)
    orig(arg1.value.getClass().getName())
    orig(arg1.parent)
    orig(arg1.parent.subs)
    orig(arg1.parent.subs.getClass().getName())
    orig(arg1.parent.subs[..])
    orig(arg1.parent.subs[..].getClass().getName())
    orig(arg1.parent.key)
    orig(arg1.parent.key.toString)
    orig(arg1.parent.susbscript)
    orig(arg1.parent.susbscript.getClass().getName())
    orig(arg1.parent.isNumeric)
    orig(arg1.parent.stackLevel)
    orig(arg1.parent.value)
    orig(arg1.parent.value.getClass().getName())
    orig(arg1.parent.parent)
    orig(arg1.parent.subnode)
    orig(arg1.parent.next)
    orig(arg1.parent.previous)
    orig(arg1.subnode)
    orig(arg1.subnode.subs)
    orig(arg1.subnode.subs.getClass().getName())
    orig(arg1.subnode.subs[..])
    orig(arg1.subnode.subs[..].getClass().getName())
    orig(arg1.subnode.key)
    orig(arg1.subnode.key.toString)
    orig(arg1.subnode.susbscript)
    orig(arg1.subnode.susbscript.getClass().getName())
    orig(arg1.subnode.isNumeric)
    orig(arg1.subnode.stackLevel)
    orig(arg1.subnode.value)
    orig(arg1.subnode.value.getClass().getName())
    orig(arg1.subnode.parent)
    orig(arg1.subnode.subnode)
    orig(arg1.subnode.next)
    orig(arg1.subnode.previous)
    orig(arg1.next)
    orig(arg1.next.subs)
    orig(arg1.next.subs.getClass().getName())
    orig(arg1.next.subs[..])
    orig(arg1.next.subs[..].getClass().getName())
    orig(arg1.next.key)
    orig(arg1.next.key.toString)
    orig(arg1.next.susbscript)
    orig(arg1.next.susbscript.getClass().getName())
    orig(arg1.next.isNumeric)
    orig(arg1.next.stackLevel)
    orig(arg1.next.value)
    orig(arg1.next.value.getClass().getName())
    orig(arg1.next.parent)
    orig(arg1.next.subnode)
    orig(arg1.next.next)
    orig(arg1.next.previous)
    orig(arg1.previous)
    orig(arg1.previous.subs)
    orig(arg1.previous.subs.getClass().getName())
    orig(arg1.previous.subs[..])
    orig(arg1.previous.subs[..].getClass().getName())
    orig(arg1.previous.key)
    orig(arg1.previous.key.toString)
    orig(arg1.previous.susbscript)
    orig(arg1.previous.susbscript.getClass().getName())
    orig(arg1.previous.isNumeric)
    orig(arg1.previous.stackLevel)
    orig(arg1.previous.value)
    orig(arg1.previous.value.getClass().getName())
    orig(arg1.previous.parent)
    orig(arg1.previous.subnode)
    orig(arg1.previous.next)
    orig(arg1.previous.previous)
    size(this.dest[..])
    size(this.dest[..])-1
    size(this.orig[..])
    size(this.orig[..])-1
    size(this.tree.mergeSubnodesOperation.dest[..])
    size(this.tree.mergeSubnodesOperation.dest[..])-1
    size(this.tree.mergeSubnodesOperation.orig[..])
    size(this.tree.mergeSubnodesOperation.orig[..])-1
    size(this.tree.subs[..])
    size(this.tree.subs[..])-1
    size(this.tree.parent.subs[..])
    size(this.tree.parent.subs[..])-1
    size(this.tree.subnode.subs[..])
    size(this.tree.subnode.subs[..])-1
    size(this.tree.next.subs[..])
    size(this.tree.next.subs[..])-1
    size(this.tree.previous.subs[..])
    size(this.tree.previous.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..])-1
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])
    size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..])-1
    size(arg1.mergeSubnodesOperation.dest[..])
    size(arg1.mergeSubnodesOperation.dest[..])-1
    size(arg1.mergeSubnodesOperation.orig[..])
    size(arg1.mergeSubnodesOperation.orig[..])-1
    size(arg1.subs[..])
    size(arg1.subs[..])-1
    size(arg1.parent.subs[..])
    size(arg1.parent.subs[..])-1
    size(arg1.subnode.subs[..])
    size(arg1.subnode.subs[..])-1
    size(arg1.next.subs[..])
    size(arg1.next.subs[..])-1
    size(arg1.previous.subs[..])
    size(arg1.previous.subs[..])-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.parent.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.next.subs[..]))-1
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))
    orig(size(br.com.innovatium.mumps2java.datastructure.Tree.this.previous.subs[..]))-1
    orig(size(arg1.mergeSubnodesOperation.dest[..]))
    orig(size(arg1.mergeSubnodesOperation.dest[..]))-1
    orig(size(arg1.mergeSubnodesOperation.orig[..]))
    orig(size(arg1.mergeSubnodesOperation.orig[..]))-1
    orig(size(arg1.subs[..]))
    orig(size(arg1.subs[..]))-1
    orig(size(arg1.parent.subs[..]))
    orig(size(arg1.parent.subs[..]))-1
    orig(size(arg1.subnode.subs[..]))
    orig(size(arg1.subnode.subs[..]))-1
    orig(size(arg1.next.subs[..]))
    orig(size(arg1.next.subs[..]))-1
    orig(size(arg1.previous.subs[..]))
    orig(size(arg1.previous.subs[..]))-1
End of diagnostics for newEnterExitRel(br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes.MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree):::ENTER, br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes.MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree):::EXIT)
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node:::OBJECT
this == this.subnode.parent
this == this.subnode.next.parent
this == this.previous.next
this.subs == this.subnode.parent.subs
this.subs == this.next.previous.subs
this.subs == this.previous.next.subs
this.subs.getClass().getName() == this.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.parent.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.parent.next.subs.getClass().getName()
this.subs.getClass().getName() == this.parent.previous.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.previous.subs.getClass().getName()
this.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subs.getClass().getName() == this.next.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.next.subs.getClass().getName()
this.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.previous.subs.getClass().getName()
this.key == this.subnode.parent.key
this.key == this.next.previous.key
this.key == this.previous.next.key
this.susbscript == this.subnode.parent.susbscript
this.susbscript == this.next.previous.susbscript
this.susbscript == this.previous.next.susbscript
this.susbscript.getClass().getName() == this.parent.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.susbscript.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.susbscript.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.isNumeric == this.parent.subnode.isNumeric
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.next.previous.isNumeric
this.isNumeric == this.previous.isNumeric
this.isNumeric == this.previous.previous.isNumeric
this.stackLevel == this.subnode.parent.stackLevel
this.stackLevel == this.next.previous.stackLevel
this.stackLevel == this.previous.next.stackLevel
this.value == this.next.previous.value
this.value == this.previous.next.value
this.value.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.value.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.value.getClass().getName() == this.next.susbscript.getClass().getName()
this.value.getClass().getName() == this.next.value.getClass().getName()
this.value.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.value.getClass().getName() == this.next.next.value.getClass().getName()
this.value.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.next.previous.value.getClass().getName()
this.value.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.next.value.getClass().getName()
this.value.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.parent == this.parent.subnode.parent
this.parent == this.parent.next.previous
this.parent == this.parent.previous.next
this.parent == this.subnode.parent.parent
this.parent == this.next.parent
this.parent == this.next.next.parent
this.parent == this.next.previous.parent
this.parent == this.previous.parent
this.parent == this.previous.previous.parent
this.parent.subs == this.next.parent.subs
this.parent.subs == this.previous.parent.subs
this.parent.subs.getClass().getName() == this.parent.parent.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.parent.next.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.parent.previous.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.subnode.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.next.subnode.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.next.next.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.previous.subnode.subs.getClass().getName()
this.parent.subs.getClass().getName() == this.previous.previous.subs.getClass().getName()
this.parent.key == this.next.parent.key
this.parent.key == this.previous.parent.key
this.parent.susbscript == this.next.parent.susbscript
this.parent.susbscript == this.previous.parent.susbscript
this.parent.susbscript.getClass().getName() == this.parent.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.parent.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.parent.isNumeric == this.next.parent.isNumeric
this.parent.isNumeric == this.previous.parent.isNumeric
this.parent.parent == this.parent.next.parent
this.parent.parent == this.parent.previous.parent
this.parent.parent == this.next.parent.parent
this.parent.parent == this.previous.parent.parent
this.parent.parent.subs.getClass().getName() == this.parent.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.parent.previous.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.subnode.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.parent.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.parent.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.parent.subnode == this.subnode.next.parent
this.parent.subnode == this.next.parent.subnode
this.parent.subnode == this.previous.parent.subnode
this.parent.subnode.susbscript.getClass().getName() == this.parent.next.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.parent.previous.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.parent.subnode.isNumeric == this.subnode.parent.isNumeric
this.parent.subnode.isNumeric == this.next.previous.isNumeric
this.parent.subnode.isNumeric == this.previous.isNumeric
this.parent.subnode.isNumeric == this.previous.previous.isNumeric
this.parent.subnode.value.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.next.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.previous.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.parent.subnode.parent == this.parent.next.previous
this.parent.subnode.parent == this.parent.previous.next
this.parent.subnode.parent == this.subnode.parent.parent
this.parent.subnode.parent == this.next.parent
this.parent.subnode.parent == this.next.next.parent
this.parent.subnode.parent == this.next.previous.parent
this.parent.subnode.parent == this.previous.parent
this.parent.subnode.parent == this.previous.previous.parent
this.parent.subnode.subnode == this.subnode.next.previous
this.parent.next.subs.getClass().getName() == this.parent.previous.subs.getClass().getName()
this.parent.next.subs.getClass().getName() == this.subnode.subs.getClass().getName()
this.parent.next.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.parent.next.susbscript.getClass().getName() == this.parent.previous.susbscript.getClass().getName()
this.parent.next.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.parent.next.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.parent.next.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.parent.next.parent == this.parent.previous.parent
this.parent.next.previous == this.parent.previous.next
this.parent.next.previous == this.subnode.parent.parent
this.parent.previous.subs.getClass().getName() == this.subnode.subs.getClass().getName()
this.parent.previous.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.parent.previous.susbscript.getClass().getName() == this.parent.previous.value.getClass().getName()
this.parent.previous.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.parent.previous.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.parent.previous.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.parent.previous.next == this.subnode.parent.parent
this.subnode == this.subnode.parent.subnode
this.subnode == this.subnode.subnode.parent
this.subnode == this.subnode.next.previous
this.subnode == this.next.previous.subnode
this.subnode == this.previous.next.subnode
this.subnode.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.subnode.previous.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.subnode.isNumeric == this.subnode.next.isNumeric
this.subnode.value == this.previous.next.value
this.subnode.value.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.value.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.subnode.parent == this.subnode.next.parent
this.subnode.parent == this.previous.next
this.subnode.parent.subs == this.previous.next.subs
this.subnode.parent.key == this.previous.next.key
this.subnode.parent.susbscript == this.previous.next.susbscript
this.subnode.parent.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.subnode.parent.isNumeric == this.previous.isNumeric
this.subnode.parent.stackLevel == this.previous.next.stackLevel
this.subnode.parent.parent == this.previous.parent
this.subnode.parent.subnode == this.subnode.subnode.parent
this.subnode.parent.subnode == this.subnode.next.previous
this.subnode.parent.subnode == this.previous.next.subnode
this.subnode.parent.next == this.next
this.subnode.parent.next == this.previous.next.next
this.subnode.parent.previous == this.previous
this.subnode.parent.previous == this.previous.next.previous
this.subnode.subnode.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == this.subnode.previous.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.subnode.value.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.subnode.subnode.parent == this.subnode.next.previous
this.subnode.subnode.parent == this.previous.next.subnode
this.subnode.next.subs.getClass().getName() == this.subnode.previous.subs.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.subnode.next.value.getClass().getName() == this.subnode.previous.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.subnode.previous.susbscript.getClass().getName() == this.subnode.previous.value.getClass().getName()
this.next == this.next.subnode.parent
this.next == this.next.next.previous
this.next == this.next.previous.next
this.next == this.previous.next.next
this.next.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.next.subs.getClass().getName() == this.next.subnode.subs.getClass().getName()
this.next.subs.getClass().getName() == this.next.next.subs.getClass().getName()
this.next.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.next.value.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.next.value.getClass().getName() == this.next.previous.value.getClass().getName()
this.next.parent == this.next.next.parent
this.next.parent == this.next.previous.parent
this.next.parent.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.next.subnode.subs.getClass().getName() == this.next.next.subs.getClass().getName()
this.next.subnode.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.next.subnode.parent == this.next.next.previous
this.next.subnode.parent == this.next.previous.next
this.next.next.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.next.next.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.next.next.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.next.next.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.next.next.value.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.next.next.value.getClass().getName() == this.next.previous.value.getClass().getName()
this.next.next.parent == this.next.previous.parent
this.next.next.previous == this.next.previous.next
this.next.previous.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.next.previous.previous == this.previous
this.previous == this.previous.subnode.parent
this.previous == this.previous.next.previous
this.previous == this.previous.previous.next
this.previous.subs.getClass().getName() == this.previous.parent.subs.getClass().getName()
this.previous.subs.getClass().getName() == this.previous.subnode.subs.getClass().getName()
this.previous.subs.getClass().getName() == this.previous.next.subs.getClass().getName()
this.previous.subs.getClass().getName() == this.previous.previous.subs.getClass().getName()
this.previous.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.previous.susbscript.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == this.previous.next.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.previous.susbscript.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.previous.isNumeric == this.previous.next.isNumeric
this.previous.isNumeric == this.previous.previous.isNumeric
this.previous.value.getClass().getName() == this.previous.next.value.getClass().getName()
this.previous.parent == this.previous.next.parent
this.previous.parent == this.previous.previous.parent
this.previous.parent.susbscript.getClass().getName() == this.previous.subnode.susbscript.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.previous.subnode.subs.getClass().getName() == this.previous.previous.subs.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.previous.subnode.parent == this.previous.next.previous
this.previous.subnode.parent == this.previous.previous.next
this.previous.next.value.getClass().getName() == this.previous.previous.susbscript.getClass().getName()
this.previous.next.previous == this.previous.previous.next
this.previous.previous.susbscript.getClass().getName() == this.previous.previous.value.getClass().getName()
this.subs != null
this.subs.getClass().getName() == java.lang.Object[].class
this.subs[] elements != null
this.key != null
this.value.getClass().getName() == java.lang.String.class
this.parent.subs != null
this.parent.subs.getClass().getName() == java.lang.Object[].class
this.parent.subs[] elements != null
this.parent.key != null
this.parent.susbscript != null
this.parent.value == null
this.parent.parent.subs != null
this.parent.parent.subs.getClass().getName() == java.lang.Object[].class
this.parent.parent.subs[] elements != null
this.parent.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.parent.parent.key != null
this.parent.parent.susbscript != null
this.parent.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.parent.isNumeric == false
this.parent.parent.value == null
this.parent.parent.subnode != null
this.parent.subnode != null
this.parent.subnode.subs != null
this.parent.subnode.subs[] elements != null
this.parent.subnode.key != null
this.parent.subnode.susbscript != null
this.parent.subnode.value.getClass().getName() == java.lang.String.class
this.parent.subnode.parent != null
this.parent.next.subs has only one value
this.parent.next.subs.getClass().getName() == java.lang.Object[].class
this.parent.next.subs[] contains no nulls and has only one value, of length 1
this.parent.next.subs[] elements has only one value
this.parent.next.subs[].getClass().getName() == [java.lang.String]
this.parent.next.subs[].getClass().getName() elements == java.lang.String.class
this.parent.next.key has only one value
this.parent.next.key.toString == "zzz"
this.parent.next.susbscript has only one value
this.parent.next.susbscript.getClass().getName() == java.lang.String.class
this.parent.next.isNumeric == false
this.parent.next.stackLevel == null
this.parent.next.value has only one value
this.parent.next.parent has only one value
this.parent.next.subnode == null
this.parent.next.next == null
this.parent.next.previous has only one value
this.parent.previous.subs.getClass().getName() == java.lang.Object[].class
this.parent.previous.subs[].getClass().getName() == [java.lang.String]
this.parent.previous.subs[].getClass().getName() elements == java.lang.String.class
this.parent.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.parent.previous.susbscript.getClass().getName() == java.lang.String.class
this.parent.previous.isNumeric == false
this.parent.previous.stackLevel == null
this.parent.previous.parent has only one value
this.parent.previous.subnode == null
this.parent.previous.next has only one value
this.parent.previous.previous == null
this.subnode.subs != null
this.subnode.subs.getClass().getName() == java.lang.Object[].class
this.subnode.subs[] elements != null
this.subnode.key != null
this.subnode.susbscript != null
this.subnode.value.getClass().getName() == java.lang.String.class
this.subnode.parent != null
this.subnode.parent.subs != null
this.subnode.parent.subs[] elements != null
this.subnode.parent.key != null
this.subnode.parent.susbscript != null
this.subnode.parent.value == null
this.subnode.parent.subnode != null
this.subnode.subnode.subs != null
this.subnode.subnode.subs.getClass().getName() == java.lang.Object[].class
this.subnode.subnode.subs[] elements != null
this.subnode.subnode.key != null
this.subnode.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.subnode.susbscript != null
this.subnode.subnode.stackLevel == null
this.subnode.subnode.value.getClass().getName() == java.lang.String.class
this.subnode.subnode.parent != null
this.subnode.subnode.previous == null
this.subnode.next.subs != null
this.subnode.next.subs.getClass().getName() == java.lang.Object[].class
this.subnode.next.subs[] elements != null
this.subnode.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.next.key != null
this.subnode.next.susbscript != null
this.subnode.next.susbscript.getClass().getName() == java.lang.String.class
this.subnode.next.isNumeric == false
this.subnode.next.value.getClass().getName() == java.lang.String.class
this.subnode.next.parent != null
this.subnode.next.previous != null
this.subnode.previous.subs.getClass().getName() == java.lang.Object[].class
this.subnode.previous.subs[].getClass().getName() == [java.lang.String]
this.subnode.previous.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.previous.key.toString one of { "locVar", "vetorLocal" }
this.subnode.previous.susbscript.getClass().getName() == java.lang.String.class
this.subnode.previous.isNumeric == false
this.subnode.previous.stackLevel has only one value
this.subnode.previous.value.getClass().getName() == java.lang.String.class
this.subnode.previous.parent has only one value
this.subnode.previous.previous == null
this.next.subs != null
this.next.subs.getClass().getName() == java.lang.Object[].class
this.next.subs[] elements != null
this.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.next.key != null
this.next.susbscript != null
this.next.susbscript.getClass().getName() == java.lang.String.class
this.next.isNumeric == false
this.next.value.getClass().getName() == java.lang.String.class
this.next.parent != null
this.next.parent.subs != null
this.next.parent.subs[] elements != null
this.next.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.next.parent.key != null
this.next.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.next.parent.susbscript != null
this.next.parent.stackLevel == null
this.next.parent.value == null
this.next.parent.subnode != null
this.next.parent.next == null
this.next.parent.previous == null
this.next.subnode.subs has only one value
this.next.subnode.subs != null
this.next.subnode.subs.getClass().getName() == java.lang.Object[].class
this.next.subnode.subs[] contains no nulls and has only one value, of length 2
this.next.subnode.subs[] elements != null
this.next.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.next.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.next.subnode.key has only one value
this.next.subnode.key != null
this.next.subnode.key.toString == "vetorLocal~xpto"
this.next.subnode.susbscript has only one value
this.next.subnode.susbscript != null
this.next.subnode.susbscript.getClass().getName() == java.lang.String.class
this.next.subnode.isNumeric == false
this.next.subnode.stackLevel == null
this.next.subnode.value == null
this.next.subnode.parent has only one value
this.next.subnode.parent != null
this.next.subnode.subnode has only one value
this.next.subnode.subnode != null
this.next.subnode.next == null
this.next.subnode.previous == null
this.next.next.subs != null
this.next.next.subs.getClass().getName() == java.lang.Object[].class
this.next.next.subs[] elements != null
this.next.next.subs[].getClass().getName() == [java.lang.String]
this.next.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.next.key != null
this.next.next.key.toString one of { "vetorLocal", "zzz" }
this.next.next.susbscript != null
this.next.next.susbscript.getClass().getName() == java.lang.String.class
this.next.next.isNumeric == false
this.next.next.value.getClass().getName() == java.lang.String.class
this.next.next.parent has only one value
this.next.next.parent != null
this.next.next.previous != null
this.next.previous.subs != null
this.next.previous.subs.getClass().getName() == java.lang.Object[].class
this.next.previous.subs[] elements != null
this.next.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.next.previous.key != null
this.next.previous.susbscript != null
this.next.previous.susbscript.getClass().getName() == java.lang.String.class
this.next.previous.isNumeric == false
this.next.previous.value.getClass().getName() == java.lang.String.class
this.next.previous.parent != null
this.next.previous.next != null
this.previous.subs != null
this.previous.subs.getClass().getName() == java.lang.Object[].class
this.previous.subs[] elements != null
this.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.previous.key != null
this.previous.susbscript != null
this.previous.susbscript.getClass().getName() == java.lang.String.class
this.previous.isNumeric == false
this.previous.value.getClass().getName() == java.lang.String.class
this.previous.parent != null
this.previous.parent.subs != null
this.previous.parent.subs[] elements != null
this.previous.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.previous.parent.key != null
this.previous.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.previous.parent.susbscript != null
this.previous.parent.stackLevel == null
this.previous.parent.value == null
this.previous.parent.subnode != null
this.previous.parent.next == null
this.previous.parent.previous == null
this.previous.subnode.subs has only one value
this.previous.subnode.subs != null
this.previous.subnode.subs.getClass().getName() == java.lang.Object[].class
this.previous.subnode.subs[] contains no nulls and has only one value, of length 2
this.previous.subnode.subs[] elements != null
this.previous.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.previous.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.previous.subnode.key has only one value
this.previous.subnode.key != null
this.previous.subnode.key.toString == "vetorLocal~xpto"
this.previous.subnode.susbscript has only one value
this.previous.subnode.susbscript != null
this.previous.subnode.susbscript.getClass().getName() == java.lang.String.class
this.previous.subnode.isNumeric == false
this.previous.subnode.stackLevel == null
this.previous.subnode.value == null
this.previous.subnode.parent has only one value
this.previous.subnode.parent != null
this.previous.subnode.subnode has only one value
this.previous.subnode.subnode != null
this.previous.subnode.next == null
this.previous.subnode.previous == null
this.previous.next != null
this.previous.next.subs != null
this.previous.next.subs[] elements != null
this.previous.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.previous.next.key != null
this.previous.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
this.previous.next.susbscript != null
this.previous.next.value.getClass().getName() == java.lang.String.class
this.previous.next.previous != null
this.previous.previous.subs != null
this.previous.previous.subs.getClass().getName() == java.lang.Object[].class
this.previous.previous.subs[] elements != null
this.previous.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.previous.key != null
this.previous.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.previous.previous.susbscript != null
this.previous.previous.susbscript.getClass().getName() == java.lang.String.class
this.previous.previous.isNumeric == false
this.previous.previous.stackLevel == null
this.previous.previous.value != null
this.previous.previous.parent has only one value
this.previous.previous.parent != null
this.previous.previous.subnode == null
this.previous.previous.next has only one value
this.previous.previous.next != null
size(this.parent.subs[]) one of { 1, 2, 3 }
size(this.parent.parent.subs[]) one of { 1, 2 }
size(this.parent.next.subs[]) == 1
size(this.parent.previous.subs[]) == 1
size(this.subnode.parent.subs[]) one of { 1, 2, 3 }
size(this.subnode.subnode.subs[]) one of { 2, 3, 4 }
size(this.subnode.next.subs[]) one of { 1, 4 }
size(this.subnode.previous.subs[]) == 1
size(this.next.subs[]) one of { 1, 4 }
size(this.next.parent.subs[]) one of { 1, 3 }
size(this.next.subnode.subs[]) == 2
size(this.next.next.subs[]) == 1
size(this.next.previous.subs[]) one of { 1, 4 }
size(this.previous.subs[]) one of { 1, 4 }
size(this.previous.parent.subs[]) one of { 1, 3 }
size(this.previous.subnode.subs[]) == 2
size(this.previous.next.subs[]) one of { 1, 4 }
size(this.previous.previous.subs[]) == 1
this.subs.getClass().getName() != this.susbscript.getClass().getName()
this.subs.getClass().getName() != this.value.getClass().getName()
this.subs.getClass().getName() != this.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != this.parent.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != this.parent.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.parent.subnode.value.getClass().getName()
this.subs.getClass().getName() != this.parent.previous.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.value.getClass().getName()
this.subs.getClass().getName() != this.subnode.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.subnode.value.getClass().getName()
this.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.subs.getClass().getName() != this.next.susbscript.getClass().getName()
this.subs.getClass().getName() != this.next.value.getClass().getName()
this.subs.getClass().getName() != this.next.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != this.next.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.next.next.susbscript.getClass().getName()
this.subs.getClass().getName() != this.next.next.value.getClass().getName()
this.subs.getClass().getName() != this.next.previous.susbscript.getClass().getName()
this.subs.getClass().getName() != this.next.previous.value.getClass().getName()
this.subs.getClass().getName() != this.previous.susbscript.getClass().getName()
this.subs.getClass().getName() != this.previous.value.getClass().getName()
this.subs.getClass().getName() != this.previous.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != this.previous.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.previous.next.value.getClass().getName()
this.subs.getClass().getName() != this.previous.previous.susbscript.getClass().getName()
this.subnode.parent.susbscript in this.subs[]
this.next.previous.susbscript in this.subs[]
this.previous.next.susbscript in this.subs[]
this.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.value.getClass().getName() in this.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subs[].getClass().getName()
this.subnode.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.parent.subs[]
this.susbscript in this.next.previous.subs[]
this.susbscript in this.previous.next.subs[]
this.susbscript.getClass().getName() != this.parent.subs.getClass().getName()
this.susbscript.getClass().getName() != this.parent.parent.subs.getClass().getName()
this.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.parent.previous.subs.getClass().getName()
this.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.next.subs.getClass().getName()
this.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.next.next.subs.getClass().getName()
this.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.previous.subs.getClass().getName()
this.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.value.getClass().getName() != this.parent.subs.getClass().getName()
this.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() != this.parent.parent.subs.getClass().getName()
this.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.value.getClass().getName() != this.next.subs.getClass().getName()
this.value.getClass().getName() in this.next.subs[].getClass().getName()
this.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.value.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.value.getClass().getName() != this.next.next.subs.getClass().getName()
this.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.value.getClass().getName() != this.next.previous.subs.getClass().getName()
this.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.value.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.value.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.subs.getClass().getName() != this.parent.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.parent.parent.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.parent.subnode.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.parent.subnode.value.getClass().getName()
this.parent.subs.getClass().getName() != this.parent.previous.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.subnode.value.getClass().getName()
this.parent.subs.getClass().getName() != this.subnode.parent.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.subnode.subnode.value.getClass().getName()
this.parent.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.next.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.next.value.getClass().getName()
this.parent.subs.getClass().getName() != this.next.parent.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.next.subnode.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.next.next.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.next.next.value.getClass().getName()
this.parent.subs.getClass().getName() != this.next.previous.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.next.previous.value.getClass().getName()
this.parent.subs.getClass().getName() != this.previous.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.previous.value.getClass().getName()
this.parent.subs.getClass().getName() != this.previous.parent.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.previous.subnode.susbscript.getClass().getName()
this.parent.subs.getClass().getName() != this.previous.next.value.getClass().getName()
this.parent.subs.getClass().getName() != this.previous.previous.susbscript.getClass().getName()
this.parent.susbscript in this.parent.subs[]
this.next.parent.susbscript in this.parent.subs[]
this.previous.parent.susbscript in this.parent.subs[]
this.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.susbscript in this.subnode.next.subs[]
this.parent.susbscript in this.next.parent.subs[]
this.parent.susbscript in this.previous.parent.subs[]
this.parent.susbscript.getClass().getName() != this.parent.parent.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.parent.previous.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.subnode.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.next.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.next.next.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.previous.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() != this.parent.parent.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.parent.subnode.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.parent.subnode.value.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.parent.previous.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.subnode.value.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.subnode.parent.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.parent.subs[]
this.previous.subnode.susbscript in this.parent.parent.subs[]
this.previous.previous.key in this.parent.parent.subs[]
this.previous.previous.susbscript in this.parent.parent.subs[]
this.previous.previous.value in this.parent.parent.subs[]
this.parent.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.previous.subnode.subs[]
this.parent.parent.key in this.previous.previous.subs[]
this.parent.parent.susbscript in this.subnode.next.subs[]
this.parent.parent.susbscript in this.previous.subnode.subs[]
this.parent.parent.susbscript in this.previous.previous.subs[]
this.parent.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() != this.parent.previous.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() != this.subnode.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.subnode.susbscript in this.parent.subnode.subs[]
this.parent.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.subnode.next.subs[]
this.parent.subnode.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.parent.previous.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.subnode.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.subnode.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.next.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.next.next.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.previous.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.subnode.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.next.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.next.next.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.next.previous.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.previous.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.next.subs[] elements == this.parent.next.susbscript
this.parent.next.susbscript in this.parent.next.subs[]
this.subnode.next.susbscript in this.parent.next.subs[]
this.subnode.next.value in this.parent.next.subs[]
this.next.key in this.parent.next.subs[]
this.next.susbscript in this.parent.next.subs[]
this.next.value in this.parent.next.subs[]
this.next.parent.key in this.parent.next.subs[]
this.next.parent.susbscript in this.parent.next.subs[]
this.next.subnode.susbscript in this.parent.next.subs[]
this.next.next.key in this.parent.next.subs[]
this.next.next.susbscript in this.parent.next.subs[]
this.next.previous.key in this.parent.next.subs[]
this.next.previous.susbscript in this.parent.next.subs[]
this.next.previous.value in this.parent.next.subs[]
this.previous.key in this.parent.next.subs[]
this.previous.susbscript in this.parent.next.subs[]
this.previous.value in this.parent.next.subs[]
this.previous.parent.key in this.parent.next.subs[]
this.previous.parent.susbscript in this.parent.next.subs[]
this.previous.subnode.susbscript in this.parent.next.subs[]
this.previous.next.key in this.parent.next.subs[]
this.previous.next.susbscript in this.parent.next.subs[]
this.previous.next.value in this.parent.next.subs[]
this.previous.previous.key in this.parent.next.subs[]
this.previous.previous.susbscript in this.parent.next.subs[]
this.previous.previous.value in this.parent.next.subs[]
this.parent.next.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.previous.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.next.susbscript in this.subnode.next.subs[]
this.parent.next.susbscript in this.next.subs[]
this.parent.next.susbscript in this.next.parent.subs[]
this.parent.next.susbscript in this.next.subnode.subs[]
this.parent.next.susbscript in this.next.next.subs[]
this.parent.next.susbscript in this.next.previous.subs[]
this.parent.next.susbscript in this.previous.subs[]
this.parent.next.susbscript in this.previous.parent.subs[]
this.parent.next.susbscript in this.previous.subnode.subs[]
this.parent.next.susbscript in this.previous.next.subs[]
this.parent.next.susbscript in this.previous.previous.subs[]
this.parent.next.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() != this.parent.previous.susbscript.getClass().getName()
this.parent.previous.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.parent.previous.subs.getClass().getName() != this.subnode.parent.susbscript.getClass().getName()
this.parent.previous.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.previous.subs[] elements == this.parent.previous.susbscript
this.parent.previous.susbscript in this.parent.previous.subs[]
this.subnode.next.susbscript in this.parent.previous.subs[]
this.subnode.next.value in this.parent.previous.subs[]
this.next.key in this.parent.previous.subs[]
this.next.susbscript in this.parent.previous.subs[]
this.next.value in this.parent.previous.subs[]
this.next.parent.key in this.parent.previous.subs[]
this.next.parent.susbscript in this.parent.previous.subs[]
this.next.subnode.susbscript in this.parent.previous.subs[]
this.next.next.key in this.parent.previous.subs[]
this.next.next.susbscript in this.parent.previous.subs[]
this.next.previous.key in this.parent.previous.subs[]
this.next.previous.susbscript in this.parent.previous.subs[]
this.next.previous.value in this.parent.previous.subs[]
this.previous.key in this.parent.previous.subs[]
this.previous.susbscript in this.parent.previous.subs[]
this.previous.value in this.parent.previous.subs[]
this.previous.parent.key in this.parent.previous.subs[]
this.previous.parent.susbscript in this.parent.previous.subs[]
this.previous.subnode.susbscript in this.parent.previous.subs[]
this.previous.next.key in this.parent.previous.subs[]
this.previous.next.susbscript in this.parent.previous.subs[]
this.previous.next.value in this.parent.previous.subs[]
this.previous.previous.key in this.parent.previous.subs[]
this.previous.previous.susbscript in this.parent.previous.subs[]
this.previous.previous.value in this.parent.previous.subs[]
this.parent.previous.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.previous.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.previous.susbscript in this.subnode.next.subs[]
this.parent.previous.susbscript in this.next.subs[]
this.parent.previous.susbscript in this.next.parent.subs[]
this.parent.previous.susbscript in this.next.subnode.subs[]
this.parent.previous.susbscript in this.next.next.subs[]
this.parent.previous.susbscript in this.next.previous.subs[]
this.parent.previous.susbscript in this.previous.subs[]
this.parent.previous.susbscript in this.previous.parent.subs[]
this.parent.previous.susbscript in this.previous.subnode.subs[]
this.parent.previous.susbscript in this.previous.next.subs[]
this.parent.previous.susbscript in this.previous.previous.subs[]
this.parent.previous.susbscript.getClass().getName() != this.subnode.subs.getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.parent.previous.value in this.subnode.next.subs[]
this.parent.previous.value in this.next.subs[]
this.parent.previous.value in this.next.parent.subs[]
this.parent.previous.value in this.next.subnode.subs[]
this.parent.previous.value in this.next.next.subs[]
this.parent.previous.value in this.next.previous.subs[]
this.parent.previous.value in this.previous.subs[]
this.parent.previous.value in this.previous.parent.subs[]
this.parent.previous.value in this.previous.subnode.subs[]
this.parent.previous.value in this.previous.next.subs[]
this.parent.previous.value in this.previous.previous.subs[]
this.subnode.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.value.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.parent.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.subnode.value.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() != this.previous.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.previous.value.getClass().getName()
this.subnode.subs.getClass().getName() != this.previous.parent.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.susbscript in this.subnode.subs[]
this.next.next.key in this.subnode.subs[]
this.next.next.susbscript in this.subnode.subs[]
this.previous.subnode.susbscript in this.subnode.subs[]
this.previous.next.susbscript in this.subnode.subs[]
this.previous.previous.key in this.subnode.subs[]
this.previous.previous.susbscript in this.subnode.subs[]
this.previous.previous.value in this.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.subnode.subnode.subs[]
this.subnode.susbscript in this.next.next.subs[]
this.subnode.susbscript in this.previous.subnode.subs[]
this.subnode.susbscript in this.previous.previous.subs[]
this.subnode.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != this.subnode.subnode.value.getClass().getName()
this.subnode.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != this.previous.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.value in this.next.next.subs[]
this.subnode.value in this.previous.subnode.subs[]
this.subnode.value in this.previous.previous.subs[]
this.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.parent.subs[]
this.next.next.key in this.subnode.parent.subs[]
this.next.next.susbscript in this.subnode.parent.subs[]
this.previous.subnode.susbscript in this.subnode.parent.subs[]
this.previous.next.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.previous.next.susbscript
this.previous.previous.key in this.subnode.parent.subs[]
this.previous.previous.susbscript in this.subnode.parent.subs[]
this.previous.previous.value in this.subnode.parent.subs[]
this.subnode.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.next.subs[]
this.subnode.parent.key in this.previous.subnode.subs[]
this.subnode.parent.key in this.previous.previous.subs[]
this.subnode.parent.susbscript in this.next.next.subs[]
this.subnode.parent.susbscript in this.previous.subnode.subs[]
this.previous.next.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.previous.next.subs[]
this.subnode.parent.susbscript in this.previous.previous.subs[]
this.subnode.parent.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() != this.previous.subs.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.subnode.subnode.value.getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.previous.susbscript.getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.previous.value.getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.previous.parent.susbscript.getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.subnode.subnode.subs[]
this.next.next.key in this.subnode.subnode.subs[]
this.next.next.susbscript in this.subnode.subnode.subs[]
this.previous.subnode.susbscript in this.subnode.subnode.subs[]
this.previous.next.susbscript in this.subnode.subnode.subs[]
this.previous.previous.key in this.subnode.subnode.subs[]
this.previous.previous.susbscript in this.subnode.subnode.subs[]
this.previous.previous.value in this.subnode.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.next.subs[]
this.subnode.subnode.susbscript in this.previous.subnode.subs[]
this.subnode.subnode.susbscript in this.previous.previous.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() != this.previous.subs.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() != this.previous.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() != this.previous.value.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() != this.previous.parent.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.subnode.next.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.next.susbscript in this.subnode.next.subs[]
this.next.key in this.subnode.next.subs[]
this.next.susbscript in this.subnode.next.subs[]
this.next.value in this.subnode.next.subs[]
this.next.parent.key in this.subnode.next.subs[]
this.next.parent.susbscript in this.subnode.next.subs[]
this.next.subnode.susbscript in this.subnode.next.subs[]
this.next.next.key in this.subnode.next.subs[]
this.next.next.susbscript in this.subnode.next.subs[]
this.next.previous.key in this.subnode.next.subs[]
this.next.previous.susbscript in this.subnode.next.subs[]
this.next.previous.value in this.subnode.next.subs[]
this.previous.key in this.subnode.next.subs[]
this.previous.susbscript in this.subnode.next.subs[]
this.previous.value in this.subnode.next.subs[]
this.previous.parent.key in this.subnode.next.subs[]
this.previous.parent.susbscript in this.subnode.next.subs[]
this.previous.subnode.susbscript in this.subnode.next.subs[]
this.previous.next.key in this.subnode.next.subs[]
this.previous.next.susbscript in this.subnode.next.subs[]
this.previous.next.value in this.subnode.next.subs[]
this.previous.previous.key in this.subnode.next.subs[]
this.previous.previous.susbscript in this.subnode.next.subs[]
this.previous.previous.value in this.subnode.next.subs[]
this.subnode.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.previous.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in this.next.subs[]
this.subnode.next.susbscript in this.next.parent.subs[]
this.subnode.next.susbscript in this.next.subnode.subs[]
this.subnode.next.susbscript in this.next.next.subs[]
this.subnode.next.susbscript in this.next.previous.subs[]
this.subnode.next.susbscript in this.previous.subs[]
this.subnode.next.susbscript in this.previous.parent.subs[]
this.subnode.next.susbscript in this.previous.subnode.subs[]
this.subnode.next.susbscript in this.previous.next.subs[]
this.subnode.next.susbscript in this.previous.previous.subs[]
this.subnode.next.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.next.value in this.next.subs[]
this.subnode.next.value in this.next.parent.subs[]
this.subnode.next.value in this.next.subnode.subs[]
this.subnode.next.value in this.next.next.subs[]
this.subnode.next.value in this.next.previous.subs[]
this.subnode.next.value in this.previous.subs[]
this.subnode.next.value in this.previous.parent.subs[]
this.subnode.next.value in this.previous.subnode.subs[]
this.subnode.next.value in this.previous.next.subs[]
this.subnode.next.value in this.previous.previous.subs[]
this.subnode.next.value.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.subnode.previous.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.subnode.previous.value.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() != this.next.susbscript.getClass().getName()
this.next.subs.getClass().getName() != this.next.value.getClass().getName()
this.next.subs.getClass().getName() != this.next.parent.susbscript.getClass().getName()
this.next.subs.getClass().getName() != this.next.subnode.susbscript.getClass().getName()
this.next.subs.getClass().getName() != this.next.next.susbscript.getClass().getName()
this.next.subs.getClass().getName() != this.next.next.value.getClass().getName()
this.next.subs.getClass().getName() != this.next.previous.susbscript.getClass().getName()
this.next.subs.getClass().getName() != this.next.previous.value.getClass().getName()
this.next.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.susbscript in this.next.subs[]
this.previous.subnode.susbscript in this.next.subs[]
this.previous.previous.key in this.next.subs[]
this.previous.previous.susbscript in this.next.subs[]
this.previous.previous.value in this.next.subs[]
this.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subnode.subs[]
this.next.key in this.previous.previous.subs[]
this.next.susbscript in this.next.subnode.subs[]
this.next.susbscript in this.previous.subnode.subs[]
this.next.susbscript in this.previous.previous.subs[]
this.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() != this.next.next.subs.getClass().getName()
this.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.value in this.previous.subnode.subs[]
this.next.value in this.previous.previous.subs[]
this.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.value.getClass().getName() != this.next.previous.subs.getClass().getName()
this.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.parent.susbscript in this.next.parent.subs[]
this.previous.subnode.susbscript in this.next.parent.subs[]
this.previous.previous.key in this.next.parent.subs[]
this.previous.previous.susbscript in this.next.parent.subs[]
this.previous.previous.value in this.next.parent.subs[]
this.next.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subnode.subs[]
this.next.parent.key in this.previous.previous.subs[]
this.next.parent.susbscript in this.previous.subnode.subs[]
this.next.parent.susbscript in this.previous.previous.subs[]
this.next.parent.susbscript.getClass().getName() != this.next.subnode.subs.getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() != this.next.next.subs.getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() != this.next.subnode.susbscript.getClass().getName()
this.next.subnode.subs.getClass().getName() != this.next.next.susbscript.getClass().getName()
this.next.subnode.subs.getClass().getName() != this.next.next.value.getClass().getName()
this.next.subnode.subs.getClass().getName() != this.next.previous.susbscript.getClass().getName()
this.next.subnode.subs.getClass().getName() != this.next.previous.value.getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.subnode.susbscript in this.next.subnode.subs[]
this.previous.subnode.susbscript in this.next.subnode.subs[]
this.previous.previous.key in this.next.subnode.subs[]
this.previous.previous.susbscript in this.next.subnode.subs[]
this.previous.previous.value in this.next.subnode.subs[]
this.next.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subnode.subs[]
this.next.subnode.susbscript in this.previous.previous.subs[]
this.next.subnode.susbscript.getClass().getName() != this.next.next.subs.getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() != this.next.next.susbscript.getClass().getName()
this.next.next.subs.getClass().getName() != this.next.next.value.getClass().getName()
this.next.next.subs.getClass().getName() != this.next.previous.susbscript.getClass().getName()
this.next.next.subs.getClass().getName() != this.next.previous.value.getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.next.subs[] elements == this.next.next.susbscript
this.next.next.susbscript in this.next.next.subs[]
this.previous.subnode.susbscript in this.next.next.subs[]
this.previous.previous.key in this.next.next.subs[]
this.previous.previous.susbscript in this.next.next.subs[]
this.previous.previous.value in this.next.next.subs[]
this.next.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subnode.subs[]
this.next.next.key in this.previous.previous.subs[]
this.next.next.susbscript in this.previous.subnode.subs[]
this.next.next.susbscript in this.previous.previous.subs[]
this.next.next.susbscript.getClass().getName() != this.next.previous.subs.getClass().getName()
this.next.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.next.value.getClass().getName() != this.next.previous.subs.getClass().getName()
this.next.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.next.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.previous.subs.getClass().getName() != this.next.previous.susbscript.getClass().getName()
this.next.previous.subs.getClass().getName() != this.next.previous.value.getClass().getName()
this.next.previous.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.previous.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.next.previous.subs[]
this.previous.subnode.susbscript in this.next.previous.subs[]
this.previous.previous.key in this.next.previous.subs[]
this.previous.previous.susbscript in this.next.previous.subs[]
this.previous.previous.value in this.next.previous.subs[]
this.next.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subnode.subs[]
this.next.previous.key in this.previous.previous.subs[]
this.next.previous.susbscript in this.previous.subnode.subs[]
this.next.previous.susbscript in this.previous.previous.subs[]
this.next.previous.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.previous.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.next.previous.value in this.previous.subnode.subs[]
this.next.previous.value in this.previous.previous.subs[]
this.next.previous.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.subs.getClass().getName() != this.previous.susbscript.getClass().getName()
this.previous.subs.getClass().getName() != this.previous.value.getClass().getName()
this.previous.subs.getClass().getName() != this.previous.parent.susbscript.getClass().getName()
this.previous.subs.getClass().getName() != this.previous.subnode.susbscript.getClass().getName()
this.previous.subs.getClass().getName() != this.previous.next.value.getClass().getName()
this.previous.subs.getClass().getName() != this.previous.previous.susbscript.getClass().getName()
this.previous.susbscript in this.previous.subs[]
this.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.susbscript in this.previous.subnode.subs[]
this.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.previous.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.previous.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() != this.previous.subnode.subs.getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() != this.previous.subnode.susbscript.getClass().getName()
this.previous.subnode.subs.getClass().getName() != this.previous.next.value.getClass().getName()
this.previous.subnode.subs.getClass().getName() != this.previous.previous.susbscript.getClass().getName()
this.previous.subnode.susbscript in this.previous.subnode.subs[]
this.previous.subnode.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.next.susbscript in this.previous.next.subs[]
this.previous.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() != this.previous.previous.subs.getClass().getName()
this.previous.next.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.previous.subs.getClass().getName() != this.previous.previous.susbscript.getClass().getName()
this.previous.previous.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.previous.previous.subs[]
this.previous.previous.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.Node(java.lang.Object[], java.lang.Object, java.lang.String):::ENTER
arg0 != null
arg0.getClass().getName() == java.lang.Object[].class
arg0[] elements != null
arg1 == null
arg2 != null
size(arg0[]) >= 1
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.Node(java.lang.Object[], java.lang.Object, java.lang.String):::EXIT
this.subs == orig(arg0)
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.key == orig(arg2)
this.next == this.previous
arg0[] == orig(arg0[])
arg2.toString == orig(arg2.toString)
this.susbscript != null
this.stackLevel == null
this.value == null
this.parent == null
this.subnode == null
this.next == null
arg0[] elements != null
this.susbscript in this.subs[]
this.susbscript in arg0[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.Node(java.lang.Object[], java.lang.String):::ENTER
arg0.getClass().getName() == java.lang.Object[].class
size(arg0[]) >= 1
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.Node(java.lang.Object[], java.lang.String):::EXIT
this.subs == orig(arg0)
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.key == orig(arg1)
this.next == this.previous
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
this.stackLevel == null
this.value == null
this.parent == null
this.subnode == null
this.next == null
this.susbscript in this.subs[]
this.susbscript in arg0[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.addSubnode(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.parent.subnode == this.subnode.parent.parent
this.parent.subnode == this.subnode.parent
this.parent.subnode.subs == this.subnode.parent.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.subnode.parent.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.subnode.parent.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.stackLevel == this.subnode.parent.stackLevel
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.subnode
this.parent.subnode.subnode == this.subnode.parent.subnode
this.parent.subnode.subnode == this.previous.next.subnode
this.parent.subnode.next == this.subnode.parent.next
this.parent.subnode.next == this.previous.next
this.subnode.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.isNumeric == arg0.isNumeric
this.subnode.parent.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.parent.next == this.subnode.parent.previous
this.subnode.parent.next == this.previous
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.isNumeric == arg0.isNumeric
this.subnode.next.value.getClass().getName() == arg0.susbscript.getClass().getName()
this.next == this.previous.previous
this.next == arg0.parent
this.previous == this.previous.parent.subnode
this.previous.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.subnode == this.previous.next.previous
this.previous.next.value == arg0.value
this.previous.next.subnode == arg0.next
this.previous.next.next == this.previous.previous
arg0 == arg0.subnode.parent
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.next == arg0.previous
this.susbscript != null
this.stackLevel == null
this.value == null
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.parent.key.toString one of { "@", "vetorLocal" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.stackLevel == null
this.parent.subnode.previous == null
this.parent.next == null
this.parent.previous.subs has only one value
this.parent.previous.subs[] contains no nulls and has only one value, of length 1
this.parent.previous.subs[] elements has only one value
this.parent.previous.key has only one value
this.parent.previous.key.toString == "locVar"
this.parent.previous.susbscript has only one value
this.parent.previous.value has only one value
this.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.subnode.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.subnode.parent.stackLevel == null
this.subnode.parent.next == null
this.subnode.subnode == null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.parent has only one value
this.subnode.previous == null
this.next == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVar"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "vetorLocal"
this.previous.next.susbscript has only one value
this.previous.next.value == null
this.previous.next.subnode == null
this.previous.previous == null
arg0 != null
arg0.subs != null
arg0.subs[] elements != null
arg0.key != null
arg0.susbscript != null
arg0.value.getClass().getName() == java.lang.String.class
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
size(this.subs[]) one of { 1, 2, 3 }
size(this.parent.subs[]) one of { 1, 2 }
size(this.parent.parent.subs[]) == 1
size(this.parent.subnode.subs[]) one of { 1, 2, 3 }
size(this.subnode.subs[]) one of { 1, 4 }
size(this.subnode.parent.subs[]) one of { 1, 3 }
size(this.subnode.next.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
size(arg0.subs[]) >= 1
size(arg0.subnode.subs[]) == 2
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.susbscript in this.subs[]
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript in this.parent.subs[]
this.subnode.next.value in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
arg0.subnode.susbscript in this.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.subnode.next.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.parent.key in arg0.subnode.subs[]
this.parent.susbscript in this.subnode.subs[]
this.parent.susbscript in this.subnode.parent.subs[]
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript in arg0.subnode.subs[]
this.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs[] elements == this.parent.parent.susbscript
this.subnode.next.susbscript in this.parent.parent.subs[]
this.subnode.next.value in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.previous.next.key in this.parent.parent.subs[]
this.previous.next.susbscript in this.parent.parent.subs[]
this.previous.next.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.next.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.next.susbscript in this.parent.subnode.subs[]
this.subnode.next.value in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
arg0.subnode.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.key in this.subnode.next.subs[]
this.parent.subnode.key in arg0.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.parent.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in arg0.subnode.subs[]
this.parent.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subnode.value in this.subnode.next.subs[]
this.parent.subnode.value in arg0.subnode.subs[]
this.parent.previous.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.parent.previous.subs[]
this.subnode.value in this.parent.previous.subs[]
this.subnode.parent.key in this.parent.previous.subs[]
this.subnode.parent.susbscript in this.parent.previous.subs[]
arg0.subnode.susbscript in this.parent.previous.subs[]
this.subnode.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.previous.susbscript in this.subnode.subs[]
this.parent.previous.susbscript in this.subnode.parent.subs[]
this.parent.previous.susbscript in arg0.subnode.subs[]
this.parent.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.previous.value in this.subnode.subs[]
this.parent.previous.value in this.subnode.parent.subs[]
this.parent.previous.value in arg0.subnode.subs[]
this.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.subnode.subs[]
this.previous.susbscript in this.subnode.subs[]
this.previous.value in this.subnode.subs[]
this.previous.parent.key in this.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subs[]
this.previous.next.key in this.subnode.subs[]
this.previous.next.value in this.subnode.subs[]
this.previous.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.previous.subs[]
this.subnode.susbscript in this.previous.parent.subs[]
this.subnode.susbscript in this.previous.next.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value in this.previous.subs[]
this.subnode.value in this.previous.parent.subs[]
this.subnode.value in this.previous.next.subs[]
this.previous.key in this.subnode.parent.subs[]
this.previous.susbscript in this.subnode.parent.subs[]
this.previous.value in this.subnode.parent.subs[]
this.previous.parent.key in this.subnode.parent.subs[]
this.previous.parent.susbscript in this.subnode.parent.subs[]
this.previous.next.key in this.subnode.parent.subs[]
this.previous.next.value in this.subnode.parent.subs[]
this.previous.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.previous.subs[]
this.subnode.parent.key in this.previous.parent.subs[]
this.subnode.parent.key in this.previous.next.subs[]
this.subnode.parent.susbscript in this.previous.subs[]
this.subnode.parent.susbscript in this.previous.parent.subs[]
this.subnode.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
arg0.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.subs[] elements == this.previous.susbscript
arg0.subnode.susbscript in this.previous.subs[]
arg0.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.key in arg0.subnode.subs[]
this.previous.susbscript in arg0.subnode.subs[]
this.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.value in arg0.subnode.subs[]
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
arg0.subnode.susbscript in this.previous.parent.subs[]
arg0.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.parent.key in arg0.subnode.subs[]
this.previous.parent.susbscript in arg0.subnode.subs[]
this.previous.next.subs[] elements == this.previous.next.susbscript
arg0.subnode.susbscript in this.previous.next.subs[]
arg0.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.next.key in arg0.subnode.subs[]
this.previous.next.susbscript in arg0.subs[]
this.previous.next.susbscript in arg0.subnode.subs[]
this.previous.next.value in arg0.subnode.subs[]
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.addSubnode(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.subs == arg0.parent.subs
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == arg0.parent.key
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == arg0.parent.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.subnode.parent.stackLevel)
this.value == orig(this.value)
this.parent == arg0.parent.parent
this.parent == orig(this.parent)
this.parent == orig(this.subnode.parent.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.parent.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.parent.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.subnode == orig(this.subnode.parent.parent)
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.previous == orig(this.parent.parent.previous)
this.parent.subnode == arg0.previous.parent
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs == orig(this.subnode.parent.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key == orig(this.subnode.parent.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.susbscript == orig(this.subnode.parent.susbscript)
this.parent.subnode.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.parent.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.parent.subnode.isNumeric == orig(this.parent.subnode.isNumeric)
this.parent.subnode.isNumeric == orig(this.subnode.parent.isNumeric)
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.stackLevel == orig(this.subnode.parent.stackLevel)
this.parent.subnode.value == this.subnode.next.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.parent == orig(this.parent.subnode.parent)
this.parent.subnode.parent == orig(this.subnode.parent.parent)
this.parent.subnode.subnode == orig(this.subnode.parent.subnode)
this.parent.subnode.subnode == orig(this.previous.next.subnode)
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.next == orig(this.subnode.parent.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == orig(this.parent.next)
this.parent.previous == orig(this.parent.previous)
this.parent.previous.subs == orig(this.parent.previous.subs)
this.parent.previous.subs[] == orig(this.parent.previous.subs[])
this.parent.previous.key == orig(this.parent.previous.key)
this.parent.previous.key.toString == orig(this.parent.previous.key.toString)
this.parent.previous.susbscript == orig(this.parent.previous.susbscript)
this.parent.previous.isNumeric == orig(this.parent.previous.isNumeric)
this.parent.previous.stackLevel == orig(this.parent.previous.stackLevel)
this.parent.previous.value == orig(this.parent.previous.value)
this.parent.previous.subnode == orig(this.parent.previous.subnode)
this.parent.previous.next == orig(this.parent.previous.next)
this.parent.previous.previous == orig(this.parent.previous.previous)
this.subnode == arg0.parent.subnode
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.isNumeric == arg0.isNumeric
this.subnode.value.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.value.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.parent == arg0.parent
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.next == arg0.subnode.parent
this.subnode.next == orig(this.previous.next.subnode)
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == arg0.isNumeric
this.subnode.next.isNumeric == arg0.next.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.isNumeric)
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.value.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.parent == arg0.parent
this.subnode.next.parent == arg0.next.parent
this.subnode.next.parent == arg0.previous.parent
this.subnode.next.parent == orig(this)
this.subnode.next.parent == orig(this.subnode.parent)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.previous == orig(this.parent.subnode.subnode)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous
this.next == orig(this.subnode.parent.next)
this.next == orig(this.next)
this.next == orig(arg0.parent)
this.previous == this.previous.parent.subnode
this.previous == arg0.parent.previous
this.previous == orig(this.subnode.parent.next)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == this.previous.next.previous
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.subnode == orig(this.previous.next.previous)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == arg0.parent
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.value == arg0.value
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.subnode == orig(arg0)
this.previous.next.next == this.previous.previous
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.isNumeric == arg0.next.isNumeric
arg0.isNumeric == arg0.previous.isNumeric
arg0.isNumeric == orig(this.subnode.next.isNumeric)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
arg0.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent == orig(this)
arg0.parent == orig(this.subnode.next.parent)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == arg0.next.previous
arg0.subnode.parent == arg0.previous.next
arg0.subnode.parent == orig(arg0)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(this.previous.next.subnode)
arg0.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
arg0.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.next.isNumeric == arg0.previous.isNumeric
arg0.next.isNumeric == orig(this.subnode.next.isNumeric)
arg0.next.parent == arg0.previous.parent
arg0.next.parent == orig(this)
arg0.next.parent == orig(this.subnode.next.parent)
arg0.next.next == arg0.previous.previous
arg0.next.previous == arg0.previous.next
arg0.next.previous == orig(arg0)
arg0.previous == orig(this.parent.subnode.subnode)
arg0.previous == orig(this.previous.next.subnode)
arg0.previous.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.previous.isNumeric == orig(this.subnode.next.isNumeric)
arg0.previous.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.previous.parent == orig(this)
arg0.previous.parent == orig(this.subnode.next.parent)
arg0.previous.subnode == orig(this.subnode.next.subnode)
arg0.previous.next == orig(arg0)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
size(this.subnode.next.subs[]) == orig(size(this.subnode.next.subs[]))
this.susbscript != null
this.stackLevel == null
this.value == null
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.parent.key.toString one of { "@", "vetorLocal" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.stackLevel == null
this.parent.subnode.previous == null
this.parent.next == null
this.parent.previous.subs has only one value
this.parent.previous.subs[] contains no nulls and has only one value, of length 1
this.parent.previous.subs[] elements has only one value
this.parent.previous.key has only one value
this.parent.previous.key.toString == "locVar"
this.parent.previous.susbscript has only one value
this.parent.previous.value has only one value
this.subnode != null
this.subnode.subnode == null
this.subnode.previous == null
this.next == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVar"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "vetorLocal"
this.previous.next.susbscript has only one value
this.previous.next.value == null
this.previous.next.subnode has only one value
this.previous.previous == null
arg0.subs != null
arg0.subs[] elements != null
arg0.key != null
arg0.susbscript != null
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent != null
arg0.parent.subs[] elements != null
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.next == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "locVarAfterNew", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.parent has only one value
arg0.next.subnode == null
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value.getClass().getName() == java.lang.String.class
size(this.subs[]) one of { 1, 2, 3 }
size(this.parent.subs[]) one of { 1, 2 }
size(this.parent.parent.subs[]) == 1
size(this.parent.subnode.subs[]) one of { 1, 2, 3 }
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
size(arg0.subs[]) >= 1
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) one of { 1, 4 }
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.susbscript in this.subs[]
this.subs[] elements == this.previous.next.susbscript
orig(this.subnode.parent.susbscript) in this.subs[]
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.subs[].getClass().getName()
this.previous.next.subs[] elements == this.susbscript
this.susbscript in arg0.parent.subs[]
this.susbscript in orig(this.subnode.parent.subs[])
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
arg0.subnode.susbscript in this.parent.subs[]
arg0.next.susbscript in this.parent.subs[]
arg0.next.value in this.parent.subs[]
orig(this.subnode.next.susbscript) in this.parent.subs[]
orig(this.subnode.next.value) in this.parent.subs[]
this.subnode.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.parent.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.parent.subs[].getClass().getName()
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.parent.key in arg0.subnode.subs[]
this.parent.key in arg0.next.subs[]
this.parent.key in orig(this.subnode.next.subs[])
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript in arg0.subnode.subs[]
this.parent.susbscript in arg0.next.subs[]
this.parent.susbscript in arg0.previous.subs[]
this.parent.susbscript in orig(this.subnode.subs[])
this.parent.susbscript in orig(this.subnode.parent.subs[])
this.parent.susbscript in orig(this.subnode.next.subs[])
this.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.parent.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.parent.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.parent.subs[] elements == this.parent.parent.susbscript
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.previous.next.key in this.parent.parent.subs[]
this.previous.next.susbscript in this.parent.parent.subs[]
this.previous.next.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
arg0.next.susbscript in this.parent.parent.subs[]
arg0.next.value in this.parent.parent.subs[]
orig(this.subnode.next.susbscript) in this.parent.parent.subs[]
orig(this.subnode.next.value) in this.parent.parent.subs[]
this.subnode.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.parent.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.key in arg0.next.subs[]
this.parent.parent.key in orig(this.subnode.next.subs[])
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript in arg0.next.subs[]
this.parent.parent.susbscript in arg0.previous.subs[]
this.parent.parent.susbscript in orig(this.subnode.subs[])
this.parent.parent.susbscript in orig(this.subnode.parent.subs[])
this.parent.parent.susbscript in orig(this.subnode.next.subs[])
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.parent.parent.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.parent.parent.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
arg0.subnode.susbscript in this.parent.subnode.subs[]
arg0.next.susbscript in this.parent.subnode.subs[]
arg0.next.value in this.parent.subnode.subs[]
orig(this.subnode.parent.susbscript) in this.parent.subnode.subs[]
orig(this.subnode.next.susbscript) in this.parent.subnode.subs[]
orig(this.subnode.next.value) in this.parent.subnode.subs[]
this.subnode.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.parent.subnode.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.parent.subnode.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.key in arg0.subnode.subs[]
this.parent.subnode.key in arg0.next.subs[]
this.parent.subnode.key in orig(this.subnode.next.subs[])
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in arg0.subnode.subs[]
this.parent.subnode.susbscript in arg0.next.subs[]
this.parent.subnode.susbscript in arg0.previous.subs[]
this.parent.subnode.susbscript in orig(this.subnode.subs[])
this.parent.subnode.susbscript in orig(this.subnode.parent.subs[])
this.parent.subnode.susbscript in orig(this.subnode.next.subs[])
this.parent.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.parent.subnode.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.parent.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.subnode.value in arg0.subnode.subs[]
this.parent.subnode.value in arg0.next.subs[]
this.parent.subnode.value in orig(this.subnode.next.subs[])
this.parent.previous.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.previous.subs.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.parent.previous.subs.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.parent.previous.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.subnode.susbscript in this.parent.previous.subs[]
arg0.next.susbscript in this.parent.previous.subs[]
arg0.next.value in this.parent.previous.subs[]
arg0.previous.susbscript in this.parent.previous.subs[]
arg0.previous.value in this.parent.previous.subs[]
orig(this.subnode.susbscript) in this.parent.previous.subs[]
orig(this.subnode.value) in this.parent.previous.subs[]
orig(this.subnode.parent.key) in this.parent.previous.subs[]
orig(this.subnode.parent.susbscript) in this.parent.previous.subs[]
orig(this.subnode.next.susbscript) in this.parent.previous.subs[]
orig(this.subnode.next.value) in this.parent.previous.subs[]
arg0.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.parent.previous.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.parent.previous.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.parent.previous.subs[].getClass().getName()
this.parent.previous.susbscript in arg0.subnode.subs[]
this.parent.previous.susbscript in arg0.next.subs[]
this.parent.previous.susbscript in arg0.previous.subs[]
this.parent.previous.susbscript in orig(this.subnode.subs[])
this.parent.previous.susbscript in orig(this.subnode.parent.subs[])
this.parent.previous.susbscript in orig(this.subnode.next.subs[])
this.parent.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.parent.previous.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.parent.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.parent.previous.value in arg0.subnode.subs[]
this.parent.previous.value in arg0.next.subs[]
this.parent.previous.value in arg0.previous.subs[]
this.parent.previous.value in orig(this.subnode.subs[])
this.parent.previous.value in orig(this.subnode.parent.subs[])
this.parent.previous.value in orig(this.subnode.next.subs[])
arg0.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.parent.susbscript.getClass().getName()) in this.subnode.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[]) (elementwise)
orig(this.subnode.parent.susbscript) in this.subnode.parent.subs[]
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName()) (elementwise)
orig(this.subnode.parent.susbscript.getClass().getName()) in this.subnode.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.next.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.previous.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
this.previous.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.previous.subs.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.previous.subs.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.previous.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.previous.subs[] elements == this.previous.susbscript
arg0.subnode.susbscript in this.previous.subs[]
arg0.next.susbscript in this.previous.subs[]
arg0.next.value in this.previous.subs[]
arg0.previous.susbscript in this.previous.subs[]
arg0.previous.value in this.previous.subs[]
orig(this.subnode.susbscript) in this.previous.subs[]
orig(this.subnode.value) in this.previous.subs[]
orig(this.subnode.parent.key) in this.previous.subs[]
orig(this.subnode.parent.susbscript) in this.previous.subs[]
orig(this.subnode.next.susbscript) in this.previous.subs[]
orig(this.subnode.next.value) in this.previous.subs[]
arg0.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.previous.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.previous.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.previous.subs[].getClass().getName()
this.previous.key in arg0.subnode.subs[]
this.previous.key in arg0.next.subs[]
this.previous.key in arg0.previous.subs[]
this.previous.key in orig(this.subnode.subs[])
this.previous.key in orig(this.subnode.parent.subs[])
this.previous.key in orig(this.subnode.next.subs[])
this.previous.susbscript in arg0.subnode.subs[]
this.previous.susbscript in arg0.next.subs[]
this.previous.susbscript in arg0.previous.subs[]
this.previous.susbscript in orig(this.subnode.subs[])
this.previous.susbscript in orig(this.subnode.parent.subs[])
this.previous.susbscript in orig(this.subnode.next.subs[])
this.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.previous.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.previous.value in arg0.subnode.subs[]
this.previous.value in arg0.next.subs[]
this.previous.value in arg0.previous.subs[]
this.previous.value in orig(this.subnode.subs[])
this.previous.value in orig(this.subnode.parent.subs[])
this.previous.value in orig(this.subnode.next.subs[])
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
arg0.subnode.susbscript in this.previous.parent.subs[]
arg0.next.susbscript in this.previous.parent.subs[]
arg0.next.value in this.previous.parent.subs[]
arg0.previous.susbscript in this.previous.parent.subs[]
arg0.previous.value in this.previous.parent.subs[]
orig(this.subnode.susbscript) in this.previous.parent.subs[]
orig(this.subnode.value) in this.previous.parent.subs[]
orig(this.subnode.parent.key) in this.previous.parent.subs[]
orig(this.subnode.parent.susbscript) in this.previous.parent.subs[]
orig(this.subnode.next.susbscript) in this.previous.parent.subs[]
orig(this.subnode.next.value) in this.previous.parent.subs[]
arg0.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.previous.parent.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.previous.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.previous.parent.subs[].getClass().getName()
this.previous.parent.key in arg0.subnode.subs[]
this.previous.parent.key in arg0.next.subs[]
this.previous.parent.key in arg0.previous.subs[]
this.previous.parent.key in orig(this.subnode.subs[])
this.previous.parent.key in orig(this.subnode.parent.subs[])
this.previous.parent.key in orig(this.subnode.next.subs[])
this.previous.parent.susbscript in arg0.subnode.subs[]
this.previous.parent.susbscript in arg0.next.subs[]
this.previous.parent.susbscript in arg0.previous.subs[]
this.previous.parent.susbscript in orig(this.subnode.subs[])
this.previous.parent.susbscript in orig(this.subnode.parent.subs[])
this.previous.parent.susbscript in orig(this.subnode.next.subs[])
this.previous.next.subs[] elements == this.previous.next.susbscript
arg0.subnode.susbscript in this.previous.next.subs[]
arg0.next.susbscript in this.previous.next.subs[]
arg0.next.value in this.previous.next.subs[]
arg0.previous.susbscript in this.previous.next.subs[]
arg0.previous.value in this.previous.next.subs[]
orig(this.subnode.susbscript) in this.previous.next.subs[]
orig(this.subnode.value) in this.previous.next.subs[]
orig(this.subnode.parent.key) in this.previous.next.subs[]
orig(this.subnode.parent.susbscript) in this.previous.next.subs[]
orig(this.subnode.next.susbscript) in this.previous.next.subs[]
orig(this.subnode.next.value) in this.previous.next.subs[]
arg0.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in this.previous.next.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.previous.next.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.previous.next.subs[].getClass().getName()
this.previous.next.key in arg0.subnode.subs[]
this.previous.next.key in arg0.next.subs[]
this.previous.next.key in arg0.previous.subs[]
this.previous.next.key in orig(this.subnode.subs[])
this.previous.next.key in orig(this.subnode.parent.subs[])
this.previous.next.key in orig(this.subnode.next.subs[])
this.previous.next.susbscript in arg0.subs[]
arg0.parent.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in arg0.parent.subs[]
this.previous.next.susbscript in arg0.subnode.subs[]
this.previous.next.susbscript in arg0.next.subs[]
this.previous.next.susbscript in arg0.previous.subs[]
this.previous.next.susbscript in orig(this.subnode.subs[])
this.previous.next.susbscript in orig(this.subnode.parent.subs[])
this.previous.next.susbscript in orig(this.subnode.next.subs[])
this.previous.next.value in arg0.subnode.subs[]
this.previous.next.value in arg0.next.subs[]
this.previous.next.value in arg0.previous.subs[]
this.previous.next.value in orig(this.subnode.subs[])
this.previous.next.value in orig(this.subnode.parent.subs[])
this.previous.next.value in orig(this.subnode.next.subs[])
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in arg0.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in arg0.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
arg0.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
arg0.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
orig(this.subnode.parent.susbscript) in arg0.parent.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in arg0.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.subnode.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
arg0.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in arg0.next.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in arg0.next.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
arg0.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
orig(this.subnode.parent.susbscript.getClass().getName()) in arg0.previous.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.previous.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
arg0.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.previous.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.previous.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
arg0.previous.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.cancelReferences():::ENTER
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.value == this.subnode.value
this.parent.key == this.parent.susbscript
this.parent.subnode == this.next
this.parent.subnode.subs == this.next.subs
this.parent.subnode.key == this.next.key
this.parent.subnode.susbscript == this.next.susbscript
this.parent.subnode.stackLevel == this.next.next.stackLevel
this.parent.subnode.value == this.next.value
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.next == this.next.next
this.parent.next == this.parent.previous
this.subnode.parent.previous == this.next.next
this.next == this.next.parent.subnode
this.next.next.next == this.previous
this.next.previous == this.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel has only one value
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "vetorLocal", "zzz" }
this.parent.subnode.stackLevel == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.next.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.cancelReferences():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.parent == orig(this.parent.next)
this.parent == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.parent == orig(this)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.next == orig(this.next.next)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.parent.subnode.subnode)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous
this.next == orig(this.next.next.next)
this.next == orig(this.next.previous)
this.next == orig(this.previous)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel has only one value
this.parent == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent == null
this.subnode.parent.subnode has only one value
this.subnode.parent.next == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next == null
size(this.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.susbscript.getClass().getName() in orig(this.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.parent.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.next.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.next.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.next.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.next.next.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.parent.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.parent.subnode.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.next.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.next.parent.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.next.subnode.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.next.next.subs[].getClass().getName())
this.subnode.subs.getClass().getName() in orig(this.next.subnode.subs[].getClass().getName())
this.subnode.subs.getClass().getName() in orig(this.next.next.subs[].getClass().getName())
this.subnode.parent.susbscript in this.subnode.subs[]
orig(this.next.subnode.susbscript) in this.subnode.subs[]
orig(this.next.next.key) in this.subnode.subs[]
orig(this.next.next.susbscript) in this.subnode.subs[]
orig(this.next.subnode.subs.getClass().getName()) in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in orig(this.next.subnode.subs[])
this.subnode.susbscript in orig(this.next.next.subs[])
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in orig(this.parent.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.parent.subnode.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.next.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.next.parent.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.next.subnode.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.next.next.subs[].getClass().getName())
this.subnode.value in orig(this.next.subnode.subs[])
this.subnode.value in orig(this.next.next.subs[])
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
orig(this.next.subnode.susbscript) in this.subnode.parent.subs[]
orig(this.next.next.key) in this.subnode.parent.subs[]
orig(this.next.next.susbscript) in this.subnode.parent.subs[]
orig(this.next.subnode.subs.getClass().getName()) in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in orig(this.next.subnode.subs[])
this.subnode.parent.key in orig(this.next.next.subs[])
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in orig(this.next.subnode.subs[])
this.subnode.parent.susbscript in orig(this.next.next.subs[])
orig(this.next.subnode.susbscript) in this.subnode.subnode.subs[]
orig(this.next.next.key) in this.subnode.subnode.subs[]
orig(this.next.next.susbscript) in this.subnode.subnode.subs[]
orig(this.next.subnode.subs.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in orig(this.next.subnode.subs[])
this.subnode.subnode.susbscript in orig(this.next.next.subs[])
this.subnode.subnode.susbscript.getClass().getName() in orig(this.next.subnode.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.next.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.compareTo(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.next == this.subnode.parent
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.next
this.parent.next == this.parent.previous
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.next == this.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.next == this.previous.previous
this.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.next.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.parent.subnode == this.next.previous
this.next.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.previous == this.previous.parent.subnode
this.previous.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.previous.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.subnode == this.previous.next.previous
this.previous.next.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.previous.next.next == this.previous.previous
arg0 == arg0.subnode.parent
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript != null
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent != null
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.value != null
this.parent.subnode.subnode == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel == null
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next == null
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.next.previous has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.next.previous.stackLevel == null
this.next.previous.subnode == null
this.next.previous.previous == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.previous.stackLevel == null
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous == null
arg0 != null
arg0.subs != null
arg0.subs[] elements != null
arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.key != null
arg0.susbscript != null
arg0.isNumeric == false
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
size(arg0.subs[]) one of { 1, 4 }
size(arg0.subnode.subs[]) == 2
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() in arg0.subs[].getClass().getName()
this.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.previous.next.key in this.parent.parent.subs[]
this.previous.next.susbscript in this.parent.parent.subs[]
this.previous.next.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript in arg0.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.key in this.subnode.subs[]
this.next.susbscript in this.subnode.subs[]
this.next.value in this.subnode.subs[]
this.next.parent.key in this.subnode.subs[]
this.next.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.key in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.previous.value in this.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subs[]
this.next.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subs[]
this.subnode.susbscript in this.next.parent.subs[]
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript in this.next.previous.subs[]
this.subnode.susbscript in arg0.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value in this.next.subs[]
this.subnode.value in this.next.parent.subs[]
this.subnode.value in this.next.subnode.subs[]
this.subnode.value in this.next.previous.subs[]
this.subnode.value in arg0.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.key in this.subnode.parent.subs[]
this.next.susbscript in this.subnode.parent.subs[]
this.next.value in this.subnode.parent.subs[]
this.next.parent.key in this.subnode.parent.subs[]
this.next.parent.susbscript in this.subnode.parent.subs[]
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.key in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.next.previous.value in this.subnode.parent.subs[]
arg0.subnode.susbscript in this.subnode.parent.subs[]
this.next.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subs[]
this.subnode.parent.key in this.next.parent.subs[]
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.key in this.next.previous.subs[]
this.subnode.parent.key in arg0.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subs[]
this.subnode.parent.susbscript in this.next.parent.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in arg0.subnode.subs[]
this.next.key in this.subnode.subnode.subs[]
this.next.susbscript in this.subnode.subnode.subs[]
this.next.value in this.subnode.subnode.subs[]
this.next.parent.key in this.subnode.subnode.subs[]
this.next.parent.susbscript in this.subnode.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.key in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.previous.value in this.subnode.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subs[]
this.subnode.subnode.susbscript in this.next.parent.subs[]
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript in this.next.previous.subs[]
this.subnode.subnode.susbscript in arg0.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
arg0.subnode.susbscript in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript in arg0.subnode.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
arg0.subnode.susbscript in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.key in arg0.subnode.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript in arg0.subnode.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.previous.subs[] elements == this.previous.susbscript
arg0.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
arg0.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.next.subs[] elements == this.previous.next.susbscript
arg0.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.compareTo(br.com.innovatium.mumps2java.datastructure.Node):::EXIT222
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.compareTo(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == arg0.value.getClass().getName()
this.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.subnode.parent
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == this.previous.previous
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.next.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.next.value.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.previous
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.value.getClass().getName() == arg0.value.getClass().getName()
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.next.previous == orig(this.next.next.previous)
this.next.previous == orig(this)
this.next.previous == orig(this.next.parent.subnode)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == this.previous.parent.subnode
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == this.previous.next.previous
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.subnode == orig(this.previous.next.previous)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
arg0.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.previous == orig(arg0.previous)
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript != null
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent != null
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.value != null
this.parent.subnode.subnode == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel == null
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next == null
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.next.previous has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.next.previous.stackLevel == null
this.next.previous.subnode == null
this.next.previous.previous == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.previous.stackLevel == null
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous == null
arg0.subs != null
arg0.subs[] elements != null
arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.key != null
arg0.susbscript != null
arg0.isNumeric == false
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
size(arg0.subs[]) one of { 1, 4 }
size(arg0.subnode.subs[]) == 2
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() in arg0.subs[].getClass().getName()
this.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.previous.next.key in this.parent.parent.subs[]
this.previous.next.susbscript in this.parent.parent.subs[]
this.previous.next.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript in arg0.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.key in this.subnode.subs[]
this.next.susbscript in this.subnode.subs[]
this.next.value in this.subnode.subs[]
this.next.parent.key in this.subnode.subs[]
this.next.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.key in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.previous.value in this.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subs[]
this.next.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subs[]
this.subnode.susbscript in this.next.parent.subs[]
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript in this.next.previous.subs[]
this.subnode.susbscript in arg0.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value in this.next.subs[]
this.subnode.value in this.next.parent.subs[]
this.subnode.value in this.next.subnode.subs[]
this.subnode.value in this.next.previous.subs[]
this.subnode.value in arg0.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.key in this.subnode.parent.subs[]
this.next.susbscript in this.subnode.parent.subs[]
this.next.value in this.subnode.parent.subs[]
this.next.parent.key in this.subnode.parent.subs[]
this.next.parent.susbscript in this.subnode.parent.subs[]
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.key in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.next.previous.value in this.subnode.parent.subs[]
arg0.subnode.susbscript in this.subnode.parent.subs[]
this.next.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subs[]
this.subnode.parent.key in this.next.parent.subs[]
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.key in this.next.previous.subs[]
this.subnode.parent.key in arg0.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subs[]
this.subnode.parent.susbscript in this.next.parent.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in arg0.subnode.subs[]
this.next.key in this.subnode.subnode.subs[]
this.next.susbscript in this.subnode.subnode.subs[]
this.next.value in this.subnode.subnode.subs[]
this.next.parent.key in this.subnode.subnode.subs[]
this.next.parent.susbscript in this.subnode.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.key in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.previous.value in this.subnode.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subs[]
this.subnode.subnode.susbscript in this.next.parent.subs[]
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript in this.next.previous.subs[]
this.subnode.subnode.susbscript in arg0.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
arg0.subnode.susbscript in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript in arg0.subnode.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
arg0.subnode.susbscript in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.key in arg0.subnode.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript in arg0.subnode.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.previous.subs[] elements == this.previous.susbscript
arg0.value.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
arg0.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.next.subs[] elements == this.previous.next.susbscript
arg0.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.equals(java.lang.Object):::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.next
this.parent.next == this.parent.previous
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == this.previous.previous
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.next == this.previous.previous
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.parent.subnode == this.next.previous
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.previous == this.previous.parent.subnode
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.subnode == this.previous.next.previous
this.previous.next.next == this.previous.previous
this.previous.previous == arg0
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.next.previous has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.next.previous.previous == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.previous.stackLevel == null
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous == null
arg0.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Node.class
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs.getClass().getName() != arg0.getClass().getName()
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg0.getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() != arg0.getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() != arg0.getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.value.getClass().getName() != arg0.getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.subs[] elements == this.previous.susbscript
arg0.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
arg0.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.next.subs[] elements == this.previous.next.susbscript
arg0.getClass().getName() in this.previous.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.equals(java.lang.Object):::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == this.previous.previous
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.previous
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.next.next.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.next.previous == orig(this.next.next.previous)
this.next.previous == orig(this)
this.next.previous == orig(this.next.parent.subnode)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == this.previous.parent.subnode
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == this.previous.next.previous
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.subnode == orig(this.previous.next.previous)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
this.previous.previous == orig(arg0)
(this.subnode.parent.stackLevel == null)  <==>  (return == false)
(this.subnode.parent.stackLevel == null)  <==>  (this.parent.subnode.value.getClass().getName() == this.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  <==>  (this.subnode.parent.next == null)
(this.subnode.parent.stackLevel == null)  <==>  (this.subnode.parent.previous has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (orig(arg0.getClass().getName()) in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (orig(arg0.getClass().getName()) in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (orig(arg0.getClass().getName()) in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (orig(arg0.getClass().getName()) in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (orig(arg0.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (orig(arg0.getClass().getName()) in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (size(this.parent.subnode.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.parent.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.key == this.previous.next.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.key.toString one of { "locVar", "vetorLocal", "zzz" })
(this.subnode.parent.stackLevel == null)  ==>  (this.next == orig(arg0))
(this.subnode.parent.stackLevel == null)  ==>  (this.next == this.previous.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.key.toString == "vetorLocal")
(this.subnode.parent.stackLevel == null)  ==>  (this.next.next == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.next == this.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.key in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.key in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.key in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.parent.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.key.toString == "locVar")
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.next == orig(arg0))
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.next has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.parent == orig(arg0))
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.next.value in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent == this.previous.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.isNumeric == false)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.isNumeric == this.previous.parent.isNumeric)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key.toString == "@")
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.parent == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.parent == this.previous.parent.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode == this.previous.parent.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode == this.subnode.parent.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key == this.previous.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew" })
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next == this.previous.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next == this.subnode.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subnode == this.subnode.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs == this.previous.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value == this.previous.value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() == this.previous.next.value.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs == this.previous.parent.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous == this.previous.parent.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key.toString one of { "locVar", "locVarAfterNew" })
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next == orig(this))
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key.toString one of { "vetorLocal", "zzz" })
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key.toString == "@")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.next == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.parent == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.previous == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.previous == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.previous == orig(arg0))
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() == this.previous.next.value.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.value in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.value in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.value in this.next.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.value in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.stackLevel == this.previous.stackLevel)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode == this.previous.next.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent == this.previous.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.key == this.previous.next.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.key in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.next == orig(arg0))
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.next == this.previous.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.parent == this.previous.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.previous == this.previous.parent.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.stackLevel == this.previous.stackLevel)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.subnode == this.previous.next.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.subs == this.previous.next.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.susbscript == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subnode.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subnode.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subnode.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subs.getClass().getName() == this.previous.subs.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subs.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subs.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.subs.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.value == this.previous.next.value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.value in this.next.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.value in this.next.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.value in this.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subs == this.previous.next.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs.getClass().getName() == this.previous.subs.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.previous.next.value.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value == this.previous.next.value)
(this.subnode.parent.stackLevel == null)  ==>  (this.value.getClass().getName() == this.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value.getClass().getName() == this.previous.next.value.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  <==>  (return == true)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.parent.next has only one value)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.parent.previous == null)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (orig(this) == orig(arg0))
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.parent.subnode.subs[]) one of { 1, 4 })
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.parent.subs[]) one of { 1, 3 })
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.subs[]) one of { 1, 4 })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.key == this.parent.subnode.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next == this.next.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.key.toString one of { "vetorLocal", "zzz" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key.toString == "zzz")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == this.next.previous.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == this.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.previous == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.previous has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subnode == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] elements == this.next.next.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] elements has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.value has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent == this.next.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous == orig(arg0))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.parent == this.next.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() == this.next.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() == this.next.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.next.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.parent.parent.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key.toString one of { "@", "vetorLocal~xpto~34" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key.toString == "vetorLocal~xpto")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subnode has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[] contains no nulls and has only one value, of length 2)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == orig(arg0))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == orig(this))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == this.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.key == this.subnode.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.subnode.parent.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.subnode.parent.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs == this.subnode.parent.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value == this.subnode.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent == orig(arg0))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs == this.parent.subnode.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.next.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.parent.parent.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value == this.parent.subnode.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.next.previous has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.next.previous.previous == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.previous.stackLevel == null
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs.getClass().getName() != orig(arg0.getClass().getName())
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != orig(arg0.getClass().getName())
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() != orig(arg0.getClass().getName())
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() != orig(arg0.getClass().getName())
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.value.getClass().getName() != orig(arg0.getClass().getName())
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.subs[] elements == this.previous.susbscript
orig(arg0.getClass().getName()) in this.previous.subs[].getClass().getName()
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
orig(arg0.getClass().getName()) in this.previous.parent.subs[].getClass().getName()
this.previous.next.subs[] elements == this.previous.next.susbscript
orig(arg0.getClass().getName()) in this.previous.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.equals(java.lang.Object):::EXIT;condition="return == true"
this.subs == this.parent.subnode.subs
this.subs == orig(this.parent.subnode.subs)
this.key == this.parent.subnode.key
this.key == orig(this.parent.subnode.key)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.parent.subnode.susbscript)
this.value == this.parent.subnode.value
this.value == orig(this.parent.subnode.value)
this.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode == this.subnode.parent
this.parent.subnode == orig(this)
this.parent.subnode == orig(arg0)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.subnode == orig(this.parent.subnode.subnode)
this.subnode.parent == orig(arg0)
this.next == orig(this.parent.subnode.next)
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == this.next.next.value.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.subnode.parent == orig(this.next.next.previous)
this.next.previous == orig(arg0)
orig(this) == orig(arg0)
this.subnode.parent.stackLevel has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.previous == null
return == true
this.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.equals(java.lang.Object):::EXIT;condition="not(return == true)"
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.key == this.parent.susbscript
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.next == this.subnode.parent
this.subnode.parent.next == orig(arg0)
this.next == orig(arg0)
this.next.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.subnode.parent == orig(arg0)
this.next.next == this.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal", "zzz" }
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew" }
this.parent.subnode.subnode == null
this.subnode.parent.stackLevel == null
this.subnode.parent.next == null
this.subnode.parent.previous has only one value
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.key has only one value
this.next.key.toString == "vetorLocal"
this.next.susbscript has only one value
this.next.stackLevel == null
this.next.value == null
this.next.subnode has only one value
this.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.key has only one value
this.next.previous.key.toString == "locVar"
this.next.previous.susbscript has only one value
this.next.previous.stackLevel == null
this.next.previous.value has only one value
this.next.previous.subnode == null
return == false
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
this.subs[] elements == this.susbscript
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.key in this.subnode.subs[]
this.next.susbscript in this.subnode.subs[]
this.next.value in this.subnode.subs[]
this.next.parent.key in this.subnode.subs[]
this.next.parent.susbscript in this.subnode.subs[]
this.next.previous.key in this.subnode.subs[]
this.next.previous.value in this.subnode.subs[]
this.next.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
orig(arg0.getClass().getName()) in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subs[]
this.subnode.susbscript in this.next.parent.subs[]
this.subnode.susbscript in this.next.previous.subs[]
this.subnode.value in this.next.subs[]
this.subnode.value in this.next.parent.subs[]
this.subnode.value in this.next.previous.subs[]
this.next.key in this.subnode.parent.subs[]
this.next.susbscript in this.subnode.parent.subs[]
this.next.value in this.subnode.parent.subs[]
this.next.parent.key in this.subnode.parent.subs[]
this.next.parent.susbscript in this.subnode.parent.subs[]
this.next.previous.key in this.subnode.parent.subs[]
this.next.previous.value in this.subnode.parent.subs[]
this.next.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
orig(arg0.getClass().getName()) in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subs[]
this.subnode.parent.key in this.next.parent.subs[]
this.subnode.parent.key in this.next.previous.subs[]
this.subnode.parent.susbscript in this.next.subs[]
this.subnode.parent.susbscript in this.next.parent.subs[]
this.next.key in this.subnode.subnode.subs[]
this.next.susbscript in this.subnode.subnode.subs[]
this.next.value in this.subnode.subnode.subs[]
this.next.parent.key in this.subnode.subnode.subs[]
this.next.parent.susbscript in this.subnode.subnode.subs[]
this.next.previous.key in this.subnode.subnode.subs[]
this.next.previous.value in this.subnode.subnode.subs[]
this.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
orig(arg0.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subs[]
this.subnode.subnode.susbscript in this.next.parent.subs[]
this.subnode.subnode.susbscript in this.next.previous.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == this.parent.subnode
this == arg0.next.parent
this == arg0.previous.parent
this.subs == this.parent.subnode.subs
this.subs == arg0.parent.subs
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == arg1.subs.getClass().getName()
this.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
this.key == this.parent.subnode.key
this.key == arg0.parent.key
this.susbscript == this.parent.subnode.susbscript
this.susbscript == arg0.parent.susbscript
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg1.value.getClass().getName()
this.isNumeric == arg0.parent.isNumeric
this.stackLevel == this.parent.subnode.stackLevel
this.value == this.parent.subnode.value
this.parent == this.parent.parent.subnode
this.parent == arg0.parent.parent
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.parent.parent.subnode == this.parent.subnode.parent
this.parent.subnode == this.subnode.parent
this.parent.subnode.subnode == this.subnode
this.parent.subnode.subnode == arg0
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.subnode == arg0.parent.subnode
this.subnode == arg0.next.previous
this.subnode.subs == arg0.previous.subs
this.subnode.key == arg0.previous.key
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg1.value.getClass().getName()
this.subnode.isNumeric == arg0.isNumeric
this.subnode.isNumeric == arg0.next.isNumeric
this.subnode.isNumeric == arg0.previous.isNumeric
this.subnode.value == arg0.previous.value
this.subnode.parent == arg0.parent
this.subnode.parent == arg0.next.parent
this.subnode.parent == arg0.previous.parent
this.subnode.parent.previous == this.next
this.subnode.next == arg0.subnode.parent
this.subnode.next == arg0.previous.next
this.subnode.next.subs == arg0.next.subs
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
this.subnode.next.key == arg0.next.key
this.subnode.next.susbscript == arg0.next.susbscript
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg1.value.getClass().getName()
this.subnode.next.isNumeric == arg0.next.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.stackLevel == arg0.next.stackLevel
this.subnode.next.value == arg0.next.value
this.subnode.next.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.next.value.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
this.subnode.next.parent == arg0.next.parent
this.subnode.next.parent == arg0.previous.parent
this.subnode.next.subnode == arg0.next.subnode
this.subnode.next.next == arg0.next.next
this.subnode.next.previous == arg0.next.previous
this.next == this.previous
arg0 == arg0.subnode.parent
arg0 == arg0.next.previous
arg0 == arg0.previous.next
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.next.value.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg1.value.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.parent == arg0.previous.next
arg0.next.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg1.value.getClass().getName()
arg0.previous.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg1 == arg1.subnode.parent
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.key.toString one of { "@", "vetorLocal~xpto~34" }
this.stackLevel == null
this.value == null
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "vetorLocal~xpto"
this.parent.susbscript has only one value
this.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent has only one value
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.parent.subs[] elements has only one value
this.parent.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.parent.previous has only one value
this.parent.subnode has only one value
this.parent.subnode.subs has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 3
this.parent.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.parent.subnode.key has only one value
this.parent.subnode.key.toString == "vetorLocal~xpto~34"
this.parent.subnode.susbscript has only one value
this.parent.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.parent.subnode.isNumeric == true
this.parent.subnode.stackLevel == null
this.parent.subnode.value == null
this.parent.subnode.subnode has only one value
this.parent.subnode.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.subnode.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.subnode.subnode == null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.parent has only one value
this.subnode.previous == null
this.next == null
arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.stackLevel == null
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
arg0.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.value.getClass().getName() == java.lang.String.class
arg0.next.parent has only one value
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key.toString one of { "locVar", "locVarAfterNew" }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.previous == null
arg1.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg1.isNumeric == false
arg1.value.getClass().getName() == java.lang.String.class
arg1.parent == null
arg1.subnode.subs has only one value
arg1.subnode.subs.getClass().getName() == java.lang.Object[].class
arg1.subnode.subs[] contains no nulls and has only one value, of length 2
arg1.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg1.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg1.subnode.key has only one value
arg1.subnode.key.toString == "vetorLocal~xpto"
arg1.subnode.susbscript has only one value
arg1.subnode.isNumeric == false
arg1.subnode.stackLevel == null
arg1.subnode.value == null
arg1.subnode.parent has only one value
arg1.subnode.subnode has only one value
arg1.subnode.next == null
arg1.subnode.previous == null
arg1.next == null
arg1.previous == null
size(this.subs[]) one of { 1, 3 }
size(this.parent.subs[]) == 2
size(this.parent.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 3
size(this.subnode.subs[]) one of { 1, 4 }
size(this.subnode.parent.subs[]) one of { 1, 3 }
size(this.subnode.next.subs[]) == 1
size(arg0.subs[]) one of { 1, 4 }
size(arg0.parent.subs[]) one of { 1, 3 }
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
size(arg1.subs[]) one of { 1, 4 }
size(arg1.subnode.subs[]) == 2
this.subs.getClass().getName() != arg0.value.getClass().getName()
this.susbscript in this.subs[]
this.parent.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.parent.subnode.susbscript in this.subs[]
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.parent.subnode.subs[]
this.susbscript in arg0.parent.subs[]
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.subnode.next.susbscript in this.parent.subs[]
this.subnode.next.value in this.parent.subs[]
arg0.subnode.susbscript in this.parent.subs[]
arg0.previous.susbscript in this.parent.subs[]
arg0.previous.value in this.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.subnode.next.subs[]
this.parent.key in arg0.subnode.subs[]
this.parent.key in arg0.previous.subs[]
this.parent.susbscript in this.parent.subnode.subs[]
this.parent.susbscript in this.subnode.subs[]
this.parent.susbscript in this.subnode.parent.subs[]
this.parent.susbscript in arg0.subs[]
this.parent.susbscript in arg0.parent.subs[]
this.parent.susbscript in arg0.subnode.subs[]
this.parent.susbscript in arg0.previous.subs[]
this.parent.susbscript in arg1.subs[]
this.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.parent.parent.subs[] elements == this.parent.parent.susbscript
this.subnode.next.susbscript in this.parent.parent.subs[]
this.subnode.next.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
arg0.previous.susbscript in this.parent.parent.subs[]
arg0.previous.value in this.parent.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.next.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.key in arg0.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in arg0.subs[]
this.parent.parent.susbscript in arg0.parent.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript in arg0.previous.subs[]
this.parent.parent.susbscript in arg1.subs[]
this.subnode.next.susbscript in this.parent.subnode.subs[]
this.subnode.next.value in this.parent.subnode.subs[]
arg0.subnode.susbscript in this.parent.subnode.subs[]
arg0.previous.susbscript in this.parent.subnode.subs[]
arg0.previous.value in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.key in this.subnode.next.subs[]
this.parent.subnode.key in arg0.subnode.subs[]
this.parent.subnode.key in arg0.previous.subs[]
this.parent.subnode.susbscript in this.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.parent.subs[]
this.parent.subnode.susbscript in arg0.subs[]
this.parent.subnode.susbscript in arg0.parent.subs[]
this.parent.subnode.susbscript in arg0.subnode.subs[]
this.parent.subnode.susbscript in arg0.previous.subs[]
this.parent.subnode.susbscript in arg1.subs[]
this.parent.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.parent.subnode.value in this.subnode.next.subs[]
this.parent.subnode.value in arg0.subnode.subs[]
this.parent.subnode.value in arg0.previous.subs[]
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
arg0.next.susbscript in this.subnode.next.subs[]
this.subnode.next.subs[] elements == arg0.next.susbscript
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
arg0.next.subs[] elements == this.subnode.next.susbscript
this.subnode.next.susbscript in arg0.next.subs[]
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg1.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg1.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg1.subs[].getClass().getName()
arg0.value.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg1.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg1.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg1.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg1.susbscript in arg1.subs[]
arg1.value.getClass().getName() in arg1.subs[].getClass().getName()
arg1.susbscript in arg1.subnode.subs[]
arg1.subnode.susbscript in arg1.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::EXIT153
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg1.subnode.subs.getClass().getName())
this.key == this.susbscript
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
this.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg1.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg1.subnode.susbscript.getClass().getName())
this.subnode.subs == return.subs
this.subnode.key == return.key
this.subnode.susbscript == return.susbscript
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == return.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == return.value
this.subnode.next.subs == arg0.subs
this.subnode.next.key == arg0.key
this.subnode.next.susbscript == arg0.susbscript
this.subnode.next.value == arg0.value
this.subnode.next.subnode == arg0.subnode
arg0.subs == return.next.subs
arg0.subs == orig(this.subnode.next.subs)
arg0.key == return.next.key
arg0.key == orig(this.subnode.next.key)
arg0.susbscript == return.next.susbscript
arg0.susbscript == orig(this.subnode.next.susbscript)
arg0.isNumeric == orig(this.subnode.next.isNumeric)
arg0.isNumeric == orig(arg0.previous.isNumeric)
arg0.value == return.next.value
arg0.value == orig(this.subnode.next.value)
arg0.subnode == return.subnode
arg0.subnode == return.next.subnode
arg0.subnode == orig(this.subnode.next.subnode)
arg0.previous.subs == return.subs
arg0.previous.key == return.key
arg0.previous.susbscript == return.susbscript
arg0.previous.value == return.value
return.subs == orig(this.subnode.subs)
return.subs == orig(arg0.previous.subs)
return.key == orig(this.subnode.key)
return.key == orig(arg0.previous.key)
return.susbscript == orig(this.subnode.susbscript)
return.susbscript == orig(arg0.previous.susbscript)
return.value == orig(this.subnode.value)
return.value == orig(arg0.previous.value)
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent == null
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key.toString == "locVarAfterNew"
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key.toString == "zzz"
arg0.subs has only one value
arg0.subs[] contains no nulls and has only one value, of length 1
arg0.subs[] elements has only one value
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key has only one value
arg0.key.toString == "zzz"
arg0.susbscript has only one value
arg0.value has only one value
arg0.parent has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key.toString == "@"
arg0.subnode == null
arg0.next == null
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.key.toString == "locVarAfterNew"
arg1.subs has only one value
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.key has only one value
arg1.key.toString == "vetorLocal"
arg1.susbscript has only one value
arg1.stackLevel has only one value
arg1.value == null
arg1.subnode has only one value
return has only one value
return.subs has only one value
return.subs[] contains no nulls and has only one value, of length 1
return.subs[] elements has only one value
return.subs[].getClass().getName() == [java.lang.String]
return.subs[].getClass().getName() elements == java.lang.String.class
return.key has only one value
return.key.toString == "locVarAfterNew"
return.susbscript has only one value
return.value has only one value
return.parent.subs[] contains no nulls and has only one value, of length 1
return.parent.subs[] elements has only one value
return.parent.subs[].getClass().getName() == [java.lang.String]
return.parent.subs[].getClass().getName() elements == java.lang.String.class
return.parent.key.toString == "@"
return.next has only one value
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.key.toString == "zzz"
orig(this) has only one value
orig(arg1) has only one value
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg1.subs[]) == 1
size(return.subs[]) == 1
size(return.parent.subs[]) == 1
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
arg0.parent.subs[] elements == this.key
this.key in arg0.parent.subs[]
return.parent.subs[] elements == this.key
this.key in return.parent.subs[]
this.subnode.parent.subs[] elements == this.susbscript
arg0.parent.subs[] elements == this.susbscript
return.parent.subs[] elements == this.susbscript
return.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == return.susbscript
arg0.susbscript in this.subnode.next.subs[]
this.subnode.next.subs[] elements == arg0.susbscript
arg0.subs[] elements == arg0.susbscript
arg0.susbscript in return.next.subs[]
return.next.subs[] elements == arg0.susbscript
arg0.previous.subs[] elements == return.susbscript
return.susbscript in arg0.previous.subs[]
arg1.subs[] elements == arg1.susbscript
return.subs[] elements == return.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::EXIT155
this.key == this.susbscript
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg1.susbscript.getClass().getName())
this.value == arg0.next.value
this.subnode == return
this.subnode.subs == arg0.subs
this.subnode.key == arg0.key
this.subnode.susbscript == arg0.susbscript
this.subnode.value == arg0.value
this.subnode.parent.subnode == return
this.subnode.next == arg0.next
arg0.subs == return.subs
arg0.subs == orig(this.subnode.subs)
arg0.key == return.key
arg0.key == orig(this.subnode.key)
arg0.susbscript == return.susbscript
arg0.susbscript == orig(this.subnode.susbscript)
arg0.value == return.value
arg0.value == orig(this.subnode.value)
arg0.parent.subnode == return
arg0.subnode == return.subnode
arg0.next == return.next
arg0.next == orig(this.subnode.next)
arg0.next.key == orig(this.subnode.next.key)
arg0.next.isNumeric == orig(this.subnode.next.isNumeric)
arg0.next.stackLevel == orig(this.subnode.next.stackLevel)
arg0.next.subnode == orig(this.subnode.next.subnode)
arg0.next.previous == return
arg0.previous == return.previous
return == return.parent.subnode
return == orig(this.subnode)
return == orig(this.subnode.parent.subnode)
return == orig(arg0)
return == orig(arg0.parent.subnode)
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent == null
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key.toString one of { "locVarAfterNew", "zzz" }
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key.toString == "vetorLocal"
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVarAfterNew", "zzz" }
arg0.parent has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key.toString == "@"
arg0.subnode == null
arg0.next.subs has only one value
arg0.next.subs[] contains no nulls and has only one value, of length 1
arg0.next.subs[] elements has only one value
arg0.next.key has only one value
arg0.next.key.toString == "vetorLocal"
arg0.next.susbscript has only one value
arg0.next.stackLevel has only one value
arg0.next.value == null
arg0.next.subnode has only one value
arg0.next.next has only one value
arg0.next.previous has only one value
arg0.previous == null
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.key.toString one of { "locVar", "locVarAfterNew" }
arg1.subnode == null
return.subs[].getClass().getName() == [java.lang.String]
return.subs[].getClass().getName() elements == java.lang.String.class
return.key.toString one of { "locVarAfterNew", "zzz" }
return.parent.subs[] contains no nulls and has only one value, of length 1
return.parent.subs[] elements has only one value
return.parent.subs[].getClass().getName() == [java.lang.String]
return.parent.subs[].getClass().getName() elements == java.lang.String.class
return.parent.key.toString == "@"
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.key.toString == "vetorLocal"
orig(this) has only one value
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg1.subs[]) == 1
size(return.subs[]) == 1
size(return.parent.subs[]) == 1
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
arg0.parent.subs[] elements == this.key
this.key in arg0.parent.subs[]
return.parent.subs[] elements == this.key
this.key in return.parent.subs[]
this.subnode.parent.subs[] elements == this.susbscript
arg0.parent.subs[] elements == this.susbscript
return.parent.subs[] elements == this.susbscript
arg0.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.susbscript
arg0.subs[] elements == arg0.susbscript
arg0.susbscript in return.subs[]
return.subs[] elements == arg0.susbscript
arg1.subs[] elements == arg1.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::EXIT161
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
this.key == this.susbscript
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg1.susbscript.getClass().getName())
this.subnode == orig(this.subnode.next.previous)
this.subnode == orig(arg0)
this.subnode == orig(arg0.next.previous)
this.subnode.subs == arg0.subs
this.subnode.key == arg0.key
this.subnode.susbscript == arg0.susbscript
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == arg0.next.stackLevel
this.subnode.stackLevel == return.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.stackLevel == orig(arg0.next.stackLevel)
this.subnode.value == arg0.value
this.subnode.next == arg0.next
this.subnode.next.subnode == return.subnode
this.subnode.next.next == arg0.previous
arg0.subs == return.previous.subs
arg0.subs == orig(this.subnode.subs)
arg0.key == return.previous.key
arg0.key == orig(this.subnode.key)
arg0.susbscript == return.previous.susbscript
arg0.susbscript == orig(this.subnode.susbscript)
arg0.isNumeric == orig(this.subnode.next.isNumeric)
arg0.isNumeric == orig(arg0.next.isNumeric)
arg0.value == return.previous.value
arg0.value == orig(this.subnode.value)
arg0.parent == orig(this.subnode.next.parent)
arg0.parent == orig(arg0.next.parent)
arg0.subnode == return.next.subnode
arg0.next == return.subnode.parent
arg0.next == orig(this.subnode.next)
arg0.next.subs == orig(this.subnode.next.subs)
arg0.next.key == orig(this.subnode.next.key)
arg0.next.susbscript == orig(this.subnode.next.susbscript)
arg0.next.value == orig(this.subnode.next.value)
arg0.next.subnode == return.subnode
arg0.next.next == arg0.previous
arg0.previous == return.next.next
arg0.previous == orig(this.subnode.next.next)
arg0.previous == orig(arg0.next.next)
return.subnode == return.next.subnode
return.subnode == orig(this.subnode.next.subnode)
return.subnode == orig(arg0.next.subnode)
return.next.next == return.previous
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent == null
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key.toString one of { "locVar", "locVarAfterNew" }
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "locVarAfterNew" }
arg0.parent has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key.toString == "@"
arg0.subnode == null
arg0.previous == null
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.key.toString one of { "vetorLocal", "zzz" }
arg1.value == null
return.subs[].getClass().getName() == [java.lang.String]
return.subs[].getClass().getName() elements == java.lang.String.class
return.key.toString one of { "locVarAfterNew", "vetorLocal" }
return.parent.subs[] contains no nulls and has only one value, of length 1
return.parent.subs[] elements has only one value
return.parent.subs[].getClass().getName() == [java.lang.String]
return.parent.subs[].getClass().getName() elements == java.lang.String.class
return.parent.key.toString == "@"
return.next.subs has only one value
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.key has only one value
return.next.key.toString == "zzz"
return.next.susbscript has only one value
return.next.stackLevel == null
return.next.value has only one value
return.next.subnode == null
return.next.next == null
orig(this) has only one value
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg1.subs[]) == 1
size(return.subs[]) == 1
size(return.parent.subs[]) == 1
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
arg0.parent.subs[] elements == this.key
this.key in arg0.parent.subs[]
return.parent.subs[] elements == this.key
this.key in return.parent.subs[]
this.subnode.parent.subs[] elements == this.susbscript
arg0.parent.subs[] elements == this.susbscript
return.parent.subs[] elements == this.susbscript
arg0.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.susbscript
arg0.subs[] elements == arg0.susbscript
arg0.subs[] elements == return.previous.susbscript
return.previous.susbscript in arg0.subs[]
arg0.susbscript in return.previous.subs[]
return.previous.subs[] elements == arg0.susbscript
arg1.subs[] elements == arg1.susbscript
return.subs[] elements == return.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::EXIT163
this.value == this.subnode.next.value
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.next.subs == arg0.subs
this.subnode.next.key == arg0.key
this.subnode.next.susbscript == arg0.susbscript
this.subnode.next.value == arg0.value
this.subnode.next.subnode == arg0.subnode
this.subnode.next.next == arg0.next
this.subnode.next.previous == arg0.previous
arg0.subs == return.subs
arg0.key == return.key
arg0.susbscript == return.susbscript
arg0.value == return.value
arg0.subnode == return.subnode
arg0.next == return.next
arg0.previous == return.previous
arg0.previous.isNumeric == orig(this.subnode.next.isNumeric)
arg0.previous.parent == orig(this.subnode.next.parent)
return == orig(arg0)
this.subnode.key.toString one of { "locVar", "vetorLocal~xpto~34~A" }
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next == null
this.subnode.next.previous has only one value
arg0.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
arg0.next == null
arg0.previous.subs has only one value
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.key has only one value
arg0.previous.key.toString == "locVar"
arg0.previous.susbscript has only one value
arg0.previous.value has only one value
arg1.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
arg1.stackLevel == null
arg1.value == null
arg1.subnode == null
return.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
arg0.susbscript in this.subnode.next.subs[]
this.subnode.next.subs[] elements == arg0.susbscript
arg0.subs[] elements == this.subnode.next.susbscript
this.subnode.next.susbscript in arg0.subs[]
return.subs[] elements == this.subnode.next.susbscript
this.subnode.next.susbscript in return.subs[]
arg0.susbscript in return.subs[]
arg0.susbscript in return.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.findPrevious(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.subs == this.parent.subnode.subs
this.subs == arg0.parent.subs
this.subs == return.parent.subs
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs == orig(arg0.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == arg1.subs.getClass().getName()
this.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg1.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.parent.subnode.key
this.key == arg0.parent.key
this.key == return.parent.key
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key == orig(arg0.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == arg0.parent.susbscript
this.susbscript == return.parent.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript == orig(arg0.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg1.value.getClass().getName()
this.susbscript.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == return.parent.isNumeric
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(arg0.parent.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.subnode.parent.stackLevel)
this.value == this.parent.subnode.value
this.value == orig(this.value)
this.parent == this.parent.parent.subnode
this.parent == arg0.parent.parent
this.parent == return.parent.parent
this.parent == orig(this.parent)
this.parent == orig(this.subnode.parent.parent)
this.parent == orig(arg0.parent.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.parent.susbscript.getClass().getName() == return.value.getClass().getName()
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.parent.subnode.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.subnode == orig(this.parent.subnode.parent)
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.previous == orig(this.parent.parent.previous)
this.parent.subnode == arg0.parent
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.isNumeric == orig(this.parent.subnode.isNumeric)
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.subnode == return
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.subnode == orig(arg0)
this.parent.subnode.next == this.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == arg0.parent.subnode
this.subnode == arg0.next.previous
this.subnode == return.parent.subnode
this.subnode == return.next.previous
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(arg0.parent.subnode)
this.subnode.subs == arg0.previous.subs
this.subnode.subs == return.previous.subs
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == arg0.previous.key
this.subnode.key == return.previous.key
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.susbscript == return.previous.susbscript
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.isNumeric == arg0.isNumeric
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == arg0.previous.value
this.subnode.value == return.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.parent == arg0.parent
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.previous == this.next
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.next == arg0.subnode.parent
this.subnode.next == arg0.previous.next
this.subnode.next == return.subnode.parent
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == arg0.next.subs
this.subnode.next.subs == return.next.subs
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == arg0.next.key
this.subnode.next.key == return.next.key
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == arg0.next.susbscript
this.subnode.next.susbscript == return.next.susbscript
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg1.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == arg0.isNumeric
this.subnode.next.isNumeric == arg0.next.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.isNumeric == return.next.isNumeric
this.subnode.next.isNumeric == return.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == arg0.next.stackLevel
this.subnode.next.stackLevel == return.next.stackLevel
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == arg0.next.value
this.subnode.next.value == return.next.value
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
this.subnode.next.parent == arg0.parent
this.subnode.next.parent == arg0.next.parent
this.subnode.next.parent == arg0.previous.parent
this.subnode.next.parent == return.next.parent
this.subnode.next.parent == return.previous.parent
this.subnode.next.parent == orig(this)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == arg0.next.subnode
this.subnode.next.subnode == return.next.subnode
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == arg0.next.next
this.subnode.next.next == return.next.next
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == arg0.next.previous
this.subnode.next.previous == return.next.previous
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous
this.next == orig(this.subnode.parent.next)
this.next == orig(this.subnode.parent.previous)
this.next == orig(this.next)
this.next == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg1.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.value.getClass().getName()
arg0.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
arg0.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.susbscript.getClass().getName() == orig(arg1.susbscript.getClass().getName())
arg0.isNumeric == arg0.next.isNumeric
arg0.isNumeric == arg0.previous.isNumeric
arg0.isNumeric == return.isNumeric
arg0.isNumeric == return.next.isNumeric
arg0.isNumeric == return.previous.isNumeric
arg0.isNumeric == orig(this.subnode.isNumeric)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.next.value.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg1.value.getClass().getName()
arg0.value.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
arg0.value.getClass().getName() == return.value.getClass().getName()
arg0.value.getClass().getName() == return.subnode.susbscript.getClass().getName()
arg0.value.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent == return.parent
arg0.parent == return.next.parent
arg0.parent == return.previous.parent
arg0.parent == orig(this)
arg0.parent == orig(this.subnode.parent)
arg0.parent == orig(arg0.parent)
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == return.subnode.subs
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == return.subnode.subs.getClass().getName()
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == return.subnode.key
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == return.subnode.susbscript
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
arg0.subnode.isNumeric == return.subnode.isNumeric
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == arg0.previous.next
arg0.subnode.parent == return
arg0.subnode.parent == return.subnode.parent
arg0.subnode.parent == orig(arg0)
arg0.subnode.subnode == return.subnode.subnode
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == return.next.subs
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
arg0.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
arg0.next.subs.getClass().getName() == return.next.subs.getClass().getName()
arg0.next.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == return.next.key
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == return.next.susbscript
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg1.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
arg0.next.susbscript.getClass().getName() == return.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
arg0.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.next.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
arg0.next.isNumeric == return.next.isNumeric
arg0.next.isNumeric == return.previous.isNumeric
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == return.next.stackLevel
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == return.next.value
arg0.next.value == orig(arg0.next.value)
arg0.next.value.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
arg0.next.value.getClass().getName() == return.value.getClass().getName()
arg0.next.value.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.next.parent == return.next.parent
arg0.next.parent == return.previous.parent
arg0.next.parent == orig(this)
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == return.next.subnode
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == return.next.next
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == return.next.previous
arg0.next.previous == orig(arg0)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == return.previous.subs
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs.getClass().getName() == arg1.subnode.subs.getClass().getName()
arg0.previous.subs.getClass().getName() == return.subnode.subs.getClass().getName()
arg0.previous.subs.getClass().getName() == return.next.subs.getClass().getName()
arg0.previous.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.key == return.previous.key
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == return.previous.susbscript
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == arg1.subnode.susbscript.getClass().getName()
arg0.previous.susbscript.getClass().getName() == return.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
arg0.previous.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
arg0.previous.isNumeric == return.next.isNumeric
arg0.previous.isNumeric == return.previous.isNumeric
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == return.previous.value
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == return.next.parent
arg0.previous.parent == return.previous.parent
arg0.previous.parent == orig(this)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.next == return.subnode.parent
arg0.previous.next == orig(arg0)
arg0.previous.previous == orig(arg0.previous.previous)
arg1.subs == orig(arg1.subs)
arg1.subs[] == orig(arg1.subs[])
arg1.key == orig(arg1.key)
arg1.key.toString == orig(arg1.key.toString)
arg1.susbscript == orig(arg1.susbscript)
arg1.isNumeric == orig(arg1.isNumeric)
arg1.stackLevel == orig(arg1.stackLevel)
arg1.value == orig(arg1.value)
arg1.value.getClass().getName() == return.value.getClass().getName()
arg1.value.getClass().getName() == return.next.susbscript.getClass().getName()
arg1.parent == orig(arg1.parent)
arg1.subnode == orig(arg1.subnode)
arg1.subnode.subs == orig(arg1.subnode.subs)
arg1.subnode.subs.getClass().getName() == return.next.subs.getClass().getName()
arg1.subnode.subs.getClass().getName() == orig(arg1.subnode.subs.getClass().getName())
arg1.subnode.subs[] == orig(arg1.subnode.subs[])
arg1.subnode.key == orig(arg1.subnode.key)
arg1.subnode.key.toString == orig(arg1.subnode.key.toString)
arg1.subnode.susbscript == orig(arg1.subnode.susbscript)
arg1.subnode.susbscript.getClass().getName() == return.value.getClass().getName()
arg1.subnode.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg1.subnode.susbscript.getClass().getName() == return.next.value.getClass().getName()
arg1.subnode.susbscript.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
arg1.subnode.susbscript.getClass().getName() == orig(arg1.subnode.susbscript.getClass().getName())
arg1.subnode.isNumeric == orig(arg1.subnode.isNumeric)
arg1.subnode.stackLevel == orig(arg1.subnode.stackLevel)
arg1.subnode.value == orig(arg1.subnode.value)
arg1.subnode.parent == orig(arg1)
arg1.subnode.subnode == orig(arg1.subnode.subnode)
arg1.subnode.next == orig(arg1.subnode.next)
arg1.subnode.previous == orig(arg1.subnode.previous)
arg1.next == orig(arg1.next)
arg1.previous == orig(arg1.previous)
return == return.subnode.parent
return == return.next.previous
return.value.getClass().getName() == return.next.susbscript.getClass().getName()
return.subnode.subs.getClass().getName() == return.previous.subs.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.next.parent == orig(this)
return.previous.parent == orig(this)
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.key.toString one of { "@", "vetorLocal~xpto~34" }
this.stackLevel == null
this.value == null
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "vetorLocal~xpto"
this.parent.susbscript has only one value
this.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent has only one value
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.parent.subs[] elements has only one value
this.parent.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.parent.previous has only one value
this.parent.subnode has only one value
this.parent.subnode.subs has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 3
this.parent.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.parent.subnode.key has only one value
this.parent.subnode.key.toString == "vetorLocal~xpto~34"
this.parent.subnode.susbscript has only one value
this.parent.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.parent.subnode.isNumeric == true
this.parent.subnode.stackLevel == null
this.parent.subnode.value == null
this.parent.subnode.subnode has only one value
this.parent.subnode.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.stackLevel == null
this.subnode.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.subnode.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.subnode.subnode == null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.parent has only one value
this.subnode.previous == null
this.next == null
arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.susbscript.getClass().getName() == java.lang.String.class
arg0.isNumeric == false
arg0.stackLevel == null
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
arg0.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.value.getClass().getName() == java.lang.String.class
arg0.next.parent has only one value
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key.toString one of { "locVar", "locVarAfterNew" }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.previous == null
arg1.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg1.isNumeric == false
arg1.value.getClass().getName() == java.lang.String.class
arg1.parent == null
arg1.subnode.subs has only one value
arg1.subnode.subs.getClass().getName() == java.lang.Object[].class
arg1.subnode.subs[] contains no nulls and has only one value, of length 2
arg1.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg1.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg1.subnode.key has only one value
arg1.subnode.key.toString == "vetorLocal~xpto"
arg1.subnode.susbscript has only one value
arg1.subnode.susbscript.getClass().getName() == java.lang.String.class
arg1.subnode.isNumeric == false
arg1.subnode.stackLevel == null
arg1.subnode.value == null
arg1.subnode.parent has only one value
arg1.subnode.subnode has only one value
arg1.subnode.next == null
arg1.subnode.previous == null
arg1.next == null
arg1.previous == null
return.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.stackLevel == null
return.value.getClass().getName() == java.lang.String.class
return.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
return.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
return.parent.stackLevel == null
return.parent.value == null
return.parent.next == null
return.parent.previous == null
return.subnode.subs has only one value
return.subnode.subs.getClass().getName() == java.lang.Object[].class
return.subnode.subs[] contains no nulls and has only one value, of length 2
return.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
return.subnode.subs[].getClass().getName() elements == java.lang.String.class
return.subnode.key has only one value
return.subnode.key.toString == "vetorLocal~xpto"
return.subnode.susbscript has only one value
return.subnode.susbscript.getClass().getName() == java.lang.String.class
return.subnode.isNumeric == false
return.subnode.stackLevel == null
return.subnode.value == null
return.subnode.parent has only one value
return.subnode.subnode has only one value
return.subnode.next == null
return.subnode.previous == null
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key.toString one of { "vetorLocal", "zzz" }
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.parent has only one value
return.next.previous has only one value
return.previous.subs has only one value
return.previous.subs[] contains no nulls and has only one value, of length 1
return.previous.subs[] elements has only one value
return.previous.subs[].getClass().getName() == [java.lang.String]
return.previous.subs[].getClass().getName() elements == java.lang.String.class
return.previous.key has only one value
return.previous.key.toString == "locVar"
return.previous.susbscript has only one value
return.previous.isNumeric == false
return.previous.stackLevel == null
return.previous.value has only one value
return.previous.parent has only one value
return.previous.subnode == null
return.previous.previous == null
size(this.subs[]) one of { 1, 3 }
size(this.parent.subs[]) == 2
size(this.parent.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 3
size(this.subnode.subs[]) one of { 1, 4 }
size(this.subnode.parent.subs[]) one of { 1, 3 }
size(this.subnode.next.subs[]) == 1
size(arg0.subs[]) one of { 1, 4 }
size(arg0.parent.subs[]) one of { 1, 3 }
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
size(arg1.subs[]) one of { 1, 4 }
size(arg1.subnode.subs[]) == 2
size(return.subs[]) one of { 1, 4 }
size(return.parent.subs[]) one of { 1, 3 }
size(return.subnode.subs[]) == 2
size(return.next.subs[]) == 1
size(return.previous.subs[]) == 1
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.value.getClass().getName()
this.susbscript in this.subs[]
this.parent.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.parent.subnode.susbscript in this.subs[]
arg0.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.value.getClass().getName() in this.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.parent.subnode.subs[]
this.susbscript in arg0.parent.subs[]
this.susbscript in return.parent.subs[]
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.subnode.next.susbscript in this.parent.subs[]
this.subnode.next.value in this.parent.subs[]
arg0.subnode.susbscript in this.parent.subs[]
arg0.previous.susbscript in this.parent.subs[]
arg0.previous.value in this.parent.subs[]
return.subnode.susbscript in this.parent.subs[]
return.previous.susbscript in this.parent.subs[]
return.previous.value in this.parent.subs[]
this.subnode.next.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.subnode.next.subs[]
this.parent.key in arg0.subnode.subs[]
this.parent.key in arg0.previous.subs[]
this.parent.key in return.subnode.subs[]
this.parent.key in return.previous.subs[]
this.parent.susbscript in this.parent.subnode.subs[]
this.parent.susbscript in this.subnode.subs[]
this.parent.susbscript in this.subnode.parent.subs[]
this.parent.susbscript in arg0.subs[]
this.parent.susbscript in arg0.parent.subs[]
this.parent.susbscript in arg0.subnode.subs[]
this.parent.susbscript in arg0.previous.subs[]
this.parent.susbscript in arg1.subs[]
this.parent.susbscript in return.subs[]
this.parent.susbscript in return.parent.subs[]
this.parent.susbscript in return.subnode.subs[]
this.parent.susbscript in return.previous.subs[]
this.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.parent.subs[] elements == this.parent.parent.susbscript
this.subnode.next.susbscript in this.parent.parent.subs[]
this.subnode.next.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
arg0.previous.susbscript in this.parent.parent.subs[]
arg0.previous.value in this.parent.parent.subs[]
return.subnode.susbscript in this.parent.parent.subs[]
return.previous.susbscript in this.parent.parent.subs[]
return.previous.value in this.parent.parent.subs[]
this.subnode.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.next.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.key in arg0.previous.subs[]
this.parent.parent.key in return.subnode.subs[]
this.parent.parent.key in return.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in arg0.subs[]
this.parent.parent.susbscript in arg0.parent.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript in arg0.previous.subs[]
this.parent.parent.susbscript in arg1.subs[]
this.parent.parent.susbscript in return.subs[]
this.parent.parent.susbscript in return.parent.subs[]
this.parent.parent.susbscript in return.subnode.subs[]
this.parent.parent.susbscript in return.previous.subs[]
this.subnode.next.susbscript in this.parent.subnode.subs[]
this.subnode.next.value in this.parent.subnode.subs[]
arg0.subnode.susbscript in this.parent.subnode.subs[]
arg0.previous.susbscript in this.parent.subnode.subs[]
arg0.previous.value in this.parent.subnode.subs[]
return.subnode.susbscript in this.parent.subnode.subs[]
return.previous.susbscript in this.parent.subnode.subs[]
return.previous.value in this.parent.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.key in this.subnode.next.subs[]
this.parent.subnode.key in arg0.subnode.subs[]
this.parent.subnode.key in arg0.previous.subs[]
this.parent.subnode.key in return.subnode.subs[]
this.parent.subnode.key in return.previous.subs[]
this.parent.subnode.susbscript in this.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.parent.subs[]
this.parent.subnode.susbscript in arg0.subs[]
this.parent.subnode.susbscript in arg0.parent.subs[]
this.parent.subnode.susbscript in arg0.subnode.subs[]
this.parent.subnode.susbscript in arg0.previous.subs[]
this.parent.subnode.susbscript in arg1.subs[]
this.parent.subnode.susbscript in return.subs[]
this.parent.subnode.susbscript in return.parent.subs[]
this.parent.subnode.susbscript in return.subnode.subs[]
this.parent.subnode.susbscript in return.previous.subs[]
this.parent.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.subnode.value in this.subnode.next.subs[]
this.parent.subnode.value in arg0.subnode.subs[]
this.parent.subnode.value in arg0.previous.subs[]
this.parent.subnode.value in return.subnode.subs[]
this.parent.subnode.value in return.previous.subs[]
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
return.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == return.previous.susbscript
arg0.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
return.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in return.previous.subs[]
arg0.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
arg0.next.susbscript in this.subnode.next.subs[]
this.subnode.next.subs[] elements == arg0.next.susbscript
return.next.susbscript in this.subnode.next.subs[]
this.subnode.next.subs[] elements == return.next.susbscript
arg0.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg1.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
arg0.next.subs[] elements == this.subnode.next.susbscript
this.subnode.next.susbscript in arg0.next.subs[]
this.subnode.next.susbscript in return.subnode.subs[]
return.next.subs[] elements == this.subnode.next.susbscript
this.subnode.next.susbscript in return.next.subs[]
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg1.value.getClass().getName() in arg0.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
return.value.getClass().getName() in arg0.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg1.subs[].getClass().getName()
arg0.value.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in return.subs[].getClass().getName()
arg0.value.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in return.next.subs[].getClass().getName()
arg0.value.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg1.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
return.susbscript in arg0.subnode.subs[]
return.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
return.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript in return.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript in arg0.next.subs[]
arg0.next.subs[] elements == return.next.susbscript
return.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg1.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
return.value.getClass().getName() in arg0.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript in return.subnode.subs[]
arg0.next.susbscript in return.next.subs[]
return.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg1.subs[].getClass().getName()
arg0.next.value.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.next.value.getClass().getName() in return.subs[].getClass().getName()
arg0.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.next.value.getClass().getName() in return.next.subs[].getClass().getName()
arg0.next.value.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.subs[] elements == return.previous.susbscript
return.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in return.previous.subs[]
return.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg1.susbscript in arg1.subs[]
arg1.value.getClass().getName() in arg1.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
return.value.getClass().getName() in arg1.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg1.susbscript in arg1.subnode.subs[]
arg1.value.getClass().getName() in return.subs[].getClass().getName()
arg1.value.getClass().getName() in return.parent.subs[].getClass().getName()
arg1.value.getClass().getName() in return.next.subs[].getClass().getName()
arg1.subnode.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
arg1.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
arg1.subnode.susbscript in arg1.subnode.subs[]
return.subnode.susbscript in arg1.subnode.subs[]
return.previous.susbscript in arg1.subnode.subs[]
return.previous.value in arg1.subnode.subs[]
arg1.subnode.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
return.value.getClass().getName() in arg1.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in arg1.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg1.subnode.subs[].getClass().getName()
arg1.subnode.susbscript in return.subnode.subs[]
arg1.subnode.susbscript in return.previous.subs[]
arg1.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg1.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.susbscript in return.subs[]
return.value.getClass().getName() in return.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.susbscript in return.subnode.subs[]
return.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.value.getClass().getName() in return.next.subs[].getClass().getName()
return.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript in return.subnode.subs[]
return.next.susbscript in return.subnode.subs[]
return.next.value in return.subnode.subs[]
return.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.susbscript in return.next.subs[]
return.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs[] elements == return.next.susbscript
return.next.susbscript in return.next.subs[]
return.previous.susbscript in return.next.subs[]
return.previous.value in return.next.subs[]
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript in return.previous.subs[]
return.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.value in return.previous.subs[]
return.previous.subs[] elements == return.previous.susbscript
return.previous.susbscript in return.previous.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getFirstLevelSubnodes():::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.key == this.susbscript
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.value == this.subnode.next.value
this.subnode.stackLevel == this.subnode.next.stackLevel
this has only one value
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.value == null
this.parent == null
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "locVar"
this.subnode.susbscript has only one value
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.subnode has only one value
this.subnode.next.next has only one value
this.subnode.previous == null
this.next == null
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(this.subnode.next.subs[]) == 1
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
this.subnode.parent.subs[] elements == this.susbscript
this.subnode.subs[] elements == this.subnode.susbscript
this.subnode.next.subs[] elements == this.subnode.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getFirstLevelSubnodes():::EXIT255
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getFirstLevelSubnodes():::EXIT
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.susbscript
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.subnode.parent.stackLevel)
this.value == this.subnode.next.value
this.value == orig(this.value)
this.value == orig(this.subnode.next.value)
this.parent == orig(this.parent)
this.parent == orig(this.subnode.parent.parent)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == orig(this)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.previous == orig(this.subnode.previous)
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.value == null
this.parent == null
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "locVar"
this.subnode.susbscript has only one value
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.subnode has only one value
this.subnode.next.next has only one value
this.subnode.previous == null
this.next == null
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node]
return[].getClass().getName() elements == br.com.innovatium.mumps2java.datastructure.Node.class
return.getClass().getName() == java.util.ArrayList.class
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(this.subnode.next.subs[]) == 1
size(return[]) == 3
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
this.subnode.parent.subs[] elements == this.susbscript
this.subnode.subs[] elements == this.subnode.susbscript
this.subnode.next.subs[] elements == this.subnode.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getKey():::ENTER
this == this.next.previous
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.value.getClass().getName() == this.parent.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.subnode == this.next.parent
this.parent.parent.subnode == this.previous.parent
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.previous.subnode.parent
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.previous == this.next.parent.subnode
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subnode.parent == this.next.previous.subnode
this.next == this.previous.previous.previous
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent == this.previous.parent
this.next.parent.subs == this.previous.parent.subs
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.parent == this.previous.parent.parent
this.next.parent.subnode == this.previous.parent.subnode
this.next.parent.subnode == this.previous.next.previous
this.next.next == this.previous.previous
this.next.previous == this.previous.next
this.next.previous.subs == this.previous.next.subs
this.next.previous.key == this.previous.next.key
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.stackLevel == this.previous.next.stackLevel
this.next.previous.value == this.previous.next.value
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.next == this.previous.next.next
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == this.previous.next.previous
this.previous.next.next == this.previous.previous.previous
this.susbscript != null
this.parent.subnode.previous == null
this.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.stackLevel == null
this.subnode.parent.key.toString one of { "vetorLocal", "vetorLocal~xpto", "vetorLocal~xpto~34" }
this.subnode.subnode.subs[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.Integer], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.subnode.key.toString one of { "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 4
this.subnode.next.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal~xpto~34~B"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.parent has only one value
this.subnode.next.subnode == null
this.subnode.next.next == null
this.subnode.next.previous has only one value
this.subnode.previous == null
this.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
this.next.stackLevel == null
this.next.subnode == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "vetorLocal"
this.next.next.susbscript has only one value
this.next.next.stackLevel has only one value
this.next.next.value == null
this.next.next.subnode has only one value
this.next.next.next has only one value
this.next.next.previous has only one value
this.previous.stackLevel == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
size(this.subnode.subs[]) one of { 2, 3, 4 }
size(this.subnode.subnode.subs[]) one of { 3, 4 }
size(this.subnode.next.subs[]) == 4
this.susbscript in this.subs[]
this.susbscript in this.subnode.subs[]
this.susbscript in this.subnode.subnode.subs[]
this.susbscript in this.subnode.next.subs[]
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.next.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getKey():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == return
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.value.getClass().getName() == this.parent.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.value.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == orig(this.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.parent.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.next.parent
this.parent.parent.subnode == this.previous.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.previous == orig(this.parent.parent.previous)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.parent.subnode.isNumeric == orig(this.parent.subnode.isNumeric)
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.parent == orig(this.parent.subnode.parent)
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.previous.subnode.parent
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == orig(this.parent.next)
this.parent.next.subs == orig(this.parent.next.subs)
this.parent.next.subs[] == orig(this.parent.next.subs[])
this.parent.next.key == orig(this.parent.next.key)
this.parent.next.key.toString == orig(this.parent.next.key.toString)
this.parent.next.susbscript == orig(this.parent.next.susbscript)
this.parent.next.isNumeric == orig(this.parent.next.isNumeric)
this.parent.next.stackLevel == orig(this.parent.next.stackLevel)
this.parent.next.value == orig(this.parent.next.value)
this.parent.next.parent == orig(this.parent.next.parent)
this.parent.next.subnode == orig(this.parent.next.subnode)
this.parent.next.next == orig(this.parent.next.next)
this.parent.next.previous == orig(this.parent.next.previous)
this.parent.previous == orig(this.parent.previous)
this.parent.previous.subs == orig(this.parent.previous.subs)
this.parent.previous.subs.getClass().getName() == orig(this.parent.previous.subs.getClass().getName())
this.parent.previous.subs[] == orig(this.parent.previous.subs[])
this.parent.previous.key == orig(this.parent.previous.key)
this.parent.previous.key.toString == orig(this.parent.previous.key.toString)
this.parent.previous.susbscript == orig(this.parent.previous.susbscript)
this.parent.previous.susbscript.getClass().getName() == orig(this.parent.previous.susbscript.getClass().getName())
this.parent.previous.susbscript.getClass().getName() == orig(this.parent.previous.value.getClass().getName())
this.parent.previous.isNumeric == orig(this.parent.previous.isNumeric)
this.parent.previous.stackLevel == orig(this.parent.previous.stackLevel)
this.parent.previous.value == orig(this.parent.previous.value)
this.parent.previous.parent == orig(this.parent.previous.parent)
this.parent.previous.subnode == orig(this.parent.previous.subnode)
this.parent.previous.next == orig(this.parent.previous.next)
this.parent.previous.previous == orig(this.parent.previous.previous)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key == return
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.parent.subnode
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.value.getClass().getName() == orig(this.subnode.subnode.value.getClass().getName())
this.subnode.subnode.parent == this.next.previous.subnode
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.parent == orig(this)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == this.previous.parent
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == this.previous.parent.subs
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == this.previous.parent.parent
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.previous.parent.subnode
this.next.parent.subnode == this.previous.next.previous
this.next.parent.subnode == orig(this.next.parent.subnode)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.next == this.previous.previous
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.previous == this.previous.next
this.next.previous == orig(this)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == this.previous.next.subs
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == this.previous.next.key
this.next.previous.key == return
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == this.previous.next.stackLevel
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == this.previous.next.value
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == this.previous.next.next
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == this.previous.next.previous
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.value.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.subnode.subs[] == orig(this.previous.subnode.subs[])
this.previous.subnode.key == orig(this.previous.subnode.key)
this.previous.subnode.key.toString == orig(this.previous.subnode.key.toString)
this.previous.subnode.isNumeric == orig(this.previous.subnode.isNumeric)
this.previous.subnode.stackLevel == orig(this.previous.subnode.stackLevel)
this.previous.subnode.value == orig(this.previous.subnode.value)
this.previous.subnode.subnode == orig(this.previous.subnode.subnode)
this.previous.subnode.next == orig(this.previous.subnode.next)
this.previous.subnode.previous == orig(this.previous.subnode.previous)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == return
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.stackLevel == orig(this.previous.next.stackLevel)
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.value.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous.previous
this.previous.next.next == orig(this.previous.next.next)
this.previous.next.previous == orig(this.previous.next.previous)
this.previous.previous == orig(this.previous.previous)
this.previous.previous.subs[] == orig(this.previous.previous.subs[])
this.previous.previous.key.toString == orig(this.previous.previous.key.toString)
this.previous.previous.stackLevel == orig(this.previous.previous.stackLevel)
this.previous.previous.subnode == orig(this.previous.previous.subnode)
return == orig(this.key)
this.susbscript != null
this.parent.subnode.previous == null
this.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.stackLevel == null
this.subnode.parent.key.toString one of { "vetorLocal", "vetorLocal~xpto", "vetorLocal~xpto~34" }
this.subnode.subnode.subs[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.Integer], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.subnode.key.toString one of { "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 4
this.subnode.next.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal~xpto~34~B"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.parent has only one value
this.subnode.next.subnode == null
this.subnode.next.next == null
this.subnode.next.previous has only one value
this.subnode.previous == null
this.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
this.next.stackLevel == null
this.next.subnode == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "vetorLocal"
this.next.next.susbscript has only one value
this.next.next.stackLevel has only one value
this.next.next.value == null
this.next.next.subnode has only one value
this.next.next.next has only one value
this.next.next.previous has only one value
this.previous.stackLevel == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
return != null
size(this.subnode.subs[]) one of { 2, 3, 4 }
size(this.subnode.subnode.subs[]) one of { 3, 4 }
size(this.subnode.next.subs[]) == 4
this.susbscript in this.subs[]
this.susbscript in this.subnode.subs[]
this.susbscript in this.subnode.subnode.subs[]
this.susbscript in this.subnode.next.subs[]
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.next.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getNext():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.stackLevel == this.previous.stackLevel
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.subnode == this.next.parent
this.parent.parent.subnode == this.previous.parent
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.next == this.previous.subnode.parent
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subnode.parent == this.next.previous.subnode
this.next == this.previous.previous.previous
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.value.getClass().getName() == this.previous.value.getClass().getName()
this.next.value.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent == this.previous.parent
this.next.parent.subs == this.previous.parent.subs
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.parent == this.previous.parent.parent
this.next.parent.subnode == this.previous.parent.subnode
this.next.parent.subnode == this.previous.next.previous
this.next.next == this.previous.previous
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.previous == this.previous.next
this.next.previous.subs == this.previous.next.subs
this.next.previous.key == this.previous.next.key
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.stackLevel == this.previous.stackLevel
this.next.previous.value == this.previous.next.value
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.next == this.previous.next.next
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == this.previous.next.previous
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.next.next == this.previous.previous.previous
this.susbscript != null
this.parent != null
this.parent.parent.key.toString one of { "@", "vetorLocal", "vetorLocal~xpto" }
this.parent.previous.subs has only one value
this.parent.previous.subs[] contains no nulls and has only one value, of length 1
this.parent.previous.subs[] elements has only one value
this.parent.previous.key has only one value
this.parent.previous.key.toString == "locVarAfterNew"
this.parent.previous.susbscript has only one value
this.parent.previous.value has only one value
this.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.stackLevel == null
this.subnode.parent.key.toString one of { "vetorLocal", "vetorLocal~xpto", "vetorLocal~xpto~34" }
this.subnode.subnode.subs[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.Integer], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.subnode.key.toString one of { "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 4
this.subnode.next.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal~xpto~34~B"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.parent has only one value
this.subnode.next.subnode == null
this.subnode.next.next == null
this.subnode.next.previous has only one value
this.subnode.previous == null
this.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
this.next.stackLevel == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
size(this.subnode.subs[]) one of { 2, 3, 4 }
size(this.subnode.subnode.subs[]) one of { 3, 4 }
size(this.subnode.next.subs[]) == 4
this.susbscript in this.subs[]
this.susbscript in this.subnode.subs[]
this.susbscript in this.subnode.subnode.subs[]
this.susbscript in this.subnode.next.subs[]
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.next.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getNext():::EXIT
this.subs == return.previous.subs
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == return.previous.key
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == return.previous.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == return.previous.isNumeric
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.value == return.previous.value
this.value == orig(this.value)
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.value.getClass().getName()
this.value.getClass().getName() == return.susbscript.getClass().getName()
this.value.getClass().getName() == return.value.getClass().getName()
this.value.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == return.previous.value.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == return.parent
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == return.parent.subs
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == return.parent.key
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == return.parent.susbscript
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == return.parent.isNumeric
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == return.parent.parent
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == return.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.previous.parent
this.parent.parent.subnode == return.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.previous == orig(this.parent.parent.previous)
this.parent.subnode == return.parent.subnode
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == return.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.previous.subnode.parent
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == orig(this.parent.next)
this.parent.next.subs == orig(this.parent.next.subs)
this.parent.next.subs[] == orig(this.parent.next.subs[])
this.parent.next.key == orig(this.parent.next.key)
this.parent.next.key.toString == orig(this.parent.next.key.toString)
this.parent.next.susbscript == orig(this.parent.next.susbscript)
this.parent.next.isNumeric == orig(this.parent.next.isNumeric)
this.parent.next.stackLevel == orig(this.parent.next.stackLevel)
this.parent.next.value == orig(this.parent.next.value)
this.parent.next.parent == orig(this.parent.next.parent)
this.parent.next.parent == orig(this.parent.previous.parent)
this.parent.next.subnode == orig(this.parent.next.subnode)
this.parent.next.next == orig(this.parent.next.next)
this.parent.next.previous == orig(this.parent.next.previous)
this.parent.next.previous == orig(this.parent.previous.next)
this.parent.previous == orig(this.parent.previous)
this.parent.previous.subs == orig(this.parent.previous.subs)
this.parent.previous.subs[] == orig(this.parent.previous.subs[])
this.parent.previous.key == orig(this.parent.previous.key)
this.parent.previous.key.toString == orig(this.parent.previous.key.toString)
this.parent.previous.susbscript == orig(this.parent.previous.susbscript)
this.parent.previous.isNumeric == orig(this.parent.previous.isNumeric)
this.parent.previous.stackLevel == orig(this.parent.previous.stackLevel)
this.parent.previous.value == orig(this.parent.previous.value)
this.parent.previous.subnode == orig(this.parent.previous.subnode)
this.parent.previous.previous == orig(this.parent.previous.previous)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == return.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.parent == return.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == return.previous.subs
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == return.previous.key
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == return.previous.susbscript
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.parent.isNumeric == return.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == return.parent
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.next == return
this.subnode.parent.next == return.previous.next
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.value.getClass().getName() == orig(this.subnode.subnode.value.getClass().getName())
this.subnode.subnode.parent == this.next.previous.subnode
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.parent == orig(this)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == return
this.next.subs == return.subs
this.next.subs.getClass().getName() == return.subs.getClass().getName()
this.next.subs[] == orig(this.next.subs[])
this.next.key == return.key
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == return.susbscript
this.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.next.isNumeric == return.isNumeric
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == return.value
this.next.value.getClass().getName() == return.value.getClass().getName()
this.next.parent == return.parent
this.next.parent.subs == return.parent.subs
this.next.parent.subs.getClass().getName() == return.subs.getClass().getName()
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == return.parent.key
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == return.parent.susbscript
this.next.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.next.parent.isNumeric == return.parent.isNumeric
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == return.parent.parent
this.next.parent.subnode == return.parent.subnode
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == return
this.next.subnode.parent == return.previous.next
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.parent == orig(this.next.next.previous)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == this.previous.previous
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.value.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.next.next.parent == return.parent
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.previous == return.previous
this.next.previous.subs == return.previous.subs
this.next.previous.subs.getClass().getName() == return.subs.getClass().getName()
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == return.previous.key
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == return.previous.susbscript
this.next.previous.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.next.previous.isNumeric == return.previous.isNumeric
this.next.previous.stackLevel == this.previous.stackLevel
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == return.previous.value
this.next.previous.value.getClass().getName() == return.previous.value.getClass().getName()
this.next.previous.parent == return.parent
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == return.previous.next
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == this.previous.next.previous
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == return.subs.getClass().getName()
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == return.value.getClass().getName()
this.previous.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == return.previous.isNumeric
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.value.getClass().getName() == return.susbscript.getClass().getName()
this.previous.value.getClass().getName() == return.value.getClass().getName()
this.previous.value.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.value.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.parent == return.parent
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == return.parent.subs
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == return.parent.key
this.previous.parent.key == return.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == return.parent.key
this.previous.parent.susbscript == return.parent.susbscript
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == return.value.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.parent.isNumeric == return.parent.isNumeric
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == return.parent.parent
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == return.parent.subnode
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.subnode.subs[] == orig(this.previous.subnode.subs[])
this.previous.subnode.key == orig(this.previous.subnode.key)
this.previous.subnode.key.toString == orig(this.previous.subnode.key.toString)
this.previous.subnode.isNumeric == orig(this.previous.subnode.isNumeric)
this.previous.subnode.stackLevel == orig(this.previous.subnode.stackLevel)
this.previous.subnode.value == orig(this.previous.subnode.value)
this.previous.subnode.subnode == orig(this.previous.subnode.subnode)
this.previous.subnode.next == orig(this.previous.subnode.next)
this.previous.subnode.previous == orig(this.previous.subnode.previous)
this.previous.next == return.previous
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == return.previous.subs
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == return.previous.key
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == return.previous.susbscript
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.value == return.previous.value
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.value.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous.previous
this.previous.next.next == return
this.previous.next.next == return.previous.next
this.previous.next.next == orig(this.previous.next.next)
this.previous.next.previous == return.parent.subnode
this.previous.next.previous == orig(this.previous.next.previous)
this.previous.previous == orig(this.previous.previous)
this.previous.previous.subs[] == orig(this.previous.previous.subs[])
this.previous.previous.key.toString == orig(this.previous.previous.key.toString)
this.previous.previous.isNumeric == orig(this.previous.previous.isNumeric)
this.previous.previous.stackLevel == orig(this.previous.previous.stackLevel)
this.previous.previous.subnode == orig(this.previous.previous.subnode)
this.previous.previous.previous == return
return == return.previous.next
return == orig(this.next)
return.subs == orig(this.next.subs)
return.subs.getClass().getName() == return.parent.subs.getClass().getName()
return.subs.getClass().getName() == return.subnode.subs.getClass().getName()
return.subs.getClass().getName() == return.previous.subs.getClass().getName()
return.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
return.key == orig(this.next.key)
return.susbscript == orig(this.next.susbscript)
return.susbscript.getClass().getName() == return.value.getClass().getName()
return.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
return.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
return.isNumeric == orig(this.next.isNumeric)
return.value == orig(this.next.value)
return.value.getClass().getName() == return.previous.value.getClass().getName()
return.value.getClass().getName() == orig(this.next.value.getClass().getName())
return.parent == return.previous.parent
return.parent == orig(this.next.parent)
return.parent == orig(this.next.previous.parent)
return.parent.subs == orig(this.next.parent.subs)
return.parent.key == orig(this.next.parent.key)
return.parent.susbscript == orig(this.next.parent.susbscript)
return.parent.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
return.parent.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
return.parent.isNumeric == orig(this.next.parent.isNumeric)
return.parent.parent == orig(this.next.parent.parent)
return.parent.subnode == orig(this.next.parent.subnode)
return.subnode.subs.getClass().getName() == return.next.subs.getClass().getName()
return.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
return.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
return.subnode.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
return.subnode.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
return.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
return.previous == orig(this)
return.previous == orig(this.next.previous)
return.previous.subs == orig(this.next.previous.subs)
return.previous.key == orig(this.next.previous.key)
return.previous.susbscript == orig(this.next.previous.susbscript)
return.previous.isNumeric == orig(this.next.previous.isNumeric)
return.previous.value == orig(this.next.previous.value)
return.previous.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
return.previous.next == orig(this.next.previous.next)
this.susbscript != null
this.parent != null
this.parent.parent.key.toString one of { "@", "vetorLocal", "vetorLocal~xpto" }
this.parent.previous.subs has only one value
this.parent.previous.subs[] contains no nulls and has only one value, of length 1
this.parent.previous.subs[] elements has only one value
this.parent.previous.key has only one value
this.parent.previous.key.toString == "locVarAfterNew"
this.parent.previous.susbscript has only one value
this.parent.previous.value has only one value
this.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.stackLevel == null
this.subnode.parent.key.toString one of { "vetorLocal", "vetorLocal~xpto", "vetorLocal~xpto~34" }
this.subnode.subnode.subs[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.Integer], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.subnode.key.toString one of { "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 4
this.subnode.next.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal~xpto~34~B"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.parent has only one value
this.subnode.next.subnode == null
this.subnode.next.next == null
this.subnode.next.previous has only one value
this.subnode.previous == null
this.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
this.next.stackLevel == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
return.subs.getClass().getName() == java.lang.Object[].class
return.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
return.susbscript.getClass().getName() == java.lang.String.class
return.isNumeric == false
return.stackLevel == null
return.value.getClass().getName() == java.lang.String.class
return.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
return.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
return.parent.stackLevel == null
return.parent.value == null
return.parent.next == null
return.parent.previous == null
return.subnode.subs has only one value
return.subnode.subs.getClass().getName() == java.lang.Object[].class
return.subnode.subs[] contains no nulls and has only one value, of length 2
return.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
return.subnode.subs[].getClass().getName() elements == java.lang.String.class
return.subnode.key has only one value
return.subnode.key.toString == "vetorLocal~xpto"
return.subnode.susbscript has only one value
return.subnode.susbscript.getClass().getName() == java.lang.String.class
return.subnode.isNumeric == false
return.subnode.stackLevel == null
return.subnode.value == null
return.subnode.parent has only one value
return.subnode.subnode has only one value
return.subnode.next == null
return.subnode.previous == null
return.next.subs has only one value
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key has only one value
return.next.key.toString == "zzz"
return.next.susbscript has only one value
return.next.isNumeric == false
return.next.stackLevel == null
return.next.value has only one value
return.next.parent has only one value
return.next.subnode == null
return.next.next == null
return.next.previous has only one value
return.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
return.previous.isNumeric == false
return.previous.value.getClass().getName() == java.lang.String.class
size(this.subnode.subs[]) one of { 2, 3, 4 }
size(this.subnode.subnode.subs[]) one of { 3, 4 }
size(this.subnode.next.subs[]) == 4
size(return.subs[]) one of { 1, 4 }
size(return.parent.subs[]) one of { 1, 3 }
size(return.subnode.subs[]) == 2
size(return.next.subs[]) == 1
size(return.previous.subs[]) one of { 1, 4 }
this.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
this.susbscript in this.subs[]
return.previous.susbscript in this.subs[]
return.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.value.getClass().getName() in this.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.susbscript in this.subnode.subnode.subs[]
this.susbscript in this.subnode.next.subs[]
this.susbscript in return.previous.subs[]
this.susbscript.getClass().getName() != return.subs.getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() in return.subs[].getClass().getName()
this.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.value.getClass().getName() in return.next.subs[].getClass().getName()
this.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.parent.susbscript in this.parent.subs[]
return.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.susbscript in return.parent.subs[]
this.parent.susbscript.getClass().getName() != return.subs.getClass().getName()
this.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript in return.subs[]
this.parent.parent.susbscript in return.parent.subs[]
this.parent.parent.susbscript in return.previous.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
return.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.value.getClass().getName() != return.subs.getClass().getName()
this.parent.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in return.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.key in this.parent.next.subs[]
return.susbscript in this.parent.next.subs[]
return.value in this.parent.next.subs[]
return.parent.key in this.parent.next.subs[]
return.parent.susbscript in this.parent.next.subs[]
return.previous.key in this.parent.next.subs[]
return.previous.susbscript in this.parent.next.subs[]
return.previous.value in this.parent.next.subs[]
return.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.next.susbscript in return.subs[]
this.parent.next.susbscript in return.parent.subs[]
this.parent.next.susbscript in return.previous.subs[]
this.parent.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.key in this.parent.previous.subs[]
return.susbscript in this.parent.previous.subs[]
return.value in this.parent.previous.subs[]
return.parent.key in this.parent.previous.subs[]
return.parent.susbscript in this.parent.previous.subs[]
return.previous.key in this.parent.previous.subs[]
return.previous.susbscript in this.parent.previous.subs[]
return.previous.value in this.parent.previous.subs[]
return.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.previous.susbscript in return.subs[]
this.parent.previous.susbscript in return.parent.subs[]
this.parent.previous.susbscript in return.previous.subs[]
this.parent.previous.value in return.subs[]
this.parent.previous.value in return.parent.subs[]
this.parent.previous.value in return.previous.subs[]
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
return.previous.susbscript in this.subnode.subs[]
return.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
this.next.subnode.susbscript in this.subnode.parent.subs[]
return.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == return.previous.susbscript
return.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.next.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
return.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in return.previous.subs[]
this.subnode.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
return.previous.susbscript in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.key in this.subnode.next.subs[]
return.susbscript in this.subnode.next.subs[]
return.value in this.subnode.next.subs[]
return.parent.key in this.subnode.next.subs[]
return.parent.susbscript in this.subnode.next.subs[]
return.previous.key in this.subnode.next.subs[]
return.previous.susbscript in this.subnode.next.subs[]
return.previous.value in this.subnode.next.subs[]
return.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in return.subs[]
this.subnode.next.susbscript in return.parent.subs[]
this.subnode.next.susbscript in return.previous.subs[]
this.subnode.next.value in return.subs[]
this.subnode.next.value in return.parent.subs[]
this.subnode.next.value in return.previous.subs[]
return.susbscript in this.next.subs[]
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.value.getClass().getName() in this.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
return.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
return.susbscript in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.value.getClass().getName() in this.next.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
return.previous.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == return.parent.key
return.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == return.parent.susbscript
return.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in return.parent.subs[]
return.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in return.parent.subs[]
this.previous.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in return.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.key in this.previous.subnode.subs[]
return.susbscript in this.previous.subnode.subs[]
return.value in this.previous.subnode.subs[]
return.parent.key in this.previous.subnode.subs[]
return.parent.susbscript in this.previous.subnode.subs[]
return.previous.key in this.previous.subnode.subs[]
return.previous.susbscript in this.previous.subnode.subs[]
return.previous.value in this.previous.subnode.subs[]
return.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript in return.subs[]
this.previous.subnode.susbscript in return.parent.subs[]
this.previous.subnode.susbscript in return.previous.subs[]
this.previous.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == return.previous.susbscript
return.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in return.previous.subs[]
this.previous.next.value.getClass().getName() in return.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.key in this.previous.previous.subs[]
return.susbscript in this.previous.previous.subs[]
return.value in this.previous.previous.subs[]
return.parent.key in this.previous.previous.subs[]
return.parent.susbscript in this.previous.previous.subs[]
return.previous.key in this.previous.previous.subs[]
return.previous.susbscript in this.previous.previous.subs[]
return.previous.value in this.previous.previous.subs[]
return.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.previous.key in return.subs[]
this.previous.previous.key in return.parent.subs[]
this.previous.previous.key in return.previous.subs[]
this.previous.previous.susbscript in return.subs[]
this.previous.previous.susbscript in return.parent.subs[]
this.previous.previous.susbscript in return.previous.subs[]
this.previous.previous.value in return.subs[]
this.previous.previous.value in return.parent.subs[]
this.previous.previous.value in return.previous.subs[]
return.subs.getClass().getName() != return.susbscript.getClass().getName()
return.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.value.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.value.getClass().getName() in return.next.subs[].getClass().getName()
return.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.susbscript in return.previous.subs[]
return.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getParent():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.value.getClass().getName() == this.parent.susbscript.getClass().getName()
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.subnode == this.previous.parent
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.subnode.parent
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.subnode.parent.subs
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.key == this.subnode.parent.key
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.susbscript == this.subnode.parent.susbscript
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.value == this.subnode.value
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.subnode.parent.next
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.subnode.parent
this.parent.next == this.parent.previous
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.next == this.previous.previous.previous
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.parent.subnode == this.next.previous
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.next.next == this.previous.previous.previous
this.susbscript != null
this.parent != null
this.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.next.previous.previous == null
this.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.next.key.toString one of { "vetorLocal~xpto~34~B", "zzz" }
this.previous.next.value == null
this.previous.next.subnode == null
this.previous.next.next == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
size(this.subs[]) one of { 1, 3, 4 }
size(this.parent.subnode.subs[]) one of { 1, 3, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() != this.parent.parent.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.previous.key in this.subnode.subs[]
this.previous.susbscript in this.subnode.subs[]
this.previous.value in this.subnode.subs[]
this.previous.parent.key in this.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subs[]
this.previous.next.key in this.subnode.subs[]
this.previous.next.value in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript in this.previous.subs[]
this.subnode.susbscript in this.previous.parent.subs[]
this.subnode.susbscript in this.previous.next.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.value in this.previous.subs[]
this.subnode.value in this.previous.parent.subs[]
this.subnode.value in this.previous.next.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.previous.key in this.subnode.parent.subs[]
this.previous.susbscript in this.subnode.parent.subs[]
this.previous.value in this.subnode.parent.subs[]
this.previous.parent.key in this.subnode.parent.subs[]
this.previous.parent.susbscript in this.subnode.parent.subs[]
this.previous.next.key in this.subnode.parent.subs[]
this.previous.next.value in this.subnode.parent.subs[]
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.key in this.previous.subs[]
this.subnode.parent.key in this.previous.parent.subs[]
this.subnode.parent.key in this.previous.next.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in this.previous.subs[]
this.subnode.parent.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.previous.key in this.subnode.subnode.subs[]
this.previous.susbscript in this.subnode.subnode.subs[]
this.previous.value in this.subnode.subnode.subs[]
this.previous.parent.key in this.subnode.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subnode.subs[]
this.previous.next.key in this.subnode.subnode.subs[]
this.previous.next.value in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript in this.previous.subs[]
this.subnode.subnode.susbscript in this.previous.parent.subs[]
this.subnode.subnode.susbscript in this.previous.next.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getParent():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == return.subnode.isNumeric
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == return.susbscript.getClass().getName()
this.value.getClass().getName() == return.subnode.value.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.parent == return
this.parent.subs == return.subs
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == return.key
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == return.susbscript
this.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.parent.isNumeric == return.isNumeric
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == return.parent
this.parent.parent.subs == return.parent.subs
this.parent.parent.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == return.parent.key
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == return.parent.susbscript
this.parent.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.parent.parent.isNumeric == return.parent.isNumeric
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == return.parent.parent
this.parent.parent.subnode == return.parent.subnode
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == return.subnode
this.parent.subnode.subs == return.subnode.subs
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == return.subnode.key
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == return.subnode.susbscript
this.parent.subnode.value == return.subnode.value
this.parent.subnode.value.getClass().getName() == return.subnode.value.getClass().getName()
this.parent.subnode.parent == return
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == return.subnode.next
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.value == return.subnode.value
this.subnode.parent == this.next.previous
this.subnode.parent == return.subnode
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs == return.subnode.subs
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key == return.subnode.key
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript == return.subnode.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.parent == return
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == return.subnode.next
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == return.susbscript.getClass().getName()
this.next.parent == return
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == return.subs
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == return.key
this.next.parent.key == return.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == return.key
this.next.parent.susbscript == return.susbscript
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == return.isNumeric
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == return.parent
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.previous
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == return.subnode.next
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == return
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.previous == return.subnode
this.next.previous == orig(this)
this.next.previous == orig(this.next.parent.subnode)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == return.subnode.subs
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == return.subnode.key
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == return.subnode.susbscript
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == return.subnode.value
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == return.subnode.next
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.value.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.value.getClass().getName() == return.subnode.value.getClass().getName()
this.previous.value.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.parent == return
this.previous.parent == return.parent.subnode
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == return.subs
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == return.key
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == return.susbscript
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.parent.isNumeric == return.isNumeric
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == return.parent
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == return.subnode
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.subnode.subs[] == orig(this.previous.subnode.subs[])
this.previous.subnode.key == orig(this.previous.subnode.key)
this.previous.subnode.key.toString == orig(this.previous.subnode.key.toString)
this.previous.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.previous.subnode.isNumeric == orig(this.previous.subnode.isNumeric)
this.previous.subnode.stackLevel == orig(this.previous.subnode.stackLevel)
this.previous.subnode.value == orig(this.previous.subnode.value)
this.previous.subnode.parent == return.subnode.next
this.previous.subnode.subnode == orig(this.previous.subnode.subnode)
this.previous.subnode.next == orig(this.previous.subnode.next)
this.previous.subnode.previous == orig(this.previous.subnode.previous)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous.previous
this.previous.next.next == orig(this.previous.next.next)
this.previous.next.previous == orig(this.previous.next.previous)
this.previous.previous == orig(this.previous.previous)
this.previous.previous.subs == return.subnode.subs
this.previous.previous.subs[] == orig(this.previous.previous.subs[])
this.previous.previous.key == return.subnode.key
this.previous.previous.key.toString == orig(this.previous.previous.key.toString)
this.previous.previous.susbscript == return.subnode.susbscript
this.previous.previous.stackLevel == orig(this.previous.previous.stackLevel)
this.previous.previous.value == return.subnode.value
this.previous.previous.parent == return
this.previous.previous.subnode == orig(this.previous.previous.subnode)
return == return.parent.subnode
return == return.subnode.parent
return == orig(this.parent)
return == orig(this.parent.subnode.parent)
return.subs == orig(this.parent.subs)
return.key == orig(this.parent.key)
return.susbscript == orig(this.parent.susbscript)
return.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
return.isNumeric == orig(this.parent.isNumeric)
return.parent == orig(this.parent.parent)
return.parent.subs == orig(this.parent.parent.subs)
return.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
return.parent.key == orig(this.parent.parent.key)
return.parent.susbscript == orig(this.parent.parent.susbscript)
return.parent.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
return.parent.isNumeric == orig(this.parent.parent.isNumeric)
return.parent.parent == orig(this.parent.parent.parent)
return.parent.subnode == orig(this.parent.parent.subnode)
return.subnode == orig(this.parent.subnode)
return.subnode.subs == orig(this.parent.subnode.subs)
return.subnode.key == orig(this.parent.subnode.key)
return.subnode.susbscript == orig(this.parent.subnode.susbscript)
return.subnode.value == orig(this.parent.subnode.value)
return.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
return.subnode.next == orig(this.parent.subnode.next)
this.susbscript != null
this.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.next.previous.previous == null
this.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.next.key.toString one of { "vetorLocal~xpto~34~B", "zzz" }
this.previous.next.value == null
this.previous.next.subnode == null
this.previous.next.next == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
return != null
return.subs != null
return.subs[] elements != null
return.key != null
return.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
return.susbscript != null
return.stackLevel == null
return.value == null
return.parent.subs.getClass().getName() == java.lang.Object[].class
return.parent.subs[].getClass().getName() elements == java.lang.String.class
return.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
return.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
return.parent.susbscript.getClass().getName() == java.lang.String.class
return.parent.isNumeric == false
return.parent.stackLevel == null
return.parent.value == null
return.parent.next == null
return.parent.previous == null
return.subnode != null
return.subnode.subs != null
return.subnode.subs[] elements != null
return.subnode.key != null
return.subnode.susbscript != null
return.subnode.value.getClass().getName() == java.lang.String.class
return.subnode.previous == null
return.next == null
return.previous == null
size(this.subs[]) one of { 1, 3, 4 }
size(this.parent.subnode.subs[]) one of { 1, 3, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(return.subs[]) one of { 1, 2, 3 }
size(return.parent.subs[]) one of { 1, 2 }
size(return.subnode.subs[]) one of { 1, 3, 4 }
this.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
return.parent.susbscript in this.subs[]
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() != return.parent.subs.getClass().getName()
this.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() in return.subs[].getClass().getName()
this.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
return.susbscript in this.parent.subs[]
return.parent.susbscript in this.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
return.parent.susbscript in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
return.parent.susbscript in this.parent.subnode.subs[]
return.subnode.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.previous.key in this.subnode.subs[]
this.previous.susbscript in this.subnode.subs[]
this.previous.value in this.subnode.subs[]
this.previous.parent.key in this.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subs[]
this.previous.next.key in this.subnode.subs[]
this.previous.next.value in this.subnode.subs[]
return.parent.key in this.subnode.subs[]
return.parent.susbscript in this.subnode.subs[]
return.subnode.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript in this.previous.subs[]
this.subnode.susbscript in this.previous.parent.subs[]
this.subnode.susbscript in this.previous.next.subs[]
this.subnode.susbscript in return.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.value in this.previous.subs[]
this.subnode.value in this.previous.parent.subs[]
this.subnode.value in this.previous.next.subs[]
this.subnode.value in return.parent.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.previous.key in this.subnode.parent.subs[]
this.previous.susbscript in this.subnode.parent.subs[]
this.previous.value in this.subnode.parent.subs[]
this.previous.parent.key in this.subnode.parent.subs[]
this.previous.parent.susbscript in this.subnode.parent.subs[]
this.previous.next.key in this.subnode.parent.subs[]
this.previous.next.value in this.subnode.parent.subs[]
return.parent.key in this.subnode.parent.subs[]
return.parent.susbscript in this.subnode.parent.subs[]
return.subnode.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == return.subnode.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.key in this.previous.subs[]
this.subnode.parent.key in this.previous.parent.subs[]
this.subnode.parent.key in this.previous.next.subs[]
this.subnode.parent.key in return.parent.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in this.previous.subs[]
this.subnode.parent.susbscript in this.previous.parent.subs[]
this.subnode.parent.susbscript in return.parent.subs[]
return.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in return.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.previous.key in this.subnode.subnode.subs[]
this.previous.susbscript in this.subnode.subnode.subs[]
this.previous.value in this.subnode.subnode.subs[]
this.previous.parent.key in this.subnode.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subnode.subs[]
this.previous.next.key in this.subnode.subnode.subs[]
this.previous.next.value in this.subnode.subnode.subs[]
return.parent.key in this.subnode.subnode.subs[]
return.parent.susbscript in this.subnode.subnode.subs[]
return.subnode.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript in this.previous.subs[]
this.subnode.subnode.susbscript in this.previous.parent.subs[]
this.subnode.subnode.susbscript in this.previous.next.subs[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
return.parent.key in this.next.subs[]
return.parent.susbscript in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.key in return.parent.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript in return.parent.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value in return.parent.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value.getClass().getName() in return.subs[].getClass().getName()
this.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
return.key in this.next.parent.subs[]
this.next.parent.subs[] elements == return.key
return.susbscript in this.next.parent.subs[]
this.next.parent.subs[] elements == return.susbscript
return.parent.key in this.next.parent.subs[]
return.parent.susbscript in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
return.subs[] elements == this.next.parent.key
this.next.parent.key in return.subs[]
this.next.parent.key in return.parent.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
return.subs[] elements == this.next.parent.susbscript
this.next.parent.susbscript in return.subs[]
this.next.parent.susbscript in return.parent.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
return.parent.key in this.next.subnode.subs[]
return.parent.susbscript in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript in return.parent.subs[]
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
return.parent.key in this.next.next.subs[]
return.parent.susbscript in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.key in return.parent.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript in return.parent.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
return.parent.key in this.next.previous.subs[]
return.parent.susbscript in this.next.previous.subs[]
return.subnode.susbscript in this.next.previous.subs[]
this.next.previous.subs[] elements == return.subnode.susbscript
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.key in return.parent.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.susbscript in return.parent.subs[]
return.subnode.subs[] elements == this.next.previous.susbscript
this.next.previous.susbscript in return.subnode.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.next.previous.value in return.parent.subs[]
return.parent.susbscript in this.previous.subs[]
return.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.susbscript in this.previous.parent.subs[]
return.parent.susbscript in this.previous.parent.subs[]
return.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.parent.susbscript in return.subs[]
this.previous.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.subnode.subs.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.key in this.previous.subnode.subs[]
return.parent.susbscript in this.previous.subnode.subs[]
return.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.subnode.susbscript in return.parent.subs[]
this.previous.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.parent.susbscript in this.previous.next.subs[]
return.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.parent.key in this.previous.previous.subs[]
return.parent.susbscript in this.previous.previous.subs[]
return.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == return.subnode.susbscript
return.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.parent.subs.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.previous.subs[].getClass().getName()
this.previous.previous.key in return.parent.subs[]
this.previous.previous.susbscript in return.parent.subs[]
return.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in return.subnode.subs[]
this.previous.previous.value in return.parent.subs[]
return.susbscript in return.subs[]
return.parent.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript.getClass().getName() != return.parent.subs.getClass().getName()
return.susbscript.getClass().getName() != return.parent.susbscript.getClass().getName()
return.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.parent.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript in return.subnode.subs[]
return.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.susbscript in return.subnode.subs[]
return.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getPrevious():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.subnode == this.subnode.parent.next
this.parent.subnode == this.next.subnode.parent
this.parent.subnode.subs == this.next.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.next.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.next.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.stackLevel == this.next.next.stackLevel
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.next.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == this.previous.next.subnode
this.parent.subnode.next == this.subnode.parent.previous
this.parent.subnode.next == this.next.next
this.parent.subnode.next == this.previous.next
this.parent.next == this.parent.previous
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.parent.subnode
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.next == this.next.parent.subnode
this.next == this.previous.previous
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.parent.subnode == this.next.subnode.parent
this.next.parent.subnode == this.next.previous.next
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.previous == this.previous.parent.subnode
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.subnode == this.previous.next.previous
this.previous.next.next == this.previous.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVarAfterNew", "vetorLocal", "zzz" }
this.parent.subnode.stackLevel == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.next.previous.stackLevel has only one value
this.next.previous.previous == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVarAfterNew"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "zzz"
this.previous.next.susbscript has only one value
this.previous.next.value has only one value
this.previous.next.subnode == null
this.previous.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.next.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.subs[]
this.parent.subnode.susbscript in this.next.subnode.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.previous.key in this.subnode.subs[]
this.previous.susbscript in this.subnode.subs[]
this.previous.value in this.subnode.subs[]
this.previous.parent.key in this.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subs[]
this.previous.next.key in this.subnode.subs[]
this.previous.next.value in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript in this.previous.subs[]
this.subnode.susbscript in this.previous.parent.subs[]
this.subnode.susbscript in this.previous.next.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.value in this.previous.subs[]
this.subnode.value in this.previous.parent.subs[]
this.subnode.value in this.previous.next.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.previous.key in this.subnode.parent.subs[]
this.previous.susbscript in this.subnode.parent.subs[]
this.previous.value in this.subnode.parent.subs[]
this.previous.parent.key in this.subnode.parent.subs[]
this.previous.parent.susbscript in this.subnode.parent.subs[]
this.previous.next.key in this.subnode.parent.subs[]
this.previous.next.value in this.subnode.parent.subs[]
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.key in this.previous.subs[]
this.subnode.parent.key in this.previous.parent.subs[]
this.subnode.parent.key in this.previous.next.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in this.previous.subs[]
this.subnode.parent.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.previous.key in this.subnode.subnode.subs[]
this.previous.susbscript in this.subnode.subnode.subs[]
this.previous.value in this.subnode.subnode.subs[]
this.previous.parent.key in this.subnode.subnode.subs[]
this.previous.parent.susbscript in this.subnode.subnode.subs[]
this.previous.next.key in this.subnode.subnode.subs[]
this.previous.next.value in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript in this.previous.subs[]
this.subnode.subnode.susbscript in this.previous.parent.subs[]
this.subnode.subnode.susbscript in this.previous.next.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getPrevious():::EXIT
this.subs == return.next.subs
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == return.next.key
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == return.next.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == return.isNumeric
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.value == this.subnode.value
this.value == return.next.value
this.value == orig(this.value)
this.value.getClass().getName() == return.susbscript.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == return.parent
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == return.parent.subs
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == return.parent.key
this.parent.key == return.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == return.parent.key
this.parent.susbscript == return.parent.susbscript
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.isNumeric == return.parent.isNumeric
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.subnode == this.subnode.parent.next
this.parent.subnode == this.next.subnode.parent
this.parent.subnode == return.parent.subnode
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.subs
this.parent.subnode.subs == return.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.key
this.parent.subnode.key == return.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.susbscript
this.parent.subnode.susbscript == return.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.stackLevel == this.next.next.stackLevel
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == this.next.value
this.parent.subnode.value == return.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == this.previous.next.subnode
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.subnode.parent.previous
this.parent.subnode.next == this.next.next
this.parent.subnode.next == return.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == this.next.parent.subnode
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == return
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.next.parent.subnode
this.next == this.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.subnode.parent
this.next.parent.subnode == this.next.previous.next
this.next.parent.subnode == orig(this.next.parent.subnode)
this.next.parent.subnode == orig(this.next.previous.next)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.parent == orig(this.next.next.previous)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == return
this.next.next.next == orig(this.next.next.next)
this.next.previous == orig(this)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.previous == return
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == return
this.previous.subs == return.subs
this.previous.subs.getClass().getName() == return.subs.getClass().getName()
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == return.key
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == return.susbscript
this.previous.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.isNumeric == return.isNumeric
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == return.value
this.previous.value.getClass().getName() == return.susbscript.getClass().getName()
this.previous.parent == return.parent
this.previous.parent.subs == return.parent.subs
this.previous.parent.subs.getClass().getName() == return.subs.getClass().getName()
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == return.parent.key
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == return.parent.susbscript
this.previous.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.parent.isNumeric == return.parent.isNumeric
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == return.parent.subnode
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == return.next
this.previous.next.subs == return.next.subs
this.previous.next.subs.getClass().getName() == return.subs.getClass().getName()
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == return.next.key
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == return.next.susbscript
this.previous.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.next.isNumeric == return.isNumeric
this.previous.next.value == return.next.value
this.previous.next.value.getClass().getName() == return.susbscript.getClass().getName()
this.previous.next.parent == return.parent
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous
this.previous.next.previous == return.parent.subnode
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
return == return.parent.subnode
return == orig(this.previous)
return.subs == orig(this.previous.subs)
return.subs.getClass().getName() == return.parent.subs.getClass().getName()
return.subs.getClass().getName() == return.next.subs.getClass().getName()
return.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
return.key == orig(this.previous.key)
return.susbscript == orig(this.previous.susbscript)
return.susbscript.getClass().getName() == return.value.getClass().getName()
return.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
return.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
return.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
return.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
return.susbscript.getClass().getName() == orig(this.previous.next.value.getClass().getName())
return.isNumeric == return.next.isNumeric
return.isNumeric == orig(this.previous.isNumeric)
return.isNumeric == orig(this.previous.next.isNumeric)
return.value == orig(this.previous.value)
return.parent == return.next.parent
return.parent == orig(this.previous.parent)
return.parent == orig(this.previous.next.parent)
return.parent.subs == orig(this.previous.parent.subs)
return.parent.key == return.parent.susbscript
return.parent.key == orig(this.previous.parent.key)
return.parent.susbscript == orig(this.previous.parent.susbscript)
return.parent.isNumeric == orig(this.previous.parent.isNumeric)
return.parent.subnode == return.next.previous
return.parent.subnode == orig(this.previous.parent.subnode)
return.parent.subnode == orig(this.previous.next.previous)
return.next == orig(this)
return.next == orig(this.previous.next)
return.next.subs == orig(this.previous.next.subs)
return.next.key == orig(this.previous.next.key)
return.next.susbscript == orig(this.previous.next.susbscript)
return.next.value == orig(this.previous.next.value)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVarAfterNew", "vetorLocal", "zzz" }
this.parent.subnode.stackLevel == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.next.previous.stackLevel has only one value
this.next.previous.previous == null
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString == "locVarAfterNew"
this.previous.stackLevel == null
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key.toString == "@"
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString == "zzz"
this.previous.next.subnode == null
this.previous.previous == null
return.subs has only one value
return.subs.getClass().getName() == java.lang.Object[].class
return.subs[] contains no nulls and has only one value, of length 1
return.subs[] elements has only one value
return.subs[].getClass().getName() == [java.lang.String]
return.subs[].getClass().getName() elements == java.lang.String.class
return.key has only one value
return.key.toString == "locVarAfterNew"
return.susbscript has only one value
return.susbscript.getClass().getName() == java.lang.String.class
return.isNumeric == false
return.stackLevel == null
return.value has only one value
return.parent has only one value
return.parent.subs has only one value
return.parent.subs[] contains no nulls and has only one value, of length 1
return.parent.subs[] elements has only one value
return.parent.subs[].getClass().getName() == [java.lang.String]
return.parent.subs[].getClass().getName() elements == java.lang.String.class
return.parent.key has only one value
return.parent.key.toString == "@"
return.parent.susbscript has only one value
return.parent.isNumeric == false
return.parent.stackLevel == null
return.parent.value == null
return.parent.parent == null
return.parent.subnode has only one value
return.parent.next == null
return.parent.previous == null
return.subnode == null
return.next has only one value
return.next.subs has only one value
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key has only one value
return.next.key.toString == "zzz"
return.next.susbscript has only one value
return.next.stackLevel == null
return.next.value has only one value
return.next.subnode == null
return.next.next == null
return.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
size(return.subs[]) == 1
size(return.parent.subs[]) == 1
size(return.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
return.next.susbscript in this.subs[]
this.subs[] elements == return.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
return.next.subs[] elements == this.susbscript
this.susbscript in return.next.subs[]
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() in return.subs[].getClass().getName()
this.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.value.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
return.parent.key in this.parent.subs[]
this.parent.subs[] elements == return.parent.key
return.parent.susbscript in this.parent.subs[]
this.parent.subs[] elements == return.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
return.parent.subs[] elements == this.parent.key
this.parent.key in return.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
return.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript in return.parent.subs[]
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.next.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.susbscript
return.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == return.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.subs[]
this.parent.subnode.susbscript in this.next.subnode.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
return.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in return.subs[]
this.parent.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
return.key in this.subnode.subs[]
return.susbscript in this.subnode.subs[]
return.value in this.subnode.subs[]
return.parent.key in this.subnode.subs[]
return.parent.susbscript in this.subnode.subs[]
return.next.key in this.subnode.subs[]
return.next.susbscript in this.subnode.subs[]
return.next.value in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript in this.previous.subs[]
this.subnode.susbscript in this.previous.parent.subs[]
this.subnode.susbscript in this.previous.next.subs[]
this.subnode.susbscript in return.subs[]
this.subnode.susbscript in return.parent.subs[]
this.subnode.susbscript in return.next.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.value in this.previous.subs[]
this.subnode.value in this.previous.parent.subs[]
this.subnode.value in this.previous.next.subs[]
this.subnode.value in return.subs[]
this.subnode.value in return.parent.subs[]
this.subnode.value in return.next.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
return.key in this.subnode.parent.subs[]
return.susbscript in this.subnode.parent.subs[]
return.value in this.subnode.parent.subs[]
return.parent.key in this.subnode.parent.subs[]
return.parent.susbscript in this.subnode.parent.subs[]
return.next.key in this.subnode.parent.subs[]
return.next.susbscript in this.subnode.parent.subs[]
return.next.value in this.subnode.parent.subs[]
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.key in this.previous.subs[]
this.subnode.parent.key in this.previous.parent.subs[]
this.subnode.parent.key in this.previous.next.subs[]
this.subnode.parent.key in return.subs[]
this.subnode.parent.key in return.parent.subs[]
this.subnode.parent.key in return.next.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in this.previous.subs[]
this.subnode.parent.susbscript in this.previous.parent.subs[]
this.subnode.parent.susbscript in return.subs[]
this.subnode.parent.susbscript in return.parent.subs[]
this.subnode.parent.susbscript in return.next.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
return.key in this.subnode.subnode.subs[]
return.susbscript in this.subnode.subnode.subs[]
return.value in this.subnode.subnode.subs[]
return.parent.key in this.subnode.subnode.subs[]
return.parent.susbscript in this.subnode.subnode.subs[]
return.next.key in this.subnode.subnode.subs[]
return.next.susbscript in this.subnode.subnode.subs[]
return.next.value in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript in this.previous.subs[]
this.subnode.subnode.susbscript in this.previous.parent.subs[]
this.subnode.subnode.susbscript in this.previous.next.subs[]
this.subnode.subnode.susbscript in return.subs[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript in return.next.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in return.subs[].getClass().getName()
this.next.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
return.key in this.next.subs[]
return.susbscript in this.next.subs[]
return.value in this.next.subs[]
return.parent.key in this.next.subs[]
return.parent.susbscript in this.next.subs[]
return.next.key in this.next.subs[]
return.next.susbscript in this.next.subs[]
return.next.value in this.next.subs[]
return.subs.getClass().getName() in this.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.key in return.subs[]
this.next.key in return.parent.subs[]
this.next.key in return.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript in return.subs[]
this.next.susbscript in return.parent.subs[]
this.next.susbscript in return.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value in return.subs[]
this.next.value in return.parent.subs[]
this.next.value in return.next.subs[]
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
return.key in this.next.parent.subs[]
return.susbscript in this.next.parent.subs[]
return.value in this.next.parent.subs[]
return.parent.key in this.next.parent.subs[]
return.parent.susbscript in this.next.parent.subs[]
return.next.key in this.next.parent.subs[]
return.next.susbscript in this.next.parent.subs[]
return.next.value in this.next.parent.subs[]
return.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.key in return.subs[]
this.next.parent.key in return.parent.subs[]
this.next.parent.key in return.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.parent.susbscript in return.subs[]
this.next.parent.susbscript in return.parent.subs[]
this.next.parent.susbscript in return.next.subs[]
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in return.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.key in this.next.subnode.subs[]
return.susbscript in this.next.subnode.subs[]
return.value in this.next.subnode.subs[]
return.parent.key in this.next.subnode.subs[]
return.parent.susbscript in this.next.subnode.subs[]
return.next.key in this.next.subnode.subs[]
return.next.susbscript in this.next.subnode.subs[]
return.next.value in this.next.subnode.subs[]
return.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript in return.subs[]
this.next.subnode.susbscript in return.parent.subs[]
this.next.subnode.susbscript in return.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.key in this.next.next.subs[]
return.susbscript in this.next.next.subs[]
return.value in this.next.next.subs[]
return.parent.key in this.next.next.subs[]
return.parent.susbscript in this.next.next.subs[]
return.next.key in this.next.next.subs[]
return.next.susbscript in this.next.next.subs[]
return.next.value in this.next.next.subs[]
return.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.key in return.subs[]
this.next.next.key in return.parent.subs[]
this.next.next.key in return.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript in return.subs[]
this.next.next.susbscript in return.parent.subs[]
this.next.next.susbscript in return.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
return.key in this.next.previous.subs[]
return.susbscript in this.next.previous.subs[]
return.value in this.next.previous.subs[]
return.parent.key in this.next.previous.subs[]
return.parent.susbscript in this.next.previous.subs[]
return.next.key in this.next.previous.subs[]
return.next.susbscript in this.next.previous.subs[]
return.next.value in this.next.previous.subs[]
return.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.key in return.subs[]
this.next.previous.key in return.parent.subs[]
this.next.previous.key in return.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.susbscript in return.subs[]
this.next.previous.susbscript in return.parent.subs[]
this.next.previous.susbscript in return.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.next.previous.value in return.subs[]
this.next.previous.value in return.parent.subs[]
this.next.previous.value in return.next.subs[]
return.susbscript in this.previous.subs[]
this.previous.subs[] elements == return.susbscript
return.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == return.parent.key
return.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == return.parent.susbscript
return.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.next.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == return.next.susbscript
return.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.subs[] elements == return.susbscript
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.key in return.parent.subs[]
return.parent.subs[] elements == return.parent.key
return.parent.subs[] elements == return.parent.susbscript
return.parent.susbscript in return.parent.subs[]
return.next.subs[] elements == return.next.susbscript
return.next.susbscript in return.next.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getStackLevel():::ENTER
this == this.parent.subnode
this.subs == this.parent.subnode.subs
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.key == this.parent.subnode.key
this.susbscript == this.parent.subnode.susbscript
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.value == this.parent.subnode.value
this.value == this.subnode.value
this.parent.key == this.parent.susbscript
this.parent.subnode == this.subnode.parent
this.parent.subnode == this.next.previous
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.subnode.parent.previous == this.next.next
this.next.next.next == this.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel has only one value
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "vetorLocal" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getStackLevel():::EXIT
this.subs == this.parent.subnode.subs
this.subs == orig(this.subs)
this.subs == orig(this.parent.subnode.subs)
this.subs == orig(this.next.previous.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.parent.subnode.key
this.key == orig(this.key)
this.key == orig(this.parent.subnode.key)
this.key == orig(this.next.previous.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.parent.subnode.susbscript)
this.susbscript == orig(this.next.previous.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.isNumeric == orig(this.next.previous.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.stackLevel == orig(this.next.previous.stackLevel)
this.value == this.parent.subnode.value
this.value == this.subnode.value
this.value == orig(this.value)
this.value == orig(this.parent.subnode.value)
this.value == orig(this.next.previous.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent == orig(this.next.parent)
this.parent == orig(this.next.previous.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs == orig(this.next.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key == orig(this.next.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript == orig(this.next.parent.susbscript)
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.isNumeric == orig(this.next.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent == orig(this.next.parent.parent)
this.parent.subnode == this.subnode.parent
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode == orig(this.next.parent.subnode)
this.parent.subnode == orig(this.next.previous)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.next.previous.subnode)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.parent.subnode.next)
this.next == orig(this.next)
this.next == orig(this.next.previous.next)
this.next.subs == orig(this.next.subs)
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.parent == orig(this.next.next.previous)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel has only one value
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "vetorLocal" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous == null
return has only one value
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getSubnode():::ENTER
this == this.next.previous
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.value.getClass().getName() == this.parent.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.subnode == this.next.parent
this.parent.parent.subnode == this.previous.parent
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.previous.value
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.previous.next
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.parent.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.previous == this.next.parent.subnode
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subnode.parent == this.next.previous.subnode
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent == this.previous.parent
this.next.parent.subs == this.previous.parent.subs
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.parent == this.previous.parent.parent
this.next.parent.subnode == this.previous.parent.subnode
this.next.next == this.previous.previous
this.next.previous == this.previous.next
this.next.previous.subs == this.previous.next.subs
this.next.previous.key == this.previous.next.key
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.stackLevel == this.previous.next.stackLevel
this.next.previous.value == this.previous.next.value
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.next == this.previous.next.next
this.next.previous.previous == this.previous.parent.subnode
this.previous == this.previous.parent.subnode
this.previous.parent.subnode == this.previous.next.previous
this.susbscript != null
this.parent.parent.key.toString one of { "@", "vetorLocal", "vetorLocal~xpto" }
this.parent.subnode.previous == null
this.parent.previous.subs has only one value
this.parent.previous.subs[] contains no nulls and has only one value, of length 1
this.parent.previous.subs[] elements has only one value
this.parent.previous.key has only one value
this.parent.previous.key.toString == "locVarAfterNew"
this.parent.previous.susbscript has only one value
this.parent.previous.value has only one value
this.subnode.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
this.subnode.previous == null
this.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
this.next.stackLevel == null
this.next.subnode == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "vetorLocal"
this.next.next.susbscript has only one value
this.next.next.stackLevel has only one value
this.next.next.value == null
this.next.next.subnode has only one value
this.next.next.next has only one value
this.next.next.previous has only one value
this.next.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.subnode == null
this.previous.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B" }
this.previous.previous == null
this.susbscript in this.subs[]
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.subnode.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getSubnode():::EXIT
this.subs == return.parent.subs
this.subs == orig(this.subs)
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == return.parent.key
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == return.parent.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.isNumeric == return.parent.isNumeric
this.isNumeric == orig(this.isNumeric)
this.stackLevel == return.parent.stackLevel
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.value.getClass().getName() == this.parent.subnode.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == return.parent.parent
this.parent == orig(this.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs.getClass().getName() == return.subs.getClass().getName()
this.parent.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.parent.subs.getClass().getName() == return.next.subs.getClass().getName()
this.parent.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.parent.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == return.value.getClass().getName()
this.parent.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.parent.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == return.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == return.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.next.parent
this.parent.parent.subnode == this.previous.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.previous == orig(this.parent.parent.previous)
this.parent.subnode == return.next.parent
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.parent.subnode.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.parent.subnode.isNumeric == return.parent.isNumeric
this.parent.subnode.isNumeric == orig(this.parent.subnode.isNumeric)
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == return.parent.susbscript.getClass().getName()
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.parent == return.parent.parent
this.parent.subnode.parent == orig(this.parent.subnode.parent)
this.parent.subnode.subnode == return.next.previous
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == orig(this.parent.next)
this.parent.next.subs == orig(this.parent.next.subs)
this.parent.next.subs.getClass().getName() == return.subs.getClass().getName()
this.parent.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.parent.next.subs[] == orig(this.parent.next.subs[])
this.parent.next.key == orig(this.parent.next.key)
this.parent.next.key.toString == orig(this.parent.next.key.toString)
this.parent.next.susbscript == orig(this.parent.next.susbscript)
this.parent.next.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.parent.next.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.parent.next.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.parent.next.isNumeric == orig(this.parent.next.isNumeric)
this.parent.next.stackLevel == orig(this.parent.next.stackLevel)
this.parent.next.value == orig(this.parent.next.value)
this.parent.next.parent == orig(this.parent.next.parent)
this.parent.next.parent == orig(this.parent.previous.parent)
this.parent.next.subnode == orig(this.parent.next.subnode)
this.parent.next.next == orig(this.parent.next.next)
this.parent.next.previous == return.parent.parent
this.parent.next.previous == orig(this.parent.next.previous)
this.parent.next.previous == orig(this.parent.previous.next)
this.parent.previous == orig(this.parent.previous)
this.parent.previous.subs == orig(this.parent.previous.subs)
this.parent.previous.subs[] == orig(this.parent.previous.subs[])
this.parent.previous.key == orig(this.parent.previous.key)
this.parent.previous.key.toString == orig(this.parent.previous.key.toString)
this.parent.previous.susbscript == orig(this.parent.previous.susbscript)
this.parent.previous.isNumeric == orig(this.parent.previous.isNumeric)
this.parent.previous.stackLevel == orig(this.parent.previous.stackLevel)
this.parent.previous.value == orig(this.parent.previous.value)
this.parent.previous.subnode == orig(this.parent.previous.subnode)
this.parent.previous.previous == orig(this.parent.previous.previous)
this.subnode == return
this.subnode.subs == return.subs
this.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == return.key
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == return.susbscript
this.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.isNumeric == return.isNumeric
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == return.value
this.subnode.value.getClass().getName() == return.value.getClass().getName()
this.subnode.parent == return.parent
this.subnode.parent.subs == return.parent.subs
this.subnode.parent.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == return.parent.key
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == return.parent.susbscript
this.subnode.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.parent.isNumeric == return.parent.isNumeric
this.subnode.parent.stackLevel == return.parent.stackLevel
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == return.parent.parent
this.subnode.parent.subnode == return.parent.subnode
this.subnode.parent.next == return.parent.next
this.subnode.parent.previous == return.parent.previous
this.subnode.subnode == return.subnode
this.subnode.subnode.subs == return.subnode.subs
this.subnode.subnode.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == return.subnode.key
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == return.subnode.susbscript
this.subnode.subnode.susbscript.getClass().getName() == return.subnode.susbscript.getClass().getName()
this.subnode.subnode.isNumeric == return.subnode.isNumeric
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == return.subnode.value
this.subnode.subnode.value.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.subnode.parent == return.subnode.parent
this.subnode.subnode.subnode == return.subnode.subnode
this.subnode.subnode.next == return.subnode.next
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == return.next
this.subnode.next.subs == return.next.subs
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == return.next.key
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == return.next.susbscript
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.isNumeric == return.next.isNumeric
this.subnode.next.stackLevel == return.next.stackLevel
this.subnode.next.value == return.next.value
this.subnode.next.value.getClass().getName() == return.next.value.getClass().getName()
this.subnode.next.parent == return.next.parent
this.subnode.next.subnode == return.next.subnode
this.subnode.next.next == return.next.next
this.subnode.next.previous == return.next.previous
this.subnode.previous == orig(this.subnode.previous)
this.next == return.parent.next
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.subs.getClass().getName() == return.subs.getClass().getName()
this.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == this.previous.parent
this.next.parent == return.parent.parent
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == this.previous.parent.subs
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.next.parent.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == this.previous.parent.parent
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.previous.parent.subnode
this.next.parent.subnode == return.parent.previous
this.next.parent.subnode == orig(this.next.parent.subnode)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.next == this.previous.previous
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.previous == this.previous.next
this.next.previous == return.parent
this.next.previous == orig(this)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == this.previous.next.subs
this.next.previous.subs == return.parent.subs
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == this.previous.next.key
this.next.previous.key == return.parent.key
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.susbscript == return.parent.susbscript
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.isNumeric == return.parent.isNumeric
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == this.previous.next.stackLevel
this.next.previous.stackLevel == return.parent.stackLevel
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == this.previous.next.value
this.next.previous.value == return.value
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.subnode == return
this.next.previous.subnode == return.parent.subnode
this.next.previous.subnode == return.subnode.parent
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == this.previous.next.next
this.next.previous.next == return.parent.next
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == return.parent.previous
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == this.previous.parent.subnode
this.previous == return.parent.previous
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == return.subs.getClass().getName()
this.previous.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == return.parent.isNumeric
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent == return.parent.parent
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.previous.parent.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == this.previous.next.previous
this.previous.parent.subnode == return.parent.previous
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.subnode == orig(this.previous.next.previous)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == return.parent
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == return.parent.subs
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == return.parent.key
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == return.parent.susbscript
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.stackLevel == return.parent.stackLevel
this.previous.next.stackLevel == orig(this.previous.next.stackLevel)
this.previous.next.value == return.value
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.value.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.previous.next.subnode == return
this.previous.next.subnode == return.parent.subnode
this.previous.next.subnode == return.subnode.parent
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == return.parent.next
this.previous.next.next == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
return == return.parent.subnode
return == return.subnode.parent
return == return.next.previous
return == orig(this.subnode)
return.subs == orig(this.subnode.subs)
return.subs.getClass().getName() == return.parent.subs.getClass().getName()
return.subs.getClass().getName() == return.subnode.subs.getClass().getName()
return.subs.getClass().getName() == return.next.subs.getClass().getName()
return.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
return.key == orig(this.subnode.key)
return.susbscript == orig(this.subnode.susbscript)
return.susbscript.getClass().getName() == return.value.getClass().getName()
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
return.isNumeric == return.next.isNumeric
return.isNumeric == orig(this.subnode.isNumeric)
return.value == orig(this.subnode.value)
return.value.getClass().getName() == return.next.susbscript.getClass().getName()
return.value.getClass().getName() == return.next.value.getClass().getName()
return.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
return.parent == return.next.parent
return.parent == orig(this)
return.parent == orig(this.subnode.parent)
return.parent.subs == orig(this.subnode.parent.subs)
return.parent.key == orig(this.subnode.parent.key)
return.parent.susbscript == orig(this.subnode.parent.susbscript)
return.parent.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.parent.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
return.parent.isNumeric == orig(this.subnode.parent.isNumeric)
return.parent.stackLevel == orig(this.subnode.parent.stackLevel)
return.parent.parent == orig(this.subnode.parent.parent)
return.parent.subnode == return.subnode.parent
return.parent.subnode == return.next.previous
return.parent.subnode == orig(this.subnode.parent.subnode)
return.parent.next == orig(this.subnode.parent.next)
return.parent.previous == orig(this.subnode.parent.previous)
return.subnode == orig(this.subnode.subnode)
return.subnode.subs == orig(this.subnode.subnode.subs)
return.subnode.subs.getClass().getName() == return.next.subs.getClass().getName()
return.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
return.subnode.key == orig(this.subnode.subnode.key)
return.subnode.susbscript == orig(this.subnode.subnode.susbscript)
return.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
return.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
return.subnode.value == orig(this.subnode.subnode.value)
return.subnode.value.getClass().getName() == orig(this.subnode.subnode.value.getClass().getName())
return.subnode.parent == return.next.previous
return.subnode.parent == orig(this.subnode.subnode.parent)
return.subnode.subnode == orig(this.subnode.subnode.subnode)
return.subnode.next == orig(this.subnode.subnode.next)
return.next == orig(this.subnode.next)
return.next.subs == orig(this.subnode.next.subs)
return.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
return.next.key == orig(this.subnode.next.key)
return.next.susbscript == orig(this.subnode.next.susbscript)
return.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.next.isNumeric == orig(this.subnode.next.isNumeric)
return.next.stackLevel == orig(this.subnode.next.stackLevel)
return.next.value == orig(this.subnode.next.value)
return.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
return.next.parent == orig(this)
return.next.parent == orig(this.subnode.next.parent)
return.next.subnode == orig(this.subnode.next.subnode)
return.next.next == orig(this.subnode.next.next)
return.next.previous == orig(this.subnode.next.previous)
this.susbscript != null
this.parent.parent.key.toString one of { "@", "vetorLocal", "vetorLocal~xpto" }
this.parent.subnode.previous == null
this.parent.previous.subs has only one value
this.parent.previous.subs[] contains no nulls and has only one value, of length 1
this.parent.previous.subs[] elements has only one value
this.parent.previous.key has only one value
this.parent.previous.key.toString == "locVarAfterNew"
this.parent.previous.susbscript has only one value
this.parent.previous.value has only one value
this.subnode.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
this.subnode.previous == null
this.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
this.next.stackLevel == null
this.next.subnode == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "vetorLocal"
this.next.next.susbscript has only one value
this.next.next.stackLevel has only one value
this.next.next.value == null
this.next.next.subnode has only one value
this.next.next.next has only one value
this.next.next.previous has only one value
this.next.previous.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.subnode == null
this.previous.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B" }
this.previous.previous == null
return.subs != null
return.subs.getClass().getName() == java.lang.Object[].class
return.subs[] elements != null
return.key != null
return.susbscript != null
return.value.getClass().getName() == java.lang.String.class
return.parent != null
return.parent.subs != null
return.parent.subs[] elements != null
return.parent.key != null
return.parent.susbscript != null
return.parent.value == null
return.parent.subnode != null
return.subnode.subs.getClass().getName() == java.lang.Object[].class
return.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
return.subnode.stackLevel == null
return.subnode.value.getClass().getName() == java.lang.String.class
return.subnode.previous == null
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.next.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B", "zzz" }
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.value.getClass().getName() == java.lang.String.class
return.previous == null
size(return.subs[]) >= 1
size(return.parent.subs[]) one of { 1, 2, 3 }
size(return.subnode.subs[]) one of { 2, 3, 4 }
size(return.next.subs[]) one of { 1, 4 }
this.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subs.getClass().getName() != return.value.getClass().getName()
this.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != return.next.susbscript.getClass().getName()
this.susbscript in this.subs[]
return.parent.susbscript in this.subs[]
return.value.getClass().getName() in this.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in return.parent.subs[]
this.susbscript.getClass().getName() != return.subs.getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() != return.next.subs.getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.value.getClass().getName() in return.subs[].getClass().getName()
this.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.value.getClass().getName() in return.next.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.susbscript in return.next.subs[]
this.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript in return.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.susbscript in this.parent.subnode.subs[]
return.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.subs[]
this.parent.subnode.susbscript in return.next.subs[]
this.parent.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.parent.next.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript in this.parent.next.subs[]
return.next.value in this.parent.next.subs[]
return.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.parent.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.parent.next.subs[].getClass().getName()
this.parent.next.susbscript in return.next.subs[]
this.parent.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.parent.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript in this.parent.previous.subs[]
return.next.value in this.parent.previous.subs[]
return.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.parent.previous.subs[].getClass().getName()
return.next.value.getClass().getName() in this.parent.previous.subs[].getClass().getName()
this.parent.previous.susbscript in return.next.subs[]
this.parent.previous.value in return.next.subs[]
this.next.previous.susbscript in this.subnode.subs[]
return.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
return.parent.susbscript in this.subnode.parent.subs[]
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.susbscript in this.subnode.subnode.subs[]
return.susbscript in this.subnode.subnode.subs[]
return.subnode.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript in this.subnode.next.subs[]
return.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.next.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript in this.next.subs[]
return.next.value in this.next.subs[]
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.value.getClass().getName() in this.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in return.next.subs[]
this.next.susbscript in return.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.next.value in return.next.subs[]
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
return.next.susbscript in this.next.parent.subs[]
return.next.value in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.key in return.next.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.susbscript in return.next.subs[]
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in return.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
return.susbscript in this.next.next.subs[]
return.value in this.next.next.subs[]
return.parent.key in this.next.next.subs[]
return.parent.susbscript in this.next.next.subs[]
return.subnode.susbscript in this.next.next.subs[]
return.next.susbscript in this.next.next.subs[]
return.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
return.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.value.getClass().getName() in this.next.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.key in return.subs[]
this.next.next.key in return.parent.subs[]
this.next.next.key in return.subnode.subs[]
this.next.next.key in return.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript in return.subs[]
this.next.next.susbscript in return.parent.subs[]
this.next.next.susbscript in return.subnode.subs[]
this.next.next.susbscript in return.next.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
return.parent.susbscript in this.next.previous.subs[]
this.next.previous.subs[] elements == return.parent.susbscript
return.next.susbscript in this.next.previous.subs[]
return.next.value in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in return.next.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.next.previous.susbscript in return.subs[]
return.parent.subs[] elements == this.next.previous.susbscript
this.next.previous.susbscript in return.parent.subs[]
this.next.previous.susbscript in return.subnode.subs[]
this.next.previous.susbscript in return.next.subs[]
this.next.previous.value in return.next.subs[]
this.next.previous.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in return.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript in this.previous.subs[]
return.next.value in this.previous.subs[]
return.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
return.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.key in return.next.subs[]
this.previous.susbscript in return.next.subs[]
this.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.previous.value in return.next.subs[]
return.next.susbscript in this.previous.parent.subs[]
return.next.value in this.previous.parent.subs[]
return.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.previous.parent.key in return.next.subs[]
this.previous.parent.susbscript in return.next.subs[]
this.previous.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == return.parent.susbscript
return.next.susbscript in this.previous.next.subs[]
return.next.value in this.previous.next.subs[]
return.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.next.key in return.next.subs[]
this.previous.next.susbscript in return.subs[]
return.parent.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in return.parent.subs[]
this.previous.next.susbscript in return.subnode.subs[]
this.previous.next.susbscript in return.next.subs[]
this.previous.next.value in return.next.subs[]
this.previous.next.value.getClass().getName() in return.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.previous.next.value.getClass().getName() in return.next.subs[].getClass().getName()
return.subs.getClass().getName() != return.susbscript.getClass().getName()
return.subs.getClass().getName() != return.value.getClass().getName()
return.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.subs.getClass().getName() != return.next.susbscript.getClass().getName()
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.value.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript in return.subnode.subs[]
return.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() != return.next.subs.getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.value.getClass().getName() != return.next.subs.getClass().getName()
return.value.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() != return.next.subs.getClass().getName()
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript in return.subnode.subs[]
return.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
return.next.subs.getClass().getName() != return.next.susbscript.getClass().getName()
return.next.susbscript in return.next.subs[]
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.next.value.getClass().getName() in return.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getSubscriptAsString():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.next == this.subnode.parent
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.previous.subnode.parent
this.parent.next == this.parent.previous
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.previous == this.next.parent.subnode
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.next == this.previous.previous.previous
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.parent == this.previous.parent
this.next.parent.subs == this.previous.parent.subs
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.parent == this.previous.parent.parent
this.next.parent.subnode == this.previous.parent.subnode
this.next.parent.subnode == this.previous.next.previous
this.next.next == this.previous.previous
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.previous == this.previous.next
this.next.previous.subs == this.previous.next.subs
this.next.previous.key == this.previous.next.key
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.stackLevel == this.previous.stackLevel
this.next.previous.value == this.previous.next.value
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.next == this.previous.next.next
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == this.previous.next.previous
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.next.next == this.previous.previous.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode has only one value
this.parent.subnode.subs has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 1
this.parent.subnode.subs[] elements has only one value
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key has only one value
this.parent.subnode.key.toString == "locVar"
this.parent.subnode.susbscript has only one value
this.parent.subnode.value has only one value
this.parent.subnode.subnode == null
this.parent.subnode.next has only one value
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel == null
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.parent.subnode has only one value
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.next.previous.stackLevel == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous.stackLevel == null
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getSubscriptAsString():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == return.getClass().getName()
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == return.getClass().getName()
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == return.getClass().getName()
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == return.getClass().getName()
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.subnode.parent
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.previous.subnode.parent
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.parent.subnode
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == return.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == this.previous.parent
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == this.previous.parent.subs
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == this.previous.parent.key
this.next.parent.key == this.previous.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == this.previous.parent.key
this.next.parent.susbscript == this.previous.parent.susbscript
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == this.previous.parent.isNumeric
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == this.previous.parent.parent
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.previous.parent.subnode
this.next.parent.subnode == this.previous.next.previous
this.next.parent.subnode == orig(this.next.parent.subnode)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.parent == orig(this.next.next.previous)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == this.previous.previous
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.previous == this.previous.next
this.next.previous == orig(this)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == this.previous.next.subs
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == this.previous.next.key
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == this.previous.next.susbscript
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == this.previous.isNumeric
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == this.previous.stackLevel
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == this.previous.next.value
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.subnode == this.previous.next.subnode
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == this.previous.next.next
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == this.previous.parent.subnode
this.next.previous.previous == this.previous.next.previous
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == return.getClass().getName()
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.subnode.subs[] == orig(this.previous.subnode.subs[])
this.previous.subnode.key == orig(this.previous.subnode.key)
this.previous.subnode.key.toString == orig(this.previous.subnode.key.toString)
this.previous.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.previous.subnode.isNumeric == orig(this.previous.subnode.isNumeric)
this.previous.subnode.stackLevel == orig(this.previous.subnode.stackLevel)
this.previous.subnode.value == orig(this.previous.subnode.value)
this.previous.subnode.subnode == orig(this.previous.subnode.subnode)
this.previous.subnode.next == orig(this.previous.subnode.next)
this.previous.subnode.previous == orig(this.previous.subnode.previous)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous.previous
this.previous.next.next == orig(this.previous.next.next)
this.previous.next.previous == orig(this.previous.next.previous)
this.previous.previous == orig(this.previous.previous)
this.previous.previous.subs[] == orig(this.previous.previous.subs[])
this.previous.previous.key.toString == orig(this.previous.previous.key.toString)
this.previous.previous.isNumeric == orig(this.previous.previous.isNumeric)
this.previous.previous.stackLevel == orig(this.previous.previous.stackLevel)
this.previous.previous.subnode == orig(this.previous.previous.subnode)
return.getClass().getName() == orig(this.susbscript.getClass().getName())
return.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
return.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
return.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal", "zzz" }
this.isNumeric == false
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode has only one value
this.parent.subnode.subs has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 1
this.parent.subnode.subs[] elements has only one value
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key has only one value
this.parent.subnode.key.toString == "locVar"
this.parent.subnode.susbscript has only one value
this.parent.subnode.value has only one value
this.parent.subnode.subnode == null
this.parent.subnode.next has only one value
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel == null
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.parent.subnode has only one value
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.next.previous.stackLevel == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous.stackLevel == null
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
return.getClass().getName() == java.lang.String.class
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
return.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
return.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
return.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
return.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.previous.next.subs[]
this.previous.next.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
return.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
return.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.next.subs[] elements == this.previous.next.susbscript
return.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.getClass().getName() in this.previous.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getValue():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.stackLevel == this.next.next.stackLevel
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.value.getClass().getName()
this.parent == this.parent.parent.subnode
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.parent.subnode == this.next.parent
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.stackLevel == this.next.next.stackLevel
this.parent.subnode.stackLevel == this.next.previous.stackLevel
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.next.previous.next
this.parent.next == this.parent.previous
this.next.value.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.next.parent.subnode == this.next.previous
this.next.next.stackLevel == this.next.previous.stackLevel
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.parent.key == this.previous.parent.susbscript
this.previous.subnode.susbscript.getClass().getName() == this.previous.previous.value.getClass().getName()
this.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.stackLevel == null
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.next.previous.subnode == null
this.next.previous.previous == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVarAfterNew", "vetorLocal" }
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "zzz"
this.previous.next.susbscript has only one value
this.previous.next.stackLevel == null
this.previous.next.value has only one value
this.previous.next.subnode == null
this.previous.next.next == null
size(this.subs[]) one of { 1, 3, 4 }
size(this.parent.subnode.subs[]) one of { 1, 3, 4 }
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.previous.next.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.previous.next.key in this.parent.parent.subs[]
this.previous.next.susbscript in this.parent.parent.subs[]
this.previous.next.value in this.parent.parent.subs[]
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.susbscript in this.next.previous.subs[]
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.getValue():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.next.next.stackLevel
this.stackLevel == orig(this.stackLevel)
this.value == return
this.value.getClass().getName() == return.getClass().getName()
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == this.next.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == return.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.next.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.stackLevel == this.next.next.stackLevel
this.parent.subnode.stackLevel == this.next.previous.stackLevel
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == return.getClass().getName()
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == return.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == this.next.next.susbscript.getClass().getName()
this.next.value.getClass().getName() == return.getClass().getName()
this.next.value.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.previous
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.susbscript.getClass().getName() == return.getClass().getName()
this.next.next.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == orig(this.next.next.next)
this.next.next.previous == orig(this.next.next.previous)
this.next.previous == orig(this)
this.next.previous == orig(this.next.parent.subnode)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == return
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == return.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.value.getClass().getName() == return.getClass().getName()
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.subnode.subs == orig(this.previous.subnode.subs)
this.previous.subnode.subs.getClass().getName() == orig(this.previous.subnode.subs.getClass().getName())
this.previous.subnode.subs.getClass().getName() == orig(this.previous.previous.subs.getClass().getName())
this.previous.subnode.subs[] == orig(this.previous.subnode.subs[])
this.previous.subnode.key == orig(this.previous.subnode.key)
this.previous.subnode.key.toString == orig(this.previous.subnode.key.toString)
this.previous.subnode.susbscript == orig(this.previous.subnode.susbscript)
this.previous.subnode.susbscript.getClass().getName() == this.previous.previous.value.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() == orig(this.previous.subnode.susbscript.getClass().getName())
this.previous.subnode.susbscript.getClass().getName() == orig(this.previous.previous.susbscript.getClass().getName())
this.previous.subnode.susbscript.getClass().getName() == orig(this.previous.previous.value.getClass().getName())
this.previous.subnode.isNumeric == orig(this.previous.subnode.isNumeric)
this.previous.subnode.stackLevel == orig(this.previous.subnode.stackLevel)
this.previous.subnode.value == orig(this.previous.subnode.value)
this.previous.subnode.parent == orig(this.previous.subnode.parent)
this.previous.subnode.parent == orig(this.previous.previous.next)
this.previous.subnode.subnode == orig(this.previous.subnode.subnode)
this.previous.subnode.next == orig(this.previous.subnode.next)
this.previous.subnode.previous == orig(this.previous.subnode.previous)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.stackLevel == orig(this.previous.next.stackLevel)
this.previous.next.value == return
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == orig(this.previous.next.next)
this.previous.next.previous == orig(this.previous.next.previous)
this.previous.previous == orig(this.previous.previous)
this.previous.previous.subs == orig(this.previous.previous.subs)
this.previous.previous.subs[] == orig(this.previous.previous.subs[])
this.previous.previous.key == orig(this.previous.previous.key)
this.previous.previous.key.toString == orig(this.previous.previous.key.toString)
this.previous.previous.susbscript == orig(this.previous.previous.susbscript)
this.previous.previous.isNumeric == orig(this.previous.previous.isNumeric)
this.previous.previous.stackLevel == orig(this.previous.previous.stackLevel)
this.previous.previous.value == orig(this.previous.previous.value)
this.previous.previous.parent == orig(this.previous.previous.parent)
this.previous.previous.subnode == orig(this.previous.previous.subnode)
this.previous.previous.previous == orig(this.previous.previous.previous)
return == orig(this.value)
return.getClass().getName() == orig(this.value.getClass().getName())
return.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.stackLevel == null
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.next.previous.subnode == null
this.next.previous.previous == null
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVarAfterNew", "vetorLocal" }
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "zzz"
this.previous.next.susbscript has only one value
this.previous.next.stackLevel == null
this.previous.next.value has only one value
this.previous.next.subnode == null
this.previous.next.next == null
return.getClass().getName() == java.lang.String.class
size(this.subs[]) one of { 1, 3, 4 }
size(this.parent.subnode.subs[]) one of { 1, 3, 4 }
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs.getClass().getName() != return.getClass().getName()
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.previous.next.susbscript
return.getClass().getName() in this.subs[].getClass().getName()
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
return.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.previous.next.key in this.parent.parent.subs[]
this.previous.next.susbscript in this.parent.parent.subs[]
this.previous.next.value in this.parent.parent.subs[]
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
return.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
return.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.next.previous.subs[]
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
return.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
return.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
return.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName()
return.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
return.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
this.previous.subs[] elements == this.previous.susbscript
return.getClass().getName() in this.previous.subs[].getClass().getName()
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
return.getClass().getName() in this.previous.parent.subs[].getClass().getName()
return.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
this.previous.next.subs[] elements == this.previous.next.susbscript
return.getClass().getName() in this.previous.next.subs[].getClass().getName()
return.getClass().getName() in this.previous.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasNext():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.next == this.subnode.parent
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.previous.next
this.parent.next == this.parent.previous
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.next == this.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.next == this.previous.previous
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.parent.subnode == this.next.previous
this.next.next == this.next.previous.previous
this.next.next == this.previous
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.next.next == this.previous.previous
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.parent.subnode.subnode == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.next.previous.stackLevel == null
this.next.previous.subnode == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVar"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString == "vetorLocal"
this.previous.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.parent.susbscript in this.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.next.subs[] elements == this.next.susbscript
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasNext():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.subnode.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.subnode.parent
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.previous.next)
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs == orig(this.previous.next.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key == orig(this.previous.next.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.subnode == orig(this.previous.next.subnode)
this.subnode.parent.next == this.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.parent.previous == orig(this.previous.parent.subnode)
this.subnode.parent.previous == orig(this.previous.next.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.previous
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == this.next.previous.previous
this.next.next == this.previous
this.next.next == orig(this.next.next)
this.next.next == orig(this.next.previous.previous)
this.next.previous == orig(this)
this.next.previous == orig(this.next.parent.subnode)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == orig(this.next.previous.next)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.isNumeric == orig(this.subnode.parent.isNumeric)
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.subnode.parent.stackLevel)
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.next == this.previous.previous
this.previous.previous == orig(this.subnode.parent.next)
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
(this.next == null)  <==>  (return == false)
(this.next == null)  ==>  (size(this.parent.subnode.subs[]) one of { 1, 4 })
(this.next == null)  ==>  (size(this.parent.subs[]) one of { 1, 3 })
(this.next == null)  ==>  (size(this.subs[]) one of { 1, 4 })
(this.next == null)  ==>  (this.key == this.subnode.parent.key)
(this.next == null)  ==>  (this.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" })
(this.next == null)  ==>  (this.next == this.previous.previous)
(this.next == null)  ==>  (this.parent == this.parent.parent.subnode)
(this.next == null)  ==>  (this.parent == this.previous.parent)
(this.next == null)  ==>  (this.parent.isNumeric == this.previous.parent.isNumeric)
(this.next == null)  ==>  (this.parent.key == this.previous.parent.key)
(this.next == null)  ==>  (this.parent.key == this.previous.parent.susbscript)
(this.next == null)  ==>  (this.parent.key in this.previous.parent.subs[])
(this.next == null)  ==>  (this.parent.key.toString one of { "@", "vetorLocal~xpto~34" })
(this.next == null)  ==>  (this.parent.parent == this.previous.parent.parent)
(this.next == null)  ==>  (this.parent.parent.key has only one value)
(this.next == null)  ==>  (this.parent.parent.key in this.previous.next.subs[])
(this.next == null)  ==>  (this.parent.parent.key in this.previous.parent.subs[])
(this.next == null)  ==>  (this.parent.parent.key in this.previous.subs[])
(this.next == null)  ==>  (this.parent.parent.key in this.subnode.parent.subs[])
(this.next == null)  ==>  (this.parent.parent.key in this.subnode.subnode.subs[])
(this.next == null)  ==>  (this.parent.parent.key in this.subnode.subs[])
(this.next == null)  ==>  (this.parent.parent.key.toString == "vetorLocal~xpto")
(this.next == null)  ==>  (this.parent.parent.next == null)
(this.next == null)  ==>  (this.parent.parent.parent has only one value)
(this.next == null)  ==>  (this.parent.parent.stackLevel == null)
(this.next == null)  ==>  (this.parent.parent.subnode has only one value)
(this.next == null)  ==>  (this.parent.parent.subs has only one value)
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() == java.lang.Object[].class)
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.subs[] contains no nulls and has only one value, of length 2)
(this.next == null)  ==>  (this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.next == null)  ==>  (this.parent.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.next == null)  ==>  (this.parent.parent.susbscript has only one value)
(this.next == null)  ==>  (this.parent.parent.susbscript in this.parent.parent.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.parent.subnode.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.parent.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.previous.next.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.previous.parent.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.previous.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.subnode.parent.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.subnode.subnode.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.subnode.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript in this.subs[])
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.parent.value == null)
(this.next == null)  ==>  (this.parent.subnode == this.subnode.parent.previous)
(this.next == null)  ==>  (this.parent.subnode.key == this.previous.key)
(this.next == null)  ==>  (this.parent.subnode.key.toString one of { "locVar", "vetorLocal~xpto~34~A" })
(this.next == null)  ==>  (this.parent.subnode.next == this.subnode.parent)
(this.next == null)  ==>  (this.parent.subnode.subnode == this.subnode.next)
(this.next == null)  ==>  (this.parent.subnode.subs == this.previous.subs)
(this.next == null)  ==>  (this.parent.subnode.subs[] elements == this.previous.susbscript)
(this.next == null)  ==>  (this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.next == null)  ==>  (this.parent.subnode.susbscript == this.previous.susbscript)
(this.next == null)  ==>  (this.parent.subnode.susbscript in this.previous.subs[])
(this.next == null)  ==>  (this.parent.subnode.value == this.previous.value)
(this.next == null)  ==>  (this.parent.subs == this.previous.parent.subs)
(this.next == null)  ==>  (this.parent.subs[] elements == this.previous.parent.key)
(this.next == null)  ==>  (this.parent.subs[] elements == this.previous.parent.susbscript)
(this.next == null)  ==>  (this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] })
(this.next == null)  ==>  (this.parent.susbscript == this.previous.parent.key)
(this.next == null)  ==>  (this.parent.susbscript == this.previous.parent.susbscript)
(this.next == null)  ==>  (this.parent.susbscript in this.previous.parent.subs[])
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName())
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.previous.key has only one value)
(this.next == null)  ==>  (this.previous.key in this.parent.parent.subs[])
(this.next == null)  ==>  (this.previous.key.toString == "locVar")
(this.next == null)  ==>  (this.previous.next.key.toString == "vetorLocal")
(this.next == null)  ==>  (this.previous.next.subs[] contains no nulls and has only one value, of length 1)
(this.next == null)  ==>  (this.previous.next.subs[] elements == this.subnode.parent.susbscript)
(this.next == null)  ==>  (this.previous.next.subs[] elements == this.susbscript)
(this.next == null)  ==>  (this.previous.next.subs[] elements has only one value)
(this.next == null)  ==>  (this.previous.next.subs[].getClass().getName() == [java.lang.String])
(this.next == null)  ==>  (this.previous.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.next == null)  ==>  (this.previous.parent has only one value)
(this.next == null)  ==>  (this.previous.parent.key == this.previous.parent.susbscript)
(this.next == null)  ==>  (this.previous.parent.key has only one value)
(this.next == null)  ==>  (this.previous.parent.key in this.parent.parent.subs[])
(this.next == null)  ==>  (this.previous.parent.key in this.parent.subs[])
(this.next == null)  ==>  (this.previous.parent.key in this.previous.parent.subs[])
(this.next == null)  ==>  (this.previous.parent.key.toString == "@")
(this.next == null)  ==>  (this.previous.parent.next == null)
(this.next == null)  ==>  (this.previous.parent.parent == null)
(this.next == null)  ==>  (this.previous.parent.previous == null)
(this.next == null)  ==>  (this.previous.parent.stackLevel == null)
(this.next == null)  ==>  (this.previous.parent.subs has only one value)
(this.next == null)  ==>  (this.previous.parent.subs[] contains no nulls and has only one value, of length 1)
(this.next == null)  ==>  (this.previous.parent.subs[] elements == this.parent.key)
(this.next == null)  ==>  (this.previous.parent.subs[] elements == this.parent.susbscript)
(this.next == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.key)
(this.next == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.susbscript)
(this.next == null)  ==>  (this.previous.parent.subs[] elements has only one value)
(this.next == null)  ==>  (this.previous.parent.subs[].getClass().getName() == [java.lang.String])
(this.next == null)  ==>  (this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.next == null)  ==>  (this.previous.parent.susbscript has only one value)
(this.next == null)  ==>  (this.previous.parent.susbscript in this.parent.parent.subs[])
(this.next == null)  ==>  (this.previous.parent.susbscript in this.parent.subs[])
(this.next == null)  ==>  (this.previous.parent.susbscript in this.previous.parent.subs[])
(this.next == null)  ==>  (this.previous.parent.value == null)
(this.next == null)  ==>  (this.previous.previous == null)
(this.next == null)  ==>  (this.previous.stackLevel == null)
(this.next == null)  ==>  (this.previous.subnode == null)
(this.next == null)  ==>  (this.previous.subs has only one value)
(this.next == null)  ==>  (this.previous.subs[] contains no nulls and has only one value, of length 1)
(this.next == null)  ==>  (this.previous.subs[] elements == this.parent.subnode.susbscript)
(this.next == null)  ==>  (this.previous.subs[] elements == this.previous.susbscript)
(this.next == null)  ==>  (this.previous.subs[] elements has only one value)
(this.next == null)  ==>  (this.previous.subs[].getClass().getName() == [java.lang.String])
(this.next == null)  ==>  (this.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.next == null)  ==>  (this.previous.susbscript has only one value)
(this.next == null)  ==>  (this.previous.susbscript in this.parent.parent.subs[])
(this.next == null)  ==>  (this.previous.susbscript in this.parent.subnode.subs[])
(this.next == null)  ==>  (this.previous.susbscript in this.previous.subs[])
(this.next == null)  ==>  (this.previous.value has only one value)
(this.next == null)  ==>  (this.previous.value in this.parent.parent.subs[])
(this.next == null)  ==>  (this.stackLevel == this.previous.stackLevel)
(this.next == null)  ==>  (this.subnode == this.subnode.parent.subnode)
(this.next == null)  ==>  (this.subnode.key has only one value)
(this.next == null)  ==>  (this.subnode.key.toString == "vetorLocal~xpto")
(this.next == null)  ==>  (this.subnode.next == null)
(this.next == null)  ==>  (this.subnode.parent == orig(this))
(this.next == null)  ==>  (this.subnode.parent has only one value)
(this.next == null)  ==>  (this.subnode.parent.key has only one value)
(this.next == null)  ==>  (this.subnode.parent.key in this.parent.parent.subs[])
(this.next == null)  ==>  (this.subnode.parent.key.toString == "vetorLocal")
(this.next == null)  ==>  (this.subnode.parent.previous == this.previous)
(this.next == null)  ==>  (this.subnode.parent.previous has only one value)
(this.next == null)  ==>  (this.subnode.parent.subnode has only one value)
(this.next == null)  ==>  (this.subnode.parent.subs has only one value)
(this.next == null)  ==>  (this.subnode.parent.subs[] contains no nulls and has only one value, of length 1)
(this.next == null)  ==>  (this.subnode.parent.subs[] elements == this.subnode.parent.susbscript)
(this.next == null)  ==>  (this.subnode.parent.subs[] elements == this.susbscript)
(this.next == null)  ==>  (this.subnode.parent.subs[] elements has only one value)
(this.next == null)  ==>  (this.subnode.parent.subs[].getClass().getName() == [java.lang.String])
(this.next == null)  ==>  (this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.next == null)  ==>  (this.subnode.parent.susbscript has only one value)
(this.next == null)  ==>  (this.subnode.parent.susbscript in this.parent.parent.subs[])
(this.next == null)  ==>  (this.subnode.parent.susbscript in this.previous.next.subs[])
(this.next == null)  ==>  (this.subnode.parent.susbscript in this.subnode.parent.subs[])
(this.next == null)  ==>  (this.subnode.parent.susbscript in this.subnode.subnode.subs[])
(this.next == null)  ==>  (this.subnode.parent.susbscript in this.subnode.subs[])
(this.next == null)  ==>  (this.subnode.parent.susbscript in this.subs[])
(this.next == null)  ==>  (this.subnode.parent.value == null)
(this.next == null)  ==>  (this.subnode.previous == null)
(this.next == null)  ==>  (this.subnode.stackLevel == null)
(this.next == null)  ==>  (this.subnode.subnode has only one value)
(this.next == null)  ==>  (this.subnode.subnode.key has only one value)
(this.next == null)  ==>  (this.subnode.subnode.key.toString == "vetorLocal~xpto~34")
(this.next == null)  ==>  (this.subnode.subnode.next == null)
(this.next == null)  ==>  (this.subnode.subnode.previous == null)
(this.next == null)  ==>  (this.subnode.subnode.stackLevel == null)
(this.next == null)  ==>  (this.subnode.subnode.subnode has only one value)
(this.next == null)  ==>  (this.subnode.subnode.subs has only one value)
(this.next == null)  ==>  (this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3)
(this.next == null)  ==>  (this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer])
(this.next == null)  ==>  (this.subnode.subnode.susbscript has only one value)
(this.next == null)  ==>  (this.subnode.subnode.susbscript in this.parent.parent.subs[])
(this.next == null)  ==>  (this.subnode.subnode.susbscript in this.subnode.subnode.subs[])
(this.next == null)  ==>  (this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class)
(this.next == null)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.subnode.value == null)
(this.next == null)  ==>  (this.subnode.subs has only one value)
(this.next == null)  ==>  (this.subnode.subs.getClass().getName() == java.lang.Object[].class)
(this.next == null)  ==>  (this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.subs[] contains no nulls and has only one value, of length 2)
(this.next == null)  ==>  (this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.next == null)  ==>  (this.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.next == null)  ==>  (this.subnode.susbscript has only one value)
(this.next == null)  ==>  (this.subnode.susbscript in this.parent.parent.subs[])
(this.next == null)  ==>  (this.subnode.susbscript in this.subnode.subnode.subs[])
(this.next == null)  ==>  (this.subnode.susbscript in this.subnode.subs[])
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() == java.lang.String.class)
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.next == null)  ==>  (this.subnode.value == null)
(this.next == null)  ==>  (this.subnode.value in this.parent.parent.subs[])
(this.next == null)  ==>  (this.subs == this.subnode.parent.subs)
(this.next == null)  ==>  (this.subs.getClass().getName() == this.parent.parent.subs.getClass().getName())
(this.next == null)  ==>  (this.subs.getClass().getName() == this.subnode.subs.getClass().getName())
(this.next == null)  ==>  (this.subs[] elements == this.subnode.parent.susbscript)
(this.next == null)  ==>  (this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.next == null)  ==>  (this.susbscript == this.subnode.parent.susbscript)
(this.next == null)  ==>  (this.susbscript in this.previous.next.subs[])
(this.next == null)  ==>  (this.susbscript in this.subnode.parent.subs[])
(this.next == null)  ==>  (this.susbscript in this.subnode.subnode.subs[])
(this.next == null)  ==>  (this.susbscript in this.subnode.subs[])
(this.next == null)  ==>  (this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.value == this.subnode.value)
(this.next == null)  ==>  (this.value.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.next == null)  ==>  (this.value.getClass().getName() in this.subnode.subs[].getClass().getName())
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.parent.subnode.subnode == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew" }
this.next.previous.stackLevel == null
this.next.previous.subnode == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVar"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.subnode == null
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString == "vetorLocal"
this.previous.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.previous.key in this.parent.parent.subs[]
this.previous.susbscript in this.parent.parent.subs[]
this.previous.value in this.parent.parent.subs[]
this.previous.parent.key in this.parent.parent.subs[]
this.previous.parent.susbscript in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.previous.subs[]
this.parent.parent.key in this.previous.parent.subs[]
this.parent.parent.key in this.previous.next.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.parent.susbscript in this.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.next.subs[] elements == this.next.susbscript
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasNext():::EXIT;condition="return == true"
this.subs == this.parent.subnode.subs
this.subs == orig(this.parent.subnode.subs)
this.subs == orig(this.next.previous.subs)
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.key == this.parent.subnode.key
this.key == orig(this.parent.subnode.key)
this.key == orig(this.next.previous.key)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.parent.subnode.susbscript)
this.susbscript == orig(this.next.previous.susbscript)
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.isNumeric == orig(this.next.previous.isNumeric)
this.stackLevel == orig(this.next.previous.stackLevel)
this.value == this.parent.subnode.value
this.value == orig(this.parent.subnode.value)
this.value == orig(this.next.previous.value)
this.parent == this.next.previous.parent
this.parent == orig(this.next.parent)
this.parent == orig(this.next.previous.parent)
this.parent.subs == orig(this.next.parent.subs)
this.parent.key == this.parent.susbscript
this.parent.key == orig(this.next.parent.key)
this.parent.susbscript == orig(this.next.parent.susbscript)
this.parent.isNumeric == orig(this.next.parent.isNumeric)
this.parent.parent == orig(this.next.parent.parent)
this.parent.subnode == this.next.parent.subnode
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.next.parent.subnode)
this.parent.subnode == orig(this.next.previous)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.next.previous.subnode)
this.next == orig(this.parent.subnode.next)
this.next == orig(this.next.previous.next)
this.next.previous.previous == this.previous
this.previous == orig(this.next.next)
this.previous == orig(this.next.previous.previous)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "locVarAfterNew" }
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew" }
this.subnode == null
this.previous == null
return == true
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
this.subs[] elements == this.susbscript
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasNext():::EXIT;condition="not(return == true)"
this.key.toString one of { "locVar", "vetorLocal", "vetorLocal~xpto~34~A" }
this.parent.subnode.key.toString one of { "locVar", "vetorLocal~xpto~34~A" }
this.next == null
return == false
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasParent():::ENTER
this == this.parent.subnode
this.subs == this.parent.subnode.subs
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.key == this.parent.subnode.key
this.susbscript == this.parent.subnode.susbscript
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.value == this.parent.subnode.value
this.value == this.subnode.value
this.parent.key == this.parent.susbscript
this.parent.subnode == this.subnode.parent
this.parent.subnode == this.next.previous
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.subnode.parent.previous == this.next.next
this.next.next.next == this.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel has only one value
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "vetorLocal" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasParent():::EXIT
this.subs == this.parent.subnode.subs
this.subs == orig(this.subs)
this.subs == orig(this.parent.subnode.subs)
this.subs == orig(this.next.previous.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.parent.subnode.key
this.key == orig(this.key)
this.key == orig(this.parent.subnode.key)
this.key == orig(this.next.previous.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.parent.subnode.susbscript)
this.susbscript == orig(this.next.previous.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.isNumeric == orig(this.next.previous.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.stackLevel == orig(this.next.previous.stackLevel)
this.value == this.parent.subnode.value
this.value == this.subnode.value
this.value == orig(this.value)
this.value == orig(this.parent.subnode.value)
this.value == orig(this.next.previous.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent == orig(this.next.parent)
this.parent == orig(this.next.previous.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs == orig(this.next.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key == orig(this.next.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript == orig(this.next.parent.susbscript)
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.isNumeric == orig(this.next.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent == orig(this.next.parent.parent)
this.parent.subnode == this.subnode.parent
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode == orig(this.next.parent.subnode)
this.parent.subnode == orig(this.next.previous)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.next.previous.subnode)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.parent.subnode.next)
this.next == orig(this.next)
this.next == orig(this.next.previous.next)
this.next.subs == orig(this.next.subs)
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.parent == orig(this.next.next.previous)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel has only one value
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "vetorLocal" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel has only one value
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous == null
return == true
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasParent():::EXIT;condition="return == true"
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasPrevious():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == this.previous.stackLevel
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.previous.next
this.parent.next == this.parent.previous
this.next == this.previous.previous
this.next.parent.key == this.next.parent.susbscript
this.next.next.next == this.previous
this.previous == this.previous.parent.subnode
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.subnode == this.previous.next.previous
this.previous.next.next == this.previous.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVarAfterNew", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVarAfterNew", "zzz" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key has only one value
this.next.key.toString == "vetorLocal"
this.next.susbscript has only one value
this.next.stackLevel has only one value
this.next.value == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.subnode has only one value
this.next.next has only one value
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key has only one value
this.next.previous.key.toString == "locVarAfterNew"
this.next.previous.susbscript has only one value
this.next.previous.value has only one value
this.next.previous.subnode == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVarAfterNew"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "zzz"
this.previous.next.susbscript has only one value
this.previous.next.value has only one value
this.previous.next.subnode == null
this.previous.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.next.subs[] elements == this.next.susbscript
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasPrevious():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.next == this.previous.previous
this.next == orig(this.next)
this.next.subs[] == orig(this.next.subs[])
this.next.key.toString == orig(this.next.key.toString)
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.value == orig(this.next.next.value)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.previous
this.next.previous == orig(this)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == this.previous.parent.subnode
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == this.previous.next.previous
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.subnode == orig(this.previous.next.previous)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
(this.parent.subnode.next has only one value)  <==>  (return == true)
(this.parent.subnode.next has only one value)  <==>  (this.previous has only one value)
(this.parent.subnode.next has only one value)  ==>  (orig(this) has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.key == this.previous.next.key)
(this.parent.subnode.next has only one value)  ==>  (this.key has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.key.toString == "zzz")
(this.parent.subnode.next has only one value)  ==>  (this.next == null)
(this.parent.subnode.next has only one value)  ==>  (this.next == this.previous.previous)
(this.parent.subnode.next has only one value)  ==>  (this.parent == this.previous.parent)
(this.parent.subnode.next has only one value)  ==>  (this.parent.key == this.previous.parent.key)
(this.parent.subnode.next has only one value)  ==>  (this.parent.key == this.previous.parent.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.parent.key in this.previous.parent.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.parent.parent == this.previous.parent.parent)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode == this.previous)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.key == this.previous.key)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.key has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.key.toString == "locVarAfterNew")
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.next == orig(this))
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.next == this.previous.next)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.subs == this.previous.subs)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.subs has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.subs[] contains no nulls and has only one value, of length 1)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.subs[] elements == this.previous.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.subs[] elements has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.susbscript == this.previous.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.susbscript has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.susbscript in this.previous.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.value == this.previous.value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subnode.value has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subs == this.previous.parent.subs)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subs[] elements == this.previous.parent.key)
(this.parent.subnode.next has only one value)  ==>  (this.parent.subs[] elements == this.previous.parent.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.parent.susbscript == this.previous.parent.key)
(this.parent.subnode.next has only one value)  ==>  (this.parent.susbscript == this.previous.parent.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.parent.susbscript in this.previous.parent.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous == this.previous.parent.subnode)
(this.parent.subnode.next has only one value)  ==>  (this.previous.key has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.key.toString == "locVarAfterNew")
(this.parent.subnode.next has only one value)  ==>  (this.previous.next == orig(this))
(this.parent.subnode.next has only one value)  ==>  (this.previous.next has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.key has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.key.toString == "zzz")
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subnode == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs[] contains no nulls and has only one value, of length 1)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs[] elements == this.previous.next.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs[] elements == this.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs[] elements has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs[].getClass().getName() == [java.lang.String])
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.susbscript has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.susbscript in this.previous.next.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.susbscript in this.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.next.value has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.key == this.previous.parent.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.key has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.key in this.parent.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.key in this.previous.parent.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.key.toString == "@")
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.next == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.parent == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.previous == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.stackLevel == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subnode has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[] contains no nulls and has only one value, of length 1)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[] elements == this.parent.key)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[] elements == this.parent.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.key)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[] elements has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[].getClass().getName() == [java.lang.String])
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.susbscript has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.susbscript in this.parent.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.susbscript in this.previous.parent.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.parent.value == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.previous == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.stackLevel == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subnode == null)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs.getClass().getName() == java.lang.Object[].class)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs[] contains no nulls and has only one value, of length 1)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs[] elements == this.parent.subnode.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs[] elements == this.previous.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs[] elements has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs[].getClass().getName() == [java.lang.String])
(this.parent.subnode.next has only one value)  ==>  (this.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript in this.parent.subnode.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript in this.previous.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() == java.lang.String.class)
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.previous.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.previous.value has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.stackLevel == this.previous.stackLevel)
(this.parent.subnode.next has only one value)  ==>  (this.subnode == this.previous.next.subnode)
(this.parent.subnode.next has only one value)  ==>  (this.subs == this.previous.next.subs)
(this.parent.subnode.next has only one value)  ==>  (this.subs has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.subs.getClass().getName() == this.previous.subs.getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.subs[] contains no nulls and has only one value, of length 1)
(this.parent.subnode.next has only one value)  ==>  (this.subs[] elements == this.previous.next.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.subs[] elements has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.susbscript == this.previous.next.susbscript)
(this.parent.subnode.next has only one value)  ==>  (this.susbscript has only one value)
(this.parent.subnode.next has only one value)  ==>  (this.susbscript in this.previous.next.subs[])
(this.parent.subnode.next has only one value)  ==>  (this.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.parent.subnode.next has only one value)  ==>  (this.value == this.previous.next.value)
(this.parent.subnode.next has only one value)  ==>  (this.value has only one value)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVarAfterNew", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVarAfterNew", "zzz" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key has only one value
this.next.key.toString == "vetorLocal"
this.next.susbscript has only one value
this.next.stackLevel has only one value
this.next.value == null
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.subnode has only one value
this.next.next has only one value
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key has only one value
this.next.previous.key.toString == "locVarAfterNew"
this.next.previous.susbscript has only one value
this.next.previous.value has only one value
this.next.previous.subnode == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVarAfterNew"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "zzz"
this.previous.next.susbscript has only one value
this.previous.next.value has only one value
this.previous.next.subnode == null
this.previous.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.next.subs[] elements == this.next.susbscript
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasPrevious():::EXIT;condition="return == true"
this.subs == orig(this.previous.next.subs)
this.subs.getClass().getName() == this.previous.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.key == orig(this.previous.next.key)
this.susbscript == orig(this.previous.next.susbscript)
this.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.next.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.isNumeric == this.previous.next.isNumeric
this.isNumeric == orig(this.previous.isNumeric)
this.isNumeric == orig(this.previous.next.isNumeric)
this.stackLevel == this.previous.next.stackLevel
this.stackLevel == orig(this.previous.stackLevel)
this.stackLevel == orig(this.previous.next.stackLevel)
this.value == orig(this.previous.next.value)
this.parent == this.previous.next.parent
this.parent == orig(this.previous.parent)
this.parent == orig(this.previous.next.parent)
this.parent.subs == orig(this.previous.parent.subs)
this.parent.key == orig(this.previous.parent.key)
this.parent.susbscript == orig(this.previous.parent.susbscript)
this.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.parent.parent == orig(this.previous.parent.parent)
this.parent.subnode == this.previous
this.subnode == orig(this.previous.next.subnode)
this.next == this.previous.next.next
this.next == orig(this.previous.next.next)
this.next == orig(this.previous.previous)
this.previous == this.previous.next.previous
this.previous == orig(this.parent.subnode)
this.previous == orig(this.previous.parent.subnode)
this.previous == orig(this.previous.next.previous)
this.previous.subs == orig(this.parent.subnode.subs)
this.previous.key == orig(this.parent.subnode.key)
this.previous.susbscript == orig(this.parent.subnode.susbscript)
this.previous.value == orig(this.parent.subnode.value)
this.previous.next == orig(this.parent.subnode.next)
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.key has only one value
this.key.toString == "zzz"
this.susbscript has only one value
this.value has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 1
this.parent.subnode.subs[] elements has only one value
this.parent.subnode.key.toString == "locVarAfterNew"
this.next == null
this.previous has only one value
return == true
orig(this) has only one value
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasPrevious():::EXIT;condition="not(return == true)"
this.subs == this.parent.subnode.subs
this.subs == orig(this.parent.subnode.subs)
this.key == this.parent.subnode.key
this.key == orig(this.parent.subnode.key)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.parent.subnode.susbscript)
this.value == this.parent.subnode.value
this.value == orig(this.parent.subnode.value)
this.parent.subnode == orig(this)
this.parent.subnode.next == this.next
this.next == orig(this.parent.subnode.next)
this.previous == null
return == false
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasSubnodes():::ENTER
this == this.parent.subnode
this.subs == this.parent.subnode.subs
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.key == this.parent.subnode.key
this.susbscript == this.parent.subnode.susbscript
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.value == this.parent.subnode.value
this.parent == this.parent.parent.subnode
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.parent.subnode == this.parent.subnode.parent
this.parent.subnode == this.subnode.parent
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.subnode.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.subnode.parent.previous == this.next
this.next == this.previous
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.key.toString one of { "@", "vetorLocal~xpto~34" }
this.stackLevel == null
this.value == null
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "vetorLocal~xpto"
this.parent.susbscript has only one value
this.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent has only one value
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.parent.subs[] elements has only one value
this.parent.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.parent.previous has only one value
this.parent.subnode has only one value
this.parent.subnode.subs has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 3
this.parent.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.parent.subnode.key has only one value
this.parent.subnode.key.toString == "vetorLocal~xpto~34"
this.parent.subnode.susbscript has only one value
this.parent.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.parent.subnode.isNumeric == true
this.parent.subnode.stackLevel == null
this.parent.subnode.value == null
this.parent.subnode.subnode has only one value
this.parent.subnode.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.subnode.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.value == null
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.parent has only one value
this.subnode.previous == null
this.next == null
size(this.subs[]) one of { 1, 3 }
size(this.parent.subs[]) == 2
size(this.parent.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 3
size(this.subnode.subs[]) one of { 1, 4 }
size(this.subnode.parent.subs[]) one of { 1, 3 }
size(this.subnode.subnode.subs[]) == 2
size(this.subnode.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.parent.subnode.susbscript in this.subs[]
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.parent.subnode.subs[]
this.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.subnode.subnode.susbscript in this.parent.subs[]
this.subnode.next.susbscript in this.parent.subs[]
this.subnode.next.value in this.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.subnode.subnode.subs[]
this.parent.key in this.subnode.next.subs[]
this.parent.susbscript in this.parent.subnode.subs[]
this.parent.susbscript in this.subnode.subs[]
this.parent.susbscript in this.subnode.parent.subs[]
this.parent.susbscript in this.subnode.subnode.subs[]
this.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.subs[] elements == this.parent.parent.susbscript
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.subnode.next.susbscript in this.parent.parent.subs[]
this.subnode.next.value in this.parent.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.subnode.next.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.subnode.susbscript in this.parent.subnode.subs[]
this.subnode.next.susbscript in this.parent.subnode.subs[]
this.subnode.next.value in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.key in this.subnode.subnode.subs[]
this.parent.subnode.key in this.subnode.next.subs[]
this.parent.subnode.susbscript in this.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.parent.subs[]
this.parent.subnode.susbscript in this.subnode.subnode.subs[]
this.parent.subnode.value in this.subnode.subnode.subs[]
this.parent.subnode.value in this.subnode.next.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasSubnodes():::EXIT
this.subs == this.parent.subnode.subs
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.parent.subnode.key
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.subnode.parent.stackLevel)
this.value == this.parent.subnode.value
this.value == orig(this.value)
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.subnode.parent.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.parent.subnode.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.subnode == orig(this.parent.subnode.parent)
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.previous == orig(this.parent.parent.previous)
this.parent.subnode == this.subnode.parent
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.isNumeric == orig(this.parent.subnode.isNumeric)
this.parent.subnode.stackLevel == orig(this.parent.subnode.stackLevel)
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.previous == this.next
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.parent == orig(this)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous
this.next == orig(this.subnode.parent.next)
this.next == orig(this.subnode.parent.previous)
this.next == orig(this.next)
this.next == orig(this.previous)
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.key.toString one of { "@", "vetorLocal~xpto~34" }
this.stackLevel == null
this.value == null
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "vetorLocal~xpto"
this.parent.susbscript has only one value
this.parent.susbscript.getClass().getName() == java.lang.String.class
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent has only one value
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.parent.subs[] elements has only one value
this.parent.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.parent.previous has only one value
this.parent.subnode has only one value
this.parent.subnode.subs has only one value
this.parent.subnode.subs[] contains no nulls and has only one value, of length 3
this.parent.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.parent.subnode.key has only one value
this.parent.subnode.key.toString == "vetorLocal~xpto~34"
this.parent.subnode.susbscript has only one value
this.parent.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.parent.subnode.isNumeric == true
this.parent.subnode.stackLevel == null
this.parent.subnode.value == null
this.parent.subnode.subnode has only one value
this.parent.subnode.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.subnode.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.value == null
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.parent has only one value
this.subnode.previous == null
this.next == null
return == true
size(this.subs[]) one of { 1, 3 }
size(this.parent.subs[]) == 2
size(this.parent.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 3
size(this.subnode.subs[]) one of { 1, 4 }
size(this.subnode.parent.subs[]) one of { 1, 3 }
size(this.subnode.subnode.subs[]) == 2
size(this.subnode.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.parent.subnode.susbscript in this.subs[]
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.parent.subnode.subs[]
this.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.subnode.subnode.susbscript in this.parent.subs[]
this.subnode.next.susbscript in this.parent.subs[]
this.subnode.next.value in this.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.key in this.subnode.subnode.subs[]
this.parent.key in this.subnode.next.subs[]
this.parent.susbscript in this.parent.subnode.subs[]
this.parent.susbscript in this.subnode.subs[]
this.parent.susbscript in this.subnode.parent.subs[]
this.parent.susbscript in this.subnode.subnode.subs[]
this.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.subs[] elements == this.parent.parent.susbscript
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.subnode.next.susbscript in this.parent.parent.subs[]
this.subnode.next.value in this.parent.parent.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.subnode.next.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.subnode.susbscript in this.parent.subnode.subs[]
this.subnode.next.susbscript in this.parent.subnode.subs[]
this.subnode.next.value in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.key in this.subnode.subnode.subs[]
this.parent.subnode.key in this.subnode.next.subs[]
this.parent.subnode.susbscript in this.subnode.subs[]
this.parent.subnode.susbscript in this.subnode.parent.subs[]
this.parent.subnode.susbscript in this.subnode.subnode.subs[]
this.parent.subnode.value in this.subnode.subnode.subs[]
this.parent.subnode.value in this.subnode.next.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.hasSubnodes():::EXIT;condition="return == true"
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isAfter(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == this.parent.subnode
this == this.next.previous
this.subs == this.parent.subnode.subs
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.key == this.parent.subnode.key
this.susbscript == this.parent.subnode.susbscript
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.value == this.parent.subnode.value
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
arg0 == arg0.subnode.parent
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key has only one value
this.next.previous.key.toString == "locVarAfterNew"
this.next.previous.susbscript has only one value
this.next.previous.stackLevel == null
this.next.previous.value has only one value
this.next.previous.subnode == null
this.next.previous.previous == null
this.previous == null
arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.isNumeric == false
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(arg0.subs[]) one of { 1, 4 }
size(arg0.subnode.subs[]) == 2
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.next.previous.susbscript
this.susbscript in this.parent.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in arg0.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.next.subs[] elements == this.next.susbscript
this.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.previous.subs[] elements == this.next.previous.susbscript
arg0.susbscript in arg0.subs[]
arg0.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript in arg0.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isAfter(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.subs == this.parent.subnode.subs
this.subs == orig(this.subs)
this.subs == orig(this.parent.subnode.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.parent.subnode.key
this.key == orig(this.key)
this.key == orig(this.parent.subnode.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.parent.subnode.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.next.next.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.parent.subnode.value
this.value == orig(this.value)
this.value == orig(this.parent.subnode.value)
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.next.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.next == orig(this.parent.subnode.next)
this.next == orig(this.next)
this.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.next.subs[] == orig(this.next.subs[])
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == this.next.previous.stackLevel
this.next.next.value == orig(this.next.next.value)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.previous == orig(this)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.parent == orig(arg0.parent)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.previous == orig(arg0.previous)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (arg0.key.toString one of { "locVar", "locVarAfterNew" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (arg0.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (return == false)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (return == true)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.key.toString == "vetorLocal")
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.key.toString == "zzz")
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.next == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.next has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.stackLevel == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.stackLevel has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.subnode == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.subnode has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.value == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  <==>  (this.next.value has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.key has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.key.toString == "vetorLocal~xpto")
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.next == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.parent == orig(arg0))
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.parent has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.previous == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.stackLevel == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subnode has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subs has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subs.getClass().getName() == java.lang.Object[].class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subs[] contains no nulls and has only one value, of length 2)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.susbscript has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.susbscript in arg0.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.susbscript in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subnode.value == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subs[] elements == arg0.susbscript)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subs[].getClass().getName() == [java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.susbscript in arg0.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in arg0.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (arg0.value.getClass().getName() in this.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(arg0.subs[]) == 1)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(arg0.subs[]) one of { 1, 4 })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(this.parent.subnode.subs[]) == 1)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(this.parent.subnode.subs[]) one of { 1, 4 })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(this.parent.subs[]) == 1)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(this.parent.subs[]) one of { 1, 3 })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(this.subs[]) == 1)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (size(this.subs[]) one of { 1, 4 })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.key.toString one of { "locVarAfterNew", "zzz" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next == this.next.subnode.parent)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.key in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next == this.previous)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.key has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.key.toString == "zzz")
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.next == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.next == this.previous)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.parent has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.stackLevel == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subnode == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subs has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subs[] contains no nulls and has only one value, of length 1)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subs[] elements == this.next.next.susbscript)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subs[] elements has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subs[].getClass().getName() == [java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.susbscript has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.susbscript in this.next.next.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.next.value has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.parent.key in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.parent.susbscript in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.previous.key in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.previous.susbscript in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.previous.value in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.key has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.key.toString == "vetorLocal~xpto")
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.next == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.parent has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.previous == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.stackLevel == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.subnode has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.subs has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.subs.getClass().getName() == java.lang.Object[].class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.subs[] contains no nulls and has only one value, of length 2)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.susbscript has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.susbscript in this.next.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subnode.value == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.susbscript in this.next.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.susbscript in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in arg0.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.next.value.getClass().getName() in this.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent == this.next.next.parent)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent == this.parent.parent.subnode)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.isNumeric == false)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.key == this.parent.susbscript)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.key has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.key in this.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.key.toString == "@")
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.key.toString one of { "@", "vetorLocal~xpto~34" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.key has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.key in arg0.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.key in this.next.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.key in this.next.previous.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.key in this.next.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.key.toString == "vetorLocal~xpto")
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.next == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.parent has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.stackLevel == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subnode has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs.getClass().getName() == java.lang.Object[].class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs[] contains no nulls and has only one value, of length 2)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in arg0.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in arg0.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.next.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.next.previous.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.next.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.parent.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.parent.subnode.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.parent.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript in this.subs[])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.parent.value == null)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subnode.key.toString one of { "locVarAfterNew", "zzz" })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subnode.subs[] elements == this.susbscript)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subnode.subs[].getClass().getName() == [java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[] contains no nulls and has only one value, of length 1)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[] elements == this.parent.key)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[] elements == this.parent.susbscript)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[] elements has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[].getClass().getName() == [java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript has only one value)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript.getClass().getName() == arg0.value.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.stackLevel == this.next.next.stackLevel)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs.getClass().getName() == this.next.subnode.subs.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs.getClass().getName() == this.parent.parent.subs.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs[] elements == this.susbscript)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs[].getClass().getName() == [java.lang.String])
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs[].getClass().getName() elements == java.lang.String.class)
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() == arg0.value.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.next.subs[] contains no nulls and has only one value, of length 1)  ==>  (this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key has only one value
this.next.previous.key.toString == "locVarAfterNew"
this.next.previous.susbscript has only one value
this.next.previous.stackLevel == null
this.next.previous.value has only one value
this.next.previous.subnode == null
this.next.previous.previous == null
this.previous == null
arg0.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.isNumeric == false
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(arg0.subs[]) one of { 1, 4 }
size(arg0.subnode.subs[]) == 2
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.next.previous.susbscript
arg0.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.parent.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
arg0.value.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
arg0.subnode.susbscript in this.parent.parent.subs[]
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.key in arg0.subnode.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in arg0.subs[]
this.parent.parent.susbscript in arg0.subnode.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
arg0.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
arg0.value.getClass().getName() in this.next.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
arg0.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.previous.subs[] elements == this.next.previous.susbscript
arg0.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript in arg0.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isAfter(br.com.innovatium.mumps2java.datastructure.Node):::EXIT;condition="return == true"
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.key == this.parent.susbscript
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVarAfterNew", "zzz" }
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVarAfterNew", "zzz" }
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.key has only one value
this.next.key.toString == "vetorLocal"
this.next.susbscript has only one value
this.next.stackLevel has only one value
this.next.value == null
this.next.subnode has only one value
this.next.next has only one value
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "locVarAfterNew" }
arg0.subnode == null
return == true
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(arg0.subs[]) == 1
this.subs[] elements == this.susbscript
this.parent.subnode.subs[] elements == this.susbscript
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
arg0.subs[] elements == arg0.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isAfter(br.com.innovatium.mumps2java.datastructure.Node):::EXIT;condition="not(return == true)"
this.next.next == this.previous
this.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal~xpto~34~A" }
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.key has only one value
this.next.key.toString == "zzz"
this.next.susbscript has only one value
this.next.stackLevel == null
this.next.value has only one value
this.next.subnode == null
this.next.next == null
this.next.previous.next has only one value
arg0.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~B" }
arg0.value == null
return == false
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.value == this.subnode.value
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.next
this.parent.next == this.parent.previous
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == this.previous.previous
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.next == this.previous.previous
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.parent.subnode == this.next.previous
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.previous == this.previous.parent.subnode
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.subnode == this.previous.next.previous
this.previous.next.next == this.previous.previous
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.next.previous.previous == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVar"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "vetorLocal"
this.previous.next.susbscript has only one value
this.previous.next.value == null
this.previous.next.subnode has only one value
this.previous.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::EXIT174
(this.subnode.parent.stackLevel == null)  <==>  (return == false)
(this.subnode.parent.stackLevel == null)  <==>  (this.previous has only one value)
(this.subnode.parent.stackLevel == null)  <==>  (this.subnode.parent.next == null)
(this.subnode.parent.stackLevel == null)  <==>  (this.subnode.parent.previous has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (orig(this) has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.parent.subnode.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.parent.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.key == this.previous.next.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.key.toString == "vetorLocal")
(this.subnode.parent.stackLevel == null)  ==>  (this.next == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next == this.previous.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent == this.previous.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.isNumeric == false)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.isNumeric == this.previous.parent.isNumeric)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key.toString == "@")
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.parent == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.parent == this.previous.parent.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode == this.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key == this.previous.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key.toString == "locVar")
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next == orig(this))
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next == this.subnode.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subnode == this.subnode.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs == this.previous.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value == this.previous.value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs == this.previous.parent.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous == this.previous.parent.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key.toString == "locVar")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next == orig(this))
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key.toString == "vetorLocal")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key.toString == "@")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.next == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.parent == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.previous == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.previous == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.value has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.stackLevel == this.previous.stackLevel)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode == this.previous.next.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent == this.previous.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subs == this.previous.next.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs.getClass().getName() == this.previous.subs.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.value == this.previous.next.value)
(this.subnode.parent.stackLevel has only one value)  <==>  (return == true)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.previous == null)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.parent.next has only one value)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.parent.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.parent.subnode.subs[]) one of { 1, 4 })
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.parent.subs[]) one of { 1, 3 })
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.subs[]) one of { 1, 4 })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.key == this.next.previous.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.key == this.parent.subnode.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next == this.next.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.key.toString one of { "vetorLocal", "zzz" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key.toString == "zzz")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == this.next.previous.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == this.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subnode == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] elements == this.next.next.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] elements has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.value has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent == this.next.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key.toString == "@")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.parent == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous == orig(this))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.previous == this.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.key.toString == "vetorLocal~xpto")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.parent == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subnode has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs[] contains no nulls and has only one value, of length 2)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() == this.next.subnode.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs[] elements == this.next.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.next.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.parent.parent.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.isNumeric == this.next.parent.isNumeric)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key.toString one of { "@", "vetorLocal~xpto~34" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent == this.next.parent.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key.toString == "vetorLocal~xpto")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subnode has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[] contains no nulls and has only one value, of length 2)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == orig(this))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == this.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == this.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.key == this.next.previous.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.key == this.subnode.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.subnode.parent.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.next.previous.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.subnode.parent.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs == this.next.previous.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs == this.subnode.parent.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value == this.next.previous.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value == this.subnode.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs == this.next.parent.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[] elements == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[] elements == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.stackLevel == this.next.previous.stackLevel)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode == this.next.previous.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent == this.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key == this.next.previous.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.next == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.parent == this.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.previous == this.next.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.previous == this.next.previous.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.stackLevel == this.next.previous.stackLevel)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subnode == this.next.previous.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs == this.next.previous.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value == this.next.previous.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs == this.next.previous.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs == this.parent.subnode.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.next.subnode.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.parent.parent.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value == this.next.previous.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value == this.parent.subnode.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.parent.subnode.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::EXIT174;condition="return == true"
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::EXIT174;condition="not(return == true)"
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == this.subnode.value
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.next.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName()
this.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.subnode == this.next.previous.subnode
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == this.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == this.previous.previous
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.next.next
this.subnode.parent.previous == this.next.previous.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == this.previous.previous
this.next == orig(this.next)
this.next.subs == orig(this.next.subs)
this.next.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.next.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.next.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.next.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.subnode == this.next.previous
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.parent == orig(this.next.next.previous)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == this.next.previous.previous
this.next.next.next == this.previous
this.next.next.next == orig(this.next.next.next)
this.next.previous == orig(this)
this.next.previous == orig(this.next.parent.subnode)
this.next.previous == orig(this.next.previous)
this.next.previous.subs == orig(this.next.previous.subs)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key == orig(this.next.previous.key)
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.next.previous.susbscript == orig(this.next.previous.susbscript)
this.next.previous.isNumeric == orig(this.next.previous.isNumeric)
this.next.previous.stackLevel == orig(this.next.previous.stackLevel)
this.next.previous.value == orig(this.next.previous.value)
this.next.previous.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.next.previous.subnode == orig(this.next.previous.subnode)
this.next.previous.next == orig(this.next.previous.next)
this.next.previous.previous == orig(this.next.previous.previous)
this.previous == this.previous.parent.subnode
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == this.previous.next.previous
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.subnode == orig(this.previous.next.previous)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.value == orig(this.previous.next.value)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous
this.previous.previous == orig(this.previous.next.next)
this.previous.previous == orig(this.previous.previous)
(this.subnode.parent.stackLevel == null)  <==>  (return == false)
(this.subnode.parent.stackLevel == null)  <==>  (this.previous has only one value)
(this.subnode.parent.stackLevel == null)  <==>  (this.subnode.parent.next == null)
(this.subnode.parent.stackLevel == null)  <==>  (this.subnode.parent.previous has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (orig(this) has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.parent.subnode.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.parent.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (size(this.subs[]) == 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.key == this.previous.next.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.key.toString == "vetorLocal")
(this.subnode.parent.stackLevel == null)  ==>  (this.next == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.next == this.previous.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent == this.previous.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.isNumeric == false)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.isNumeric == this.previous.parent.isNumeric)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.key.toString == "@")
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.parent == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.parent == this.previous.parent.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode == this.previous)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key == this.previous.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.key.toString == "locVar")
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next == orig(this))
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next == this.subnode.parent)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.next has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subnode == this.subnode.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs == this.previous.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value == this.previous.value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subnode.value.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs == this.previous.parent.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous == this.previous.parent.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.key.toString == "locVar")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next == orig(this))
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.key.toString == "vetorLocal")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.susbscript in this.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.next.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.key.toString == "@")
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.next == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.parent == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.previous == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.key)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements == this.previous.parent.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.susbscript in this.previous.parent.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.parent.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.previous == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subnode == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements == this.previous.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript in this.previous.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.previous.value has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.stackLevel == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.stackLevel == this.previous.stackLevel)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode == this.previous.next.subnode)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent == this.previous.next)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.parent.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subs == this.previous.next.subs)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs.getClass().getName() == this.previous.subs.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[] elements has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel == null)  ==>  (this.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript == this.previous.next.susbscript)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript has only one value)
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript in this.previous.next.subs[])
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.susbscript.getClass().getName() in this.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel == null)  ==>  (this.value == null)
(this.subnode.parent.stackLevel == null)  ==>  (this.value == this.previous.next.value)
(this.subnode.parent.stackLevel has only one value)  <==>  (return == true)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.previous == null)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.parent.next has only one value)
(this.subnode.parent.stackLevel has only one value)  <==>  (this.subnode.parent.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.parent.subnode.subs[]) one of { 1, 4 })
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.parent.subs[]) one of { 1, 3 })
(this.subnode.parent.stackLevel has only one value)  ==>  (size(this.subs[]) one of { 1, 4 })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.key == this.next.previous.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.key == this.parent.subnode.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next == this.next.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.key.toString one of { "vetorLocal", "zzz" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.key.toString == "zzz")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == this.next.previous.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.next == this.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subnode == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] elements == this.next.next.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[] elements has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.next.value has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent == this.next.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.key.toString == "@")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.parent == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] contains no nulls and has only one value, of length 1)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements == this.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[] elements has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.parent.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous == orig(this))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.previous == this.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[] elements == this.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.previous.value.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.key.toString == "vetorLocal~xpto")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.parent == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.previous == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subnode has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs[] contains no nulls and has only one value, of length 2)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subnode.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() == this.next.subnode.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs[] elements == this.next.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs[].getClass().getName() == [java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.next.value.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.next.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent == this.parent.parent.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.isNumeric == this.next.parent.isNumeric)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.key.toString one of { "@", "vetorLocal~xpto~34" })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent == this.next.parent.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.key.toString == "vetorLocal~xpto")
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.next == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.parent has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.stackLevel == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subnode has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() == java.lang.Object[].class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[] contains no nulls and has only one value, of length 2)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.subs[].getClass().getName() elements == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript has only one value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.susbscript.getClass().getName() in this.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.parent.value == null)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == orig(this))
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == this.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode == this.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.key == this.next.previous.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.key == this.subnode.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.next.subnode.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.next == this.subnode.parent.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.next.previous.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subnode == this.subnode.parent.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs == this.next.previous.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs == this.subnode.parent.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[] elements == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript == this.subnode.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.susbscript in this.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value == this.next.previous.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value == this.subnode.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subnode.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs == this.next.parent.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[] elements == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[] elements == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript == this.next.parent.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript == this.next.parent.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript in this.next.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.stackLevel == this.next.previous.stackLevel)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode == this.next.previous.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent == this.next.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key == this.next.previous.key)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.key in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.next == this.next.previous.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.parent == this.next.parent)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.previous == this.next.next)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.previous == this.next.previous.previous)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.stackLevel == this.next.previous.stackLevel)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subnode == this.next.previous.subnode)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs == this.next.previous.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.subs[] elements == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.parent.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value == this.next.previous.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.next.next.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.next.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subnode.value in this.parent.parent.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs == this.next.previous.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs == this.parent.subnode.subs)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.next.subnode.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.next.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs.getClass().getName() == this.parent.parent.subs.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs[] elements == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] })
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript == this.next.previous.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript == this.parent.subnode.susbscript)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript in this.next.previous.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript in this.parent.subnode.subs[])
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() == this.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value == this.next.previous.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value == this.parent.subnode.value)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == java.lang.String.class)
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.previous.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.subnode.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.next.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.parent.parent.susbscript.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() == this.parent.subnode.value.getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.previous.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.next.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subnode.subs[].getClass().getName())
(this.subnode.parent.stackLevel has only one value)  ==>  (this.value.getClass().getName() in this.subs[].getClass().getName())
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer] }
this.parent.key.toString one of { "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.subs has only one value
this.parent.parent.subs[] contains no nulls and has only one value, of length 2
this.parent.parent.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.parent.parent.key has only one value
this.parent.parent.key.toString == "vetorLocal~xpto"
this.parent.parent.susbscript has only one value
this.parent.parent.stackLevel == null
this.parent.parent.parent has only one value
this.parent.parent.subnode has only one value
this.parent.parent.next == null
this.parent.subnode.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "vetorLocal", "zzz" }
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.next.subs has only one value
this.next.next.subs[] contains no nulls and has only one value, of length 1
this.next.next.subs[] elements has only one value
this.next.next.key has only one value
this.next.next.key.toString == "zzz"
this.next.next.susbscript has only one value
this.next.next.stackLevel == null
this.next.next.value has only one value
this.next.next.subnode == null
this.next.next.next == null
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.next.previous.previous == null
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVar"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "vetorLocal"
this.previous.next.susbscript has only one value
this.previous.next.value == null
this.previous.next.subnode has only one value
this.previous.previous == null
size(this.subs[]) one of { 1, 4 }
size(this.parent.subs[]) one of { 1, 3 }
size(this.parent.parent.subs[]) == 2
size(this.parent.subnode.subs[]) one of { 1, 4 }
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.next.previous.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript in this.parent.parent.subs[]
this.subnode.value in this.parent.parent.subs[]
this.subnode.parent.key in this.parent.parent.subs[]
this.subnode.parent.susbscript in this.parent.parent.subs[]
this.subnode.subnode.susbscript in this.parent.parent.subs[]
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.subnode.susbscript in this.parent.parent.subs[]
this.next.next.key in this.parent.parent.subs[]
this.next.next.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.subnode.subs[]
this.parent.parent.key in this.subnode.parent.subs[]
this.parent.parent.key in this.subnode.subnode.subs[]
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.subnode.subs[]
this.parent.parent.key in this.next.next.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.subnode.subs[]
this.parent.parent.susbscript in this.subnode.parent.subs[]
this.parent.parent.susbscript in this.subnode.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.subnode.subs[]
this.parent.parent.susbscript in this.next.next.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.previous.susbscript in this.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.previous.susbscript in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.next.previous.susbscript
this.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.previous.susbscript in this.subnode.subnode.subs[]
this.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::EXIT;condition="return == true"
this.subs == this.parent.subnode.subs
this.subs == orig(this.parent.subnode.subs)
this.key == this.parent.subnode.key
this.key == orig(this.parent.subnode.key)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.parent.subnode.susbscript)
this.value == this.parent.subnode.value
this.value == orig(this.parent.subnode.value)
this.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode == this.subnode.parent
this.parent.subnode == orig(this)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.subnode == orig(this.parent.subnode.subnode)
this.next == orig(this.parent.subnode.next)
this.subnode.parent.stackLevel has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous == null
this.previous == null
return == true
this.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isFirstSubnode():::EXIT;condition="not(return == true)"
this.subs == orig(this.subnode.parent.subs)
this.subs == orig(this.previous.next.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.key == orig(this.subnode.parent.key)
this.key == orig(this.previous.next.key)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript == orig(this.previous.next.susbscript)
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.isNumeric == this.previous.next.isNumeric
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.previous.isNumeric)
this.isNumeric == orig(this.previous.next.isNumeric)
this.stackLevel == this.previous.next.stackLevel
this.stackLevel == orig(this.subnode.parent.stackLevel)
this.stackLevel == orig(this.previous.stackLevel)
this.stackLevel == orig(this.previous.next.stackLevel)
this.value == orig(this.subnode.value)
this.value == orig(this.previous.next.value)
this.parent == this.previous.next.parent
this.parent == orig(this.subnode.parent.parent)
this.parent == orig(this.previous.parent)
this.parent == orig(this.previous.next.parent)
this.parent.subs == orig(this.previous.parent.subs)
this.parent.key == this.parent.susbscript
this.parent.key == orig(this.previous.parent.key)
this.parent.susbscript == orig(this.previous.parent.susbscript)
this.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.parent.parent == orig(this.previous.parent.parent)
this.parent.subnode == this.previous
this.parent.subnode.subnode == this.subnode.next
this.parent.subnode.next == this.subnode.parent
this.subnode == this.subnode.subnode.parent
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(this.subnode.subnode.parent)
this.subnode == orig(this.previous.next.subnode)
this.subnode.parent == orig(this.parent.subnode.next)
this.subnode.parent == orig(this.previous.next)
this.subnode.next == orig(this.parent.subnode.subnode)
this.next == this.previous.next.next
this.next == orig(this.subnode.parent.next)
this.next == orig(this.previous.next.next)
this.next == orig(this.previous.previous)
this.previous == this.previous.next.previous
this.previous == orig(this.parent.subnode)
this.previous == orig(this.subnode.parent.previous)
this.previous == orig(this.previous.parent.subnode)
this.previous == orig(this.previous.next.previous)
this.previous.subs == orig(this.parent.subnode.subs)
this.previous.key == orig(this.parent.subnode.key)
this.previous.susbscript == orig(this.parent.subnode.susbscript)
this.previous.value == orig(this.parent.subnode.value)
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "vetorLocal"
this.susbscript has only one value
this.stackLevel == null
this.value == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.parent == null
this.parent.subnode.subs[] contains no nulls and has only one value, of length 1
this.parent.subnode.subs[] elements has only one value
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString == "locVar"
this.subnode has only one value
this.next == null
this.previous has only one value
return == false
orig(this) has only one value
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
this.subs[] elements == this.susbscript
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isNumber(java.lang.String):::ENTER
this.susbscript == this.value
this.next == this.previous
this.susbscript == null
this.isNumeric == false
this.stackLevel == null
this.parent == null
this.subnode == null
this.next == null
arg0 != null
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isNumber(java.lang.String):::EXIT268
this.key.toString one of { "%varPublica~1", "%varPublica~1~56", "vetorLocal~xpto~34" }
arg0.toString one of { "1", "34", "56" }
size(this.subs[]) one of { 2, 3 }
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isNumber(java.lang.String):::EXIT270
return == null
size(this.subs[]) one of { 1, 2, 4 }
orig(arg0) in this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.isNumber(java.lang.String):::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.value
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.value)
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode)
this.next == this.previous
this.next == orig(this.next)
this.next == orig(this.previous)
arg0.toString == orig(arg0.toString)
(return == null)  ==>  (orig(arg0) in this.subs[])
(return == null)  ==>  (size(this.subs[]) one of { 1, 2, 4 })
this.susbscript == null
this.isNumeric == false
this.stackLevel == null
this.parent == null
this.subnode == null
this.next == null
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setPrevious(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == this.parent.subnode
this.subs == this.parent.subnode.subs
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.parent.subs.getClass().getName()
this.subs.getClass().getName() == this.previous.next.subs.getClass().getName()
this.key == this.parent.subnode.key
this.susbscript == this.parent.subnode.susbscript
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.previous.next.susbscript.getClass().getName()
this.isNumeric == this.previous.next.isNumeric
this.stackLevel == this.parent.subnode.stackLevel
this.value == this.parent.subnode.value
this.value == this.subnode.value
this.parent == this.previous.next.parent
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.subnode == this.subnode.parent
this.parent.subnode == this.previous.next
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.subnode.value == this.next.previous.value
this.subnode.parent == this.next.parent.subnode
this.subnode.parent == this.next.previous
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.previous == this.next.previous.previous
this.next.parent.key == this.next.parent.susbscript
this.next.next == this.previous.previous
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "vetorLocal", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "vetorLocal", "zzz" }
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel == null
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.parent.previous has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key has only one value
this.next.key.toString == "zzz"
this.next.susbscript has only one value
this.next.stackLevel == null
this.next.value has only one value
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.subnode == null
this.next.next == null
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString == "vetorLocal"
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous.stackLevel has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key.toString == "@"
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key.toString one of { "vetorLocal", "zzz" }
this.previous.previous == null
arg0 == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subs[] elements == this.next.susbscript
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.key
this.next.parent.susbscript in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.next.parent.susbscript
this.previous.subs[] elements == this.previous.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setPrevious(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.subs == this.parent.subnode.subs
this.subs == orig(this.subs)
this.subs == orig(this.parent.subnode.subs)
this.subs == orig(this.previous.next.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.parent.subnode.key
this.key == orig(this.key)
this.key == orig(this.parent.subnode.key)
this.key == orig(this.previous.next.key)
this.key.toString == orig(this.key.toString)
this.susbscript == this.parent.subnode.susbscript
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.parent.subnode.susbscript)
this.susbscript == orig(this.previous.next.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.isNumeric == orig(this.previous.isNumeric)
this.isNumeric == orig(this.previous.next.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.stackLevel == orig(this.previous.next.stackLevel)
this.value == this.parent.subnode.value
this.value == this.subnode.value
this.value == orig(this.value)
this.value == orig(this.parent.subnode.value)
this.value == orig(this.previous.next.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.value.getClass().getName() == orig(this.previous.subnode.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.previous.next.value.getClass().getName())
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent == orig(this.previous.parent)
this.parent == orig(this.previous.next.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs == orig(this.previous.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == this.next.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key == orig(this.previous.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript == orig(this.previous.parent.susbscript)
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent == orig(this.previous.parent.parent)
this.parent.subnode == this.subnode.parent
this.parent.subnode == orig(this)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode == orig(this.previous.parent.subnode)
this.parent.subnode == orig(this.previous.next)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.previous.next.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == this.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.next.previous.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.previous.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.next.value.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.previous.value.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == this.next.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.value == orig(this.next.previous.value)
this.subnode.parent == this.next.parent.subnode
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.next.parent.subnode)
this.subnode.parent == orig(this.next.previous)
this.subnode.parent.subs == this.next.previous.subs
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs == orig(this.next.previous.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == this.next.previous.key
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key == orig(this.next.previous.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == this.next.previous.susbscript
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.susbscript == orig(this.next.previous.susbscript)
this.subnode.parent.isNumeric == this.next.previous.isNumeric
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.isNumeric == orig(this.next.previous.isNumeric)
this.subnode.parent.stackLevel == this.next.previous.stackLevel
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.stackLevel == orig(this.next.previous.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == this.next.parent
this.subnode.parent.subnode == this.next.previous.subnode
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.subnode == orig(this.next.previous.subnode)
this.subnode.parent.next == this.next.previous.next
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.next == orig(this.next.previous.next)
this.subnode.parent.previous == this.next.next
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.parent.subnode.next)
this.next == orig(this.next)
this.next == orig(this.previous.next.next)
this.next.subs == orig(this.next.subs)
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.parent == orig(this.subnode.parent.parent)
this.next.parent == orig(this.next.parent)
this.next.parent == orig(this.next.previous.parent)
this.next.parent.subs == orig(this.next.parent.subs)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key == orig(this.next.parent.key)
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.susbscript == orig(this.next.parent.susbscript)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.parent == orig(this.next.parent.parent)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.next == this.next.previous.previous
this.next.next == this.previous
this.next.next == orig(this.next.next)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == orig(this.previous.previous)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "vetorLocal", "zzz" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "vetorLocal", "zzz" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.stackLevel == null
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key has only one value
this.next.key.toString == "zzz"
this.next.susbscript has only one value
this.next.stackLevel == null
this.next.value has only one value
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.subnode == null
this.next.next == null
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString == "vetorLocal"
this.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.parent.subnode.subs[] elements == this.susbscript
this.susbscript in this.parent.subnode.subs[]
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
orig(this.previous.next.subs[]) elements == this.susbscript
this.susbscript in orig(this.previous.next.subs[])
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in orig(this.previous.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.previous.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.previous.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.previous.next.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.previous.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.previous.parent.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.previous.subnode.subs[].getClass().getName())
this.value.getClass().getName() in orig(this.previous.next.subs[].getClass().getName())
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
orig(this.previous.parent.subs[]) elements == this.parent.key
this.parent.key in orig(this.previous.parent.subs[])
this.next.parent.subs[] elements == this.parent.susbscript
orig(this.previous.parent.subs[]) elements == this.parent.susbscript
this.parent.susbscript in orig(this.previous.parent.subs[])
this.parent.subnode.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.subnode.subs.getClass().getName() in orig(this.previous.subnode.subs[].getClass().getName())
this.subnode.parent.susbscript in this.subnode.subs[]
orig(this.previous.subnode.susbscript) in this.subnode.subs[]
orig(this.previous.subnode.subs.getClass().getName()) in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in orig(this.previous.subnode.subs[])
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in orig(this.previous.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.previous.parent.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.previous.subnode.subs[].getClass().getName())
this.subnode.susbscript.getClass().getName() in orig(this.previous.next.subs[].getClass().getName())
this.subnode.value in orig(this.previous.subnode.subs[])
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
orig(this.previous.subnode.susbscript) in this.subnode.parent.subs[]
orig(this.previous.subnode.subs.getClass().getName()) in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in orig(this.previous.subnode.subs[])
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.subnode.parent.susbscript in orig(this.previous.subnode.subs[])
orig(this.previous.next.subs[]) elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in orig(this.previous.next.subs[])
orig(this.previous.subnode.susbscript) in this.subnode.subnode.subs[]
orig(this.previous.subnode.subs.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in orig(this.previous.subnode.subs[])
this.subnode.subnode.susbscript.getClass().getName() in orig(this.previous.subnode.subs[].getClass().getName())
this.next.subs[] elements == this.next.susbscript
orig(this.previous.subnode.susbscript) in this.next.subs[]
orig(this.previous.subnode.subs.getClass().getName()) in this.next.subs[].getClass().getName()
this.next.key in orig(this.previous.subnode.subs[])
this.next.susbscript in orig(this.previous.subnode.subs[])
this.next.value in orig(this.previous.subnode.subs[])
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
orig(this.previous.subnode.susbscript) in this.next.parent.subs[]
orig(this.previous.subnode.subs.getClass().getName()) in this.next.parent.subs[].getClass().getName()
orig(this.previous.parent.subs[]) elements == this.next.parent.key
this.next.parent.key in orig(this.previous.parent.subs[])
this.next.parent.key in orig(this.previous.subnode.subs[])
orig(this.previous.parent.subs[]) elements == this.next.parent.susbscript
this.next.parent.susbscript in orig(this.previous.parent.subs[])
this.next.parent.susbscript in orig(this.previous.subnode.subs[])
orig(this.previous.subnode.susbscript) in this.next.previous.subs[]
orig(this.previous.subnode.subs.getClass().getName()) in this.next.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setStackLevel(java.lang.Integer):::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.value == this.subnode.value
this.parent.key == this.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.susbscript == this.previous.parent.key
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.key == this.previous.key
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.previous.value
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.previous.next
this.parent.next == this.parent.previous
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.parent == this.next.previous
this.subnode.parent.previous == this.previous.parent.subnode
this.next.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.next == this.previous.previous
this.next.previous == this.previous.next
this.previous == this.previous.parent.subnode
this.previous.parent.key == this.previous.parent.susbscript
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "locVarAfterNew", "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVarAfterNew"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "vetorLocal"
this.previous.next.susbscript has only one value
this.previous.next.stackLevel has only one value
this.previous.next.value == null
this.previous.next.subnode has only one value
this.previous.next.next has only one value
this.previous.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setStackLevel(java.lang.Integer):::EXIT
this.subs == orig(this.subs)
this.subs == orig(this.next.previous.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.next.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.next.previous.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key == orig(this.next.previous.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.next.previous.susbscript)
this.susbscript.getClass().getName() == this.value.getClass().getName()
this.susbscript.getClass().getName() == this.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.parent.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.next.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.next.previous.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.isNumeric == orig(this.next.previous.isNumeric)
this.stackLevel == orig(arg0)
this.value == this.subnode.value
this.value == orig(this.value)
this.value == orig(this.next.previous.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() == orig(this.next.next.susbscript.getClass().getName())
this.value.getClass().getName() == orig(this.next.previous.value.getClass().getName())
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent == orig(this.next.parent)
this.parent == orig(this.next.previous.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs == orig(this.next.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.parent.susbscript
this.parent.key == this.previous.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key == orig(this.next.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.previous.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript == orig(this.next.parent.susbscript)
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.isNumeric == orig(this.next.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent == orig(this.next.parent.parent)
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode == orig(this.next.parent.subnode)
this.parent.subnode.subs == this.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.stackLevel == this.previous.stackLevel
this.parent.subnode.value == this.previous.value
this.parent.subnode.value == orig(this.parent.subnode.value)
this.parent.subnode.value.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.parent.subnode.subnode == orig(this.parent.subnode.subnode)
this.parent.subnode.next == this.next.subnode.parent
this.parent.subnode.next == this.next.next.previous
this.parent.subnode.next == this.previous.next
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.subnode)
this.subnode == orig(this.next.previous.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == this.next.previous
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.subnode == orig(this.subnode.subnode.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == this.previous.parent.subnode
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.next == orig(this.next.previous.next)
this.next.subs == orig(this.next.subs)
this.next.subs[] == orig(this.next.subs[])
this.next.key == orig(this.next.key)
this.next.key.toString == orig(this.next.key.toString)
this.next.susbscript == orig(this.next.susbscript)
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.next.value.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.subnode.subs == orig(this.next.subnode.subs)
this.next.subnode.subs.getClass().getName() == orig(this.next.subnode.subs.getClass().getName())
this.next.subnode.subs[] == orig(this.next.subnode.subs[])
this.next.subnode.key == orig(this.next.subnode.key)
this.next.subnode.key.toString == orig(this.next.subnode.key.toString)
this.next.subnode.susbscript == orig(this.next.subnode.susbscript)
this.next.subnode.susbscript.getClass().getName() == orig(this.next.subnode.susbscript.getClass().getName())
this.next.subnode.susbscript.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.subnode.isNumeric == orig(this.next.subnode.isNumeric)
this.next.subnode.stackLevel == orig(this.next.subnode.stackLevel)
this.next.subnode.value == orig(this.next.subnode.value)
this.next.subnode.parent == orig(this.next.subnode.parent)
this.next.subnode.subnode == orig(this.next.subnode.subnode)
this.next.subnode.next == orig(this.next.subnode.next)
this.next.subnode.previous == orig(this.next.subnode.previous)
this.next.next == this.previous.previous
this.next.next == orig(this.next.next)
this.next.next.subs == orig(this.next.next.subs)
this.next.next.subs.getClass().getName() == orig(this.next.next.subs.getClass().getName())
this.next.next.subs[] == orig(this.next.next.subs[])
this.next.next.key == orig(this.next.next.key)
this.next.next.key.toString == orig(this.next.next.key.toString)
this.next.next.susbscript == orig(this.next.next.susbscript)
this.next.next.isNumeric == orig(this.next.next.isNumeric)
this.next.next.stackLevel == orig(this.next.next.stackLevel)
this.next.next.value == orig(this.next.next.value)
this.next.next.parent == orig(this.next.next.parent)
this.next.next.subnode == orig(this.next.next.subnode)
this.next.next.next == orig(this.next.next.next)
this.next.next.previous == orig(this.next.next.previous)
this.next.previous == this.previous.next
this.next.previous == orig(this)
this.next.previous == orig(this.next.previous)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == this.previous.parent.subnode
this.previous == orig(this.next.previous.previous)
this.previous == orig(this.previous)
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == orig(this.parent.subnode.stackLevel)
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == this.previous.parent.susbscript
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.next == orig(this)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key.toString one of { "locVar", "vetorLocal" }
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.parent has only one value
this.parent.subs has only one value
this.parent.subs[] contains no nulls and has only one value, of length 1
this.parent.subs[] elements has only one value
this.parent.subs[].getClass().getName() == [java.lang.String]
this.parent.subs[].getClass().getName() elements == java.lang.String.class
this.parent.key has only one value
this.parent.key.toString == "@"
this.parent.susbscript has only one value
this.parent.isNumeric == false
this.parent.stackLevel == null
this.parent.parent == null
this.parent.subnode.subs[].getClass().getName() == [java.lang.String]
this.parent.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.parent.subnode.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
this.parent.subnode.previous == null
this.parent.next == null
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key has only one value
this.subnode.key.toString == "vetorLocal~xpto"
this.subnode.susbscript has only one value
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.value == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key.toString == "vetorLocal"
this.subnode.parent.susbscript has only one value
this.subnode.parent.isNumeric == false
this.subnode.parent.parent has only one value
this.subnode.parent.subnode has only one value
this.subnode.parent.next has only one value
this.subnode.subnode has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 3
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto~34"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.value == null
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next == null
this.subnode.previous == null
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key.toString one of { "locVarAfterNew", "vetorLocal", "zzz" }
this.next.stackLevel == null
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key.toString == "@"
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key.toString one of { "locVar", "vetorLocal" }
this.previous.subs has only one value
this.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.subs[] elements has only one value
this.previous.subs[].getClass().getName() == [java.lang.String]
this.previous.subs[].getClass().getName() elements == java.lang.String.class
this.previous.key has only one value
this.previous.key.toString == "locVarAfterNew"
this.previous.susbscript has only one value
this.previous.stackLevel == null
this.previous.value has only one value
this.previous.parent has only one value
this.previous.parent.subs has only one value
this.previous.parent.subs[] contains no nulls and has only one value, of length 1
this.previous.parent.subs[] elements has only one value
this.previous.parent.subs[].getClass().getName() == [java.lang.String]
this.previous.parent.subs[].getClass().getName() elements == java.lang.String.class
this.previous.parent.key has only one value
this.previous.parent.key.toString == "@"
this.previous.parent.susbscript has only one value
this.previous.parent.isNumeric == false
this.previous.parent.parent == null
this.previous.parent.subnode has only one value
this.previous.subnode == null
this.previous.next has only one value
this.previous.next.subs has only one value
this.previous.next.subs[] contains no nulls and has only one value, of length 1
this.previous.next.subs[] elements has only one value
this.previous.next.subs[].getClass().getName() == [java.lang.String]
this.previous.next.subs[].getClass().getName() elements == java.lang.String.class
this.previous.next.key has only one value
this.previous.next.key.toString == "vetorLocal"
this.previous.next.susbscript has only one value
this.previous.next.stackLevel has only one value
this.previous.next.value == null
this.previous.next.subnode has only one value
this.previous.next.next has only one value
this.previous.previous == null
size(this.subs[]) == 1
size(this.parent.subs[]) == 1
size(this.parent.subnode.subs[]) == 1
size(this.subnode.subs[]) == 2
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 3
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
size(this.previous.subs[]) == 1
size(this.previous.parent.subs[]) == 1
size(this.previous.next.subs[]) == 1
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.subs[] elements == this.previous.next.susbscript
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript in this.subnode.subs[]
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.subnode.subs[]
this.next.previous.subs[] elements == this.susbscript
this.previous.next.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.parent.key
this.parent.subs[] elements == this.parent.susbscript
this.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.previous.parent.susbscript
this.subnode.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.parent.key
this.next.parent.subs[] elements == this.parent.susbscript
this.previous.parent.subs[] elements == this.parent.susbscript
this.parent.subnode.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.subs[] elements == this.previous.susbscript
this.previous.susbscript in this.parent.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.parent.subnode.susbscript in this.previous.subs[]
this.previous.subs[] elements == this.parent.subnode.susbscript
this.subnode.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.parent.susbscript in this.subnode.subs[]
this.next.subnode.susbscript in this.subnode.subs[]
this.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.next.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.subnode.value in this.next.subnode.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.next.subnode.susbscript in this.subnode.parent.subs[]
this.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.key in this.next.subnode.subs[]
this.subnode.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.parent.susbscript in this.next.subnode.subs[]
this.next.previous.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.next.previous.subs[]
this.next.subnode.susbscript in this.subnode.subnode.subs[]
this.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in this.next.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.value.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.parent.subs[] elements == this.previous.parent.key
this.previous.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.previous.parent.susbscript
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.subnode.subs[]
this.previous.susbscript in this.next.subnode.subs[]
this.previous.value in this.next.subnode.subs[]
this.previous.parent.key in this.next.subnode.subs[]
this.previous.parent.susbscript in this.next.subnode.subs[]
this.previous.next.key in this.next.subnode.subs[]
this.previous.next.susbscript in this.next.subnode.subs[]
this.previous.next.value in this.next.subnode.subs[]
this.previous.subs.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subnode.subs[].getClass().getName()
this.next.subnode.susbscript in this.previous.subs[]
this.next.subnode.susbscript in this.previous.parent.subs[]
this.next.subnode.susbscript in this.previous.next.subs[]
this.next.subnode.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subnode.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.previous.key in this.next.next.subs[]
this.previous.susbscript in this.next.next.subs[]
this.previous.value in this.next.next.subs[]
this.previous.parent.key in this.next.next.subs[]
this.previous.parent.susbscript in this.next.next.subs[]
this.previous.next.key in this.next.next.subs[]
this.previous.next.susbscript in this.next.next.subs[]
this.previous.next.value in this.next.next.subs[]
this.previous.subs.getClass().getName() in this.next.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.next.subs[].getClass().getName()
this.next.next.key in this.previous.subs[]
this.next.next.key in this.previous.parent.subs[]
this.next.next.key in this.previous.next.subs[]
this.next.next.susbscript in this.previous.subs[]
this.next.next.susbscript in this.previous.parent.subs[]
this.next.next.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.previous.next.susbscript
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.subs[] elements == this.previous.susbscript
this.previous.parent.key in this.previous.parent.subs[]
this.previous.parent.subs[] elements == this.previous.parent.key
this.previous.parent.subs[] elements == this.previous.parent.susbscript
this.previous.next.subs[] elements == this.previous.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setSubnode(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.key == this.susbscript
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.next.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.value.getClass().getName()
this.subnode.parent.previous == this.next
this.next == this.previous
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this has only one value
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.value == null
this.parent == null
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key.toString one of { "locVar", "vetorLocal" }
this.subnode.isNumeric == false
this.subnode.stackLevel has only one value
this.subnode.parent has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.value == null
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
this.subnode.previous == null
this.next == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "vetorLocal", "zzz" }
arg0.isNumeric == false
arg0.stackLevel == null
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs has only one value
arg0.next.subs[] contains no nulls and has only one value, of length 1
arg0.next.subs[] elements has only one value
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key has only one value
arg0.next.key.toString == "zzz"
arg0.next.susbscript has only one value
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.value has only one value
arg0.next.parent has only one value
arg0.next.subnode == null
arg0.next.next == null
arg0.next.previous has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key.toString one of { "locVar", "vetorLocal" }
arg0.previous.isNumeric == false
arg0.previous.stackLevel has only one value
arg0.previous.parent has only one value
arg0.previous.previous == null
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 2
size(this.subnode.next.subs[]) == 1
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subs[] elements == this.subnode.susbscript
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setSubnode(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == this.susbscript
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.subnode.parent.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.parent == orig(this.subnode.parent.parent)
this.subnode == orig(this.subnode.next)
this.subnode.subs == orig(this.subnode.next.subs)
this.subnode.key == orig(this.subnode.next.key)
this.subnode.susbscript == orig(this.subnode.next.susbscript)
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == orig(this.subnode.next.value)
this.subnode.parent == orig(this)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.previous == this.next
this.subnode.subnode.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.next == orig(this.subnode.next.next)
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.subnode.next.parent == orig(this)
this.subnode.previous.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.next == this.previous
this.next == orig(this.subnode.parent.next)
this.next == orig(this.subnode.parent.previous)
this.next == orig(this.next)
this.next == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.next.value.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.next == orig(arg0.previous.next)
arg0.previous.previous == orig(arg0.previous.previous)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
size(this.subnode.next.subs[]) == orig(size(this.subnode.next.subs[]))
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key.toString == "@"
this.susbscript has only one value
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.value == null
this.parent == null
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key.toString one of { "vetorLocal", "zzz" }
this.subnode.isNumeric == false
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key.toString == "@"
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.isNumeric == false
this.subnode.subnode.value == null
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.subnode.next == null
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.parent has only one value
this.subnode.next.subnode == null
this.subnode.next.next == null
this.next == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "vetorLocal", "zzz" }
arg0.isNumeric == false
arg0.stackLevel == null
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs has only one value
arg0.next.subs[] contains no nulls and has only one value, of length 1
arg0.next.subs[] elements has only one value
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key has only one value
arg0.next.key.toString == "zzz"
arg0.next.susbscript has only one value
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.value has only one value
arg0.next.parent has only one value
arg0.next.subnode == null
arg0.next.next == null
arg0.next.previous has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key.toString one of { "locVar", "vetorLocal" }
arg0.previous.isNumeric == false
arg0.previous.stackLevel has only one value
arg0.previous.parent has only one value
arg0.previous.previous == null
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 2
size(this.subnode.next.subs[]) == 1
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.subs[] elements == this.subnode.susbscript
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
orig(this.subnode.next.subs[]) elements == this.subnode.susbscript
this.subnode.susbscript in orig(this.subnode.next.subs[])
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs[] is the reverse of orig(this.subnode.subnode.subs[])
orig(this.subnode.subnode.susbscript) in this.subnode.subnode.subs[]
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript in orig(this.subnode.subnode.subs[])
this.subnode.next.subs[] elements == this.subnode.next.susbscript
orig(this.subnode.subnode.susbscript) in this.subnode.next.subs[]
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
this.subnode.next.susbscript in orig(this.subnode.subnode.subs[])
this.subnode.next.value in orig(this.subnode.subnode.subs[])
arg0.value.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
orig(this.subnode.subnode.subs.getClass().getName()) in arg0.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setValue(java.lang.Object):::ENTER
this == this.next.previous
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.parent == this.parent.parent.subnode
this.parent.key == this.next.parent.susbscript
this.parent.susbscript == this.next.parent.key
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == arg0.getClass().getName()
this.parent.parent.subnode == this.previous.parent
this.parent.parent.next == this.parent.parent.previous
this.parent.subnode == this.next.previous
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.subnode.parent
this.parent.next == this.parent.previous
this.next == this.previous.previous.previous
this.next.susbscript.getClass().getName() == arg0.getClass().getName()
this.next.parent.key == this.next.parent.susbscript
this.next.next == this.previous
this.previous.susbscript.getClass().getName() == arg0.getClass().getName()
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.value.getClass().getName() == arg0.getClass().getName()
this.previous.subnode.susbscript.getClass().getName() == arg0.getClass().getName()
this.previous.next.next == this.previous.previous.previous
this.stackLevel == null
this.value == null
this.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key has only one value
this.next.key.toString == "zzz"
this.next.susbscript has only one value
this.next.stackLevel == null
this.next.value has only one value
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.subnode == null
this.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key has only one value
this.next.previous.key.toString == "locVarAfterNew"
this.next.previous.susbscript has only one value
this.next.previous.stackLevel == null
this.next.previous.value == null
this.next.previous.subnode == null
this.next.previous.next has only one value
this.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.next.key.toString one of { "vetorLocal~xpto~34~B", "zzz" }
this.previous.next.value == null
this.previous.next.subnode == null
this.previous.next.next == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
arg0.getClass().getName() == java.lang.String.class
size(this.subs[]) one of { 1, 3, 4 }
size(this.parent.subnode.subs[]) one of { 1, 3, 4 }
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.next.previous.susbscript
arg0.getClass().getName() in this.subs[].getClass().getName()
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
arg0.getClass().getName() in this.parent.subs[].getClass().getName()
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
arg0.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
arg0.getClass().getName() in this.parent.subnode.subs[].getClass().getName()
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
arg0.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
arg0.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
arg0.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
arg0.getClass().getName() in this.previous.subs[].getClass().getName()
arg0.getClass().getName() in this.previous.parent.subs[].getClass().getName()
arg0.getClass().getName() in this.previous.subnode.subs[].getClass().getName()
arg0.getClass().getName() in this.previous.next.subs[].getClass().getName()
arg0.getClass().getName() in this.previous.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Node.setValue(java.lang.Object):::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == this.parent.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.parent.subnode.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.parent.subnode.susbscript.getClass().getName())
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.parent.subnode.isNumeric)
this.stackLevel == this.parent.subnode.stackLevel
this.stackLevel == this.previous.stackLevel
this.stackLevel == orig(this.stackLevel)
this.stackLevel == orig(this.parent.subnode.stackLevel)
this.value == orig(arg0)
this.value.getClass().getName() == this.previous.susbscript.getClass().getName()
this.value.getClass().getName() == this.previous.value.getClass().getName()
this.value.getClass().getName() == orig(arg0.getClass().getName())
this.parent == this.parent.parent.subnode
this.parent == orig(this.parent)
this.parent == orig(this.parent.subnode.parent)
this.parent.subs == orig(this.parent.subs)
this.parent.subs[] == orig(this.parent.subs[])
this.parent.key == this.next.parent.susbscript
this.parent.key == orig(this.parent.key)
this.parent.key.toString == orig(this.parent.key.toString)
this.parent.susbscript == this.next.parent.key
this.parent.susbscript == orig(this.parent.susbscript)
this.parent.susbscript.getClass().getName() == this.next.susbscript.getClass().getName()
this.parent.susbscript.getClass().getName() == orig(this.parent.susbscript.getClass().getName())
this.parent.isNumeric == orig(this.parent.isNumeric)
this.parent.stackLevel == orig(this.parent.stackLevel)
this.parent.value == orig(this.parent.value)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.subs == orig(this.parent.parent.subs)
this.parent.parent.subs.getClass().getName() == this.previous.subs.getClass().getName()
this.parent.parent.subs.getClass().getName() == orig(this.parent.parent.subs.getClass().getName())
this.parent.parent.subs[] == orig(this.parent.parent.subs[])
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.toString == orig(this.parent.parent.key.toString)
this.parent.parent.susbscript == orig(this.parent.parent.susbscript)
this.parent.parent.susbscript.getClass().getName() == this.previous.susbscript.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == this.previous.value.getClass().getName()
this.parent.parent.susbscript.getClass().getName() == orig(this.parent.parent.susbscript.getClass().getName())
this.parent.parent.isNumeric == orig(this.parent.parent.isNumeric)
this.parent.parent.stackLevel == orig(this.parent.parent.stackLevel)
this.parent.parent.value == orig(this.parent.parent.value)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.subnode == this.previous.parent
this.parent.parent.subnode == orig(this.parent.parent.subnode)
this.parent.parent.next == this.parent.parent.previous
this.parent.parent.next == orig(this.parent.parent.next)
this.parent.parent.next == orig(this.parent.parent.previous)
this.parent.subnode == this.next.previous
this.parent.subnode == orig(this.parent.subnode)
this.parent.subnode.subs == this.next.previous.subs
this.parent.subnode.subs == this.previous.previous.subs
this.parent.subnode.subs == orig(this.parent.subnode.subs)
this.parent.subnode.subs[] == orig(this.parent.subnode.subs[])
this.parent.subnode.key == this.next.previous.key
this.parent.subnode.key == this.previous.previous.key
this.parent.subnode.key == orig(this.parent.subnode.key)
this.parent.subnode.key.toString == orig(this.parent.subnode.key.toString)
this.parent.subnode.susbscript == this.next.previous.susbscript
this.parent.subnode.susbscript == this.previous.previous.susbscript
this.parent.subnode.susbscript == orig(this.parent.subnode.susbscript)
this.parent.subnode.value == this.next.previous.value
this.parent.subnode.value == this.previous.previous.value
this.parent.subnode.subnode == this.subnode
this.parent.subnode.next == this.next.previous.next
this.parent.subnode.next == this.previous.subnode.parent
this.parent.subnode.next == orig(this.parent.subnode.next)
this.parent.subnode.previous == orig(this.parent.subnode.previous)
this.parent.next == this.parent.previous
this.parent.next == orig(this.parent.next)
this.parent.next == orig(this.parent.previous)
this.subnode == orig(this.parent.subnode.subnode)
this.subnode == orig(this.subnode)
this.next == this.previous.previous.previous
this.next == orig(this.next)
this.next.subs[] == orig(this.next.subs[])
this.next.key.toString == orig(this.next.key.toString)
this.next.isNumeric == orig(this.next.isNumeric)
this.next.stackLevel == orig(this.next.stackLevel)
this.next.parent.subs[] == orig(this.next.parent.subs[])
this.next.parent.key == this.next.parent.susbscript
this.next.parent.key.toString == orig(this.next.parent.key.toString)
this.next.parent.isNumeric == orig(this.next.parent.isNumeric)
this.next.parent.stackLevel == orig(this.next.parent.stackLevel)
this.next.parent.value == orig(this.next.parent.value)
this.next.parent.next == orig(this.next.parent.next)
this.next.parent.previous == orig(this.next.parent.previous)
this.next.subnode == orig(this.next.subnode)
this.next.next == this.previous
this.next.previous == orig(this)
this.next.previous.subs[] == orig(this.next.previous.subs[])
this.next.previous.key.toString == orig(this.next.previous.key.toString)
this.previous == orig(this.previous)
this.previous.subs == orig(this.previous.subs)
this.previous.subs.getClass().getName() == orig(this.previous.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.parent.subs.getClass().getName())
this.previous.subs.getClass().getName() == orig(this.previous.next.subs.getClass().getName())
this.previous.subs[] == orig(this.previous.subs[])
this.previous.key == orig(this.previous.key)
this.previous.key.toString == orig(this.previous.key.toString)
this.previous.susbscript == orig(this.previous.susbscript)
this.previous.susbscript.getClass().getName() == orig(this.parent.subnode.value.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.susbscript.getClass().getName())
this.previous.susbscript.getClass().getName() == orig(this.previous.next.susbscript.getClass().getName())
this.previous.isNumeric == orig(this.previous.isNumeric)
this.previous.isNumeric == orig(this.previous.next.isNumeric)
this.previous.stackLevel == this.previous.next.stackLevel
this.previous.stackLevel == orig(this.previous.stackLevel)
this.previous.stackLevel == orig(this.previous.next.stackLevel)
this.previous.value == orig(this.previous.value)
this.previous.parent == orig(this.previous.parent)
this.previous.parent == orig(this.previous.next.parent)
this.previous.parent.subs == orig(this.previous.parent.subs)
this.previous.parent.subs[] == orig(this.previous.parent.subs[])
this.previous.parent.key == orig(this.previous.parent.key)
this.previous.parent.key.toString == orig(this.previous.parent.key.toString)
this.previous.parent.susbscript == orig(this.previous.parent.susbscript)
this.previous.parent.susbscript.getClass().getName() == orig(this.previous.parent.susbscript.getClass().getName())
this.previous.parent.isNumeric == orig(this.previous.parent.isNumeric)
this.previous.parent.stackLevel == orig(this.previous.parent.stackLevel)
this.previous.parent.value == orig(this.previous.parent.value)
this.previous.parent.parent == orig(this.previous.parent.parent)
this.previous.parent.subnode == orig(this.previous.parent.subnode)
this.previous.parent.next == orig(this.previous.parent.next)
this.previous.parent.previous == orig(this.previous.parent.previous)
this.previous.subnode == orig(this.previous.subnode)
this.previous.subnode.subs[] == orig(this.previous.subnode.subs[])
this.previous.subnode.key == orig(this.previous.subnode.key)
this.previous.subnode.key.toString == orig(this.previous.subnode.key.toString)
this.previous.subnode.isNumeric == orig(this.previous.subnode.isNumeric)
this.previous.subnode.stackLevel == orig(this.previous.subnode.stackLevel)
this.previous.subnode.value == orig(this.previous.subnode.value)
this.previous.subnode.subnode == orig(this.previous.subnode.subnode)
this.previous.subnode.next == orig(this.previous.subnode.next)
this.previous.subnode.previous == orig(this.previous.subnode.previous)
this.previous.next == orig(this)
this.previous.next == orig(this.previous.next)
this.previous.next.subs == orig(this.previous.next.subs)
this.previous.next.subs[] == orig(this.previous.next.subs[])
this.previous.next.key == orig(this.previous.next.key)
this.previous.next.key.toString == orig(this.previous.next.key.toString)
this.previous.next.susbscript == orig(this.previous.next.susbscript)
this.previous.next.subnode == orig(this.previous.next.subnode)
this.previous.next.next == this.previous.previous.previous
this.previous.next.next == orig(this.previous.next.next)
this.previous.next.previous == orig(this.previous.next.previous)
this.previous.previous == orig(this.previous.previous)
this.previous.previous.subs[] == orig(this.previous.previous.subs[])
this.previous.previous.key.toString == orig(this.previous.previous.key.toString)
this.previous.previous.stackLevel == orig(this.previous.previous.stackLevel)
this.previous.previous.value == orig(this.parent.subnode.value)
this.previous.previous.subnode == orig(this.previous.previous.subnode)
this.stackLevel == null
this.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
this.parent.stackLevel == null
this.parent.parent.key.toString one of { "%varPublica", "vetorLocal~xpto" }
this.parent.parent.stackLevel == null
this.parent.parent.next == null
this.parent.subnode.previous == null
this.parent.next == null
this.subnode == null
this.next.subs has only one value
this.next.subs[] contains no nulls and has only one value, of length 1
this.next.subs[] elements has only one value
this.next.subs[].getClass().getName() == [java.lang.String]
this.next.subs[].getClass().getName() elements == java.lang.String.class
this.next.key has only one value
this.next.key.toString == "zzz"
this.next.susbscript has only one value
this.next.stackLevel == null
this.next.value has only one value
this.next.parent has only one value
this.next.parent.subs has only one value
this.next.parent.subs[] contains no nulls and has only one value, of length 1
this.next.parent.subs[] elements has only one value
this.next.parent.subs[].getClass().getName() == [java.lang.String]
this.next.parent.subs[].getClass().getName() elements == java.lang.String.class
this.next.parent.key has only one value
this.next.parent.key.toString == "@"
this.next.parent.susbscript has only one value
this.next.parent.isNumeric == false
this.next.parent.parent == null
this.next.subnode == null
this.next.next == null
this.next.previous has only one value
this.next.previous.subs has only one value
this.next.previous.subs[] contains no nulls and has only one value, of length 1
this.next.previous.subs[] elements has only one value
this.next.previous.subs[].getClass().getName() == [java.lang.String]
this.next.previous.subs[].getClass().getName() elements == java.lang.String.class
this.next.previous.key has only one value
this.next.previous.key.toString == "locVarAfterNew"
this.next.previous.susbscript has only one value
this.next.previous.stackLevel == null
this.next.previous.value has only one value
this.next.previous.subnode == null
this.next.previous.next has only one value
this.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
this.previous.stackLevel == null
this.previous.next.key.toString one of { "vetorLocal~xpto~34~B", "zzz" }
this.previous.next.subnode == null
this.previous.next.next == null
this.previous.previous.subs has only one value
this.previous.previous.subs[] contains no nulls and has only one value, of length 1
this.previous.previous.subs[] elements has only one value
this.previous.previous.key has only one value
this.previous.previous.key.toString == "locVar"
this.previous.previous.susbscript has only one value
this.previous.previous.value has only one value
this.previous.previous.previous == null
size(this.subs[]) one of { 1, 3, 4 }
size(this.parent.subnode.subs[]) one of { 1, 3, 4 }
size(this.next.subs[]) == 1
size(this.next.parent.subs[]) == 1
size(this.next.previous.subs[]) == 1
this.susbscript in this.subs[]
this.parent.parent.susbscript in this.subs[]
this.subs[] elements == this.next.previous.susbscript
this.next.previous.subs[] elements == this.susbscript
this.susbscript.getClass().getName() in this.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.value.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.parent.parent.susbscript in this.parent.subs[]
this.next.parent.key in this.parent.subs[]
this.parent.subs[] elements == this.next.parent.key
this.parent.subs[] elements == this.next.parent.susbscript
this.next.parent.subs[] elements == this.parent.key
this.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.parent.susbscript
this.parent.parent.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.key in this.parent.parent.subs[]
this.next.susbscript in this.parent.parent.subs[]
this.next.value in this.parent.parent.subs[]
this.next.parent.key in this.parent.parent.subs[]
this.next.parent.susbscript in this.parent.parent.subs[]
this.next.previous.key in this.parent.parent.subs[]
this.next.previous.susbscript in this.parent.parent.subs[]
this.next.previous.value in this.parent.parent.subs[]
orig(this.next.previous.value) in this.parent.parent.subs[]
this.next.subs.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.parent.parent.subs[].getClass().getName()
this.parent.parent.key in this.next.subs[]
this.parent.parent.key in this.next.parent.subs[]
this.parent.parent.key in this.next.previous.subs[]
this.parent.parent.susbscript in this.parent.subnode.subs[]
this.parent.parent.susbscript in this.next.subs[]
this.parent.parent.susbscript in this.next.parent.subs[]
this.parent.parent.susbscript in this.next.previous.subs[]
this.parent.parent.susbscript in this.previous.subs[]
this.parent.parent.susbscript in this.previous.parent.subs[]
this.parent.parent.susbscript in this.previous.next.subs[]
this.parent.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.parent.parent.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.previous.susbscript in this.parent.subnode.subs[]
this.parent.subnode.subs[] elements == this.next.previous.susbscript
this.parent.subnode.subs[] elements == this.previous.previous.susbscript
this.previous.previous.susbscript in this.parent.subnode.subs[]
this.next.previous.subs[] elements == this.parent.subnode.susbscript
this.parent.subnode.susbscript in this.next.previous.subs[]
this.parent.subnode.susbscript in this.previous.previous.subs[]
this.previous.previous.subs[] elements == this.parent.subnode.susbscript
this.next.subs.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.subs.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.subs[] elements == this.next.susbscript
this.previous.key in this.next.subs[]
this.previous.susbscript in this.next.subs[]
this.previous.value in this.next.subs[]
this.previous.parent.key in this.next.subs[]
this.previous.parent.susbscript in this.next.subs[]
this.previous.next.key in this.next.subs[]
this.previous.next.susbscript in this.next.subs[]
this.previous.next.value in this.next.subs[]
orig(this.previous.next.value) in this.next.subs[]
this.previous.subs.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.subs[].getClass().getName()
this.next.key in this.previous.subs[]
this.next.key in this.previous.parent.subs[]
this.next.key in this.previous.next.subs[]
this.next.susbscript in this.previous.subs[]
this.next.susbscript in this.previous.parent.subs[]
this.next.susbscript in this.previous.next.subs[]
this.next.susbscript.getClass().getName() in this.previous.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.parent.subs[].getClass().getName()
this.next.susbscript.getClass().getName() in this.previous.next.subs[].getClass().getName()
this.next.value in this.previous.subs[]
this.next.value in this.previous.parent.subs[]
this.next.value in this.previous.next.subs[]
this.next.parent.key in this.next.parent.subs[]
this.next.parent.subs[] elements == this.next.parent.key
this.next.parent.subs[] elements == this.next.parent.susbscript
this.previous.key in this.next.parent.subs[]
this.previous.susbscript in this.next.parent.subs[]
this.previous.value in this.next.parent.subs[]
this.previous.parent.key in this.next.parent.subs[]
this.previous.parent.susbscript in this.next.parent.subs[]
this.previous.next.key in this.next.parent.subs[]
this.previous.next.susbscript in this.next.parent.subs[]
this.previous.next.value in this.next.parent.subs[]
orig(this.previous.next.value) in this.next.parent.subs[]
this.previous.subs.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.parent.subs[].getClass().getName()
this.next.parent.key in this.previous.subs[]
this.next.parent.key in this.previous.parent.subs[]
this.next.parent.key in this.previous.next.subs[]
this.next.parent.susbscript in this.previous.subs[]
this.next.parent.susbscript in this.previous.parent.subs[]
this.next.parent.susbscript in this.previous.next.subs[]
this.next.previous.subs[] elements == this.next.previous.susbscript
this.previous.key in this.next.previous.subs[]
this.previous.susbscript in this.next.previous.subs[]
this.previous.value in this.next.previous.subs[]
this.previous.parent.key in this.next.previous.subs[]
this.previous.parent.susbscript in this.next.previous.subs[]
this.previous.next.key in this.next.previous.subs[]
this.previous.next.susbscript in this.next.previous.subs[]
this.previous.next.value in this.next.previous.subs[]
orig(this.previous.next.value) in this.next.previous.subs[]
this.previous.subs.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.value.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.previous.parent.susbscript.getClass().getName() in this.next.previous.subs[].getClass().getName()
this.next.previous.key in this.previous.subs[]
this.next.previous.key in this.previous.parent.subs[]
this.next.previous.key in this.previous.next.subs[]
this.next.previous.susbscript in this.previous.subs[]
this.next.previous.susbscript in this.previous.parent.subs[]
this.next.previous.susbscript in this.previous.next.subs[]
this.next.previous.value in this.previous.subs[]
this.next.previous.value in this.previous.parent.subs[]
this.next.previous.value in this.previous.next.subs[]
orig(this.next.previous.value) in this.previous.subs[]
orig(this.next.previous.value) in this.previous.parent.subs[]
orig(this.next.previous.value) in this.previous.subnode.subs[]
orig(this.next.previous.value) in this.previous.next.subs[]
orig(this.next.previous.value) in this.previous.previous.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.OrderDataCache:::OBJECT
this.cache.getClass().getName() == java.util.HashSet.class
===========================================================================
br.com.innovatium.mumps2java.datastructure.OrderDataCache.OrderDataCache():::EXIT
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode:::OBJECT
this has only one value
this.mapLevel has only one value
this.mapLevel.getClass().getName() == java.util.HashMap.class
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.StackNode():::EXIT
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.pull(java.lang.Integer):::ENTER
arg0 has only one value
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.pull(java.lang.Integer):::EXIT42
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.pull(java.lang.Integer):::EXIT
this.mapLevel == orig(this.mapLevel)
this.mapLevel.getClass().getName() == orig(this.mapLevel.getClass().getName())
return has only one value
return[] contains no nulls and has only one value, of length 2
return[].getClass().getName() == [br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node]
return[].getClass().getName() elements == br.com.innovatium.mumps2java.datastructure.Node.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 2
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.push(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
arg0.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.susbscript.getClass().getName() == java.lang.String.class
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.parent has only one value
arg0.previous == null
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.push(br.com.innovatium.mumps2java.datastructure.Node):::EXIT34
===========================================================================
br.com.innovatium.mumps2java.datastructure.StackNode.push(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.mapLevel == orig(this.mapLevel)
this.mapLevel.getClass().getName() == orig(this.mapLevel.getClass().getName())
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subs.getClass().getName() == return.subs.getClass().getName()
arg0.subs.getClass().getName() == return.parent.subs.getClass().getName()
arg0.subs.getClass().getName() == return.next.subs.getClass().getName()
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
arg0.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == return.value.getClass().getName()
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.subnode == orig(arg0.parent.subnode)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.susbscript.getClass().getName() == java.lang.String.class
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.parent has only one value
arg0.previous == null
return.subs[].getClass().getName() == [java.lang.String]
return.subs[].getClass().getName() elements == java.lang.String.class
return.key.toString one of { "locVar", "vetorLocal" }
return.isNumeric == false
return.stackLevel has only one value
return.parent has only one value
return.parent.subs has only one value
return.parent.subs[] contains no nulls and has only one value, of length 1
return.parent.subs[] elements has only one value
return.parent.subs[].getClass().getName() == [java.lang.String]
return.parent.subs[].getClass().getName() elements == java.lang.String.class
return.parent.key has only one value
return.parent.key.toString == "@"
return.parent.susbscript has only one value
return.parent.isNumeric == false
return.parent.stackLevel == null
return.parent.value == null
return.parent.parent == null
return.parent.next == null
return.parent.previous == null
return.subnode.subs has only one value
return.subnode.subs[] contains no nulls and has only one value, of length 2
return.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
return.subnode.subs[].getClass().getName() elements == java.lang.String.class
return.subnode.key has only one value
return.subnode.key.toString == "vetorLocal~xpto"
return.subnode.susbscript has only one value
return.subnode.isNumeric == false
return.subnode.stackLevel == null
return.subnode.value == null
return.subnode.parent has only one value
return.subnode.subnode has only one value
return.subnode.next == null
return.subnode.previous == null
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key.toString one of { "vetorLocal", "zzz" }
return.next.isNumeric == false
return.next.stackLevel == null
return.next.parent has only one value
return.previous == null
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(return.subs[]) == 1
size(return.parent.subs[]) == 1
size(return.subnode.subs[]) == 2
size(return.next.subs[]) == 1
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in return.subs[].getClass().getName()
arg0.value.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in return.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes:::OBJECT
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.key == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel one of { 0, 1 }
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel != null
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue != null
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation != null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.key != null
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript != null
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[] elements != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString one of { "locVar", "locVarAfterNew" }
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::ENTER
br.com.innovatium.mumps2java.datastructure.Tree.this.key == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 0
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.AddOnTreeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::EXIT
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 0
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.operate(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric == arg0.previous.isNumeric
arg0 == arg0.subnode.parent
arg0 == arg0.next.previous
arg0 == arg0.previous.next
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.isNumeric == arg0.previous.isNumeric
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.parent == arg0.next.previous
arg0.subnode.parent == arg0.previous.next
arg0.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.next.parent == arg0.previous.parent
arg0.next.previous == arg0.previous.next
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.value == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.previous.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~A" }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.subnode == null
arg0.previous.previous == null
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) one of { 2, 3, 4 }
size(arg0.next.subs[]) one of { 1, 4 }
size(arg0.previous.subs[]) one of { 1, 4 }
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript in arg0.parent.subs[]
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$AddOnTreeOperationOverNodes.operate(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
br.com.innovatium.mumps2java.datastructure.Tree.this == br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() == arg0.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric == arg0.previous.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.isNumeric == arg0.previous.isNumeric
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.parent.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.subnode == orig(arg0.parent.subnode)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == arg0.next.previous
arg0.subnode.parent == arg0.previous.next
arg0.subnode.parent == orig(arg0)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.next.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.next.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
arg0.next.susbscript.getClass().getName() == orig(arg0.next.value.getClass().getName())
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.parent == arg0.previous.parent
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == arg0.previous.next
arg0.next.previous == orig(arg0)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.next == orig(arg0)
arg0.previous.next == orig(arg0.previous.next)
arg0.previous.previous == orig(arg0.previous.previous)
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.value == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.previous.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~A" }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.subnode == null
arg0.previous.previous == null
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) one of { 2, 3, 4 }
size(arg0.next.subs[]) one of { 1, 4 }
size(arg0.previous.subs[]) one of { 1, 4 }
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript in arg0.parent.subs[]
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes:::OBJECT
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.key == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel one of { 0, 1 }
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel != null
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue != null
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.key != null
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript != null
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[] elements != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString one of { "vetorLocal", "zzz" }
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() != br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::ENTER
br.com.innovatium.mumps2java.datastructure.Tree.this.key == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 0
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.KillOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree):::EXIT
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 0
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.operate(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.subs.getClass().getName() == java.lang.Object[].class
arg0.parent.key.toString one of { "vetorLocal", "vetorLocal~xpto", "vetorLocal~xpto~34" }
arg0.parent.value == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next.subs has only one value
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[] contains no nulls and has only one value, of length 4
arg0.next.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
arg0.next.key has only one value
arg0.next.key.toString == "vetorLocal~xpto~34~B"
arg0.next.susbscript has only one value
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.value has only one value
arg0.next.parent has only one value
arg0.next.subnode == null
arg0.next.next == null
arg0.next.previous has only one value
arg0.previous.subs has only one value
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[] contains no nulls and has only one value, of length 4
arg0.previous.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
arg0.previous.key has only one value
arg0.previous.key.toString == "vetorLocal~xpto~34~A"
arg0.previous.susbscript has only one value
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.next has only one value
arg0.previous.previous == null
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) one of { 2, 3, 4 }
size(arg0.next.subs[]) == 4
size(arg0.previous.subs[]) == 4
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$KillOperationOverNodes.operate(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack.mapLevel.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.dest)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.orig)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation.tree)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg0.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName() == arg0.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.subnode.value.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.previous)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.parent.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.subnode == orig(arg0.parent.subnode)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.next == orig(arg0.previous.next)
arg0.previous.previous == orig(arg0.previous.previous)
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.subs.getClass().getName() == java.lang.Object[].class
arg0.parent.key.toString one of { "vetorLocal", "vetorLocal~xpto", "vetorLocal~xpto~34" }
arg0.parent.value == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next.subs has only one value
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[] contains no nulls and has only one value, of length 4
arg0.next.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
arg0.next.key has only one value
arg0.next.key.toString == "vetorLocal~xpto~34~B"
arg0.next.susbscript has only one value
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.value has only one value
arg0.next.parent has only one value
arg0.next.subnode == null
arg0.next.next == null
arg0.next.previous has only one value
arg0.previous.subs has only one value
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[] contains no nulls and has only one value, of length 4
arg0.previous.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
arg0.previous.key has only one value
arg0.previous.key.toString == "vetorLocal~xpto~34~A"
arg0.previous.susbscript has only one value
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.next has only one value
arg0.previous.previous == null
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) one of { 2, 3, 4 }
size(arg0.next.subs[]) == 4
size(arg0.previous.subs[]) == 4
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes:::OBJECT
this.tree.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.tree.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.tree.keyValue.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
this.tree.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.tree.addSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation
this.tree.subs == br.com.innovatium.mumps2java.datastructure.Tree.this.subs
this.tree.subs.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName()
this.tree.key == this.tree.susbscript
this.tree.key == br.com.innovatium.mumps2java.datastructure.Tree.this.key
this.tree.susbscript == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
this.tree.susbscript.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName()
this.tree.isNumeric == br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric
this.dest == null
this.orig == null
this.tree.currentStackLevel == 0
this.tree.stack == null
this.tree.keyValue.getClass().getName() == java.util.HashMap.class
this.tree.mergeSubnodesOperation == null
this.tree.subs.getClass().getName() == java.lang.Object[].class
this.tree.subs[] contains no nulls and has only one value, of length 1
this.tree.subs[] elements has only one value
this.tree.subs[].getClass().getName() == [java.lang.String]
this.tree.subs[].getClass().getName() elements == java.lang.String.class
this.tree.key has only one value
this.tree.key.toString == "@"
this.tree.susbscript has only one value
this.tree.susbscript.getClass().getName() == java.lang.String.class
this.tree.isNumeric == false
this.tree.stackLevel == null
this.tree.value == null
this.tree.parent == null
this.tree.subnode == null
this.tree.next == null
this.tree.previous == null
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
size(this.tree.subs[]) == 1
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
this.tree.key in this.tree.subs[]
this.tree.subs[] elements == this.tree.key
this.tree.subs[] elements == this.tree.susbscript
this.tree.susbscript in this.tree.subs[]
this.tree.susbscript.getClass().getName() in this.tree.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.tree.key
this.tree.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.tree.susbscript
this.tree.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.tree.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes.MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree):::ENTER
br.com.innovatium.mumps2java.datastructure.Tree.this == arg1
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == arg1.currentStackLevel
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == arg1.keyValue
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == arg1.keyValue.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == arg1.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == arg1.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == arg1.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg1.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.key == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.key == arg1.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == arg1.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == arg1.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 0
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == java.util.HashMap.class
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == java.lang.Object[].class
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
arg1.stack == null
arg1.mergeSubnodesOperation == null
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.key.toString == "@"
arg1.stackLevel == null
arg1.value == null
arg1.parent == null
arg1.subnode == null
arg1.next == null
arg1.previous == null
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
size(arg1.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg1.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key in arg1.subs[]
arg1.subs[] elements == br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript in arg1.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree$MergeOperationOverNodes.MergeOperationOverNodes(br.com.innovatium.mumps2java.datastructure.Tree, br.com.innovatium.mumps2java.datastructure.Tree):::EXIT
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree == orig(arg1)
this.tree.currentStackLevel == arg1.currentStackLevel
this.tree.keyValue == arg1.keyValue
this.tree.keyValue.getClass().getName() == arg1.keyValue.getClass().getName()
this.tree.killSubnodesOperation == arg1.killSubnodesOperation
this.tree.addSubnodesOperation == arg1.addSubnodesOperation
this.tree.subs == arg1.subs
this.tree.subs.getClass().getName() == arg1.subs.getClass().getName()
this.tree.key == arg1.key
this.tree.susbscript == arg1.susbscript
this.tree.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
this.tree.isNumeric == arg1.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == arg1.currentStackLevel
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == arg1.keyValue
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName() == arg1.keyValue.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == arg1.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == arg1.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == arg1.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == arg1.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == arg1.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == arg1.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == arg1.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == arg1.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
arg1.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
arg1.currentStackLevel == orig(arg1.currentStackLevel)
arg1.stack == orig(arg1.stack)
arg1.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
arg1.keyValue == orig(arg1.keyValue)
arg1.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
arg1.keyValue.getClass().getName() == orig(arg1.keyValue.getClass().getName())
arg1.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
arg1.killSubnodesOperation == orig(arg1.killSubnodesOperation)
arg1.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
arg1.addSubnodesOperation == orig(arg1.addSubnodesOperation)
arg1.mergeSubnodesOperation == orig(arg1.mergeSubnodesOperation)
arg1.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
arg1.subs == orig(arg1.subs)
arg1.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
arg1.subs.getClass().getName() == orig(arg1.subs.getClass().getName())
arg1.subs[] == orig(arg1.subs[])
arg1.key == arg1.susbscript
arg1.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
arg1.key == orig(arg1.key)
arg1.key.toString == orig(arg1.key.toString)
arg1.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
arg1.susbscript == orig(arg1.susbscript)
arg1.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
arg1.susbscript.getClass().getName() == orig(arg1.susbscript.getClass().getName())
arg1.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
arg1.isNumeric == orig(arg1.isNumeric)
arg1.stackLevel == orig(arg1.stackLevel)
arg1.value == orig(arg1.value)
arg1.parent == orig(arg1.parent)
arg1.subnode == orig(arg1.subnode)
arg1.next == orig(arg1.next)
arg1.previous == orig(arg1.previous)
arg1.currentStackLevel == 0
arg1.stack == null
arg1.keyValue.getClass().getName() == java.util.HashMap.class
arg1.mergeSubnodesOperation == null
arg1.subs.getClass().getName() == java.lang.Object[].class
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.key has only one value
arg1.key.toString == "@"
arg1.susbscript has only one value
arg1.susbscript.getClass().getName() == java.lang.String.class
arg1.isNumeric == false
arg1.stackLevel == null
arg1.value == null
arg1.parent == null
arg1.subnode == null
arg1.next == null
arg1.previous == null
size(arg1.subs[]) == 1
arg1.key in this.tree.subs[]
this.tree.subs[] elements == arg1.key
arg1.susbscript in this.tree.subs[]
this.tree.subs[] elements == arg1.susbscript
arg1.susbscript.getClass().getName() in this.tree.subs[].getClass().getName()
arg1.key in arg1.subs[]
arg1.subs[] elements == arg1.key
arg1.subs[] elements == arg1.susbscript
arg1.susbscript in arg1.subs[]
arg1.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
arg1.key in orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) elements == arg1.key
arg1.susbscript in orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) elements == arg1.susbscript
arg1.susbscript.getClass().getName() in orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree:::OBJECT
this == this.mergeSubnodesOperation.tree
this.currentStackLevel == this.mergeSubnodesOperation.tree.currentStackLevel
this.stack == this.mergeSubnodesOperation.tree.stack
this.stack.mapLevel.getClass().getName() == this.keyValue.getClass().getName()
this.keyValue == this.mergeSubnodesOperation.tree.keyValue
this.keyValue.getClass().getName() == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName()
this.keyValue.getClass().getName() == this.mergeSubnodesOperation.tree.keyValue.getClass().getName()
this.killSubnodesOperation == this.mergeSubnodesOperation.tree.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName() == this.subs.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == this.susbscript.getClass().getName()
this.addSubnodesOperation == this.mergeSubnodesOperation.tree.addSubnodesOperation
this.mergeSubnodesOperation == this.mergeSubnodesOperation.tree.mergeSubnodesOperation
this.mergeSubnodesOperation.tree.subs == this.subs
this.mergeSubnodesOperation.tree.subs.getClass().getName() == this.subs.getClass().getName()
this.mergeSubnodesOperation.tree.key == this.key
this.mergeSubnodesOperation.tree.susbscript == this.susbscript
this.mergeSubnodesOperation.tree.susbscript.getClass().getName() == this.susbscript.getClass().getName()
this.mergeSubnodesOperation.tree.isNumeric == this.isNumeric
this.mergeSubnodesOperation.tree.subnode == this.subnode
this.subs == this.subnode.parent.subs
this.subs.getClass().getName() == this.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.key == this.susbscript
this.key == this.subnode.parent.key
this.key == this.subnode.parent.susbscript
this.susbscript == this.subnode.parent.key
this.susbscript == this.subnode.parent.susbscript
this.susbscript.getClass().getName() == this.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.isNumeric == this.subnode.isNumeric
this.isNumeric == this.subnode.next.isNumeric
this.subnode == this.subnode.parent.subnode
this.subnode == this.subnode.subnode.parent
this.subnode == this.subnode.next.previous
this.subnode.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.subnode.subnode.subs.getClass().getName()
this.subnode.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.isNumeric == this.subnode.parent.isNumeric
this.subnode.isNumeric == this.subnode.next.isNumeric
this.subnode.value.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.parent == this.subnode.next.parent
this.subnode.parent.key == this.subnode.parent.susbscript
this.subnode.parent.subnode == this.subnode.subnode.parent
this.subnode.parent.subnode == this.subnode.next.previous
this.subnode.subnode.subs.getClass().getName() == this.subnode.next.subs.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.next.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.subnode.subnode.isNumeric == this.subnode.next.isNumeric
this.subnode.subnode.parent == this.subnode.next.previous
this.subnode.next.susbscript.getClass().getName() == this.subnode.next.value.getClass().getName()
this.currentStackLevel one of { 0, 1 }
this.stack.mapLevel has only one value
this.stack.mapLevel != null
this.stack.mapLevel.getClass().getName() == java.util.HashMap.class
this.keyValue != null
this.keyValue.getClass().getName() == java.util.HashMap.class
this.killSubnodesOperation != null
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel one of { 0, 1 }
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue != null
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation != null
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation != null
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] contains no nulls and has only one value, of length 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements != null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() == [java.lang.String]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName() elements == java.lang.String.class
br.com.innovatium.mumps2java.datastructure.Tree.this.key has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.key != null
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == "@"
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript != null
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == false
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == null
br.com.innovatium.mumps2java.datastructure.Tree.this.value == null
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == null
br.com.innovatium.mumps2java.datastructure.Tree.this.next == null
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == null
this.addSubnodesOperation != null
this.mergeSubnodesOperation != null
this.mergeSubnodesOperation.dest == null
this.mergeSubnodesOperation.orig == null
this.mergeSubnodesOperation.tree != null
this.mergeSubnodesOperation.tree.subs[] contains no nulls and has only one value, of length 1
this.mergeSubnodesOperation.tree.subs[] elements has only one value
this.mergeSubnodesOperation.tree.subs[] elements != null
this.mergeSubnodesOperation.tree.subs[].getClass().getName() == [java.lang.String]
this.mergeSubnodesOperation.tree.subs[].getClass().getName() elements == java.lang.String.class
this.mergeSubnodesOperation.tree.key.toString == "@"
this.mergeSubnodesOperation.tree.stackLevel == null
this.mergeSubnodesOperation.tree.value == null
this.mergeSubnodesOperation.tree.parent == null
this.mergeSubnodesOperation.tree.next == null
this.mergeSubnodesOperation.tree.previous == null
this.subs != null
this.subs.getClass().getName() == java.lang.Object[].class
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[] elements != null
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.key has only one value
this.key != null
this.key.toString == "@"
this.susbscript has only one value
this.susbscript != null
this.susbscript.getClass().getName() == java.lang.String.class
this.isNumeric == false
this.stackLevel == null
this.value == null
this.parent == null
this.subnode.subs != null
this.subnode.subs.getClass().getName() == java.lang.Object[].class
this.subnode.subs[] elements != null
this.subnode.subs[].getClass().getName() == [java.lang.String]
this.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.key != null
this.subnode.susbscript != null
this.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.isNumeric == false
this.subnode.value.getClass().getName() == java.lang.String.class
this.subnode.parent != null
this.subnode.parent.subs != null
this.subnode.parent.subs[] contains no nulls and has only one value, of length 1
this.subnode.parent.subs[] elements has only one value
this.subnode.parent.subs[] elements != null
this.subnode.parent.subs[].getClass().getName() == [java.lang.String]
this.subnode.parent.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.parent.key has only one value
this.subnode.parent.key != null
this.subnode.parent.key.toString == "@"
this.subnode.parent.susbscript has only one value
this.subnode.parent.susbscript != null
this.subnode.parent.stackLevel == null
this.subnode.parent.value == null
this.subnode.parent.parent == null
this.subnode.parent.subnode != null
this.subnode.parent.next == null
this.subnode.parent.previous == null
this.subnode.subnode.subs != null
this.subnode.subnode.subs.getClass().getName() == java.lang.Object[].class
this.subnode.subnode.subs[] elements != null
this.subnode.subnode.subs[].getClass().getName() one of { [java.lang.String, java.lang.Integer], [java.lang.String, java.lang.String] }
this.subnode.subnode.key != null
this.subnode.subnode.key.toString one of { "%varPublica~1", "vetorLocal~xpto" }
this.subnode.subnode.susbscript != null
this.subnode.subnode.stackLevel == null
this.subnode.subnode.value == null
this.subnode.subnode.parent != null
this.subnode.subnode.next == null
this.subnode.subnode.previous == null
this.subnode.next.subs != null
this.subnode.next.subs.getClass().getName() == java.lang.Object[].class
this.subnode.next.subs[] elements != null
this.subnode.next.subs[].getClass().getName() == [java.lang.String]
this.subnode.next.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.next.key != null
this.subnode.next.key.toString one of { "locVarAfterNew", "vetorLocal", "zzz" }
this.subnode.next.susbscript != null
this.subnode.next.susbscript.getClass().getName() == java.lang.String.class
this.subnode.next.isNumeric == false
this.subnode.next.value.getClass().getName() == java.lang.String.class
this.subnode.next.parent has only one value
this.subnode.next.parent != null
this.subnode.next.previous != null
this.subnode.previous == null
this.next == null
this.previous == null
size(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]) == 1
size(this.mergeSubnodesOperation.tree.subs[]) == 1
size(this.subs[]) == 1
size(this.subnode.subs[]) == 1
size(this.subnode.parent.subs[]) == 1
size(this.subnode.subnode.subs[]) == 2
size(this.subnode.next.subs[]) == 1
this.stack.mapLevel.getClass().getName() != this.subs.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.susbscript.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.subs.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.value.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.stack.mapLevel.getClass().getName() != this.subnode.next.value.getClass().getName()
this.keyValue.getClass().getName() != this.subs.getClass().getName()
this.keyValue.getClass().getName() != this.susbscript.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.subs.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.value.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.keyValue.getClass().getName() != this.subnode.next.value.getClass().getName()
this.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.key in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == this.key
this.mergeSubnodesOperation.tree.subs[] elements == this.susbscript
this.susbscript in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.mergeSubnodesOperation.tree.subs[]
this.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subs.getClass().getName() != this.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.value.getClass().getName()
this.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.key in this.subs[]
this.subs[] elements == this.key
this.subs[] elements == this.susbscript
this.susbscript in this.subs[]
this.subnode.parent.key in this.subs[]
this.subs[] elements == this.subnode.parent.key
this.subnode.parent.susbscript in this.subs[]
this.subs[] elements == this.subnode.parent.susbscript
this.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subs[].getClass().getName()
this.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.key
this.subnode.parent.subs[] elements == this.susbscript
this.susbscript in this.subnode.parent.subs[]
this.susbscript.getClass().getName() != this.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.value.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.subnode.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in this.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript in this.subnode.subnode.subs[]
this.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != this.subnode.subnode.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.parent.key in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == this.subnode.parent.key
this.subnode.parent.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in this.subnode.parent.subs[]
this.subnode.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.subnode.subnode.susbscript.getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subnode.subnode.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.subnode.subnode.susbscript in this.subnode.subnode.subs[]
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() != this.subnode.next.subs.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != this.subnode.next.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != this.subnode.next.value.getClass().getName()
this.subnode.next.subs[] elements == this.subnode.next.susbscript
this.subnode.next.susbscript in this.subnode.next.subs[]
this.subnode.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.Tree():::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
this.currentStackLevel == 0
this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == null
this.subnode == null
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.addAllSubnodes(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs == arg0.parent.subs
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.key == arg0.parent.key
this.susbscript == arg0.parent.susbscript
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == arg0.isNumeric
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == arg0.next.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.subnode == arg0.parent.subnode
this.subnode.subs == arg0.previous.subs
this.subnode.key == arg0.previous.key
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.value == arg0.previous.value
this.subnode.parent == arg0.parent
this.subnode.parent == arg0.next.parent
this.subnode.parent == arg0.previous.parent
this.subnode.next == arg0.subnode.parent
this.subnode.next.subnode == arg0.subnode
arg0 == arg0.subnode.parent
arg0 == arg0.next.previous
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.subnode.parent == arg0.previous.next
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "locVarAfterNew" }
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next.key.toString one of { "locVarAfterNew", "vetorLocal" }
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.stackLevel has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key.toString == "@"
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "locVarAfterNew", "zzz" }
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs has only one value
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key has only one value
arg0.previous.key.toString == "locVarAfterNew"
arg0.previous.susbscript has only one value
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.previous == null
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
arg0.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.parent.subs[] elements == this.key
this.key in arg0.parent.subs[]
arg0.parent.subs[] elements == this.susbscript
this.susbscript in arg0.parent.subs[]
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subs[] elements == arg0.susbscript
arg0.susbscript in arg0.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript in arg0.next.subs[]
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript in arg0.previous.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.addAllSubnodes(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == arg0.parent.subs
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs == orig(arg0.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == arg0.parent.key
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key == orig(arg0.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == arg0.parent.susbscript
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript == orig(arg0.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.next.value.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == arg0.isNumeric
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == arg0.next.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.isNumeric == orig(arg0.isNumeric)
this.isNumeric == orig(arg0.parent.isNumeric)
this.isNumeric == orig(arg0.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == arg0.parent.subnode
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(this.subnode.next.previous)
this.subnode == orig(arg0.parent.subnode)
this.subnode.subs == arg0.previous.subs
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == arg0.previous.key
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == arg0.previous.value
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == arg0.parent
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.next == arg0.subnode.parent
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.parent == arg0.parent
this.subnode.next.subnode == arg0.subnode
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent == orig(this.subnode.parent)
arg0.parent == orig(this.subnode.next.parent)
arg0.parent == orig(arg0.parent)
arg0.parent == orig(arg0.next.parent)
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(this.subnode.next.subnode)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == arg0.previous.next
arg0.subnode.parent == orig(arg0)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.parent == orig(arg0.previous.next)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == orig(arg0)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.previous == orig(arg0.previous.previous)
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "locVarAfterNew" }
this.subnode.subnode == null
this.subnode.next.key.toString one of { "locVarAfterNew", "vetorLocal" }
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key.toString == "@"
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "locVarAfterNew", "zzz" }
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs has only one value
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key has only one value
arg0.previous.key.toString == "locVarAfterNew"
arg0.previous.susbscript has only one value
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.previous == null
orig(this) has only one value
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.parent.subs[] elements == this.key
this.key in arg0.parent.subs[]
arg0.parent.subs[] elements == this.susbscript
this.susbscript in arg0.parent.subs[]
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
arg0.subs[] elements == arg0.susbscript
arg0.susbscript in arg0.subs[]
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript in arg0.next.subs[]
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript in arg0.previous.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findNode(java.lang.Object[]):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == arg0.getClass().getName()
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.next.stackLevel == null
arg0 != null
arg0[] elements != null
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findNode(java.lang.Object[]):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.isNumeric == return.next.isNumeric
this.isNumeric == return.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subnode.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.isNumeric == return.next.isNumeric
this.subnode.isNumeric == return.previous.isNumeric
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.stackLevel == return.previous.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == return.value.getClass().getName()
this.subnode.value.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.next.value.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.parent == return.previous.parent
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == return.parent.subs
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == return.parent.key
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == return.parent.susbscript
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == return.isNumeric
this.subnode.subnode.isNumeric == return.parent.isNumeric
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == return.parent.parent
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == return
this.subnode.subnode.subnode == return.parent.subnode
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == return.next.isNumeric
this.subnode.next.isNumeric == return.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == return.value.getClass().getName()
this.subnode.next.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == return.next.value.getClass().getName()
this.subnode.next.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.next.parent == return.previous.parent
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
return == return.subnode.parent
return == return.next.previous
return == return.previous.next
return.subs.getClass().getName() == return.parent.subs.getClass().getName()
return.subs.getClass().getName() == return.subnode.subs.getClass().getName()
return.subs.getClass().getName() == return.next.subs.getClass().getName()
return.subs.getClass().getName() == return.previous.subs.getClass().getName()
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.isNumeric == return.next.isNumeric
return.isNumeric == return.previous.isNumeric
return.value.getClass().getName() == return.next.susbscript.getClass().getName()
return.value.getClass().getName() == return.next.value.getClass().getName()
return.value.getClass().getName() == return.previous.susbscript.getClass().getName()
return.value.getClass().getName() == return.previous.value.getClass().getName()
return.parent == return.next.parent
return.parent == return.previous.parent
return.parent.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.parent.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.parent.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.parent.isNumeric == return.previous.isNumeric
return.parent.subnode == return.next.previous
return.subnode.subs.getClass().getName() == return.previous.subs.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.subnode.parent == return.previous.next
return.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.previous.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.next.stackLevel == null
arg0[] elements != null
return.subs != null
return.subs.getClass().getName() == java.lang.Object[].class
return.subs[] elements != null
return.key != null
return.susbscript != null
return.value.getClass().getName() == java.lang.String.class
return.parent != null
return.parent.subs != null
return.parent.subs[] elements != null
return.parent.key != null
return.parent.susbscript != null
return.parent.stackLevel == null
return.parent.value == null
return.parent.subnode != null
return.parent.next == null
return.subnode.subs.getClass().getName() == java.lang.Object[].class
return.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
return.subnode.stackLevel == null
return.subnode.value.getClass().getName() == java.lang.String.class
return.subnode.next == null
return.subnode.previous == null
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.stackLevel == null
return.next.value.getClass().getName() == java.lang.String.class
return.previous.subs.getClass().getName() == java.lang.Object[].class
return.previous.subs[].getClass().getName() == [java.lang.String]
return.previous.subs[].getClass().getName() elements == java.lang.String.class
return.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
return.previous.susbscript.getClass().getName() == java.lang.String.class
return.previous.isNumeric == false
return.previous.value.getClass().getName() == java.lang.String.class
return.previous.parent has only one value
size(return.parent.subs[]) one of { 1, 2, 3 }
size(return.subnode.subs[]) one of { 2, 3, 4 }
size(return.next.subs[]) one of { 1, 4 }
size(return.previous.subs[]) == 1
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in return.subnode.subs[].getClass().getName()
this.keyValue.getClass().getName() != return.subs.getClass().getName()
this.keyValue.getClass().getName() != return.susbscript.getClass().getName()
this.keyValue.getClass().getName() != return.value.getClass().getName()
this.keyValue.getClass().getName() != return.parent.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
return.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.next.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.next.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subs.getClass().getName() != return.value.getClass().getName()
this.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.value.getClass().getName() in this.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() != return.subs.getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != return.value.getClass().getName()
this.subnode.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != return.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() != return.subs.getClass().getName()
this.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
return.parent.susbscript in this.subnode.subnode.subs[]
return.subnode.susbscript in this.subnode.subnode.subs[]
return.next.key in this.subnode.subnode.subs[]
return.next.susbscript in this.subnode.subnode.subs[]
return.next.value in this.subnode.subnode.subs[]
return.previous.key in this.subnode.subnode.subs[]
return.previous.susbscript in this.subnode.subnode.subs[]
return.previous.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in return.subnode.subs[]
this.subnode.subnode.key in return.next.subs[]
this.subnode.subnode.key in return.previous.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
this.subnode.subnode.susbscript in return.subs[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript in return.subnode.subs[]
this.subnode.subnode.susbscript in return.next.subs[]
this.subnode.subnode.susbscript in return.previous.subs[]
this.subnode.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != return.value.getClass().getName()
this.subnode.next.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in return.subnode.subs[]
this.subnode.next.susbscript.getClass().getName() != return.subs.getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.susbscript in arg0[]
return.subs.getClass().getName() != return.susbscript.getClass().getName()
return.subs.getClass().getName() != return.value.getClass().getName()
return.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.value.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.value.getClass().getName() in return.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript in return.subnode.subs[]
return.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.value.getClass().getName() in return.next.subs[].getClass().getName()
return.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript in return.subnode.subs[]
return.next.key in return.subnode.subs[]
return.next.susbscript in return.subnode.subs[]
return.next.value in return.subnode.subs[]
return.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.susbscript in return.next.subs[]
return.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.susbscript in return.next.subs[]
return.previous.key in return.next.subs[]
return.previous.susbscript in return.next.subs[]
return.previous.value in return.next.subs[]
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.next.value.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
return.next.key in return.previous.subs[]
return.next.susbscript in return.previous.subs[]
return.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.value in return.previous.subs[]
return.next.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.subs[] elements == return.previous.susbscript
return.previous.susbscript in return.previous.subs[]
return.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findNode(java.lang.String):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVarAfterNew"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
arg0.toString one of { "locVar", "vetorLocal" }
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findNode(java.lang.String):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.toString == orig(arg0.toString)
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVarAfterNew"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
arg0.toString one of { "locVar", "vetorLocal" }
return == null
orig(this) has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findNodeByKey(java.lang.String):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
arg0 != null
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findNodeByKey(java.lang.String):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.isNumeric == return.next.isNumeric
this.isNumeric == return.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subnode.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.isNumeric == return.next.isNumeric
this.subnode.isNumeric == return.previous.isNumeric
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.stackLevel == return.previous.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == return.value.getClass().getName()
this.subnode.value.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.next.value.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.parent == return.previous.parent
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == return.parent.subs
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == return.parent.key
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == return.parent.susbscript
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == return.isNumeric
this.subnode.subnode.isNumeric == return.parent.isNumeric
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == return.parent.parent
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == return
this.subnode.subnode.subnode == return.parent.subnode
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == return.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == return.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == return.next.isNumeric
this.subnode.next.isNumeric == return.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == return.value.getClass().getName()
this.subnode.next.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == return.next.value.getClass().getName()
this.subnode.next.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.next.parent == return.previous.parent
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.toString == orig(arg0.toString)
return == return.subnode.parent
return == return.next.previous
return == return.previous.next
return.subs.getClass().getName() == return.parent.subs.getClass().getName()
return.subs.getClass().getName() == return.subnode.subs.getClass().getName()
return.subs.getClass().getName() == return.next.subs.getClass().getName()
return.subs.getClass().getName() == return.previous.subs.getClass().getName()
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.isNumeric == return.next.isNumeric
return.isNumeric == return.previous.isNumeric
return.value.getClass().getName() == return.next.susbscript.getClass().getName()
return.value.getClass().getName() == return.next.value.getClass().getName()
return.value.getClass().getName() == return.previous.susbscript.getClass().getName()
return.value.getClass().getName() == return.previous.value.getClass().getName()
return.parent == return.next.parent
return.parent == return.previous.parent
return.parent.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.parent.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.parent.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.parent.isNumeric == return.previous.isNumeric
return.parent.subnode == return.next.previous
return.subnode.subs.getClass().getName() == return.previous.subs.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.subnode.value.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.subnode.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.subnode.parent == return.previous.next
return.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.previous.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
return.subs != null
return.subs.getClass().getName() == java.lang.Object[].class
return.subs[] elements != null
return.key != null
return.susbscript != null
return.value.getClass().getName() == java.lang.String.class
return.parent != null
return.parent.subs != null
return.parent.subs[] elements != null
return.parent.key != null
return.parent.susbscript != null
return.parent.stackLevel == null
return.parent.value == null
return.parent.subnode != null
return.parent.next == null
return.subnode.subs.getClass().getName() == java.lang.Object[].class
return.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
return.subnode.stackLevel == null
return.subnode.value.getClass().getName() == java.lang.String.class
return.subnode.next == null
return.subnode.previous == null
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.stackLevel == null
return.next.value.getClass().getName() == java.lang.String.class
return.previous.subs.getClass().getName() == java.lang.Object[].class
return.previous.subs[].getClass().getName() == [java.lang.String]
return.previous.subs[].getClass().getName() elements == java.lang.String.class
return.previous.key.toString one of { "locVar", "locVarAfterNew", "vetorLocal" }
return.previous.susbscript.getClass().getName() == java.lang.String.class
return.previous.isNumeric == false
return.previous.value.getClass().getName() == java.lang.String.class
return.previous.parent has only one value
size(return.parent.subs[]) one of { 1, 2, 3 }
size(return.subnode.subs[]) one of { 2, 3, 4 }
size(return.next.subs[]) one of { 1, 4 }
size(return.previous.subs[]) == 1
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in return.subnode.subs[].getClass().getName()
this.keyValue.getClass().getName() != return.subs.getClass().getName()
this.keyValue.getClass().getName() != return.susbscript.getClass().getName()
this.keyValue.getClass().getName() != return.value.getClass().getName()
this.keyValue.getClass().getName() != return.parent.susbscript.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
return.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.next.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.next.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subs.getClass().getName() != return.value.getClass().getName()
this.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.value.getClass().getName() in this.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() != return.subs.getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != return.value.getClass().getName()
this.subnode.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != return.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() != return.subs.getClass().getName()
this.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
return.parent.susbscript in this.subnode.subnode.subs[]
return.subnode.susbscript in this.subnode.subnode.subs[]
return.next.key in this.subnode.subnode.subs[]
return.next.susbscript in this.subnode.subnode.subs[]
return.next.value in this.subnode.subnode.subs[]
return.previous.key in this.subnode.subnode.subs[]
return.previous.susbscript in this.subnode.subnode.subs[]
return.previous.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in return.subnode.subs[]
this.subnode.subnode.key in return.next.subs[]
this.subnode.subnode.key in return.previous.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in return.subs[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript in return.subnode.subs[]
this.subnode.subnode.susbscript in return.next.subs[]
this.subnode.subnode.susbscript in return.previous.subs[]
this.subnode.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != return.value.getClass().getName()
this.subnode.next.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in return.subnode.subs[]
this.subnode.next.susbscript.getClass().getName() != return.subs.getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.subs.getClass().getName() != return.susbscript.getClass().getName()
return.subs.getClass().getName() != return.value.getClass().getName()
return.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.value.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.value.getClass().getName() in return.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript in return.subnode.subs[]
return.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.value.getClass().getName() in return.next.subs[].getClass().getName()
return.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript in return.subnode.subs[]
return.next.key in return.subnode.subs[]
return.next.susbscript in return.subnode.subs[]
return.next.value in return.subnode.subs[]
return.subnode.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.next.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subnode.subs[].getClass().getName()
return.subnode.susbscript in return.next.subs[]
return.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
return.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.susbscript in return.next.subs[]
return.previous.key in return.next.subs[]
return.previous.susbscript in return.next.subs[]
return.previous.value in return.next.subs[]
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.next.value.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
return.next.key in return.previous.subs[]
return.next.susbscript in return.previous.subs[]
return.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.value in return.previous.subs[]
return.next.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.subs[] elements == return.previous.susbscript
return.previous.susbscript in return.previous.subs[]
return.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findSubnodeExcepts(java.lang.Object[]):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.subnode.stackLevel == this.subnode.next.stackLevel
this has only one value
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVar"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next has only one value
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(arg0[]) == 1
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findSubnodeExcepts(java.lang.Object[]):::EXIT297
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.findSubnodeExcepts(java.lang.Object[]):::EXIT
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == orig(this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVar"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 2
return[].getClass().getName() == [br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node]
return[].getClass().getName() elements == br.com.innovatium.mumps2java.datastructure.Node.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 2
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.generateKey(java.lang.Object[]):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == arg0.getClass().getName()
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.next.stackLevel == null
arg0 != null
arg0[] elements != null
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.generateKey(java.lang.Object[]):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.isNumeric == orig(this.subnode.isNumeric)
this.subnode.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs == orig(this.subnode.parent.subs)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key == orig(this.subnode.parent.key)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript == orig(this.subnode.parent.susbscript)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.subnode == orig(this.subnode.parent.subnode)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.next.stackLevel == null
arg0[] elements != null
return != null
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.generateNode(br.com.innovatium.mumps2java.datastructure.Node, java.lang.Object[], int):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.mergeSubnodesOperation.tree.subs[] == this.subs[]
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == arg1.getClass().getName()
this.subs[].getClass().getName() == this.subnode.subs[].getClass().getName()
this.subs[].getClass().getName() == this.subnode.next.subs[].getClass().getName()
this.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.subnode.subs == arg0.previous.subs
this.subnode.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.subs[].getClass().getName() == this.subnode.next.subs[].getClass().getName()
this.subnode.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
this.subnode.key == arg0.previous.key
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.isNumeric == arg0.parent.isNumeric
this.subnode.isNumeric == arg0.previous.isNumeric
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.value == arg0.previous.value
this.subnode.value.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.parent == arg0.previous.parent
this.subnode.subnode == this.subnode.next.next
this.subnode.subnode.subs == arg0.subs
this.subnode.subnode.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.subnode.subs[].getClass().getName() == arg0.subs[].getClass().getName()
this.subnode.subnode.key == arg0.key
this.subnode.subnode.susbscript == arg0.susbscript
this.subnode.subnode.susbscript == this.subnode.subnode.subs[arg2-1]
this.subnode.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.subnode.isNumeric == arg0.isNumeric
this.subnode.subnode.parent == arg0.parent
this.subnode.subnode.subnode == this.subnode.next
this.subnode.subnode.subnode == arg0.parent.previous
this.subnode.subnode.subnode == arg0.subnode
this.subnode.subnode.subnode == arg0.previous
this.subnode.next == arg0.previous.next
this.subnode.next.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.isNumeric == arg0.parent.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.parent == arg0.previous.parent
arg0 == arg0.subnode.parent
arg0 == arg0.previous.next
arg0.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.isNumeric == arg0.previous.isNumeric
arg0.parent == arg0.previous.parent
arg0.parent.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.parent.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.parent.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.parent.isNumeric == arg0.previous.isNumeric
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.susbscript == arg0.subnode.subs[arg2]
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.isNumeric == arg0.previous.isNumeric
arg0.subnode.parent == arg0.previous.next
arg0.previous.susbscript == arg0.previous.subs[arg2-1]
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg2 == size(this.subnode.subnode.subs[])
arg2 == size(arg0.subnode.subs[])-1
arg2 == size(arg0.previous.subs[])
size(this.subs[]) == size(this.subnode.subnode.subs[])-1
size(this.subs[]) == size(this.subnode.next.subs[])
size(this.subs[]) == size(arg0.previous.subs[])
size(this.subnode.subs[]) == size(this.subnode.parent.subs[])
size(this.subnode.subs[]) == size(this.subnode.subnode.subs[])-1
size(this.subnode.subs[]) == size(this.subnode.next.subs[])
size(this.subnode.subnode.subs[]) == size(arg1[])-1
size(this.subnode.subnode.subs[])-1 == size(arg0.parent.subs[])
size(this.subnode.next.subs[]) == size(arg0.previous.subs[])
size(arg0.subs[]) == size(arg0.previous.subs[])
size(arg0.parent.subs[]) == size(arg0.previous.subs[])
size(arg0.subnode.subs[])-1 == size(arg0.previous.subs[])
this.subnode.key.toString one of { "%varPublica", "locVar", "zzz" }
this.subnode.stackLevel == null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode == null
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value == null
this.subnode.next.next == null
this.subnode.next.previous has only one value
arg0 != null
arg0.subs != null
arg0.subs[] elements != null
arg0.key != null
arg0.susbscript != null
arg0.stackLevel == null
arg0.value == null
arg0.parent.subs.getClass().getName() == java.lang.Object[].class
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
arg0.parent.susbscript.getClass().getName() == java.lang.String.class
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.next == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next == null
arg0.previous.subs has only one value
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key has only one value
arg0.previous.key.toString == "locVar"
arg0.previous.susbscript has only one value
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.next has only one value
arg0.previous.previous == null
arg1 != null
arg1[] elements != null
arg2 >= 0
size(arg0.subs[]) one of { 1, 2, 3 }
size(arg0.parent.subs[]) one of { 1, 2 }
size(arg0.subnode.subs[]) >= 1
size(arg0.previous.subs[]) == 1
size(arg1[]) one of { 1, 3, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.keyValue.getClass().getName() != arg0.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.subs.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg0.subnode.subs.getClass().getName()
this.keyValue.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
this.subs[] == this.subnode.parent.subs[] (elementwise)
this.subs[] is the reverse of this.subnode.parent.subs[]
this.subs[].getClass().getName() == this.subnode.subs[].getClass().getName() (elementwise)
this.subs[].getClass().getName() == this.subnode.next.subs[].getClass().getName() (elementwise)
arg0.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg0.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.subnode.subs.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
this.subnode.subs[] == arg0.previous.subs[] (elementwise)
this.subnode.subs[] is the reverse of arg0.previous.subs[]
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
this.subnode.subs[].getClass().getName() == this.subnode.next.subs[].getClass().getName() (elementwise)
arg0.parent.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
this.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() != arg0.subnode.subs.getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() != arg0.subnode.subs.getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subnode.subs[] is the reverse of this.subnode.next.subs[]
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] == arg0.subs[] (elementwise)
arg0.susbscript in this.subnode.subnode.subs[]
arg0.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] is the reverse of arg0.subnode.subs[]
arg0.subnode.key in this.subnode.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subnode.subs[]
arg0.subnode.value in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] is the reverse of arg0.previous.subs[]
arg0.previous.key in this.subnode.subnode.subs[]
arg0.previous.susbscript in this.subnode.subnode.subs[]
arg0.previous.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.subs[].getClass().getName() == arg0.subs[].getClass().getName() (elementwise)
arg0.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in arg0.subnode.subs[]
this.subnode.subnode.key in arg0.previous.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0.subs[]
this.subnode.subnode.susbscript in arg0.subnode.subs[]
this.subnode.subnode.susbscript in arg0.previous.subs[]
this.subnode.subnode.susbscript in arg1[]
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != arg0.susbscript.getClass().getName()
arg0.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
arg0.susbscript.getClass().getName() != arg0.subnode.subs.getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
arg0.parent.susbscript in arg0.parent.subs[]
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg2 >= size(this.subs[])-1
arg2 >= size(this.subnode.subs[])-1
arg2 >= size(this.subnode.next.subs[])-1
arg2 % size(arg0.subs[]) == 0
arg2 <= size(arg0.subs[])
arg2 >= size(arg0.subs[])-1
arg2 >= size(arg0.parent.subs[])
arg2 - size(arg0.subnode.subs[]) + 1 == 0
arg2 <= size(arg1[])-1
size(this.subs[]) <= size(arg0.subs[])
size(this.subs[]) <= size(arg0.parent.subs[])
size(this.subs[]) >= size(arg0.parent.subs[])-1
size(this.subs[]) <= size(arg0.subnode.subs[])
size(this.subs[]) <= size(arg1[])
size(this.subs[]) != size(arg1[])-1
size(this.subs[])-1 <= size(arg0.subs[])-1
size(this.subs[])-1 <= size(arg0.parent.subs[])-1
size(this.subs[])-1 <= size(arg0.subnode.subs[])-1
size(this.subs[])-1 <= size(arg1[])-1
size(this.subnode.subs[]) <= size(arg0.subs[])
size(this.subnode.subs[]) <= size(arg0.parent.subs[])
size(this.subnode.subs[]) >= size(arg0.parent.subs[])-1
size(this.subnode.subs[]) <= size(arg0.subnode.subs[])
size(this.subnode.subs[]) <= size(arg1[])
size(this.subnode.subs[]) != size(arg1[])-1
size(this.subnode.subs[])-1 <= size(arg0.subs[])-1
size(this.subnode.subs[])-1 <= size(arg0.parent.subs[])-1
size(this.subnode.subs[])-1 <= size(arg0.subnode.subs[])-1
size(this.subnode.subs[])-1 <= size(arg1[])-1
size(this.subnode.next.subs[]) <= size(arg0.subs[])
size(this.subnode.next.subs[]) <= size(arg1[])
size(this.subnode.next.subs[]) != size(arg1[])-1
size(this.subnode.next.subs[])-1 <= size(arg0.subs[])-1
size(this.subnode.next.subs[])-1 <= size(arg1[])-1
size(arg0.subs[]) >= size(arg0.parent.subs[])
size(arg0.subs[]) <= size(arg0.subnode.subs[])
size(arg0.subnode.subs[])-1 % size(arg0.subs[]) == 0
size(arg0.subs[]) >= size(arg0.subnode.subs[])-1
size(arg0.subs[]) <= size(arg1[])
size(arg0.subs[])-1 % size(arg0.parent.subs[]) == 0
size(arg0.subs[])-1 <= size(arg0.parent.subs[])
size(arg0.subs[])-1 >= size(arg0.parent.subs[])-1
size(arg0.subs[])-1 <= size(arg0.subnode.subs[])-1
size(arg0.subs[])-1 <= size(arg1[])-1
size(arg1[]) % size(arg0.parent.subs[]) == 0
size(arg0.parent.subs[]) < size(arg1[])-1
size(arg0.subnode.subs[]) <= size(arg1[])
size(arg0.subnode.subs[])-1 <= size(arg1[])-1
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.generateNode(br.com.innovatium.mumps2java.datastructure.Node, java.lang.Object[], int):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == this.subs[]
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg1.getClass().getName())
this.subs[] == this.subnode.parent.subs[]
this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
this.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.subs[] == orig(this.subs[])
this.subs[].getClass().getName() == this.subnode.next.subs[].getClass().getName()
this.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
this.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
this.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key == orig(this.subnode.parent.susbscript)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.key)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.isNumeric == return.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode.subnode.parent)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs == arg0.previous.subs
this.subnode.key == arg0.previous.key
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == arg0.previous.value
this.subnode.value.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.value.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
this.subnode.parent == arg0.previous.parent
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.next.next)
this.subnode.subnode.subs == return.parent.subs
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[].getClass().getName() == return.parent.subs[].getClass().getName()
this.subnode.subnode.subs[].getClass().getName() == orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.subnode.key == return.parent.key
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == return.parent.susbscript
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == return.isNumeric
this.subnode.subnode.isNumeric == return.parent.isNumeric
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == return.parent.parent
this.subnode.subnode.parent == orig(this.subnode.parent.subnode)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == return
this.subnode.subnode.subnode == return.parent.subnode
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == arg0.previous.next
this.subnode.next == orig(this.subnode.subnode.subnode)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
this.subnode.next.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
this.subnode.next.isNumeric == arg0.parent.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.isNumeric == return.isNumeric
this.subnode.next.isNumeric == return.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.isNumeric)
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.stackLevel)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.parent == arg0.previous.parent
this.subnode.next.parent == orig(this.subnode.parent)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(this.subnode.subnode.subs)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
arg0.subs[].getClass().getName() == orig(this.subnode.subnode.subs[].getClass().getName())
arg0.key == orig(this.subnode.subnode.key)
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(this.subnode.subnode.susbscript)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.isNumeric == arg0.previous.isNumeric
arg0.isNumeric == orig(this.subnode.subnode.isNumeric)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.parent == arg0.previous.parent
arg0.parent == orig(this.subnode.subnode.parent)
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == return.previous.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
arg0.parent.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
arg0.parent.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
arg0.parent.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
arg0.parent.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName()
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.parent.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.parent.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
arg0.parent.susbscript.getClass().getName() == return.previous.value.getClass().getName()
arg0.parent.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
arg0.parent.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.parent.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
arg0.parent.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
arg0.parent.isNumeric == arg0.previous.isNumeric
arg0.parent.isNumeric == return.previous.isNumeric
arg0.parent.isNumeric == orig(this.subnode.isNumeric)
arg0.parent.isNumeric == orig(this.subnode.next.isNumeric)
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.subnode == orig(arg0.parent.subnode)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(this.subnode.subnode.subnode)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode.subs[].getClass().getName() == orig(arg0.subnode.subs[].getClass().getName())
arg0.subnode.susbscript == arg0.subnode.subs[orig(arg2)]
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
arg0.subnode.isNumeric == arg0.previous.isNumeric
arg0.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
arg0.subnode.value.getClass().getName() == return.previous.susbscript.getClass().getName()
arg0.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
arg0.subnode.value.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
arg0.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.subnode.value.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.value.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
arg0.subnode.parent == orig(arg0)
arg0.subnode.subnode == orig(this.subnode.subnode.subnode)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(this.subnode.subnode.subnode)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.previous == orig(this.subnode.subnode.subnode)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == orig(this.subnode.subs)
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs.getClass().getName() == return.previous.subs.getClass().getName()
arg0.previous.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
arg0.previous.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
arg0.previous.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.previous.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
arg0.previous.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
arg0.previous.key == orig(this.subnode.key)
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == orig(this.subnode.susbscript)
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.susbscript == arg0.previous.subs[orig(arg2)-1]
arg0.previous.susbscript == orig(arg0.previous.subs[arg2-1])
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == return.susbscript.getClass().getName()
arg0.previous.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
arg0.previous.susbscript.getClass().getName() == return.previous.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
arg0.previous.isNumeric == return.isNumeric
arg0.previous.isNumeric == return.previous.isNumeric
arg0.previous.isNumeric == orig(this.subnode.isNumeric)
arg0.previous.isNumeric == orig(this.subnode.next.isNumeric)
arg0.previous.isNumeric == orig(arg0.subnode.isNumeric)
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == orig(this.subnode.value)
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == orig(this.subnode.parent)
arg0.previous.parent == orig(this.subnode.next.parent)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.next == orig(this.subnode.next)
arg0.previous.next == orig(arg0)
arg0.previous.next == orig(arg0.subnode.parent)
arg0.previous.next == orig(arg0.previous.next)
arg0.previous.previous == orig(arg0.previous.previous)
arg1[] == return.subs[]
arg1[] == orig(arg1[])
return == return.previous.next
return.subs[].getClass().getName() == return.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
return.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
return.isNumeric == return.previous.isNumeric
return.isNumeric == orig(this.subnode.subnode.isNumeric)
return.isNumeric == orig(this.subnode.next.isNumeric)
return.parent == return.previous.parent
return.parent.subs == orig(this.subnode.subnode.subs)
return.parent.subs[].getClass().getName() == orig(this.subnode.subnode.subs[].getClass().getName())
return.parent.key == orig(this.subnode.subnode.key)
return.parent.susbscript == orig(this.subnode.subnode.susbscript)
return.parent.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.parent.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
return.parent.isNumeric == orig(this.subnode.subnode.isNumeric)
return.parent.parent == orig(this.subnode.subnode.parent)
return.next.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
return.next.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
return.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.next.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
return.next.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
return.next.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
return.previous == orig(this.subnode.subnode.subnode)
return.previous.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
return.previous.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
return.previous.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
return.previous.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.previous.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
return.previous.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.previous.susbscript.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
return.previous.isNumeric == orig(this.subnode.isNumeric)
return.previous.isNumeric == orig(this.subnode.next.isNumeric)
return.previous.value.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
return.previous.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.previous.value.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
orig(arg0.subnode.susbscript) == orig(arg0.subnode.subs[post(arg2)-1])
orig(arg2) == size(arg0.subnode.subs[])-1
orig(arg2) == size(arg0.previous.subs[])
size(this.subs[]) == size(this.subnode.subs[])
size(this.subs[]) == size(this.subnode.subnode.subs[])-1
size(this.subs[]) == size(this.subnode.next.subs[])
size(this.subs[]) == orig(size(this.subnode.subnode.subs[]))-1
size(this.subs[]) == orig(size(this.subnode.next.subs[]))
size(this.subnode.subnode.subs[]) == size(arg1[])-1
size(this.subnode.subnode.subs[])-1 == size(arg0.parent.subs[])
size(this.subnode.subnode.subs[])-1 == orig(size(this.subnode.subs[]))
size(this.subnode.next.subs[]) == size(arg0.previous.subs[])
size(this.subnode.next.subs[]) == orig(size(this.subnode.subs[]))
size(arg0.subs[]) == size(arg0.previous.subs[])
size(arg0.parent.subs[]) == size(arg0.previous.subs[])
size(arg0.parent.subs[]) == orig(size(this.subnode.subnode.subs[]))-1
size(arg0.subnode.subs[]) == orig(size(arg0.subnode.subs[]))
size(arg0.previous.subs[]) == orig(size(this.subnode.next.subs[]))
size(arg0.previous.subs[]) == orig(size(arg0.subnode.subs[]))-1
size(arg1[])-1 == orig(size(this.subnode.subnode.subs[]))
size(return.subs[]) == size(return.previous.subs[])
arg1[orig(arg2)] == orig(arg1[post(arg2)-1])
this.subnode != null
this.subnode.key.toString one of { "%varPublica", "locVar", "locVarAfterNew" }
this.subnode.stackLevel == null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
arg0.subs != null
arg0.subs[] elements != null
arg0.key != null
arg0.susbscript != null
arg0.stackLevel == null
arg0.value == null
arg0.parent.subs.getClass().getName() == java.lang.Object[].class
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
arg0.parent.susbscript.getClass().getName() == java.lang.String.class
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.next == null
arg0.subnode != null
arg0.subnode.subs != null
arg0.subnode.subs[] elements != null
arg0.subnode.key != null
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next == null
arg0.previous.subs has only one value
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key has only one value
arg0.previous.key.toString == "locVar"
arg0.previous.susbscript has only one value
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.next has only one value
arg0.previous.previous == null
arg1[] elements != null
return != null
return.subs != null
return.key != null
return.susbscript != null
return.stackLevel == null
return.value == null
return.parent != null
return.parent.subs != null
return.parent.subs[] elements != null
return.parent.key != null
return.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
return.parent.susbscript != null
return.parent.stackLevel == null
return.parent.value == null
return.parent.subnode != null
return.parent.next == null
return.parent.previous == null
return.subnode == null
return.next.subs has only one value
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key has only one value
return.next.key.toString == "zzz"
return.next.susbscript has only one value
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.stackLevel == null
return.next.value has only one value
return.next.parent has only one value
return.next.subnode == null
return.next.next == null
return.next.previous has only one value
return.previous.subs.getClass().getName() == java.lang.Object[].class
return.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
return.previous.susbscript.getClass().getName() == java.lang.String.class
return.previous.isNumeric == false
return.previous.stackLevel == null
return.previous.value.getClass().getName() == java.lang.String.class
size(arg0.subs[]) one of { 1, 2, 3 }
size(arg0.parent.subs[]) one of { 1, 2 }
size(arg0.subnode.subs[]) >= 1
size(arg0.previous.subs[]) == 1
size(return.subs[]) one of { 1, 3, 4 }
size(return.parent.subs[]) one of { 1, 2, 3 }
size(return.next.subs[]) == 1
size(return.previous.subs[]) one of { 1, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in return.previous.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.stack.mapLevel.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.keyValue.getClass().getName() != arg0.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.subs.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
this.keyValue.getClass().getName() != return.susbscript.getClass().getName()
this.keyValue.getClass().getName() != return.parent.susbscript.getClass().getName()
this.keyValue.getClass().getName() != orig(this.subnode.subs.getClass().getName())
this.keyValue.getClass().getName() != orig(this.subnode.susbscript.getClass().getName())
this.keyValue.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
this.keyValue.getClass().getName() != orig(this.subnode.next.susbscript.getClass().getName())
this.keyValue.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
this.keyValue.getClass().getName() != orig(arg0.subnode.susbscript.getClass().getName())
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
this.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != orig(this.subnode.susbscript.getClass().getName())
this.subs.getClass().getName() != orig(this.subnode.next.susbscript.getClass().getName())
this.subs.getClass().getName() != orig(arg0.subnode.susbscript.getClass().getName())
this.subs[] == orig(this.subnode.parent.subs[]) (elementwise)
this.subs[] is the reverse of orig(this.subnode.parent.subs[])
orig(this.subnode.parent.key) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.susbscript)
this.subs[].getClass().getName() == this.subnode.next.subs[].getClass().getName() (elementwise)
arg0.parent.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subs[].getClass().getName()
this.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subs[].getClass().getName()
this.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.susbscript.getClass().getName()) in this.subs[].getClass().getName()
this.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in this.subs[].getClass().getName()
orig(this.subnode.parent.subs[]) elements == this.key
this.key in orig(this.subnode.parent.subs[])
orig(this.subnode.parent.subs[]) elements == this.susbscript
this.susbscript in orig(this.subnode.parent.subs[])
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.susbscript.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
this.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
this.subnode.subs[] == arg0.previous.subs[] (elementwise)
this.subnode.subs[] is the reverse of arg0.previous.subs[]
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
this.subnode.key.toString <= orig(this.subnode.key.toString)
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
this.subnode.susbscript in orig(this.subnode.subnode.subs[])
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() != orig(this.subnode.subs.getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
this.subnode.subnode.subs[] is the reverse of this.subnode.next.subs[]
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] is the reverse of arg0.previous.subs[]
arg0.previous.key in this.subnode.subnode.subs[]
arg0.previous.susbscript in this.subnode.subnode.subs[]
arg0.previous.value in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] == return.parent.subs[] (elementwise)
return.parent.susbscript in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] is the reverse of return.previous.subs[]
return.previous.key in this.subnode.subnode.subs[]
return.previous.susbscript in this.subnode.subnode.subs[]
return.previous.value in this.subnode.subnode.subs[]
orig(this.subnode.susbscript) in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[]) (elementwise)
orig(this.subnode.subnode.susbscript) in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] is the reverse of orig(this.subnode.next.subs[])
orig(this.subnode.next.key) in this.subnode.subnode.subs[]
orig(this.subnode.next.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.value) in this.subnode.subnode.subs[]
this.subnode.subnode.subs[] is the reverse of orig(arg0.subnode.subs[])
orig(arg0.subnode.key) in this.subnode.subnode.subs[]
orig(arg0.subnode.susbscript) in this.subnode.subnode.subs[]
orig(arg0.subnode.value) in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.subs[].getClass().getName() == return.parent.subs[].getClass().getName() (elementwise)
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.subs[].getClass().getName() == orig(this.subnode.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.subnode.susbscript.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
orig(arg0.subnode.subs.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
orig(arg0.subnode.susbscript.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in arg0.previous.subs[]
this.subnode.subnode.key in return.previous.subs[]
this.subnode.subnode.key in orig(this.subnode.next.subs[])
this.subnode.subnode.key in orig(arg0.subnode.subs[])
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0.previous.subs[]
this.subnode.subnode.susbscript in arg1[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript in return.previous.subs[]
this.subnode.subnode.susbscript in orig(this.subnode.subnode.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript in orig(arg0.subnode.subs[])
this.subnode.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
this.subnode.next.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != return.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != orig(this.subnode.susbscript.getClass().getName())
this.subnode.next.subs.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.next.subs.getClass().getName() != orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.subs.getClass().getName() != orig(arg0.subnode.susbscript.getClass().getName())
this.subnode.next.subs[] is the reverse of orig(this.subnode.subnode.subs[])
orig(this.subnode.subnode.key) in this.subnode.next.subs[]
orig(this.subnode.subnode.susbscript) in this.subnode.next.subs[]
this.subnode.next.subs[] == orig(this.subnode.next.subs[]) (elementwise)
this.subnode.next.subs[] is the reverse of orig(this.subnode.next.subs[])
orig(this.subnode.next.susbscript) in this.subnode.next.subs[]
this.subnode.next.subs[] elements == orig(this.subnode.next.susbscript)
arg0.parent.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.susbscript.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
orig(this.subnode.subnode.susbscript.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in orig(this.subnode.subnode.subs[])
this.subnode.next.susbscript in return.previous.subs[]
this.subnode.next.susbscript in orig(this.subnode.subnode.subs[])
orig(this.subnode.next.subs[]) elements == this.subnode.next.susbscript
this.subnode.next.susbscript in orig(this.subnode.next.subs[])
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
this.subnode.next.value in orig(this.subnode.subnode.subs[])
arg0.susbscript in arg0.subs[]
arg0.subs[] == orig(this.subnode.subnode.subs[]) (elementwise)
orig(this.subnode.subnode.susbscript) in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
return.previous.value.getClass().getName() in arg0.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in arg0.subs[].getClass().getName()
arg0.subs[].getClass().getName() == orig(this.subnode.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.subnode.susbscript.getClass().getName()) in arg0.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in arg0.subs[].getClass().getName()
arg0.susbscript in orig(this.subnode.subnode.subs[])
arg0.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
arg0.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.susbscript.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
arg0.susbscript.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
arg0.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
arg0.parent.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() != arg0.subnode.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() != return.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() != return.parent.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() in return.next.subs[].getClass().getName()
arg0.parent.subs.getClass().getName() != orig(this.subnode.susbscript.getClass().getName())
arg0.parent.susbscript in arg0.parent.subs[]
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.subs[].getClass().getName() == arg0.previous.subs[].getClass().getName() (elementwise)
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.next.subs.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in arg0.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.parent.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript in orig(this.subnode.subnode.subs[])
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() != return.parent.susbscript.getClass().getName()
arg0.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
arg0.parent.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.parent.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.parent.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.parent.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
orig(this.subnode.subnode.susbscript) in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
orig(this.subnode.subnode.susbscript.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
arg0.subnode.subs[].getClass().getName() == orig(arg0.subnode.subs[].getClass().getName()) (elementwise)
orig(arg0.subnode.susbscript.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in arg0.subnode.subs[].getClass().getName()
arg0.subnode.key.toString <= orig(arg0.subnode.key.toString)
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
arg0.subnode.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.subnode.susbscript.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
arg0.subnode.susbscript.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in return.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.subnode.value.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.subnode.value.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
arg0.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.subs[] == orig(this.subnode.subs[]) (elementwise)
arg0.previous.subs[] is the reverse of orig(this.subnode.subs[])
arg0.previous.subs[] elements == orig(this.subnode.susbscript)
orig(this.subnode.susbscript) in arg0.previous.subs[]
arg0.previous.subs[] is the reverse of orig(this.subnode.subnode.subs[])
orig(this.subnode.subnode.key) in arg0.previous.subs[]
orig(this.subnode.subnode.susbscript) in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.susbscript.getClass().getName()) in arg0.previous.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in arg0.previous.subs[].getClass().getName()
orig(this.subnode.subnode.susbscript.getClass().getName()) in arg0.previous.subs[].getClass().getName()
arg0.previous.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in arg0.previous.subs[].getClass().getName()
orig(arg0.subnode.susbscript.getClass().getName()) in arg0.previous.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in arg0.previous.subs[].getClass().getName()
arg0.previous.key in orig(this.subnode.subnode.subs[])
arg0.previous.susbscript in orig(this.subnode.subs[])
orig(this.subnode.subs[]) elements == arg0.previous.susbscript
arg0.previous.susbscript in orig(this.subnode.subnode.subs[])
arg0.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
arg0.previous.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.previous.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
arg0.previous.value in orig(this.subnode.subnode.subs[])
return.susbscript in arg1[]
orig(this.subnode.subnode.susbscript) in arg1[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.subs[].getClass().getName() == return.previous.subs[].getClass().getName() (elementwise)
return.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in return.subs[].getClass().getName()
orig(this.subnode.subnode.susbscript.getClass().getName()) in return.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in return.subs[].getClass().getName()
orig(arg0.subnode.susbscript.getClass().getName()) in return.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in return.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
return.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.susbscript.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
return.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.susbscript.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
return.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
return.parent.susbscript in return.parent.subs[]
return.parent.subs[] == orig(this.subnode.subnode.subs[]) (elementwise)
orig(this.subnode.subnode.susbscript) in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in return.parent.subs[].getClass().getName()
return.parent.subs[].getClass().getName() == orig(this.subnode.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.subnode.susbscript.getClass().getName()) in return.parent.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in return.parent.subs[].getClass().getName()
orig(arg0.subnode.susbscript.getClass().getName()) in return.parent.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in return.parent.subs[].getClass().getName()
return.parent.susbscript in orig(this.subnode.subnode.subs[])
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() != orig(this.subnode.subs.getClass().getName())
return.parent.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.parent.susbscript.getClass().getName() != orig(this.subnode.next.subs.getClass().getName())
return.parent.susbscript.getClass().getName() != orig(arg0.subnode.subs.getClass().getName())
return.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.next.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in return.next.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in return.next.subs[].getClass().getName()
orig(this.subnode.subnode.susbscript.getClass().getName()) in return.next.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in return.next.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in return.next.subs[].getClass().getName()
orig(arg0.subnode.susbscript.getClass().getName()) in return.next.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in return.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
return.previous.subs.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.previous.susbscript in return.previous.subs[]
return.previous.subs[] is the reverse of orig(this.subnode.subnode.subs[])
orig(this.subnode.subnode.key) in return.previous.subs[]
orig(this.subnode.subnode.susbscript) in return.previous.subs[]
orig(this.subnode.next.susbscript) in return.previous.subs[]
return.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
orig(this.subnode.susbscript.getClass().getName()) in return.previous.subs[].getClass().getName()
orig(this.subnode.subnode.subs.getClass().getName()) in return.previous.subs[].getClass().getName()
orig(this.subnode.subnode.susbscript.getClass().getName()) in return.previous.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in return.previous.subs[].getClass().getName()
orig(arg0.subnode.susbscript.getClass().getName()) in return.previous.subs[].getClass().getName()
orig(arg0.subnode.value.getClass().getName()) in return.previous.subs[].getClass().getName()
return.previous.key in orig(this.subnode.subnode.subs[])
return.previous.susbscript in orig(this.subnode.subnode.subs[])
return.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
return.previous.value in orig(this.subnode.subnode.subs[])
return.previous.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(arg0.subnode.subs[].getClass().getName())
orig(arg2) >= size(this.subs[])-1
orig(arg2) >= size(this.subnode.next.subs[])-1
orig(arg2) % size(arg0.subs[]) == 0
orig(arg2) <= size(arg0.subs[])
orig(arg2) >= size(arg0.subs[])-1
orig(arg2) >= size(arg0.parent.subs[])
orig(arg2) <= size(arg1[])-1
orig(arg2) <= size(return.parent.subs[])
size(this.subs[]) <= size(arg0.subs[])
size(this.subs[]) <= size(arg0.parent.subs[])
size(this.subs[]) >= size(arg0.parent.subs[])-1
size(this.subs[]) <= size(arg0.subnode.subs[])
size(this.subs[]) != size(arg1[])-1
size(this.subs[]) <= size(return.subs[])
size(this.subs[]) <= size(return.parent.subs[])
size(this.subs[]) <= orig(size(arg0.subnode.subs[]))
size(this.subs[])-1 <= size(arg0.subs[])-1
size(this.subs[])-1 <= size(arg0.parent.subs[])-1
size(this.subs[])-1 <= size(arg1[])-1
size(this.subs[])-1 <= size(return.parent.subs[])-1
size(this.subs[])-1 <= orig(size(arg0.subnode.subs[]))-1
size(this.subnode.next.subs[]) <= size(arg0.subs[])
size(this.subnode.next.subs[]) <= size(arg0.subnode.subs[])
size(this.subnode.next.subs[]) != size(arg1[])-1
size(this.subnode.next.subs[]) <= size(return.subs[])
size(this.subnode.next.subs[]) <= size(return.parent.subs[])
size(this.subnode.next.subs[]) != size(return.parent.subs[])-1
size(this.subnode.next.subs[]) <= orig(size(arg0.subnode.subs[]))
size(this.subnode.next.subs[])-1 <= size(arg0.subs[])-1
size(this.subnode.next.subs[])-1 <= size(arg1[])-1
size(this.subnode.next.subs[])-1 <= size(return.parent.subs[])-1
size(this.subnode.next.subs[])-1 <= orig(size(arg0.subnode.subs[]))-1
size(arg0.subs[]) >= size(arg0.parent.subs[])
size(arg0.subs[]) <= size(arg0.subnode.subs[])
size(arg0.subs[]) <= size(return.subs[])
size(arg0.subs[]) <= size(return.parent.subs[])
size(arg0.subs[]) >= orig(size(this.subnode.subs[]))
size(arg0.subs[]) >= orig(size(this.subnode.next.subs[]))
size(arg0.subs[]) <= orig(size(arg0.subnode.subs[]))
orig(size(arg0.subnode.subs[]))-1 % size(arg0.subs[]) == 0
size(arg0.subs[]) >= orig(size(arg0.subnode.subs[]))-1
size(arg0.subs[])-1 % size(arg0.parent.subs[]) == 0
size(arg0.subs[])-1 <= size(arg0.parent.subs[])
size(arg0.subs[])-1 >= size(arg0.parent.subs[])-1
size(arg0.subs[])-1 <= size(arg1[])-1
size(arg0.subs[])-1 <= size(return.parent.subs[])-1
size(arg0.subs[])-1 >= orig(size(this.subnode.subs[]))-1
size(arg0.subs[])-1 >= orig(size(this.subnode.next.subs[]))-1
size(arg0.subs[])-1 <= orig(size(arg0.subnode.subs[]))-1
size(arg0.subnode.subs[]) % size(arg0.parent.subs[]) == 0
size(arg0.parent.subs[]) < size(arg1[])-1
size(return.subs[]) % size(arg0.parent.subs[]) == 0
size(arg0.parent.subs[]) <= size(return.parent.subs[])-1
size(return.parent.subs[])-1 % size(arg0.parent.subs[]) == 0
size(arg0.parent.subs[]) >= orig(size(this.subnode.subs[]))
size(arg0.parent.subs[])-1 <= orig(size(this.subnode.subs[]))
size(arg0.parent.subs[])-1 >= orig(size(this.subnode.subs[]))-1
size(arg0.subnode.subs[]) <= size(return.subs[])
size(arg0.subnode.subs[]) >= orig(size(this.subnode.subs[]))
size(arg0.subnode.subs[]) >= orig(size(this.subnode.next.subs[]))
size(arg1[])-1 % size(return.parent.subs[]) == 0
size(arg1[])-1 <= size(return.parent.subs[])
size(arg1[])-1 >= size(return.parent.subs[])-1
size(arg1[])-1 != orig(size(this.subnode.subs[]))
size(arg1[])-1 >= orig(size(this.subnode.subs[]))-1
size(arg1[])-1 != orig(size(this.subnode.next.subs[]))
size(arg1[])-1 >= orig(size(this.subnode.next.subs[]))-1
size(arg1[])-1 >= orig(size(arg0.subnode.subs[]))-1
size(return.subs[]) >= size(return.parent.subs[])
size(return.subs[]) >= orig(size(this.subnode.subs[]))
size(return.subs[]) >= orig(size(this.subnode.next.subs[]))
size(return.subs[]) >= orig(size(arg0.subnode.subs[]))
size(return.previous.subs[])-1 % size(return.parent.subs[]) == 0
size(return.parent.subs[]) >= orig(size(this.subnode.subs[]))
size(return.parent.subs[]) >= orig(size(this.subnode.next.subs[]))
size(return.parent.subs[]) >= orig(size(arg0.subnode.subs[]))-1
size(return.parent.subs[])-1 >= orig(size(this.subnode.subs[]))-1
size(return.parent.subs[])-1 != orig(size(this.subnode.next.subs[]))
size(return.parent.subs[])-1 >= orig(size(this.subnode.next.subs[]))-1
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.generateNode(java.lang.Object[]):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == arg0.getClass().getName()
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.subnode == this.subnode.next.next
this.subnode.key.toString one of { "locVar", "zzz" }
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.subnode == null
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next == null
this.subnode.next.previous has only one value
size(arg0[]) one of { 1, 3, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.generateNode(java.lang.Object[]):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key == orig(this.subnode.parent.susbscript)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.key)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == return.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode == orig(this.subnode.next.next)
this.subnode.subnode.subs == return.parent.subs
this.subnode.subnode.key == return.parent.key
this.subnode.subnode.susbscript == return.parent.susbscript
this.subnode.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.subnode.isNumeric == return.isNumeric
this.subnode.subnode.isNumeric == return.parent.isNumeric
this.subnode.subnode.parent == return.parent.parent
this.subnode.subnode.subnode == return
this.subnode.subnode.subnode == return.parent.subnode
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.next.isNumeric == return.isNumeric
this.subnode.next.isNumeric == return.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.isNumeric)
this.subnode.next.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.stackLevel)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.parent == orig(this.subnode.parent)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
return == return.previous.next
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.isNumeric == return.previous.isNumeric
return.parent == return.previous.parent
return.parent.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.previous.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
return.previous.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.previous.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.previous.isNumeric == orig(this.subnode.next.isNumeric)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
this.subnode.key.toString one of { "%varPublica", "locVar", "locVarAfterNew" }
this.subnode.stackLevel == null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
return.stackLevel == null
return.value == null
return.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
return.parent.stackLevel == null
return.parent.value == null
return.parent.next == null
return.parent.previous == null
return.subnode == null
return.next.subs has only one value
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key has only one value
return.next.key.toString == "zzz"
return.next.susbscript has only one value
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.stackLevel == null
return.next.value has only one value
return.next.parent has only one value
return.next.subnode == null
return.next.next == null
return.next.previous has only one value
return.previous.subs.getClass().getName() == java.lang.Object[].class
return.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
return.previous.susbscript.getClass().getName() == java.lang.String.class
return.previous.isNumeric == false
return.previous.stackLevel == null
return.previous.value.getClass().getName() == java.lang.String.class
size(return.subs[]) one of { 1, 3, 4 }
size(return.parent.subs[]) one of { 1, 2, 3 }
size(return.next.subs[]) == 1
size(return.previous.subs[]) one of { 1, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in return.previous.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.key) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == orig(this.subnode.parent.susbscript)
orig(this.subnode.parent.susbscript) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
return.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
orig(this.subnode.parent.key) in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == orig(this.subnode.parent.susbscript)
return.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
orig(this.subnode.parent.key) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.susbscript)
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subs[].getClass().getName()
orig(this.subnode.parent.subs[]) elements == this.key
this.key in orig(this.subnode.parent.subs[])
orig(this.subnode.parent.subs[]) elements == this.susbscript
this.susbscript in orig(this.subnode.parent.subs[])
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
this.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[]) (elementwise)
this.subnode.parent.subs[] is the reverse of orig(this.subnode.parent.subs[])
orig(this.subnode.parent.key) in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == orig(this.subnode.parent.susbscript)
return.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName()) (elementwise)
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
return.parent.susbscript in this.subnode.subnode.subs[]
return.previous.key in this.subnode.subnode.subs[]
return.previous.susbscript in this.subnode.subnode.subs[]
orig(this.subnode.key) in this.subnode.subnode.subs[]
orig(this.subnode.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.value) in this.subnode.subnode.subs[]
orig(this.subnode.parent.key) in this.subnode.subnode.subs[]
orig(this.subnode.parent.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.key) in this.subnode.subnode.subs[]
orig(this.subnode.next.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.value) in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in return.previous.subs[]
this.subnode.subnode.key in orig(this.subnode.subs[])
this.subnode.subnode.key in orig(this.subnode.parent.subs[])
this.subnode.subnode.key in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
this.subnode.subnode.susbscript in return.subs[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript in return.previous.subs[]
this.subnode.subnode.susbscript in orig(this.subnode.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.parent.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[]) (elementwise)
this.subnode.next.subs[] is the reverse of orig(this.subnode.next.subs[])
orig(this.subnode.next.susbscript) in this.subnode.next.subs[]
this.subnode.next.subs[] elements == orig(this.subnode.next.susbscript)
return.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
this.subnode.next.susbscript in return.previous.subs[]
orig(this.subnode.next.subs[]) elements == this.subnode.next.susbscript
this.subnode.next.susbscript in orig(this.subnode.next.subs[])
this.subnode.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.susbscript in arg0[]
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.previous.susbscript in return.previous.subs[]
orig(this.subnode.next.susbscript) in return.previous.subs[]
return.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.get(java.lang.Object[]):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.subnode != null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.stackLevel == null
arg0 != null
arg0[] elements != null
size(arg0[]) one of { 1, 3, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.get(java.lang.Object[]):::EXIT211
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == return.getClass().getName()
this.mergeSubnodesOperation.tree.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.parent.susbscript.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
return.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
return.getClass().getName() == orig(this.susbscript.getClass().getName())
return.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
return.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.key.toString one of { "%varPublica", "locVar", "locVarAfterNew" }
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.get(java.lang.Object[]):::EXIT213
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.subnode == this.subnode.next.subnode
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "locVarAfterNew", "zzz" }
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next.key.toString one of { "locVarAfterNew", "zzz" }
this.subnode.next.subnode == null
return == null
orig(this) has only one value
orig(size(arg0[])) one of { 1, 4 }
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.get(java.lang.Object[]):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == return.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.getClass().getName()
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
(return == null)  ==>  (orig(size(arg0[])) one of { 1, 4 })
(return == null)  ==>  (orig(this) has only one value)
(return == null)  ==>  (this.addSubnodesOperation has only one value)
(return == null)  ==>  (this.keyValue has only one value)
(return == null)  ==>  (this.killSubnodesOperation has only one value)
(return == null)  ==>  (this.mergeSubnodesOperation has only one value)
(return == null)  ==>  (this.mergeSubnodesOperation.tree has only one value)
(return == null)  ==>  (this.stack has only one value)
(return == null)  ==>  (this.subnode.key.toString one of { "locVar", "locVarAfterNew", "zzz" })
(return == null)  ==>  (this.subnode.next.key.toString one of { "locVarAfterNew", "zzz" })
(return == null)  ==>  (this.subnode.next.subnode == null)
(return == null)  ==>  (this.subnode.parent has only one value)
(return == null)  ==>  (this.subnode.subnode == null)
(return == null)  ==>  (this.subnode.subnode == this.subnode.next.subnode)
(return == null)  ==>  (this.subs has only one value)
this.subnode != null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.stackLevel == null
arg0[] elements != null
return.getClass().getName() == java.lang.String.class
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.keyValue.getClass().getName() != return.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
return.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subs.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.subs[].getClass().getName()
return.getClass().getName() in this.subnode.subs[].getClass().getName()
return.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
this.subnode.next.subs.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.subnode.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.isNotPresentOnTree(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
this has only one value
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "vetorLocal" }
this.subnode.stackLevel has only one value
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.parent has only one value
arg0.previous == null
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
this.subnode.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.isNotPresentOnTree(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == orig(this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.subnode == orig(arg0.parent.subnode)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "vetorLocal" }
this.subnode.stackLevel has only one value
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.parent has only one value
arg0.previous == null
return == false
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.isNotPresentOnTree(br.com.innovatium.mumps2java.datastructure.Node):::EXIT;condition="not(return == true)"
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.kill(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
this has only one value
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "vetorLocal" }
this.subnode.stackLevel has only one value
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.parent has only one value
arg0.parent.subs has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key has only one value
arg0.parent.key.toString == "@"
arg0.parent.susbscript has only one value
arg0.parent.isNumeric == false
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "vetorLocal", "zzz" }
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.parent has only one value
arg0.previous == null
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
this.subnode.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.kill(br.com.innovatium.mumps2java.datastructure.Node):::EXIT350
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.kill(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == orig(this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.subnode.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode.next)
this.subnode.subs == orig(this.subnode.next.subs)
this.subnode.key == orig(this.subnode.next.key)
this.subnode.susbscript == orig(this.subnode.next.susbscript)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == orig(this.subnode.next.value)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.next.subnode)
this.subnode.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next == orig(this.subnode.next.next)
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.subnode == this.subnode.next.next
this.subnode.next.subnode == orig(this.subnode.subnode)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.previous == orig(arg0.previous)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
size(this.subnode.next.subs[]) == orig(size(this.subnode.next.subs[]))
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "vetorLocal", "zzz" }
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.subnode == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(arg0.subs[]) == 1
size(arg0.subnode.subs[]) == 2
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(arg0.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(arg0.next.subs[].getClass().getName())
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
orig(this.subnode.next.subs[]) elements == this.subnode.susbscript
this.subnode.susbscript in orig(this.subnode.next.subs[])
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(arg0.parent.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(arg0.next.subs[].getClass().getName())
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
this.subnode.subnode.subs[] is the reverse of orig(this.subnode.subnode.subs[])
orig(this.subnode.subnode.key) in this.subnode.subnode.subs[]
orig(this.subnode.subnode.susbscript) in this.subnode.subnode.subs[]
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in orig(this.subnode.subnode.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.subnode.subs[])
orig(this.subnode.subnode.key) in this.subnode.next.subs[]
orig(this.subnode.subnode.susbscript) in this.subnode.next.subs[]
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
this.subnode.next.key in orig(this.subnode.subnode.subs[])
this.subnode.next.susbscript in orig(this.subnode.subnode.subs[])
this.subnode.next.value in orig(this.subnode.subnode.subs[])
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in orig(this.subnode.subnode.subs[].getClass().getName())
arg0.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
arg0.value.getClass().getName() in orig(arg0.parent.subs[].getClass().getName())
arg0.value.getClass().getName() in orig(arg0.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.killAllSubnodes(br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.subnode == this.subnode.next.next
this has only one value
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "vetorLocal", "zzz" }
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.subnode == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(arg0.subs[]) == 1
size(arg0.subnode.subs[]) == 2
this.subnode.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.killAllSubnodes(br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == orig(this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.parent == orig(this.subnode.next.previous)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == this.subnode.next.next
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.subnode == orig(this.subnode.next.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
arg0.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
arg0.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.previous == orig(arg0.previous)
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "vetorLocal", "zzz" }
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.subnode == null
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.isNumeric == false
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next == null
arg0.previous == null
size(arg0.subs[]) == 1
size(arg0.subnode.subs[]) == 2
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.operateOverSubnodes(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.isNumeric == arg0.next.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.subnode.isNumeric == arg0.isNumeric
this.subnode.next.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.isNumeric == arg0.next.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.value.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0 == arg0.subnode.parent
arg0 == arg0.next.previous
arg0 == arg0.previous.next
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.isNumeric == arg0.next.isNumeric
arg0.isNumeric == arg0.previous.isNumeric
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.parent == arg0.next.previous
arg0.subnode.parent == arg0.previous.next
arg0.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.next.isNumeric == arg0.previous.isNumeric
arg0.next.parent == arg0.previous.parent
arg0.next.previous == arg0.previous.next
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
this.currentStackLevel == 1
this.stack has only one value
this.stack != null
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode != null
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
arg0 != null
arg0.subs != null
arg0.subs[] elements != null
arg0.key != null
arg0.susbscript != null
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.subs.getClass().getName() == java.lang.Object[].class
arg0.parent.value == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.previous.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~A" }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.subnode == null
arg0.previous.previous == null
arg1 != null
size(arg0.subs[]) >= 1
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) one of { 2, 3, 4 }
size(arg0.next.subs[]) one of { 1, 4 }
size(arg0.previous.subs[]) one of { 1, 4 }
this.keyValue.getClass().getName() != arg0.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.subs.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg1.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != arg1.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg1.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() != arg0.parent.subs.getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() != arg1.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.key in this.subnode.subnode.subs[]
arg0.parent.susbscript in this.subnode.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subnode.subs[]
arg0.next.key in this.subnode.subnode.subs[]
arg0.next.susbscript in this.subnode.subnode.subs[]
arg0.next.value in this.subnode.subnode.subs[]
arg0.previous.key in this.subnode.subnode.subs[]
arg0.previous.susbscript in this.subnode.subnode.subs[]
arg0.previous.value in this.subnode.subnode.subs[]
arg0.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in arg0.parent.subs[]
this.subnode.subnode.key in arg0.subnode.subs[]
this.subnode.subnode.key in arg0.next.subs[]
this.subnode.subnode.key in arg0.previous.subs[]
this.subnode.subnode.susbscript in arg0.parent.subs[]
this.subnode.subnode.susbscript in arg0.subnode.subs[]
this.subnode.subnode.susbscript in arg0.next.subs[]
this.subnode.subnode.susbscript in arg0.previous.subs[]
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != arg1.getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() != arg1.getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() != arg1.getClass().getName()
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() != arg1.getClass().getName()
arg0.parent.susbscript in arg0.parent.subs[]
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() != arg1.getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.operateOverSubnodes(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Tree$OperationOverNodes):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == this.subnode.subnode.isNumeric
this.isNumeric == arg0.next.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode.subs == orig(this.subnode.subnode.subs)
this.subnode.subnode.subs.getClass().getName() == orig(this.subnode.subnode.subs.getClass().getName())
this.subnode.subnode.subs[] == orig(this.subnode.subnode.subs[])
this.subnode.subnode.key == orig(this.subnode.subnode.key)
this.subnode.subnode.key.toString == orig(this.subnode.subnode.key.toString)
this.subnode.subnode.susbscript == orig(this.subnode.subnode.susbscript)
this.subnode.subnode.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == orig(this.subnode.subnode.susbscript.getClass().getName())
this.subnode.subnode.isNumeric == arg0.isNumeric
this.subnode.subnode.isNumeric == orig(this.subnode.subnode.isNumeric)
this.subnode.subnode.stackLevel == orig(this.subnode.subnode.stackLevel)
this.subnode.subnode.value == orig(this.subnode.subnode.value)
this.subnode.subnode.parent == orig(this.subnode.subnode.parent)
this.subnode.subnode.subnode == orig(this.subnode.subnode.subnode)
this.subnode.subnode.next == orig(this.subnode.subnode.next)
this.subnode.subnode.previous == orig(this.subnode.subnode.previous)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == arg0.next.isNumeric
this.subnode.next.isNumeric == arg0.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == arg0.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.value.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.subnode.next.value.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.next == orig(this.subnode.next.next)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.susbscript.getClass().getName() == arg0.value.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
arg0.isNumeric == arg0.next.isNumeric
arg0.isNumeric == arg0.previous.isNumeric
arg0.isNumeric == orig(arg0.isNumeric)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.value.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.value.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.value.getClass().getName() == orig(arg0.value.getClass().getName())
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent == orig(arg0.parent)
arg0.parent.subs == orig(arg0.parent.subs)
arg0.parent.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.parent.subs.getClass().getName() == orig(arg0.parent.subs.getClass().getName())
arg0.parent.subs[] == orig(arg0.parent.subs[])
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.toString == orig(arg0.parent.key.toString)
arg0.parent.susbscript == orig(arg0.parent.susbscript)
arg0.parent.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.parent.susbscript.getClass().getName() == orig(arg0.parent.susbscript.getClass().getName())
arg0.parent.isNumeric == orig(arg0.parent.isNumeric)
arg0.parent.stackLevel == orig(arg0.parent.stackLevel)
arg0.parent.value == orig(arg0.parent.value)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.subnode == orig(arg0.parent.subnode)
arg0.parent.next == orig(arg0.parent.next)
arg0.parent.previous == orig(arg0.parent.previous)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == arg0.next.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == arg0.subnode.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.value.getClass().getName() == orig(arg0.subnode.value.getClass().getName())
arg0.subnode.parent == arg0.next.previous
arg0.subnode.parent == arg0.previous.next
arg0.subnode.parent == orig(arg0)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next == orig(arg0.next)
arg0.next.subs == orig(arg0.next.subs)
arg0.next.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.next.subs.getClass().getName() == orig(arg0.next.subs.getClass().getName())
arg0.next.subs[] == orig(arg0.next.subs[])
arg0.next.key == orig(arg0.next.key)
arg0.next.key.toString == orig(arg0.next.key.toString)
arg0.next.susbscript == orig(arg0.next.susbscript)
arg0.next.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
arg0.next.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.next.susbscript.getClass().getName() == orig(arg0.next.susbscript.getClass().getName())
arg0.next.susbscript.getClass().getName() == orig(arg0.next.value.getClass().getName())
arg0.next.isNumeric == arg0.previous.isNumeric
arg0.next.isNumeric == orig(arg0.next.isNumeric)
arg0.next.stackLevel == orig(arg0.next.stackLevel)
arg0.next.value == orig(arg0.next.value)
arg0.next.parent == arg0.previous.parent
arg0.next.parent == orig(arg0.next.parent)
arg0.next.subnode == orig(arg0.next.subnode)
arg0.next.next == orig(arg0.next.next)
arg0.next.previous == arg0.previous.next
arg0.next.previous == orig(arg0)
arg0.next.previous == orig(arg0.next.previous)
arg0.previous == orig(arg0.previous)
arg0.previous.subs == orig(arg0.previous.subs)
arg0.previous.subs.getClass().getName() == orig(arg0.previous.subs.getClass().getName())
arg0.previous.subs[] == orig(arg0.previous.subs[])
arg0.previous.key == orig(arg0.previous.key)
arg0.previous.key.toString == orig(arg0.previous.key.toString)
arg0.previous.susbscript == orig(arg0.previous.susbscript)
arg0.previous.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.susbscript.getClass().getName())
arg0.previous.susbscript.getClass().getName() == orig(arg0.previous.value.getClass().getName())
arg0.previous.isNumeric == orig(arg0.previous.isNumeric)
arg0.previous.stackLevel == orig(arg0.previous.stackLevel)
arg0.previous.value == orig(arg0.previous.value)
arg0.previous.parent == orig(arg0.previous.parent)
arg0.previous.subnode == orig(arg0.previous.subnode)
arg0.previous.next == orig(arg0)
arg0.previous.next == orig(arg0.previous.next)
arg0.previous.previous == orig(arg0.previous.previous)
this.currentStackLevel == 1
this.stack has only one value
this.stack != null
this.keyValue has only one value
this.killSubnodesOperation has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode != null
this.subnode.parent has only one value
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subnode.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "vetorLocal~xpto"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.String.class
this.subnode.subnode.isNumeric == false
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
arg0.subs != null
arg0.subs[] elements != null
arg0.key != null
arg0.susbscript != null
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent.subs.getClass().getName() == java.lang.Object[].class
arg0.parent.value == null
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.key.toString one of { "vetorLocal~xpto", "vetorLocal~xpto~34", "vetorLocal~xpto~34~A" }
arg0.subnode.stackLevel == null
arg0.subnode.value.getClass().getName() == java.lang.String.class
arg0.subnode.previous == null
arg0.next.subs.getClass().getName() == java.lang.Object[].class
arg0.next.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.next.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~B", "zzz" }
arg0.next.susbscript.getClass().getName() == java.lang.String.class
arg0.next.isNumeric == false
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs.getClass().getName() == java.lang.Object[].class
arg0.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
arg0.previous.key.toString one of { "locVarAfterNew", "vetorLocal~xpto~34~A" }
arg0.previous.susbscript.getClass().getName() == java.lang.String.class
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.subnode == null
arg0.previous.previous == null
orig(this) has only one value
size(arg0.subs[]) >= 1
size(arg0.parent.subs[]) one of { 1, 2, 3 }
size(arg0.subnode.subs[]) one of { 2, 3, 4 }
size(arg0.next.subs[]) one of { 1, 4 }
size(arg0.previous.subs[]) one of { 1, 4 }
this.keyValue.getClass().getName() != arg0.susbscript.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.subs.getClass().getName()
this.keyValue.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.keyValue.getClass().getName() != orig(arg1.getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
this.subnode.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
this.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
this.subs.getClass().getName() != orig(arg1.getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() != orig(arg1.getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.value.getClass().getName() != arg0.parent.subs.getClass().getName()
this.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() != orig(arg1.getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.key in this.subnode.subnode.subs[]
arg0.parent.susbscript in this.subnode.subnode.subs[]
arg0.subnode.susbscript in this.subnode.subnode.subs[]
arg0.next.key in this.subnode.subnode.subs[]
arg0.next.susbscript in this.subnode.subnode.subs[]
arg0.next.value in this.subnode.subnode.subs[]
arg0.previous.key in this.subnode.subnode.subs[]
arg0.previous.susbscript in this.subnode.subnode.subs[]
arg0.previous.value in this.subnode.subnode.subs[]
arg0.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.parent.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in arg0.parent.subs[]
this.subnode.subnode.key in arg0.subnode.subs[]
this.subnode.subnode.key in arg0.next.subs[]
this.subnode.subnode.key in arg0.previous.subs[]
this.subnode.subnode.susbscript in arg0.parent.subs[]
this.subnode.subnode.susbscript in arg0.subnode.subs[]
this.subnode.subnode.susbscript in arg0.next.subs[]
this.subnode.subnode.susbscript in arg0.previous.subs[]
this.subnode.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.subs.getClass().getName() != arg0.susbscript.getClass().getName()
this.subnode.next.subs.getClass().getName() != orig(arg1.getClass().getName())
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
this.subnode.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() != orig(arg1.getClass().getName())
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript in arg0.subs[]
arg0.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.susbscript.getClass().getName() != arg0.parent.subs.getClass().getName()
arg0.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.susbscript.getClass().getName() != orig(arg1.getClass().getName())
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.subs.getClass().getName() != arg0.parent.susbscript.getClass().getName()
arg0.parent.subs.getClass().getName() != orig(arg1.getClass().getName())
arg0.parent.susbscript in arg0.parent.subs[]
arg0.parent.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.parent.susbscript.getClass().getName() != orig(arg1.getClass().getName())
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.susbscript in arg0.next.subs[]
arg0.next.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.previous.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.next.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.order(java.lang.Object[], int):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.subnode == this.subnode.next.subnode
this.subnode.subnode == this.subnode.next.next
this has only one value
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVarAfterNew"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.value has only one value
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 2
arg1 == 1
size(arg0[]) == 2
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.order(java.lang.Object[], int):::EXIT154
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.order(java.lang.Object[], int):::EXIT
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == orig(this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName() == return.getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.susbscript.getClass().getName() == return.getClass().getName()
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == return.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode == orig(this.subnode)
this.subnode == orig(this.subnode.parent.subnode)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs == orig(this.subnode.subs)
this.subnode.subs[] == orig(this.subnode.subs[])
this.subnode.key == orig(this.subnode.key)
this.subnode.key.toString == orig(this.subnode.key.toString)
this.subnode.susbscript == orig(this.subnode.susbscript)
this.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value == orig(this.subnode.value)
this.subnode.value.getClass().getName() == return.getClass().getName()
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == this.subnode.next.subnode
this.subnode.subnode == this.subnode.next.next
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode == orig(this.subnode.next.subnode)
this.subnode.subnode == orig(this.subnode.next.next)
this.subnode.next == orig(this.subnode.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs[] == orig(this.subnode.next.subs[])
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == return.getClass().getName()
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.getClass().getName()
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
return.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
return.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
return.getClass().getName() == orig(this.susbscript.getClass().getName())
return.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
return.getClass().getName() == orig(this.subnode.value.getClass().getName())
return.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
return.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVarAfterNew"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.value has only one value
return has only one value
return.getClass().getName() == java.lang.String.class
return.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.getClass().getName() in this.subs[].getClass().getName()
return.getClass().getName() in this.subnode.subs[].getClass().getName()
return.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.getClass().getName() in this.subnode.next.subs[].getClass().getName()
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.replaceNode(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == arg0.isNumeric
this.subnode.subnode == arg0.parent
this.subnode.subnode == arg0.next
this.subnode.subnode == arg0.previous
this.subnode.next.value.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
arg0 == arg0.subnode.parent
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVarAfterNew"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg1 == null
size(arg0.subs[]) == 1
size(arg0.subnode.subs[]) == 2
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subs[].getClass().getName()
this.subnode.next.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subs[] elements == arg0.susbscript
arg0.susbscript in arg0.subs[]
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.replaceNode(br.com.innovatium.mumps2java.datastructure.Node, br.com.innovatium.mumps2java.datastructure.Node):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == arg0.parent.subs
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subs.getClass().getName()
this.subs.getClass().getName() == arg0.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.subnode.subs.getClass().getName()
this.subs.getClass().getName() == arg0.next.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == arg0.parent.key
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == arg0.parent.susbscript
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.value.getClass().getName()
this.susbscript.getClass().getName() == arg0.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.subnode.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == arg0.next.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg0.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == arg0.isNumeric
this.isNumeric == arg0.parent.isNumeric
this.isNumeric == arg0.next.isNumeric
this.isNumeric == arg0.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.isNumeric == orig(arg0.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == arg0.parent.subnode
this.subnode.subs == arg0.previous.subs
this.subnode.key == arg0.previous.key
this.subnode.susbscript == arg0.previous.susbscript
this.subnode.value == arg0.previous.value
this.subnode.parent == arg0.parent
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode == orig(arg0.parent)
this.subnode.subnode == orig(arg0.next)
this.subnode.subnode == orig(arg0.previous)
this.subnode.next == arg0.subnode.parent
this.subnode.next.parent == arg0.parent
this.subnode.next.subnode == arg0.subnode
this.subnode.next.next == orig(this.subnode.next)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0.subs == orig(arg0.subs)
arg0.subs[] == orig(arg0.subs[])
arg0.key == orig(arg0.key)
arg0.key.toString == orig(arg0.key.toString)
arg0.susbscript == orig(arg0.susbscript)
arg0.stackLevel == orig(arg0.stackLevel)
arg0.value == orig(arg0.value)
arg0.parent == arg0.next.parent
arg0.parent == arg0.previous.parent
arg0.parent == orig(this.subnode.parent)
arg0.parent == orig(this.subnode.next.parent)
arg0.subnode == orig(arg0.subnode)
arg0.subnode.subs == orig(arg0.subnode.subs)
arg0.subnode.subs.getClass().getName() == arg0.previous.subs.getClass().getName()
arg0.subnode.subs.getClass().getName() == orig(arg0.subnode.subs.getClass().getName())
arg0.subnode.subs[] == orig(arg0.subnode.subs[])
arg0.subnode.key == orig(arg0.subnode.key)
arg0.subnode.key.toString == orig(arg0.subnode.key.toString)
arg0.subnode.susbscript == orig(arg0.subnode.susbscript)
arg0.subnode.susbscript.getClass().getName() == arg0.previous.susbscript.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == arg0.previous.value.getClass().getName()
arg0.subnode.susbscript.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
arg0.subnode.susbscript.getClass().getName() == orig(arg0.subnode.susbscript.getClass().getName())
arg0.subnode.isNumeric == orig(arg0.subnode.isNumeric)
arg0.subnode.stackLevel == orig(arg0.subnode.stackLevel)
arg0.subnode.value == orig(arg0.subnode.value)
arg0.subnode.parent == arg0.previous.next
arg0.subnode.parent == orig(arg0)
arg0.subnode.parent == orig(arg0.subnode.parent)
arg0.subnode.subnode == orig(arg0.subnode.subnode)
arg0.subnode.next == orig(arg0.subnode.next)
arg0.subnode.previous == orig(arg0.subnode.previous)
arg0.next.previous == orig(arg0)
arg0.previous.subs == orig(this.subnode.subs)
arg0.previous.key == orig(this.subnode.key)
arg0.previous.susbscript == orig(this.subnode.susbscript)
arg0.previous.value == orig(this.subnode.value)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
size(this.subnode.next.subs[]) == orig(size(this.subnode.next.subs[]))
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode.key.toString one of { "locVar", "locVarAfterNew" }
this.subnode.subnode == null
this.subnode.next.key.toString one of { "locVarAfterNew", "vetorLocal" }
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.key.toString one of { "locVar", "vetorLocal" }
arg0.stackLevel has only one value
arg0.value.getClass().getName() == java.lang.String.class
arg0.parent has only one value
arg0.parent.subs[] contains no nulls and has only one value, of length 1
arg0.parent.subs[] elements has only one value
arg0.parent.subs[].getClass().getName() == [java.lang.String]
arg0.parent.subs[].getClass().getName() elements == java.lang.String.class
arg0.parent.key.toString == "@"
arg0.parent.stackLevel == null
arg0.parent.value == null
arg0.parent.parent == null
arg0.parent.next == null
arg0.parent.previous == null
arg0.subnode.subs has only one value
arg0.subnode.subs.getClass().getName() == java.lang.Object[].class
arg0.subnode.subs[] contains no nulls and has only one value, of length 2
arg0.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subnode.subs[].getClass().getName() elements == java.lang.String.class
arg0.subnode.key has only one value
arg0.subnode.key.toString == "vetorLocal~xpto"
arg0.subnode.susbscript has only one value
arg0.subnode.susbscript.getClass().getName() == java.lang.String.class
arg0.subnode.isNumeric == false
arg0.subnode.stackLevel == null
arg0.subnode.value == null
arg0.subnode.parent has only one value
arg0.subnode.subnode has only one value
arg0.subnode.next == null
arg0.subnode.previous == null
arg0.next.subs[].getClass().getName() == [java.lang.String]
arg0.next.subs[].getClass().getName() elements == java.lang.String.class
arg0.next.key.toString one of { "locVarAfterNew", "zzz" }
arg0.next.stackLevel == null
arg0.next.subnode == null
arg0.previous.subs has only one value
arg0.previous.subs[] contains no nulls and has only one value, of length 1
arg0.previous.subs[] elements has only one value
arg0.previous.subs[].getClass().getName() == [java.lang.String]
arg0.previous.subs[].getClass().getName() elements == java.lang.String.class
arg0.previous.key has only one value
arg0.previous.key.toString == "locVarAfterNew"
arg0.previous.susbscript has only one value
arg0.previous.isNumeric == false
arg0.previous.stackLevel == null
arg0.previous.value has only one value
arg0.previous.parent has only one value
arg0.previous.subnode == null
arg0.previous.previous == null
orig(this) has only one value
size(arg0.subs[]) == 1
size(arg0.parent.subs[]) == 1
size(arg0.subnode.subs[]) == 2
size(arg0.next.subs[]) == 1
size(arg0.previous.subs[]) == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
arg0.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
arg0.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg0.parent.subs[] elements == this.key
this.key in arg0.parent.subs[]
arg0.parent.subs[] elements == this.susbscript
this.susbscript in arg0.parent.subs[]
this.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.previous.susbscript in this.subnode.subs[]
this.subnode.subs[] elements == arg0.previous.susbscript
arg0.value.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
arg0.previous.subs[] elements == this.subnode.susbscript
this.subnode.susbscript in arg0.previous.subs[]
arg0.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.susbscript in arg0.subnode.subs[]
arg0.subs[] elements == arg0.susbscript
arg0.susbscript in arg0.subs[]
arg0.value.getClass().getName() in arg0.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
arg0.susbscript in arg0.subnode.subs[]
arg0.value.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.value.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.parent.subs[].getClass().getName()
arg0.subnode.susbscript in arg0.subnode.subs[]
arg0.subnode.susbscript.getClass().getName() in arg0.subnode.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.next.subs[].getClass().getName()
arg0.subnode.susbscript.getClass().getName() in arg0.previous.subs[].getClass().getName()
arg0.next.subs[] elements == arg0.next.susbscript
arg0.next.susbscript in arg0.next.subs[]
arg0.previous.subs[] elements == arg0.previous.susbscript
arg0.previous.susbscript in arg0.previous.subs[]
arg0.previous.subs[] elements == orig(this.subnode.susbscript)
orig(this.subnode.susbscript) in arg0.previous.subs[]
arg0.previous.susbscript in orig(this.subnode.subs[])
orig(this.subnode.subs[]) elements == arg0.previous.susbscript
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.set(java.lang.Object[], java.lang.Object):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == arg0.getClass().getName()
this.susbscript.getClass().getName() == arg1.getClass().getName()
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.subnode == this.subnode.next.next
this.subnode.key.toString one of { "locVar", "zzz" }
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.subnode == null
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next == null
this.subnode.next.previous has only one value
size(arg0[]) one of { 1, 3, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.set(java.lang.Object[], java.lang.Object):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key == orig(this.subnode.parent.susbscript)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.key)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg1.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode == orig(this.subnode.next.next)
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.subnode.next.isNumeric == orig(this.subnode.isNumeric)
this.subnode.next.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.next.isNumeric == orig(this.subnode.next.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.stackLevel)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.parent == orig(this.subnode.parent)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
this.subnode.key.toString one of { "%varPublica", "locVar", "locVarAfterNew" }
this.subnode.stackLevel == null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.key) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == orig(this.subnode.parent.susbscript)
orig(this.subnode.parent.susbscript) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
orig(this.subnode.next.susbscript.getClass().getName()) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
orig(this.subnode.parent.key) in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == orig(this.subnode.parent.susbscript)
orig(this.subnode.next.susbscript.getClass().getName()) in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
orig(this.subnode.parent.key) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.susbscript)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subs[].getClass().getName()
orig(this.subnode.parent.subs[]) elements == this.key
this.key in orig(this.subnode.parent.subs[])
orig(this.subnode.parent.subs[]) elements == this.susbscript
this.susbscript in orig(this.subnode.parent.subs[])
this.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.subs[].getClass().getName()
this.subnode.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[]) (elementwise)
this.subnode.parent.subs[] is the reverse of orig(this.subnode.parent.subs[])
orig(this.subnode.parent.key) in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == orig(this.subnode.parent.susbscript)
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.parent.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
orig(this.subnode.key) in this.subnode.subnode.subs[]
orig(this.subnode.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.value) in this.subnode.subnode.subs[]
orig(this.subnode.parent.key) in this.subnode.subnode.subs[]
orig(this.subnode.parent.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.key) in this.subnode.subnode.subs[]
orig(this.subnode.next.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.value) in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
orig(this.subnode.next.subs.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in orig(this.subnode.subs[])
this.subnode.subnode.key in orig(this.subnode.parent.subs[])
this.subnode.subnode.key in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
this.subnode.subnode.susbscript in orig(this.subnode.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.parent.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[]) (elementwise)
this.subnode.next.subs[] is the reverse of orig(this.subnode.next.subs[])
orig(this.subnode.next.susbscript) in this.subnode.next.subs[]
this.subnode.next.subs[] elements == orig(this.subnode.next.susbscript)
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
orig(this.subnode.next.susbscript.getClass().getName()) in this.subnode.next.subs[].getClass().getName()
orig(this.subnode.next.subs[]) elements == this.subnode.next.susbscript
this.subnode.next.susbscript in orig(this.subnode.next.subs[])
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.next.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.setting(java.lang.Object[], java.lang.Object):::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == arg0.getClass().getName()
this.susbscript.getClass().getName() == arg1.getClass().getName()
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.subnode == this.subnode.next.next
this.subnode.key.toString one of { "locVar", "zzz" }
this.subnode.stackLevel == null
this.subnode.parent has only one value
this.subnode.parent.subs has only one value
this.subnode.subnode == null
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next == null
this.subnode.next.previous has only one value
size(arg0[]) one of { 1, 3, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.next.subs[].getClass().getName()
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.key
this.subnode.parent.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.subnode.parent.susbscript
this.subnode.parent.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.setting(java.lang.Object[], java.lang.Object):::EXIT311
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.setting(java.lang.Object[], java.lang.Object):::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.currentStackLevel == orig(this.currentStackLevel)
this.currentStackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel)
this.currentStackLevel == orig(this.mergeSubnodesOperation.tree.currentStackLevel)
this.stack == orig(this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.stack.mapLevel.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.parent.subs.getClass().getName()
this.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key == orig(this.subnode.parent.susbscript)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.key)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.value.getClass().getName()
this.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(arg1.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == return.previous.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode.next.previous)
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName())
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.value.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.value.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode == orig(this.subnode.next.next)
this.subnode.subnode.subs == return.parent.subs
this.subnode.subnode.key == return.parent.key
this.subnode.subnode.susbscript == return.parent.susbscript
this.subnode.subnode.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() == return.parent.susbscript.getClass().getName()
this.subnode.subnode.isNumeric == return.isNumeric
this.subnode.subnode.isNumeric == return.parent.isNumeric
this.subnode.subnode.parent == return.parent.parent
this.subnode.subnode.subnode == return
this.subnode.subnode.subnode == return.parent.subnode
this.subnode.next.subs == orig(this.subnode.next.subs)
this.subnode.next.subs.getClass().getName() == return.next.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == return.previous.subs.getClass().getName()
this.subnode.next.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subnode.next.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key == orig(this.subnode.next.key)
this.subnode.next.key.toString == orig(this.subnode.next.key.toString)
this.subnode.next.susbscript == orig(this.subnode.next.susbscript)
this.subnode.next.susbscript.getClass().getName() == return.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == return.previous.value.getClass().getName()
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.subnode.next.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.subnode.next.isNumeric == return.isNumeric
this.subnode.next.isNumeric == return.previous.isNumeric
this.subnode.next.isNumeric == orig(this.subnode.isNumeric)
this.subnode.next.isNumeric == orig(this.subnode.parent.isNumeric)
this.subnode.next.stackLevel == orig(this.subnode.stackLevel)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.next.value)
this.subnode.next.value.getClass().getName() == return.next.susbscript.getClass().getName()
this.subnode.next.parent == orig(this.subnode.parent)
this.subnode.next.parent == orig(this.subnode.next.parent)
this.subnode.next.subnode == orig(this.subnode.next.subnode)
this.subnode.next.previous == orig(this.subnode.next.previous)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
return == return.previous.next
return.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.susbscript.getClass().getName()
return.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.isNumeric == return.previous.isNumeric
return.value == orig(arg1)
return.parent == return.previous.parent
return.parent.susbscript.getClass().getName() == return.next.susbscript.getClass().getName()
return.next.susbscript.getClass().getName() == return.next.value.getClass().getName()
return.previous.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
return.previous.susbscript.getClass().getName() == return.previous.value.getClass().getName()
return.previous.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
return.previous.isNumeric == orig(this.subnode.next.isNumeric)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
this.subnode.key.toString one of { "%varPublica", "locVar", "locVarAfterNew" }
this.subnode.stackLevel == null
this.subnode.subnode.subs has only one value
this.subnode.subnode.subs[] contains no nulls and has only one value, of length 2
this.subnode.subnode.subs[].getClass().getName() == [java.lang.String, java.lang.Integer]
this.subnode.subnode.key has only one value
this.subnode.subnode.key.toString == "%varPublica~1"
this.subnode.subnode.susbscript has only one value
this.subnode.subnode.susbscript.getClass().getName() == java.lang.Integer.class
this.subnode.subnode.isNumeric == true
this.subnode.subnode.parent has only one value
this.subnode.subnode.subnode has only one value
this.subnode.next.key.toString one of { "vetorLocal", "zzz" }
this.subnode.next.stackLevel == null
return.stackLevel == null
return.parent.key.toString one of { "%varPublica~1", "@", "vetorLocal~xpto~34" }
return.parent.stackLevel == null
return.parent.value == null
return.parent.next == null
return.parent.previous == null
return.subnode == null
return.next.subs has only one value
return.next.subs.getClass().getName() == java.lang.Object[].class
return.next.subs[] contains no nulls and has only one value, of length 1
return.next.subs[] elements has only one value
return.next.subs[].getClass().getName() == [java.lang.String]
return.next.subs[].getClass().getName() elements == java.lang.String.class
return.next.key has only one value
return.next.key.toString == "zzz"
return.next.susbscript has only one value
return.next.susbscript.getClass().getName() == java.lang.String.class
return.next.isNumeric == false
return.next.stackLevel == null
return.next.value has only one value
return.next.parent has only one value
return.next.subnode == null
return.next.next == null
return.next.previous has only one value
return.previous.subs.getClass().getName() == java.lang.Object[].class
return.previous.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
return.previous.key.toString one of { "vetorLocal", "vetorLocal~xpto~34~A" }
return.previous.susbscript.getClass().getName() == java.lang.String.class
return.previous.isNumeric == false
return.previous.stackLevel == null
return.previous.value.getClass().getName() == java.lang.String.class
size(return.subs[]) one of { 1, 3, 4 }
size(return.parent.subs[]) one of { 1, 2, 3 }
size(return.next.subs[]) == 1
size(return.previous.subs[]) one of { 1, 4 }
this.stack.mapLevel.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in return.previous.subs[].getClass().getName()
this.stack.mapLevel.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.key) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == orig(this.subnode.parent.susbscript)
orig(this.subnode.parent.susbscript) in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
return.next.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
return.previous.value.getClass().getName() in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[].getClass().getName()
orig(this.subnode.parent.key) in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.mergeSubnodesOperation.tree.subs[]
this.mergeSubnodesOperation.tree.subs[] elements == orig(this.subnode.parent.susbscript)
return.next.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.mergeSubnodesOperation.tree.subs[].getClass().getName()
orig(this.subnode.parent.key) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subs[]
this.subs[] elements == orig(this.subnode.parent.susbscript)
return.next.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subs[].getClass().getName()
orig(this.subnode.parent.subs[]) elements == this.key
this.key in orig(this.subnode.parent.subs[])
orig(this.subnode.parent.subs[]) elements == this.susbscript
this.susbscript in orig(this.subnode.parent.subs[])
this.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subs[].getClass().getName()
this.subnode.subs[].getClass().getName() == orig(this.subnode.subs[].getClass().getName()) (elementwise)
this.subnode.value.getClass().getName() in return.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.value.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[]) (elementwise)
this.subnode.parent.subs[] is the reverse of orig(this.subnode.parent.subs[])
orig(this.subnode.parent.key) in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == orig(this.subnode.parent.key)
orig(this.subnode.parent.susbscript) in this.subnode.parent.subs[]
this.subnode.parent.subs[] elements == orig(this.subnode.parent.susbscript)
return.next.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.parent.subs[].getClass().getName()
this.subnode.parent.subs[].getClass().getName() == orig(this.subnode.parent.subs[].getClass().getName()) (elementwise)
this.subnode.subnode.subs.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.subnode.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.key in this.subnode.subnode.subs[]
this.subnode.next.susbscript in this.subnode.subnode.subs[]
this.subnode.next.value in this.subnode.subnode.subs[]
return.parent.susbscript in this.subnode.subnode.subs[]
return.previous.key in this.subnode.subnode.subs[]
return.previous.susbscript in this.subnode.subnode.subs[]
orig(this.subnode.key) in this.subnode.subnode.subs[]
orig(this.subnode.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.value) in this.subnode.subnode.subs[]
orig(this.subnode.parent.key) in this.subnode.subnode.subs[]
orig(this.subnode.parent.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.key) in this.subnode.subnode.subs[]
orig(this.subnode.next.susbscript) in this.subnode.subnode.subs[]
orig(this.subnode.next.value) in this.subnode.subnode.subs[]
this.subnode.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.subs.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.subnode.subs[].getClass().getName()
this.subnode.subnode.key in this.subnode.next.subs[]
this.subnode.subnode.key in return.previous.subs[]
this.subnode.subnode.key in orig(this.subnode.subs[])
this.subnode.subnode.key in orig(this.subnode.parent.subs[])
this.subnode.subnode.key in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript in this.subnode.next.subs[]
this.subnode.subnode.susbscript in arg0[]
this.subnode.subnode.susbscript in return.subs[]
this.subnode.subnode.susbscript in return.parent.subs[]
this.subnode.subnode.susbscript in return.previous.subs[]
this.subnode.subnode.susbscript in orig(this.subnode.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.parent.subs[])
this.subnode.subnode.susbscript in orig(this.subnode.next.subs[])
this.subnode.subnode.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.subnode.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
this.subnode.next.subs[] == orig(this.subnode.next.subs[]) (elementwise)
this.subnode.next.subs[] is the reverse of orig(this.subnode.next.subs[])
orig(this.subnode.next.susbscript) in this.subnode.next.subs[]
this.subnode.next.subs[] elements == orig(this.subnode.next.susbscript)
return.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in this.subnode.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in this.subnode.next.subs[].getClass().getName()
this.subnode.next.subs[].getClass().getName() == orig(this.subnode.next.subs[].getClass().getName()) (elementwise)
this.subnode.next.susbscript in return.previous.subs[]
orig(this.subnode.next.subs[]) elements == this.subnode.next.susbscript
this.subnode.next.susbscript in orig(this.subnode.next.subs[])
this.subnode.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
this.subnode.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.susbscript in arg0[]
return.susbscript in return.subs[]
return.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.parent.susbscript in return.parent.subs[]
return.parent.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.parent.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.parent.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.parent.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.subs.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.subs.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in return.next.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.next.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.next.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.next.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.previous.susbscript in return.previous.subs[]
orig(this.subnode.next.susbscript) in return.previous.subs[]
return.previous.susbscript.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.value.getClass().getName() in return.previous.subs[].getClass().getName()
return.previous.susbscript.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.previous.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.parent.subs[].getClass().getName())
return.previous.value.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.stackingExcept(java.lang.Object[]):::ENTER
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == arg0.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.subnode.stackLevel == this.subnode.next.stackLevel
this has only one value
this.currentStackLevel == 0
this.stack == null
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 0
br.com.innovatium.mumps2java.datastructure.Tree.this.stack == null
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVar"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "vetorLocal"
this.subnode.next.susbscript has only one value
this.subnode.next.value == null
this.subnode.next.subnode has only one value
this.subnode.next.next has only one value
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(arg0[]) == 1
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.stackingExcept(java.lang.Object[]):::EXIT
this.keyValue == orig(this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode == orig(this.subnode.next.next)
this.subnode.stackLevel == orig(this.subnode.stackLevel)
this.subnode.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == this.subnode.next
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
arg0[] == orig(arg0[])
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel == 1
br.com.innovatium.mumps2java.datastructure.Tree.this.stack has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "zzz"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
this.susbscript.getClass().getName() in orig(this.subnode.next.subs[].getClass().getName())
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.unstacking():::ENTER
this == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this == this.mergeSubnodesOperation.tree
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.isNumeric == this.subnode.parent.isNumeric
this.subnode.stackLevel == this.subnode.next.stackLevel
this.subnode.subnode == this.subnode.next.subnode
this.subnode.subnode == this.subnode.next.next
this.currentStackLevel == 1
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVarAfterNew"
this.subnode.susbscript has only one value
this.subnode.stackLevel == null
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "zzz"
this.subnode.next.susbscript has only one value
this.subnode.next.value has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.Tree.unstacking():::EXIT
this.currentStackLevel == br.com.innovatium.mumps2java.datastructure.Tree.this.currentStackLevel
this.stack == br.com.innovatium.mumps2java.datastructure.Tree.this.stack
this.stack == orig(this.stack)
this.stack == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stack)
this.stack == orig(this.mergeSubnodesOperation.tree.stack)
this.stack.mapLevel == orig(this.stack.mapLevel)
this.keyValue == br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue
this.keyValue == orig(this.keyValue)
this.keyValue == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue)
this.keyValue == orig(this.mergeSubnodesOperation.tree.keyValue)
this.keyValue.getClass().getName() == orig(this.stack.mapLevel.getClass().getName())
this.keyValue.getClass().getName() == orig(this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.keyValue.getClass().getName())
this.keyValue.getClass().getName() == orig(this.mergeSubnodesOperation.tree.keyValue.getClass().getName())
this.killSubnodesOperation == br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation
this.killSubnodesOperation == orig(this.killSubnodesOperation)
this.killSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.killSubnodesOperation)
this.killSubnodesOperation == orig(this.mergeSubnodesOperation.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(this)
br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation == this.addSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation == this.mergeSubnodesOperation
br.com.innovatium.mumps2java.datastructure.Tree.this.subs == this.subs
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs[])
br.com.innovatium.mumps2java.datastructure.Tree.this.key == this.key
br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key.toString)
br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript == this.susbscript
br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric == this.isNumeric
br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.stackLevel)
br.com.innovatium.mumps2java.datastructure.Tree.this.value == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.value)
br.com.innovatium.mumps2java.datastructure.Tree.this.parent == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.parent)
br.com.innovatium.mumps2java.datastructure.Tree.this.subnode == this.subnode
br.com.innovatium.mumps2java.datastructure.Tree.this.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.next)
br.com.innovatium.mumps2java.datastructure.Tree.this.previous == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.previous)
this.addSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.addSubnodesOperation)
this.addSubnodesOperation == orig(this.mergeSubnodesOperation.tree.addSubnodesOperation)
this.mergeSubnodesOperation == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation)
this.mergeSubnodesOperation == orig(this.mergeSubnodesOperation.tree.mergeSubnodesOperation)
this.mergeSubnodesOperation.dest == orig(this.mergeSubnodesOperation.dest)
this.mergeSubnodesOperation.orig == orig(this.mergeSubnodesOperation.orig)
this.mergeSubnodesOperation.tree == orig(this)
this.mergeSubnodesOperation.tree == orig(this.mergeSubnodesOperation.tree)
this.mergeSubnodesOperation.tree.subs[] == orig(this.mergeSubnodesOperation.tree.subs[])
this.mergeSubnodesOperation.tree.key.toString == orig(this.mergeSubnodesOperation.tree.key.toString)
this.mergeSubnodesOperation.tree.stackLevel == orig(this.mergeSubnodesOperation.tree.stackLevel)
this.mergeSubnodesOperation.tree.value == orig(this.mergeSubnodesOperation.tree.value)
this.mergeSubnodesOperation.tree.parent == orig(this.mergeSubnodesOperation.tree.parent)
this.mergeSubnodesOperation.tree.next == orig(this.mergeSubnodesOperation.tree.next)
this.mergeSubnodesOperation.tree.previous == orig(this.mergeSubnodesOperation.tree.previous)
this.subs == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs)
this.subs == orig(this.mergeSubnodesOperation.tree.subs)
this.subs == orig(this.subs)
this.subs == orig(this.subnode.parent.subs)
this.subs.getClass().getName() == this.subnode.parent.subs.getClass().getName()
this.subs.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mergeSubnodesOperation.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.parent.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.subnode.next.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.key == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.key)
this.key == orig(this.mergeSubnodesOperation.tree.key)
this.key == orig(this.key)
this.key == orig(this.subnode.parent.key)
this.key.toString == orig(this.key.toString)
this.susbscript == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript)
this.susbscript == orig(this.mergeSubnodesOperation.tree.susbscript)
this.susbscript == orig(this.susbscript)
this.susbscript == orig(this.subnode.parent.susbscript)
this.susbscript.getClass().getName() == this.subnode.parent.susbscript.getClass().getName()
this.susbscript.getClass().getName() == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.mergeSubnodesOperation.tree.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.value.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.parent.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.susbscript.getClass().getName())
this.susbscript.getClass().getName() == orig(this.subnode.next.value.getClass().getName())
this.isNumeric == this.subnode.parent.isNumeric
this.isNumeric == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.isNumeric)
this.isNumeric == orig(this.mergeSubnodesOperation.tree.isNumeric)
this.isNumeric == orig(this.isNumeric)
this.isNumeric == orig(this.subnode.isNumeric)
this.isNumeric == orig(this.subnode.parent.isNumeric)
this.isNumeric == orig(this.subnode.next.isNumeric)
this.stackLevel == orig(this.stackLevel)
this.value == orig(this.value)
this.parent == orig(this.parent)
this.subnode.parent == orig(this.subnode.parent)
this.subnode.parent == orig(this.subnode.next.parent)
this.subnode.parent.subs[] == orig(this.subnode.parent.subs[])
this.subnode.parent.key.toString == orig(this.subnode.parent.key.toString)
this.subnode.parent.stackLevel == orig(this.subnode.parent.stackLevel)
this.subnode.parent.value == orig(this.subnode.parent.value)
this.subnode.parent.parent == orig(this.subnode.parent.parent)
this.subnode.parent.next == orig(this.subnode.parent.next)
this.subnode.parent.previous == orig(this.subnode.parent.previous)
this.subnode.subnode == this.subnode.next.subnode
this.subnode.subnode == orig(this.subnode.subnode)
this.subnode.subnode == orig(this.subnode.next.subnode)
this.subnode.subnode == orig(this.subnode.next.next)
this.subnode.next == orig(br.com.innovatium.mumps2java.datastructure.Tree.this.subnode)
this.subnode.next == orig(this.mergeSubnodesOperation.tree.subnode)
this.subnode.next == orig(this.subnode)
this.subnode.next == orig(this.subnode.parent.subnode)
this.subnode.next == orig(this.subnode.next.previous)
this.subnode.next.subs == orig(this.subnode.subs)
this.subnode.next.key == orig(this.subnode.key)
this.subnode.next.susbscript == orig(this.subnode.susbscript)
this.subnode.next.stackLevel == orig(this.subnode.stackLevel)
this.subnode.next.stackLevel == orig(this.subnode.next.stackLevel)
this.subnode.next.value == orig(this.subnode.value)
this.subnode.previous == orig(this.subnode.previous)
this.next == orig(this.next)
this.previous == orig(this.previous)
size(this.subnode.subs[]) == orig(size(this.subnode.subs[]))
size(this.subnode.next.subs[]) == orig(size(this.subnode.next.subs[]))
this.currentStackLevel == 0
this.stack has only one value
this.keyValue has only one value
this.killSubnodesOperation has only one value
this.addSubnodesOperation has only one value
this.mergeSubnodesOperation has only one value
this.mergeSubnodesOperation.tree has only one value
this.subs has only one value
this.subnode has only one value
this.subnode.subs has only one value
this.subnode.subs[] contains no nulls and has only one value, of length 1
this.subnode.subs[] elements has only one value
this.subnode.key has only one value
this.subnode.key.toString == "locVar"
this.subnode.susbscript has only one value
this.subnode.stackLevel has only one value
this.subnode.value has only one value
this.subnode.parent has only one value
this.subnode.subnode == null
this.subnode.next has only one value
this.subnode.next.subs has only one value
this.subnode.next.subs[] contains no nulls and has only one value, of length 1
this.subnode.next.subs[] elements has only one value
this.subnode.next.key has only one value
this.subnode.next.key.toString == "locVarAfterNew"
this.subnode.next.susbscript has only one value
this.subnode.next.stackLevel == null
this.subnode.next.value has only one value
this.subnode.next.next has only one value
orig(this) has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.key
this.key in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
br.com.innovatium.mumps2java.datastructure.Tree.this.subs[] elements == this.susbscript
this.susbscript in br.com.innovatium.mumps2java.datastructure.Tree.this.subs[]
orig(this.subnode.subs[]) elements == this.subnode.next.susbscript
this.subnode.next.susbscript in orig(this.subnode.subs[])
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil:::CLASS
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER has only one value
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER != null
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString == "~"
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.concat(java.lang.Object[], java.lang.Object[]):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg0.getClass().getName() == java.lang.Object[].class
size(arg0[]) == 1
size(arg1[]) == 3
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.concat(java.lang.Object[], java.lang.Object[]):::EXIT
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER)
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 4
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.concat(java.lang.Object[], java.lang.Object[], int, int):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg2 == size(arg0[])
arg3 == size(arg0[])-1
arg0[arg2-1] == arg0[arg3]
arg1[arg2-1] == arg1[arg3]
arg0.getClass().getName() == java.lang.Object[].class
arg2 == 1
size(arg1[]) == 3
arg1[arg2] has only one value
arg1[arg3] has only one value
arg0[] elements == arg0[arg3]
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.concat(java.lang.Object[], java.lang.Object[], int, int):::EXIT
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER)
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
orig(arg3) == size(arg0[])-1
size(return[])-1 == orig(size(arg1[]))
arg0[orig(arg2)-1] == arg0[orig(arg3)]
arg0[orig(arg3)] == orig(arg0[post(arg2)-1])
arg0[orig(arg3)] == return[orig(arg2)-1]
arg0[orig(arg3)] == return[orig(arg3)]
arg0[orig(arg3)] == orig(arg0[arg2-1])
arg1[orig(arg2)-1] == arg1[orig(arg3)]
arg1[orig(arg3)] == orig(arg1[post(arg2)-1])
arg1[orig(arg3)] == return[orig(arg2)]
arg1[orig(arg3)] == orig(arg1[arg2-1])
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 4
arg1[orig(arg2)] has only one value
arg1[orig(arg3)] has only one value
arg0[] elements == arg0[orig(arg3)]
arg1[orig(arg2)] in return[]
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.generateKey(int, int, int, java.lang.Object[]):::ENTER
arg1 == size(arg3[])
arg2 == size(arg3[])-1
arg3[arg1-1] == arg3[arg2]
arg0 == 0
arg3 != null
arg3.getClass().getName() == java.lang.Object[].class
arg3[] elements != null
arg0 <= arg2
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.generateKey(int, int, int, java.lang.Object[]):::EXIT64
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.generateKey(int, int, int, java.lang.Object[]):::EXIT
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER)
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString)
arg3[] == orig(arg3[])
orig(arg2) == size(arg3[])-1
orig(arg3[post(arg1)-1]) == arg3[orig(arg2)]
arg3[orig(arg1)-1] == arg3[orig(arg2)]
arg3[orig(arg2)] == orig(arg3[arg1-1])
arg3[] elements != null
return != null
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.generateKey(java.lang.Object[]):::ENTER
arg0 != null
arg0.getClass().getName() == java.lang.Object[].class
arg0[] elements != null
===========================================================================
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.generateKey(java.lang.Object[]):::EXIT
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER)
br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString == orig(br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.DELIMITER.toString)
arg0[] == orig(arg0[])
arg0[] elements != null
return != null
===========================================================================
com.disclinc.netmanager.script.test.ExecTesteNew.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
com.disclinc.netmanager.script.test.ExecTesteNew.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
com.disclinc.netmanager.script.test.TesteNew:::OBJECT
this.m$.mDataPublic.currentSubs.getClass().getName() == this.m$.mDataLocal.currentSubs.getClass().getName()
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == this.m$.mDataGlobal.cacheOrderFunction.getClass().getName()
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == this.m$.mDataLocal.cacheOrderFunction.getClass().getName()
this.m$.methodMap.getClass().getName() == this.m$.stackedClasses.getClass().getName()
this.m$.xecuteCount == 0
this.m$.mDataPublic has only one value
this.m$.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
this.m$.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
this.m$.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
this.m$.mDataPublic.dao == null
this.m$.mDataPublic.tree has only one value
this.m$.mDataPublic.cacheOrderFunction has only one value
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
this.m$.mDataPublic.orderDataCache has only one value
this.m$.mDataGlobal has only one value
this.m$.mDataGlobal.currentSubs == null
this.m$.mDataGlobal.dao == null
this.m$.mDataGlobal.tree has only one value
this.m$.mDataGlobal.cacheOrderFunction has only one value
this.m$.mDataGlobal.orderDataCache has only one value
this.m$.mDataLocal has only one value
this.m$.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.m$.mDataLocal.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.m$.mDataLocal.dao == null
this.m$.mDataLocal.tree has only one value
this.m$.mDataLocal.cacheOrderFunction has only one value
this.m$.mDataLocal.orderDataCache has only one value
this.m$.countNewOperator one of { 0, 1 }
this.m$.methodMap.getClass().getName() == java.util.HashMap.class
this.m$.mReq == null
this.m$.mSes == null
this.m$.Fnc has only one value
mLibrary.mParent.m$ has only one value
this.m$.Cmd has only one value
this.m$.system has only one value
this.m$.system.status has only one value
this.m$.system.license has only one value
this.m$.system.encryption has only one value
this.m$.system.process has only one value
this.m$.system.version has only one value
this.m$.system.obj == null
this.m$.writer has only one value
this.m$.writer.getClass().getName() == java.io.StringWriter.class
this.m$.stackedClasses has only one value
this.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
size(this.m$.mDataPublic.currentSubs[]) == 3
size(this.m$.mDataLocal.currentSubs[]) one of { 1, 2 }
===========================================================================
com.disclinc.netmanager.script.test.TesteNew.TesteNew():::EXIT
this.m$ == null
===========================================================================
com.disclinc.netmanager.script.test.TesteNew.labelNewAll():::ENTER
this.m$ == mLibrary.mParent.m$
this has only one value
this.m$.mDataPublic.currentSubs has only one value
this.m$.mDataLocal.currentSubs has only one value
this.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.m$.mDataLocal.currentSubs[] elements has only one value
this.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.m$.countNewOperator == 0
this.m$.methodMap has only one value
size(this.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
com.disclinc.netmanager.script.test.TesteNew.labelNewAll():::EXIT
this.m$ == mLibrary.mParent.m$
this.m$.xecuteCount == orig(this.m$.xecuteCount)
this.m$.mDataPublic == orig(this.m$.mDataPublic)
this.m$.mDataPublic.currentSubs == orig(this.m$.mDataPublic.currentSubs)
this.m$.mDataPublic.currentSubs.getClass().getName() == orig(this.m$.mDataPublic.currentSubs.getClass().getName())
this.m$.mDataPublic.currentSubs.getClass().getName() == orig(this.m$.mDataLocal.currentSubs.getClass().getName())
this.m$.mDataPublic.currentSubs[] == orig(this.m$.mDataPublic.currentSubs[])
this.m$.mDataPublic.dao == orig(this.m$.mDataPublic.dao)
this.m$.mDataPublic.tree == orig(this.m$.mDataPublic.tree)
this.m$.mDataPublic.cacheOrderFunction == orig(this.m$.mDataPublic.cacheOrderFunction)
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.m$.mDataPublic.cacheOrderFunction.getClass().getName())
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.m$.mDataLocal.cacheOrderFunction.getClass().getName())
this.m$.mDataPublic.orderDataCache == orig(this.m$.mDataPublic.orderDataCache)
this.m$.mDataGlobal == orig(this.m$.mDataGlobal)
this.m$.mDataGlobal.currentSubs == orig(this.m$.mDataGlobal.currentSubs)
this.m$.mDataGlobal.dao == orig(this.m$.mDataGlobal.dao)
this.m$.mDataGlobal.tree == orig(this.m$.mDataGlobal.tree)
this.m$.mDataGlobal.cacheOrderFunction == orig(this.m$.mDataGlobal.cacheOrderFunction)
this.m$.mDataGlobal.orderDataCache == orig(this.m$.mDataGlobal.orderDataCache)
this.m$.mDataLocal == orig(this.m$.mDataLocal)
this.m$.mDataLocal.dao == orig(this.m$.mDataLocal.dao)
this.m$.mDataLocal.tree == orig(this.m$.mDataLocal.tree)
this.m$.mDataLocal.cacheOrderFunction == orig(this.m$.mDataLocal.cacheOrderFunction)
this.m$.mDataLocal.orderDataCache == orig(this.m$.mDataLocal.orderDataCache)
this.m$.methodMap == orig(this.m$.methodMap)
this.m$.methodMap.getClass().getName() == orig(this.m$.methodMap.getClass().getName())
this.m$.methodMap.getClass().getName() == orig(this.m$.stackedClasses.getClass().getName())
this.m$.mReq == orig(this.m$.mReq)
this.m$.mSes == orig(this.m$.mSes)
this.m$.Fnc == orig(this.m$.Fnc)
mLibrary.mParent.m$ == orig(this.m$)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
this.m$.Cmd == orig(this.m$.Cmd)
this.m$.system == orig(this.m$.system)
this.m$.system.status == orig(this.m$.system.status)
this.m$.system.license == orig(this.m$.system.license)
this.m$.system.encryption == orig(this.m$.system.encryption)
this.m$.system.process == orig(this.m$.system.process)
this.m$.system.version == orig(this.m$.system.version)
this.m$.system.obj == orig(this.m$.system.obj)
this.m$.writer == orig(this.m$.writer)
this.m$.writer.getClass().getName() == orig(this.m$.writer.getClass().getName())
this.m$.stackedClasses == orig(this.m$.stackedClasses)
size(this.m$.mDataLocal.currentSubs[])-1 == orig(size(this.m$.mDataLocal.currentSubs[]))
this.m$.mDataPublic.currentSubs has only one value
this.m$.mDataLocal.currentSubs has only one value
this.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.m$.countNewOperator == 1
this.m$.methodMap has only one value
size(this.m$.mDataLocal.currentSubs[]) == 2
===========================================================================
com.disclinc.netmanager.script.test.TesteNew.main():::ENTER
this.m$ == mLibrary.mParent.m$
this has only one value
this.m$.mDataPublic.currentSubs == null
this.m$.mDataLocal.currentSubs == null
this.m$.countNewOperator == 0
this.m$.methodMap == null
===========================================================================
com.disclinc.netmanager.script.test.TesteNew.main():::EXIT
this.m$ == mLibrary.mParent.m$
this.m$.xecuteCount == orig(this.m$.xecuteCount)
this.m$.mDataPublic == orig(this.m$.mDataPublic)
this.m$.mDataPublic.dao == orig(this.m$.mDataPublic.dao)
this.m$.mDataPublic.tree == orig(this.m$.mDataPublic.tree)
this.m$.mDataPublic.cacheOrderFunction == orig(this.m$.mDataPublic.cacheOrderFunction)
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.m$.mDataPublic.cacheOrderFunction.getClass().getName())
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.m$.mDataLocal.cacheOrderFunction.getClass().getName())
this.m$.mDataPublic.orderDataCache == orig(this.m$.mDataPublic.orderDataCache)
this.m$.mDataGlobal == orig(this.m$.mDataGlobal)
this.m$.mDataGlobal.currentSubs == orig(this.m$.mDataGlobal.currentSubs)
this.m$.mDataGlobal.dao == orig(this.m$.mDataGlobal.dao)
this.m$.mDataGlobal.tree == orig(this.m$.mDataGlobal.tree)
this.m$.mDataGlobal.cacheOrderFunction == orig(this.m$.mDataGlobal.cacheOrderFunction)
this.m$.mDataGlobal.orderDataCache == orig(this.m$.mDataGlobal.orderDataCache)
this.m$.mDataLocal == orig(this.m$.mDataLocal)
this.m$.mDataLocal.dao == orig(this.m$.mDataLocal.dao)
this.m$.mDataLocal.tree == orig(this.m$.mDataLocal.tree)
this.m$.mDataLocal.cacheOrderFunction == orig(this.m$.mDataLocal.cacheOrderFunction)
this.m$.mDataLocal.orderDataCache == orig(this.m$.mDataLocal.orderDataCache)
this.m$.countNewOperator == orig(this.m$.countNewOperator)
this.m$.methodMap.getClass().getName() == orig(this.m$.stackedClasses.getClass().getName())
this.m$.mReq == orig(this.m$.mReq)
this.m$.mSes == orig(this.m$.mSes)
this.m$.Fnc == orig(this.m$.Fnc)
mLibrary.mParent.m$ == orig(this.m$)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
this.m$.Cmd == orig(this.m$.Cmd)
this.m$.system == orig(this.m$.system)
this.m$.system.status == orig(this.m$.system.status)
this.m$.system.license == orig(this.m$.system.license)
this.m$.system.encryption == orig(this.m$.system.encryption)
this.m$.system.process == orig(this.m$.system.process)
this.m$.system.version == orig(this.m$.system.version)
this.m$.system.obj == orig(this.m$.system.obj)
this.m$.writer == orig(this.m$.writer)
this.m$.writer.getClass().getName() == orig(this.m$.writer.getClass().getName())
this.m$.stackedClasses == orig(this.m$.stackedClasses)
this.m$.mDataPublic.currentSubs has only one value
this.m$.mDataLocal.currentSubs has only one value
this.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.m$.countNewOperator == 0
this.m$.methodMap has only one value
size(this.m$.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mClass:::OBJECT
this.m$.mDataPublic.currentSubs.getClass().getName() == this.m$.mDataLocal.currentSubs.getClass().getName()
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == this.m$.mDataGlobal.cacheOrderFunction.getClass().getName()
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == this.m$.mDataLocal.cacheOrderFunction.getClass().getName()
this.m$.methodMap.getClass().getName() == this.m$.stackedClasses.getClass().getName()
this.m$.xecuteCount == 0
this.m$.mDataPublic has only one value
this.m$.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
this.m$.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
this.m$.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
this.m$.mDataPublic.dao == null
this.m$.mDataPublic.tree has only one value
this.m$.mDataPublic.cacheOrderFunction has only one value
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
this.m$.mDataPublic.orderDataCache has only one value
this.m$.mDataGlobal has only one value
this.m$.mDataGlobal.currentSubs == null
this.m$.mDataGlobal.dao == null
this.m$.mDataGlobal.tree has only one value
this.m$.mDataGlobal.cacheOrderFunction has only one value
this.m$.mDataGlobal.orderDataCache has only one value
this.m$.mDataLocal has only one value
this.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.m$.mDataLocal.currentSubs[] elements has only one value
this.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.m$.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.m$.mDataLocal.dao == null
this.m$.mDataLocal.tree has only one value
this.m$.mDataLocal.cacheOrderFunction has only one value
this.m$.mDataLocal.orderDataCache has only one value
this.m$.countNewOperator == 0
this.m$.methodMap.getClass().getName() == java.util.HashMap.class
this.m$.mReq == null
this.m$.mSes == null
this.m$.Fnc has only one value
mLibrary.mParent.m$ has only one value
this.m$.Cmd has only one value
this.m$.system has only one value
this.m$.system.status has only one value
this.m$.system.license has only one value
this.m$.system.encryption has only one value
this.m$.system.process has only one value
this.m$.system.version has only one value
this.m$.system.obj == null
this.m$.writer has only one value
this.m$.writer.getClass().getName() == java.io.StringWriter.class
this.m$.stackedClasses has only one value
this.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
size(this.m$.mDataPublic.currentSubs[]) == 3
size(this.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mClass.mClass():::EXIT
this.m$ == null
===========================================================================
mLibrary.mClass.setContext(mLibrary.mContext):::ENTER
mLibrary.mParent.m$ == arg0
arg0.mDataPublic.currentSubs.getClass().getName() == arg0.mDataLocal.currentSubs.getClass().getName()
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataGlobal.cacheOrderFunction.getClass().getName()
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataLocal.cacheOrderFunction.getClass().getName()
arg0.methodMap.getClass().getName() == arg0.stackedClasses.getClass().getName()
this.m$ == null
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
arg0.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
arg0.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
arg0.mDataLocal.currentSubs[] elements has only one value
arg0.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
arg0.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap.getClass().getName() == java.util.HashMap.class
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system has only one value
arg0.system.status has only one value
arg0.system.license has only one value
arg0.system.encryption has only one value
arg0.system.process has only one value
arg0.system.version has only one value
arg0.system.obj == null
arg0.writer has only one value
arg0.writer.getClass().getName() == java.io.StringWriter.class
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
size(arg0.mDataPublic.currentSubs[]) == 3
size(arg0.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mClass.setContext(mLibrary.mContext):::EXIT
this.m$ == mLibrary.mParent.m$
this.m$.mDataPublic == arg0.mDataPublic
this.m$.mDataPublic.currentSubs == arg0.mDataPublic.currentSubs
this.m$.mDataPublic.currentSubs.getClass().getName() == arg0.mDataPublic.currentSubs.getClass().getName()
this.m$.mDataPublic.tree == arg0.mDataPublic.tree
this.m$.mDataPublic.cacheOrderFunction == arg0.mDataPublic.cacheOrderFunction
this.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataPublic.cacheOrderFunction.getClass().getName()
this.m$.mDataPublic.orderDataCache == arg0.mDataPublic.orderDataCache
this.m$.mDataGlobal == arg0.mDataGlobal
this.m$.mDataGlobal.tree == arg0.mDataGlobal.tree
this.m$.mDataGlobal.cacheOrderFunction == arg0.mDataGlobal.cacheOrderFunction
this.m$.mDataGlobal.cacheOrderFunction.getClass().getName() == arg0.mDataPublic.cacheOrderFunction.getClass().getName()
this.m$.mDataGlobal.orderDataCache == arg0.mDataGlobal.orderDataCache
this.m$.mDataLocal == arg0.mDataLocal
this.m$.mDataLocal.currentSubs == arg0.mDataLocal.currentSubs
this.m$.mDataLocal.currentSubs.getClass().getName() == arg0.mDataPublic.currentSubs.getClass().getName()
this.m$.mDataLocal.tree == arg0.mDataLocal.tree
this.m$.mDataLocal.cacheOrderFunction == arg0.mDataLocal.cacheOrderFunction
this.m$.mDataLocal.cacheOrderFunction.getClass().getName() == arg0.mDataPublic.cacheOrderFunction.getClass().getName()
this.m$.mDataLocal.orderDataCache == arg0.mDataLocal.orderDataCache
this.m$.countNewOperator == arg0.countNewOperator
this.m$.methodMap == arg0.methodMap
this.m$.methodMap.getClass().getName() == arg0.methodMap.getClass().getName()
this.m$.Fnc == arg0.Fnc
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$ == orig(arg0)
this.m$.Cmd == arg0.Cmd
this.m$.system == arg0.system
this.m$.system.status == arg0.system.status
this.m$.system.license == arg0.system.license
this.m$.system.encryption == arg0.system.encryption
this.m$.system.process == arg0.system.process
this.m$.system.version == arg0.system.version
this.m$.writer == arg0.writer
this.m$.writer.getClass().getName() == arg0.writer.getClass().getName()
this.m$.stackedClasses == arg0.stackedClasses
this.m$.stackedClasses.getClass().getName() == arg0.stackedClasses.getClass().getName()
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.currentSubs.getClass().getName() == arg0.mDataLocal.currentSubs.getClass().getName()
arg0.mDataPublic.currentSubs.getClass().getName() == orig(arg0.mDataPublic.currentSubs.getClass().getName())
arg0.mDataPublic.currentSubs.getClass().getName() == orig(arg0.mDataLocal.currentSubs.getClass().getName())
arg0.mDataPublic.currentSubs[] == orig(arg0.mDataPublic.currentSubs[])
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataGlobal.cacheOrderFunction.getClass().getName()
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataLocal.cacheOrderFunction.getClass().getName()
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mDataPublic.cacheOrderFunction.getClass().getName())
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mDataGlobal.cacheOrderFunction.getClass().getName())
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mDataLocal.cacheOrderFunction.getClass().getName())
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.currentSubs[] == orig(arg0.mDataLocal.currentSubs[])
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.methodMap.getClass().getName() == arg0.stackedClasses.getClass().getName()
arg0.methodMap.getClass().getName() == orig(arg0.methodMap.getClass().getName())
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.system.status == orig(arg0.system.status)
arg0.system.license == orig(arg0.system.license)
arg0.system.encryption == orig(arg0.system.encryption)
arg0.system.process == orig(arg0.system.process)
arg0.system.version == orig(arg0.system.version)
arg0.system.obj == orig(arg0.system.obj)
arg0.writer == orig(arg0.writer)
arg0.writer.getClass().getName() == orig(arg0.writer.getClass().getName())
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.stackedClasses.getClass().getName() == orig(arg0.stackedClasses.getClass().getName())
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
arg0.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
arg0.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
arg0.mDataLocal.currentSubs[] elements has only one value
arg0.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
arg0.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap.getClass().getName() == java.util.HashMap.class
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system has only one value
arg0.system.status has only one value
arg0.system.license has only one value
arg0.system.encryption has only one value
arg0.system.process has only one value
arg0.system.version has only one value
arg0.system.obj == null
arg0.writer has only one value
arg0.writer.getClass().getName() == java.io.StringWriter.class
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
size(arg0.mDataPublic.currentSubs[]) == 3
size(arg0.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.methodMap.getClass().getName() == mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$ != null
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic != null
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
mLibrary.mParent.m$.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
mLibrary.mParent.m$.mDataPublic.currentSubs[] elements != null
mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.tree != null
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction != null
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataPublic.orderDataCache != null
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal != null
mLibrary.mParent.m$.mDataGlobal.currentSubs == null
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.tree != null
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction != null
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache != null
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal != null
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements != null
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.tree != null
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction != null
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache != null
mLibrary.mParent.m$.countNewOperator one of { 0, 1 }
mLibrary.mParent.m$.methodMap.getClass().getName() == java.util.HashMap.class
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Fnc != null
mLibrary.mParent.m$.system.status has only one value
mLibrary.mParent.m$.system.status != null
mLibrary.mParent.m$.system.license has only one value
mLibrary.mParent.m$.system.license != null
mLibrary.mParent.m$.system.encryption has only one value
mLibrary.mParent.m$.system.encryption != null
mLibrary.mParent.m$.system.process has only one value
mLibrary.mParent.m$.system.process != null
mLibrary.mParent.m$.system.version has only one value
mLibrary.mParent.m$.system.version != null
mLibrary.mParent.m$.system.obj == null
mLibrary.mParent.m$.writer.getClass().getName() == java.io.StringWriter.class
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses != null
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
size(mLibrary.mParent.m$.mDataPublic.currentSubs[]) == 3
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) one of { 1, 2 }
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.methodMap.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.methodMap.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$.methodMap.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
===========================================================================
mLibrary.mCmd:::OBJECT
this has only one value
===========================================================================
mLibrary.mCmd.Do(java.lang.String):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0 has only one value
arg0.toString == "labelNewAll"
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd.Do(java.lang.String):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
arg0.toString == orig(arg0.toString)
size(mLibrary.mParent.m$.mDataLocal.currentSubs[])-1 == orig(size(mLibrary.mParent.m$.mDataLocal.currentSubs[]))
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.toString == "labelNewAll"
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mCmd.Merge(mLibrary.mVar, mLibrary.mVar):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg1.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg1.mData.currentSubs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg1.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0 has only one value
arg0.subs has only one value
arg0.subs[] contains no nulls and has only one value, of length 1
arg0.subs[] elements has only one value
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 1
arg0.mData.currentSubs[] elements has only one value
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
arg1 has only one value
arg1.subs has only one value
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.mData has only one value
arg1.mData.currentSubs has only one value
arg1.mData.currentSubs[] contains no nulls and has only one value, of length 1
arg1.mData.currentSubs[] elements has only one value
arg1.mData.currentSubs[].getClass().getName() == [java.lang.String]
arg1.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg1.mData.dao == null
arg1.mData.tree has only one value
arg1.mData.cacheOrderFunction has only one value
arg1.mData.orderDataCache has only one value
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
size(arg0.subs[]) == 1
size(arg0.mData.currentSubs[]) == 1
size(arg1.subs[]) == 1
size(arg1.mData.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd.Merge(mLibrary.mVar, mLibrary.mVar):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg1.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mData.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg1.mData.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
arg0.subs.getClass().getName() == arg1.subs.getClass().getName()
arg0.subs.getClass().getName() == arg1.mData.currentSubs.getClass().getName()
arg0.subs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.mData.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg1.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg1.mData.currentSubs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.mData == orig(arg0.mData)
arg0.mData.dao == orig(arg0.mData.dao)
arg0.mData.tree == orig(arg0.mData.tree)
arg0.mData.cacheOrderFunction == orig(arg0.mData.cacheOrderFunction)
arg0.mData.orderDataCache == orig(arg0.mData.orderDataCache)
arg1.subs == orig(arg1.subs)
arg1.subs[] == orig(arg1.subs[])
arg1.mData == orig(arg1.mData)
arg1.mData.dao == orig(arg1.mData.dao)
arg1.mData.tree == orig(arg1.mData.tree)
arg1.mData.cacheOrderFunction == orig(arg1.mData.cacheOrderFunction)
arg1.mData.orderDataCache == orig(arg1.mData.orderDataCache)
size(mLibrary.mParent.m$.mDataLocal.currentSubs[])-1 == orig(size(mLibrary.mParent.m$.mDataLocal.currentSubs[]))
size(arg0.mData.currentSubs[])-1 == orig(size(arg0.mData.currentSubs[]))
size(arg1.mData.currentSubs[])-1 == orig(size(arg1.mData.currentSubs[]))
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.subs has only one value
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.subs[] contains no nulls and has only one value, of length 1
arg0.subs[] elements has only one value
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 2
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
arg1.subs has only one value
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.mData has only one value
arg1.mData.currentSubs has only one value
arg1.mData.currentSubs[] contains no nulls and has only one value, of length 2
arg1.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
arg1.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg1.mData.dao == null
arg1.mData.tree has only one value
arg1.mData.cacheOrderFunction has only one value
arg1.mData.orderDataCache has only one value
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 2
size(arg0.subs[]) == 1
size(arg0.mData.currentSubs[]) == 2
size(arg1.subs[]) == 1
size(arg1.mData.currentSubs[]) == 2
===========================================================================
mLibrary.mCmd.Write(java.lang.Object[]):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs != null
mLibrary.mParent.m$.mDataLocal.currentSubs != null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.Cmd != null
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.system != null
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
arg0 != null
arg0[] elements != null
size(arg0[]) one of { 3, 4, 6 }
===========================================================================
mLibrary.mCmd.Write(java.lang.Object[]):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs == orig(mLibrary.mParent.m$.mDataLocal.currentSubs)
mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
mLibrary.mParent.m$.mDataLocal.currentSubs[] == orig(mLibrary.mParent.m$.mDataLocal.currentSubs[])
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
arg0[] == orig(arg0[])
orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName()) == orig(arg0.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs != null
mLibrary.mParent.m$.mDataLocal.currentSubs != null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.Cmd != null
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.system != null
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
arg0[] elements != null
orig(arg0.getClass().getName()) == java.lang.Object[].class
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != orig(arg0.getClass().getName())
mLibrary.mParent.m$.methodMap.getClass().getName() != orig(arg0.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() != orig(arg0.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
mLibrary.mCmd.isIndirectionExecution(java.lang.String):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0 has only one value
arg0.toString == "labelNewAll"
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd.isIndirectionExecution(java.lang.String):::EXIT95
===========================================================================
mLibrary.mCmd.isIndirectionExecution(java.lang.String):::EXIT95;condition="not(return == true)"
===========================================================================
mLibrary.mCmd.isIndirectionExecution(java.lang.String):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs == orig(mLibrary.mParent.m$.mDataLocal.currentSubs)
mLibrary.mParent.m$.mDataLocal.currentSubs[] == orig(mLibrary.mParent.m$.mDataLocal.currentSubs[])
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
arg0.toString == orig(arg0.toString)
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.toString == "labelNewAll"
return == false
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd.isIndirectionExecution(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
mLibrary.mCmd.isMethodExecution(java.lang.String):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0 has only one value
arg0.toString == "labelNewAll"
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd.isMethodExecution(java.lang.String):::EXIT102
===========================================================================
mLibrary.mCmd.isMethodExecution(java.lang.String):::EXIT102;condition="not(return == true)"
===========================================================================
mLibrary.mCmd.isMethodExecution(java.lang.String):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs == orig(mLibrary.mParent.m$.mDataLocal.currentSubs)
mLibrary.mParent.m$.mDataLocal.currentSubs[] == orig(mLibrary.mParent.m$.mDataLocal.currentSubs[])
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
arg0.toString == orig(arg0.toString)
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.toString == "labelNewAll"
return == false
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mCmd.isMethodExecution(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
mLibrary.mCmd.mCmd(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd == null
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mLibrary.mCmd.mCmd(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Cmd == null
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd == null
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mLibrary.mContext:::OBJECT
this.mDataPublic.currentSubs.getClass().getName() == this.mDataPublic.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.currentSubs.getClass().getName()
this.mDataPublic.tree.keyValue.getClass().getName() == mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() == this.mDataLocal.currentSubs.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.key == this.mDataPublic.tree.susbscript
this.mDataPublic.tree.key == this.mDataGlobal.tree.key
this.mDataPublic.tree.key == this.mDataLocal.tree.key
this.mDataPublic.tree.susbscript == this.mDataGlobal.tree.susbscript
this.mDataPublic.tree.susbscript == this.mDataLocal.tree.susbscript
this.mDataPublic.tree.susbscript.getClass().getName() == this.mDataGlobal.tree.susbscript.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() == this.mDataLocal.tree.susbscript.getClass().getName()
this.mDataPublic.tree.isNumeric == this.mDataLocal.tree.isNumeric
this.mDataPublic.cacheOrderFunction.getClass().getName() == this.mDataPublic.orderDataCache.cache.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == this.mDataGlobal.cacheOrderFunction.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == this.mDataGlobal.orderDataCache.cache.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == this.mDataLocal.cacheOrderFunction.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == this.mDataLocal.orderDataCache.cache.getClass().getName()
this.mDataGlobal.tree.keyValue.getClass().getName() == mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.mDataLocal.tree.keyValue.getClass().getName() == mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == mLibrary.mParent.m$.methodMap.getClass().getName()
this.methodMap.getClass().getName() == mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() == this.writer.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() == this.stackedClasses.getClass().getName()
this has only one value
this.xecuteCount == 0
this.mDataPublic has only one value
this.mDataPublic != null
this.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
this.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
this.mDataPublic.currentSubs[] elements != null
this.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
this.mDataPublic.dao == null
this.mDataPublic.tree has only one value
this.mDataPublic.tree != null
this.mDataPublic.tree.currentStackLevel == 0
this.mDataPublic.tree.stack == null
this.mDataPublic.tree.keyValue has only one value
this.mDataPublic.tree.keyValue != null
this.mDataPublic.tree.killSubnodesOperation has only one value
this.mDataPublic.tree.killSubnodesOperation != null
this.mDataPublic.tree.addSubnodesOperation has only one value
this.mDataPublic.tree.addSubnodesOperation != null
this.mDataPublic.tree.mergeSubnodesOperation has only one value
this.mDataPublic.tree.mergeSubnodesOperation != null
this.mDataPublic.tree.subs has only one value
this.mDataPublic.tree.subs != null
this.mDataPublic.tree.subs.getClass().getName() == java.lang.Object[].class
this.mDataPublic.tree.subs[] contains no nulls and has only one value, of length 1
this.mDataPublic.tree.subs[] elements has only one value
this.mDataPublic.tree.subs[] elements != null
this.mDataPublic.tree.subs[].getClass().getName() == [java.lang.String]
this.mDataPublic.tree.subs[].getClass().getName() elements == java.lang.String.class
this.mDataPublic.tree.key has only one value
this.mDataPublic.tree.key != null
this.mDataPublic.tree.key.toString == "@"
this.mDataPublic.tree.susbscript has only one value
this.mDataPublic.tree.susbscript != null
this.mDataPublic.tree.susbscript.getClass().getName() == java.lang.String.class
this.mDataPublic.tree.isNumeric == false
this.mDataPublic.tree.stackLevel == null
this.mDataPublic.tree.value == null
this.mDataPublic.tree.parent == null
this.mDataPublic.tree.next == null
this.mDataPublic.tree.previous == null
this.mDataPublic.cacheOrderFunction has only one value
this.mDataPublic.cacheOrderFunction != null
this.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
this.mDataPublic.orderDataCache has only one value
this.mDataPublic.orderDataCache != null
this.mDataPublic.orderDataCache.cache has only one value
this.mDataPublic.orderDataCache.cache != null
this.mDataGlobal has only one value
this.mDataGlobal != null
this.mDataGlobal.currentSubs == null
this.mDataGlobal.dao == null
this.mDataGlobal.tree has only one value
this.mDataGlobal.tree != null
this.mDataGlobal.tree.currentStackLevel == 0
this.mDataGlobal.tree.stack == null
this.mDataGlobal.tree.keyValue has only one value
this.mDataGlobal.tree.keyValue != null
this.mDataGlobal.tree.killSubnodesOperation has only one value
this.mDataGlobal.tree.killSubnodesOperation != null
this.mDataGlobal.tree.addSubnodesOperation has only one value
this.mDataGlobal.tree.addSubnodesOperation != null
this.mDataGlobal.tree.mergeSubnodesOperation has only one value
this.mDataGlobal.tree.mergeSubnodesOperation != null
this.mDataGlobal.tree.subs has only one value
this.mDataGlobal.tree.subs != null
this.mDataGlobal.tree.subs[] contains no nulls and has only one value, of length 1
this.mDataGlobal.tree.subs[] elements has only one value
this.mDataGlobal.tree.subs[] elements != null
this.mDataGlobal.tree.subs[].getClass().getName() == [java.lang.String]
this.mDataGlobal.tree.subs[].getClass().getName() elements == java.lang.String.class
this.mDataGlobal.tree.key.toString == "@"
this.mDataGlobal.tree.isNumeric == false
this.mDataGlobal.tree.stackLevel == null
this.mDataGlobal.tree.value == null
this.mDataGlobal.tree.parent == null
this.mDataGlobal.tree.subnode == null
this.mDataGlobal.tree.next == null
this.mDataGlobal.tree.previous == null
this.mDataGlobal.cacheOrderFunction has only one value
this.mDataGlobal.cacheOrderFunction != null
this.mDataGlobal.orderDataCache has only one value
this.mDataGlobal.orderDataCache != null
this.mDataGlobal.orderDataCache.cache has only one value
this.mDataGlobal.orderDataCache.cache != null
this.mDataLocal has only one value
this.mDataLocal != null
this.mDataLocal.currentSubs.getClass().getName() == java.lang.Object[].class
this.mDataLocal.currentSubs[] elements != null
this.mDataLocal.dao == null
this.mDataLocal.tree has only one value
this.mDataLocal.tree != null
this.mDataLocal.tree.currentStackLevel one of { 0, 1 }
this.mDataLocal.tree.keyValue has only one value
this.mDataLocal.tree.keyValue != null
this.mDataLocal.tree.killSubnodesOperation has only one value
this.mDataLocal.tree.killSubnodesOperation != null
this.mDataLocal.tree.addSubnodesOperation has only one value
this.mDataLocal.tree.addSubnodesOperation != null
this.mDataLocal.tree.mergeSubnodesOperation has only one value
this.mDataLocal.tree.mergeSubnodesOperation != null
this.mDataLocal.tree.subs has only one value
this.mDataLocal.tree.subs != null
this.mDataLocal.tree.subs[] contains no nulls and has only one value, of length 1
this.mDataLocal.tree.subs[] elements has only one value
this.mDataLocal.tree.subs[] elements != null
this.mDataLocal.tree.subs[].getClass().getName() == [java.lang.String]
this.mDataLocal.tree.subs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.key.toString == "@"
this.mDataLocal.tree.stackLevel == null
this.mDataLocal.tree.value == null
this.mDataLocal.tree.parent == null
this.mDataLocal.tree.next == null
this.mDataLocal.tree.previous == null
this.mDataLocal.cacheOrderFunction has only one value
this.mDataLocal.cacheOrderFunction != null
this.mDataLocal.orderDataCache has only one value
this.mDataLocal.orderDataCache != null
this.mDataLocal.orderDataCache.cache has only one value
this.mDataLocal.orderDataCache.cache != null
this.countNewOperator one of { 0, 1 }
this.methodMap.getClass().getName() == java.util.HashMap.class
this.mReq == null
this.mSes == null
this.Fnc has only one value
this.Fnc != null
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$ != null
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic != null
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal != null
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal != null
mLibrary.mParent.m$.countNewOperator one of { 0, 1 }
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Fnc != null
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.Cmd != null
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.system != null
mLibrary.mParent.m$.writer.getClass().getName() == java.io.StringWriter.class
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses != null
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
this.Cmd has only one value
this.Cmd != null
this.system has only one value
this.system != null
this.system.status has only one value
this.system.status != null
this.system.license has only one value
this.system.license != null
this.system.encryption has only one value
this.system.encryption != null
this.system.process has only one value
this.system.process != null
this.system.version has only one value
this.system.version != null
this.system.obj == null
this.stackedClasses has only one value
this.stackedClasses != null
size(this.mDataPublic.currentSubs[]) == 3
size(this.mDataPublic.tree.subs[]) == 1
size(this.mDataGlobal.tree.subs[]) == 1
size(this.mDataLocal.currentSubs[]) one of { 1, 2, 4 }
size(this.mDataLocal.tree.subs[]) == 1
this.mDataPublic.currentSubs.getClass().getName() != this.mDataPublic.tree.susbscript.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() != this.mDataPublic.cacheOrderFunction.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() != this.methodMap.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in this.mDataPublic.currentSubs[].getClass().getName()
this.mDataPublic.tree.currentStackLevel <= this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.subs.getClass().getName() != this.mDataPublic.tree.susbscript.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() != this.mDataPublic.cacheOrderFunction.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() != this.methodMap.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
this.mDataPublic.tree.subs.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.mDataPublic.tree.key in this.mDataPublic.tree.subs[]
this.mDataPublic.tree.subs[] elements == this.mDataPublic.tree.key
this.mDataPublic.tree.subs[] elements == this.mDataPublic.tree.susbscript
this.mDataPublic.tree.susbscript in this.mDataPublic.tree.subs[]
this.mDataPublic.tree.susbscript.getClass().getName() in this.mDataPublic.tree.subs[].getClass().getName()
this.mDataGlobal.tree.subs[] elements == this.mDataPublic.tree.key
this.mDataPublic.tree.key in this.mDataGlobal.tree.subs[]
this.mDataLocal.tree.subs[] elements == this.mDataPublic.tree.key
this.mDataPublic.tree.key in this.mDataLocal.tree.subs[]
this.mDataGlobal.tree.subs[] elements == this.mDataPublic.tree.susbscript
this.mDataPublic.tree.susbscript in this.mDataGlobal.tree.subs[]
this.mDataLocal.tree.subs[] elements == this.mDataPublic.tree.susbscript
this.mDataPublic.tree.susbscript in this.mDataLocal.tree.subs[]
this.mDataPublic.tree.susbscript.getClass().getName() != this.mDataPublic.cacheOrderFunction.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in this.mDataGlobal.tree.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() != this.mDataLocal.currentSubs.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in this.mDataLocal.currentSubs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in this.mDataLocal.tree.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() != this.methodMap.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != this.mDataLocal.currentSubs.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != this.methodMap.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() != this.methodMap.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
===========================================================================
mLibrary.mContext.defineMethodName(mLibrary.mClass, java.lang.String):::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 == null
arg1 has only one value
arg1.toString == "labelNewAll"
size(this.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mContext.defineMethodName(mLibrary.mClass, java.lang.String):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
return has only one value
return.toString == "com.disclinc.netmanager.script.test.TesteNew.labelNewAll"
size(this.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mContext.dispatch(mLibrary.mClass, java.lang.String, java.lang.Object[]):::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 == null
arg1 has only one value
arg1.toString == "com.disclinc.netmanager.script.test.TesteNew.labelNewAll"
arg2 == null
size(this.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mContext.dispatch(mLibrary.mClass, java.lang.String, java.lang.Object[]):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg1.toString == orig(arg1.toString)
size(this.mDataLocal.currentSubs[])-1 == orig(size(this.mDataLocal.currentSubs[]))
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg1.toString == "com.disclinc.netmanager.script.test.TesteNew.labelNewAll"
return == null
size(this.mDataLocal.currentSubs[]) == 2
this.mDataPublic.tree.susbscript.getClass().getName() in orig(this.mDataLocal.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mContext.filteringVariableTypes(mLibrary.mVar[]):::ENTER
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 has only one value
arg0.getClass().getName() == mLibrary.mVar[].class
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].subs contains no nulls and has only one value, of length 1
arg0[].subs elements has only one value
arg0[].subs.getClass().getName() == [java.lang.Object[]]
arg0[].subs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData contains no nulls and has only one value, of length 1
arg0[].mData elements has only one value
arg0[].mData.currentSubs contains no nulls and has only one value, of length 1
arg0[].mData.currentSubs elements has only one value
arg0[].mData.currentSubs.getClass().getName() == [java.lang.Object[]]
arg0[].mData.currentSubs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData.dao == [null]
arg0[].mData.dao elements == null
arg0[].mData.tree contains no nulls and has only one value, of length 1
arg0[].mData.tree elements has only one value
arg0[].mData.cacheOrderFunction contains no nulls and has only one value, of length 1
arg0[].mData.cacheOrderFunction elements has only one value
arg0[].mData.cacheOrderFunction.getClass().getName() == [java.util.HashSet]
arg0[].mData.cacheOrderFunction.getClass().getName() elements == java.util.HashSet.class
arg0[].mData.orderDataCache contains no nulls and has only one value, of length 1
arg0[].mData.orderDataCache elements has only one value
size(this.mDataLocal.currentSubs[]) == 1
size(arg0[]) == 1
this.mDataPublic.currentSubs.getClass().getName() in arg0[].subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() in arg0[].mData.currentSubs.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() in arg0[].mData.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mContext.filteringVariableTypes(mLibrary.mVar[]):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == return.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == return.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == return.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == return.getClass().getName()
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == return.getClass().getName()
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == return.getClass().getName()
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
this.stackedClasses.getClass().getName() == return.getClass().getName()
arg0[] == orig(arg0[])
arg0[].subs == orig(arg0[].subs)
arg0[].mData == orig(arg0[].mData)
arg0[].mData.currentSubs == orig(arg0[].mData.currentSubs)
arg0[].mData.dao == orig(arg0[].mData.dao)
arg0[].mData.tree == orig(arg0[].mData.tree)
arg0[].mData.cacheOrderFunction == orig(arg0[].mData.cacheOrderFunction)
arg0[].mData.orderDataCache == orig(arg0[].mData.orderDataCache)
return.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
return.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
return.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
return.getClass().getName() == orig(this.methodMap.getClass().getName())
return.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
return.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
return.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].subs contains no nulls and has only one value, of length 1
arg0[].subs elements has only one value
arg0[].subs.getClass().getName() == [java.lang.Object[]]
arg0[].subs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData contains no nulls and has only one value, of length 1
arg0[].mData elements has only one value
arg0[].mData.currentSubs contains no nulls and has only one value, of length 1
arg0[].mData.currentSubs elements has only one value
arg0[].mData.currentSubs.getClass().getName() == [java.lang.Object[]]
arg0[].mData.currentSubs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData.dao == [null]
arg0[].mData.dao elements == null
arg0[].mData.tree contains no nulls and has only one value, of length 1
arg0[].mData.tree elements has only one value
arg0[].mData.cacheOrderFunction contains no nulls and has only one value, of length 1
arg0[].mData.cacheOrderFunction elements has only one value
arg0[].mData.cacheOrderFunction.getClass().getName() == [java.util.HashSet]
arg0[].mData.cacheOrderFunction.getClass().getName() elements == java.util.HashSet.class
arg0[].mData.orderDataCache contains no nulls and has only one value, of length 1
arg0[].mData.orderDataCache elements has only one value
return has only one value
return.getClass().getName() == java.util.HashMap.class
size(this.mDataLocal.currentSubs[]) == 1
this.mDataPublic.currentSubs.getClass().getName() in arg0[].subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() in arg0[].mData.currentSubs.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() in arg0[].mData.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mContext.fnc$(java.lang.Object[]):::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == arg0.getClass().getName()
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(this.mDataLocal.currentSubs[]) == 1
size(arg0[]) == 1
===========================================================================
mLibrary.mContext.fnc$(java.lang.Object[]):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs.getClass().getName() == orig(arg0.getClass().getName())
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs.getClass().getName() == orig(arg0.getClass().getName())
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs.getClass().getName() == orig(arg0.getClass().getName())
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg0[] == orig(arg0[])
orig(this.mDataPublic.tree.subs.getClass().getName()) == orig(arg0.getClass().getName())
orig(this.mDataGlobal.tree.subs.getClass().getName()) == orig(arg0.getClass().getName())
orig(this.mDataLocal.currentSubs.getClass().getName()) == orig(arg0.getClass().getName())
orig(this.mDataLocal.tree.subs.getClass().getName()) == orig(arg0.getClass().getName())
size(this.mDataLocal.currentSubs[])-1 == orig(size(this.mDataLocal.currentSubs[]))
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
return == null
orig(arg0.getClass().getName()) == java.lang.Object[].class
size(this.mDataLocal.currentSubs[]) == 2
this.mDataPublic.tree.susbscript.getClass().getName() in orig(this.mDataLocal.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mContext.generateMData(java.lang.String):::ENTER
this == mLibrary.mParent.m$
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
this.writer has only one value
this.writer != null
arg0 != null
===========================================================================
mLibrary.mContext.generateMData(java.lang.String):::EXIT479
this.mDataPublic == return
this.mDataPublic.currentSubs == return.currentSubs
this.mDataPublic.tree == return.tree
this.mDataPublic.tree.currentStackLevel == return.tree.currentStackLevel
this.mDataPublic.tree.keyValue == return.tree.keyValue
this.mDataPublic.tree.killSubnodesOperation == return.tree.killSubnodesOperation
this.mDataPublic.tree.addSubnodesOperation == return.tree.addSubnodesOperation
this.mDataPublic.tree.mergeSubnodesOperation == return.tree.mergeSubnodesOperation
this.mDataPublic.tree.subs == return.tree.subs
this.mDataPublic.tree.subs.getClass().getName() == this.mDataLocal.currentSubs.getClass().getName()
this.mDataPublic.tree.subnode == return.tree.subnode
this.mDataPublic.cacheOrderFunction == return.cacheOrderFunction
this.mDataPublic.orderDataCache == return.orderDataCache
this.mDataPublic.orderDataCache.cache == return.orderDataCache.cache
this.mDataGlobal.tree.subs.getClass().getName() == this.mDataLocal.currentSubs.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataLocal.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataLocal.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
return == orig(this.mDataPublic)
return.currentSubs == orig(this.mDataPublic.currentSubs)
return.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
return.tree == orig(this.mDataPublic.tree)
return.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
return.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
return.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
return.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
return.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
return.tree.subs == orig(this.mDataPublic.tree.subs)
return.tree.subnode == orig(this.mDataPublic.tree.subnode)
return.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
return.orderDataCache == orig(this.mDataPublic.orderDataCache)
return.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
arg0.toString == "%varPublica"
return has only one value
return.currentSubs[] contains no nulls and has only one value, of length 3
return.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
return.tree has only one value
return.tree.currentStackLevel == 0
return.tree.stack == null
return.tree.keyValue has only one value
return.tree.killSubnodesOperation has only one value
return.tree.addSubnodesOperation has only one value
return.tree.mergeSubnodesOperation has only one value
return.tree.subs has only one value
return.cacheOrderFunction has only one value
return.orderDataCache has only one value
return.orderDataCache.cache has only one value
orig(arg0) has only one value
size(return.currentSubs[]) == 3
orig(arg0) in this.mDataPublic.currentSubs[]
orig(arg0) in return.currentSubs[]
===========================================================================
mLibrary.mContext.generateMData(java.lang.String):::EXIT483
this.mDataLocal == return
this.mDataLocal.currentSubs == return.currentSubs
this.mDataLocal.tree == return.tree
this.mDataLocal.tree.currentStackLevel == return.tree.currentStackLevel
this.mDataLocal.tree.stack == return.tree.stack
this.mDataLocal.tree.keyValue == return.tree.keyValue
this.mDataLocal.tree.killSubnodesOperation == return.tree.killSubnodesOperation
this.mDataLocal.tree.addSubnodesOperation == return.tree.addSubnodesOperation
this.mDataLocal.tree.mergeSubnodesOperation == return.tree.mergeSubnodesOperation
this.mDataLocal.tree.subs == return.tree.subs
this.mDataLocal.tree.subnode == return.tree.subnode
this.mDataLocal.cacheOrderFunction == return.cacheOrderFunction
this.mDataLocal.orderDataCache == return.orderDataCache
this.mDataLocal.orderDataCache.cache == return.orderDataCache.cache
return == orig(this.mDataLocal)
return.currentSubs == orig(this.mDataLocal.currentSubs)
return.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
return.tree == orig(this.mDataLocal.tree)
return.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
return.tree.stack == orig(this.mDataLocal.tree.stack)
return.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
return.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
return.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
return.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
return.tree.subs == orig(this.mDataLocal.tree.subs)
return.tree.subnode == orig(this.mDataLocal.tree.subnode)
return.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
return.orderDataCache == orig(this.mDataLocal.orderDataCache)
return.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
return has only one value
return.tree has only one value
return.tree.keyValue has only one value
return.tree.killSubnodesOperation has only one value
return.tree.addSubnodesOperation has only one value
return.tree.mergeSubnodesOperation has only one value
return.tree.subs has only one value
return.cacheOrderFunction has only one value
return.orderDataCache has only one value
return.orderDataCache.cache has only one value
size(return.currentSubs[]) one of { 1, 2, 4 }
===========================================================================
mLibrary.mContext.generateMData(java.lang.String):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == return.currentSubs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == return.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs.getClass().getName() == return.tree.subs.getClass().getName()
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == return.tree.key
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == return.tree.susbscript
this.mDataPublic.tree.susbscript.getClass().getName() == return.tree.susbscript.getClass().getName()
this.mDataPublic.tree.isNumeric == return.tree.isNumeric
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataPublic.orderDataCache.cache.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs.getClass().getName() == return.tree.subs.getClass().getName()
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key == return.tree.key
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.susbscript == return.tree.susbscript
this.mDataGlobal.tree.susbscript.getClass().getName() == return.tree.susbscript.getClass().getName()
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.cacheOrderFunction.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataGlobal.orderDataCache.cache.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs.getClass().getName() == return.currentSubs.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() == return.tree.subs.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs.getClass().getName() == return.tree.subs.getClass().getName()
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key == return.tree.key
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.susbscript == return.tree.susbscript
this.mDataLocal.tree.susbscript.getClass().getName() == return.tree.susbscript.getClass().getName()
this.mDataLocal.tree.isNumeric == return.tree.isNumeric
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.cacheOrderFunction.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.mDataLocal.orderDataCache.cache.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == return.tree.keyValue.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg0.toString == orig(arg0.toString)
return.currentSubs.getClass().getName() == return.tree.subs.getClass().getName()
return.tree.subs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
return.tree.subs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
return.tree.subs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
return.tree.key == return.tree.susbscript
return.tree.key == orig(this.mDataPublic.tree.key)
return.tree.key == orig(this.mDataGlobal.tree.key)
return.tree.key == orig(this.mDataLocal.tree.key)
return.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
return.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
return.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
return.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
return.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
return.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
return.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
return.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
return.cacheOrderFunction.getClass().getName() == return.orderDataCache.cache.getClass().getName()
return.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
return.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
return.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
return.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
return.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
return.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
this.writer has only one value
this.writer != null
return != null
return.currentSubs.getClass().getName() == java.lang.Object[].class
return.currentSubs[] elements != null
return.dao == null
return.tree != null
return.tree.currentStackLevel one of { 0, 1 }
return.tree.keyValue != null
return.tree.killSubnodesOperation != null
return.tree.addSubnodesOperation != null
return.tree.mergeSubnodesOperation != null
return.tree.subs != null
return.tree.subs.getClass().getName() == java.lang.Object[].class
return.tree.subs[] contains no nulls and has only one value, of length 1
return.tree.subs[] elements has only one value
return.tree.subs[] elements != null
return.tree.subs[].getClass().getName() == [java.lang.String]
return.tree.subs[].getClass().getName() elements == java.lang.String.class
return.tree.key has only one value
return.tree.key != null
return.tree.key.toString == "@"
return.tree.susbscript has only one value
return.tree.susbscript != null
return.tree.susbscript.getClass().getName() == java.lang.String.class
return.tree.isNumeric == false
return.tree.stackLevel == null
return.tree.value == null
return.tree.parent == null
return.tree.next == null
return.tree.previous == null
return.cacheOrderFunction != null
return.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
return.orderDataCache != null
return.orderDataCache.cache != null
size(return.tree.subs[]) == 1
this.mDataPublic.currentSubs.getClass().getName() != return.tree.susbscript.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() != return.cacheOrderFunction.getClass().getName()
return.tree.susbscript.getClass().getName() in this.mDataPublic.currentSubs[].getClass().getName()
this.mDataPublic.tree.currentStackLevel <= return.tree.currentStackLevel
return.tree.key in this.mDataPublic.tree.subs[]
this.mDataPublic.tree.subs[] elements == return.tree.key
return.tree.susbscript in this.mDataPublic.tree.subs[]
this.mDataPublic.tree.subs[] elements == return.tree.susbscript
return.tree.susbscript.getClass().getName() in this.mDataPublic.tree.subs[].getClass().getName()
return.tree.key in this.mDataGlobal.tree.subs[]
this.mDataGlobal.tree.subs[] elements == return.tree.key
return.tree.susbscript in this.mDataGlobal.tree.subs[]
this.mDataGlobal.tree.subs[] elements == return.tree.susbscript
return.tree.susbscript.getClass().getName() in this.mDataGlobal.tree.subs[].getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() != return.tree.susbscript.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() != return.cacheOrderFunction.getClass().getName()
return.tree.susbscript.getClass().getName() in this.mDataLocal.currentSubs[].getClass().getName()
this.mDataLocal.tree.currentStackLevel >= return.tree.currentStackLevel
return.tree.key in this.mDataLocal.tree.subs[]
this.mDataLocal.tree.subs[] elements == return.tree.key
return.tree.susbscript in this.mDataLocal.tree.subs[]
this.mDataLocal.tree.subs[] elements == return.tree.susbscript
return.tree.susbscript.getClass().getName() in this.mDataLocal.tree.subs[].getClass().getName()
this.methodMap.getClass().getName() != return.currentSubs.getClass().getName()
this.methodMap.getClass().getName() != return.tree.subs.getClass().getName()
this.methodMap.getClass().getName() != return.tree.susbscript.getClass().getName()
this.methodMap.getClass().getName() != return.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != return.currentSubs.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != return.tree.subs.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != return.tree.susbscript.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != return.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.currentSubs.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.tree.subs.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.tree.susbscript.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.cacheOrderFunction.getClass().getName()
return.currentSubs.getClass().getName() != return.tree.susbscript.getClass().getName()
return.currentSubs.getClass().getName() != return.cacheOrderFunction.getClass().getName()
return.tree.susbscript.getClass().getName() in return.currentSubs[].getClass().getName()
return.tree.subs.getClass().getName() != return.tree.susbscript.getClass().getName()
return.tree.subs.getClass().getName() != return.cacheOrderFunction.getClass().getName()
return.tree.key in return.tree.subs[]
return.tree.subs[] elements == return.tree.key
return.tree.subs[] elements == return.tree.susbscript
return.tree.susbscript in return.tree.subs[]
return.tree.susbscript.getClass().getName() in return.tree.subs[].getClass().getName()
return.tree.susbscript.getClass().getName() != return.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mContext.getMethod(java.lang.String):::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 has only one value
arg0.toString == "com.disclinc.netmanager.script.test.TesteNew.labelNewAll"
size(this.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mContext.getMethod(java.lang.String):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg0.toString == orig(arg0.toString)
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0.toString == "com.disclinc.netmanager.script.test.TesteNew.labelNewAll"
return has only one value
size(this.mDataLocal.currentSubs[]) == 1
===========================================================================
mLibrary.mContext.getWriter():::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs has only one value
this.mDataPublic.currentSubs != null
this.mDataPublic.tree.subnode has only one value
this.mDataPublic.tree.subnode != null
this.mDataLocal.currentSubs != null
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.mDataLocal.tree.subnode != null
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
this.writer has only one value
this.writer != null
size(this.mDataLocal.currentSubs[]) one of { 1, 2 }
===========================================================================
mLibrary.mContext.getWriter():::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == return.getClass().getName()
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == return
this.writer.getClass().getName() == return.getClass().getName()
this.stackedClasses == orig(this.stackedClasses)
return == orig(this.writer)
return.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
return.getClass().getName() == orig(this.writer.getClass().getName())
this.mDataPublic.currentSubs has only one value
this.mDataPublic.currentSubs != null
this.mDataPublic.tree.subnode has only one value
this.mDataPublic.tree.subnode != null
this.mDataLocal.currentSubs != null
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.mDataLocal.tree.subnode != null
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
return has only one value
return != null
return.getClass().getName() == java.io.StringWriter.class
size(this.mDataLocal.currentSubs[]) one of { 1, 2 }
this.mDataPublic.currentSubs.getClass().getName() != return.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() != return.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != return.getClass().getName()
this.methodMap.getClass().getName() != return.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.getClass().getName()
===========================================================================
mLibrary.mContext.mContext():::EXIT
this.mDataPublic.currentSubs == this.mDataLocal.currentSubs
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.subnode == this.mDataLocal.tree.subnode
this.mDataPublic.currentSubs == null
this.mDataPublic.tree.subnode == null
this.mDataLocal.tree.stack == null
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer == null
this.writer == null
===========================================================================
mLibrary.mContext.mContext(java.io.Writer):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.io.StringWriter.class
===========================================================================
mLibrary.mContext.mContext(java.io.Writer):::EXIT
this.mDataPublic.currentSubs == this.mDataLocal.currentSubs
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.subnode == this.mDataLocal.tree.subnode
this.writer == orig(arg0)
this.mDataPublic.currentSubs == null
this.mDataPublic.tree.subnode == null
this.mDataLocal.tree.stack == null
this.countNewOperator == 0
this.methodMap == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
===========================================================================
mLibrary.mContext.merge(mLibrary.mVar, mLibrary.mVar):::ENTER
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == arg1.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == arg1.mData.currentSubs.getClass().getName()
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == arg1.mData.cacheOrderFunction.getClass().getName()
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.currentStackLevel == 1
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 has only one value
arg0.subs has only one value
arg0.subs[] contains no nulls and has only one value, of length 1
arg0.subs[] elements has only one value
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 1
arg0.mData.currentSubs[] elements has only one value
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
arg1 has only one value
arg1.subs has only one value
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.mData has only one value
arg1.mData.currentSubs has only one value
arg1.mData.currentSubs[] contains no nulls and has only one value, of length 1
arg1.mData.currentSubs[] elements has only one value
arg1.mData.currentSubs[].getClass().getName() == [java.lang.String]
arg1.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg1.mData.dao == null
arg1.mData.tree has only one value
arg1.mData.cacheOrderFunction has only one value
arg1.mData.orderDataCache has only one value
size(this.mDataLocal.currentSubs[]) == 1
size(arg0.subs[]) == 1
size(arg0.mData.currentSubs[]) == 1
size(arg1.subs[]) == 1
size(arg1.mData.currentSubs[]) == 1
this.mDataPublic.tree.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in arg0.mData.currentSubs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in arg1.mData.currentSubs[].getClass().getName()
===========================================================================
mLibrary.mContext.merge(mLibrary.mVar, mLibrary.mVar):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs.getClass().getName() == arg0.subs.getClass().getName()
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == arg1.mData.cacheOrderFunction.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mData.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg1.mData.cacheOrderFunction.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs.getClass().getName() == arg0.subs.getClass().getName()
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs.getClass().getName() == arg0.subs.getClass().getName()
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
arg0.subs.getClass().getName() == arg1.subs.getClass().getName()
arg0.subs.getClass().getName() == arg1.mData.currentSubs.getClass().getName()
arg0.subs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.mData.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg1.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg1.mData.currentSubs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.mData == orig(arg0.mData)
arg0.mData.dao == orig(arg0.mData.dao)
arg0.mData.tree == orig(arg0.mData.tree)
arg0.mData.cacheOrderFunction == orig(arg0.mData.cacheOrderFunction)
arg0.mData.orderDataCache == orig(arg0.mData.orderDataCache)
arg1.subs == orig(arg1.subs)
arg1.subs[] == orig(arg1.subs[])
arg1.mData == orig(arg1.mData)
arg1.mData.dao == orig(arg1.mData.dao)
arg1.mData.tree == orig(arg1.mData.tree)
arg1.mData.cacheOrderFunction == orig(arg1.mData.cacheOrderFunction)
arg1.mData.orderDataCache == orig(arg1.mData.orderDataCache)
size(this.mDataLocal.currentSubs[])-1 == orig(size(this.mDataLocal.currentSubs[]))
size(arg0.mData.currentSubs[])-1 == orig(size(arg0.mData.currentSubs[]))
size(arg1.mData.currentSubs[])-1 == orig(size(arg1.mData.currentSubs[]))
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.currentStackLevel == 1
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0.subs has only one value
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.subs[] contains no nulls and has only one value, of length 1
arg0.subs[] elements has only one value
arg0.subs[].getClass().getName() == [java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 2
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
arg1.subs has only one value
arg1.subs[] contains no nulls and has only one value, of length 1
arg1.subs[] elements has only one value
arg1.subs[].getClass().getName() == [java.lang.String]
arg1.subs[].getClass().getName() elements == java.lang.String.class
arg1.mData has only one value
arg1.mData.currentSubs has only one value
arg1.mData.currentSubs[] contains no nulls and has only one value, of length 2
arg1.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
arg1.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg1.mData.dao == null
arg1.mData.tree has only one value
arg1.mData.cacheOrderFunction has only one value
arg1.mData.orderDataCache has only one value
size(this.mDataLocal.currentSubs[]) == 2
size(arg0.subs[]) == 1
size(arg0.mData.currentSubs[]) == 2
size(arg1.subs[]) == 1
size(arg1.mData.currentSubs[]) == 2
this.mDataPublic.tree.susbscript.getClass().getName() in arg0.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in arg0.mData.currentSubs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in arg1.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in arg1.mData.currentSubs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in orig(this.mDataLocal.currentSubs[].getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() in orig(arg0.mData.currentSubs[].getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() in orig(arg1.mData.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mContext.newVarExcept(mLibrary.mVar[]):::ENTER
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack == null
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 0
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0 has only one value
arg0.getClass().getName() == mLibrary.mVar[].class
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].subs contains no nulls and has only one value, of length 1
arg0[].subs elements has only one value
arg0[].subs.getClass().getName() == [java.lang.Object[]]
arg0[].subs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData contains no nulls and has only one value, of length 1
arg0[].mData elements has only one value
arg0[].mData.currentSubs contains no nulls and has only one value, of length 1
arg0[].mData.currentSubs elements has only one value
arg0[].mData.currentSubs.getClass().getName() == [java.lang.Object[]]
arg0[].mData.currentSubs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData.dao == [null]
arg0[].mData.dao elements == null
arg0[].mData.tree contains no nulls and has only one value, of length 1
arg0[].mData.tree elements has only one value
arg0[].mData.cacheOrderFunction contains no nulls and has only one value, of length 1
arg0[].mData.cacheOrderFunction elements has only one value
arg0[].mData.cacheOrderFunction.getClass().getName() == [java.util.HashSet]
arg0[].mData.cacheOrderFunction.getClass().getName() elements == java.util.HashSet.class
arg0[].mData.orderDataCache contains no nulls and has only one value, of length 1
arg0[].mData.orderDataCache elements has only one value
size(this.mDataLocal.currentSubs[]) == 1
size(arg0[]) == 1
this.mDataPublic.currentSubs.getClass().getName() in arg0[].subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() in arg0[].mData.currentSubs.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() in arg0[].mData.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mContext.newVarExcept(mLibrary.mVar[]):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg0[] == orig(arg0[])
arg0[].subs == orig(arg0[].subs)
arg0[].mData == orig(arg0[].mData)
arg0[].mData.currentSubs == orig(arg0[].mData.currentSubs)
arg0[].mData.dao == orig(arg0[].mData.dao)
arg0[].mData.tree == orig(arg0[].mData.tree)
arg0[].mData.cacheOrderFunction == orig(arg0[].mData.cacheOrderFunction)
arg0[].mData.orderDataCache == orig(arg0[].mData.orderDataCache)
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
this.mDataLocal.currentSubs[] elements has only one value
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.currentStackLevel == 1
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].subs contains no nulls and has only one value, of length 1
arg0[].subs elements has only one value
arg0[].subs.getClass().getName() == [java.lang.Object[]]
arg0[].subs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData contains no nulls and has only one value, of length 1
arg0[].mData elements has only one value
arg0[].mData.currentSubs contains no nulls and has only one value, of length 1
arg0[].mData.currentSubs elements has only one value
arg0[].mData.currentSubs.getClass().getName() == [java.lang.Object[]]
arg0[].mData.currentSubs.getClass().getName() elements == java.lang.Object[].class
arg0[].mData.dao == [null]
arg0[].mData.dao elements == null
arg0[].mData.tree contains no nulls and has only one value, of length 1
arg0[].mData.tree elements has only one value
arg0[].mData.cacheOrderFunction contains no nulls and has only one value, of length 1
arg0[].mData.cacheOrderFunction elements has only one value
arg0[].mData.cacheOrderFunction.getClass().getName() == [java.util.HashSet]
arg0[].mData.cacheOrderFunction.getClass().getName() elements == java.util.HashSet.class
arg0[].mData.orderDataCache contains no nulls and has only one value, of length 1
arg0[].mData.orderDataCache elements has only one value
size(this.mDataLocal.currentSubs[]) == 1
this.mDataPublic.currentSubs.getClass().getName() in arg0[].subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() in arg0[].mData.currentSubs.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() in arg0[].mData.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mContext.oldvar():::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.currentStackLevel == 1
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
size(this.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mContext.oldvar():::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
size(this.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mContext.oldvar(int):::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.countNewOperator == arg0
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.currentStackLevel == 1
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
size(this.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mContext.oldvar(int):::EXIT335
===========================================================================
mLibrary.mContext.oldvar(int):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == this.mDataGlobal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == this.mDataLocal.tree.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == this.mDataLocal.tree.currentStackLevel
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.keyValue.getClass().getName() == this.methodMap.getClass().getName()
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.countNewOperator == orig(arg0)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == this.stackedClasses.getClass().getName()
this.methodMap.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
this.methodMap.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
this.mDataPublic.currentSubs has only one value
this.mDataPublic.tree.subnode has only one value
this.mDataLocal.currentSubs has only one value
this.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
this.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mDataLocal.tree.stack has only one value
this.mDataLocal.tree.subnode has only one value
this.countNewOperator == 1
this.methodMap has only one value
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.writer has only one value
this.writer has only one value
size(this.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mContext.var(java.lang.Object[]):::ENTER
this == mLibrary.mParent.m$
this.mDataPublic.tree.subs.getClass().getName() == arg0.getClass().getName()
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
this.writer has only one value
this.writer != null
arg0 != null
arg0[] elements != null
size(arg0[]) one of { 1, 2, 3 }
===========================================================================
mLibrary.mContext.var(java.lang.Object[]):::EXIT366
===========================================================================
mLibrary.mContext.var(java.lang.Object[]):::EXIT
this.xecuteCount == orig(this.xecuteCount)
this.mDataPublic == orig(this.mDataPublic)
this.mDataPublic.currentSubs == orig(this.mDataPublic.currentSubs)
this.mDataPublic.currentSubs.getClass().getName() == return.subs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == return.mData.currentSubs.getClass().getName()
this.mDataPublic.currentSubs.getClass().getName() == orig(this.mDataPublic.currentSubs.getClass().getName())
this.mDataPublic.currentSubs[] == orig(this.mDataPublic.currentSubs[])
this.mDataPublic.dao == orig(this.mDataPublic.dao)
this.mDataPublic.tree == orig(this.mDataPublic.tree)
this.mDataPublic.tree.currentStackLevel == orig(this.mDataPublic.tree.currentStackLevel)
this.mDataPublic.tree.stack == orig(this.mDataPublic.tree.stack)
this.mDataPublic.tree.keyValue == orig(this.mDataPublic.tree.keyValue)
this.mDataPublic.tree.killSubnodesOperation == orig(this.mDataPublic.tree.killSubnodesOperation)
this.mDataPublic.tree.addSubnodesOperation == orig(this.mDataPublic.tree.addSubnodesOperation)
this.mDataPublic.tree.mergeSubnodesOperation == orig(this.mDataPublic.tree.mergeSubnodesOperation)
this.mDataPublic.tree.subs == orig(this.mDataPublic.tree.subs)
this.mDataPublic.tree.subs.getClass().getName() == return.subs.getClass().getName()
this.mDataPublic.tree.subs[] == orig(this.mDataPublic.tree.subs[])
this.mDataPublic.tree.key == orig(this.mDataPublic.tree.key)
this.mDataPublic.tree.key == orig(this.mDataGlobal.tree.key)
this.mDataPublic.tree.key == orig(this.mDataLocal.tree.key)
this.mDataPublic.tree.key.toString == orig(this.mDataPublic.tree.key.toString)
this.mDataPublic.tree.susbscript == orig(this.mDataPublic.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataGlobal.tree.susbscript)
this.mDataPublic.tree.susbscript == orig(this.mDataLocal.tree.susbscript)
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataPublic.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataGlobal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.susbscript.getClass().getName() == orig(this.mDataLocal.tree.susbscript.getClass().getName())
this.mDataPublic.tree.isNumeric == orig(this.mDataPublic.tree.isNumeric)
this.mDataPublic.tree.isNumeric == orig(this.mDataLocal.tree.isNumeric)
this.mDataPublic.tree.stackLevel == orig(this.mDataPublic.tree.stackLevel)
this.mDataPublic.tree.value == orig(this.mDataPublic.tree.value)
this.mDataPublic.tree.parent == orig(this.mDataPublic.tree.parent)
this.mDataPublic.tree.subnode == orig(this.mDataPublic.tree.subnode)
this.mDataPublic.tree.next == orig(this.mDataPublic.tree.next)
this.mDataPublic.tree.previous == orig(this.mDataPublic.tree.previous)
this.mDataPublic.cacheOrderFunction == orig(this.mDataPublic.cacheOrderFunction)
this.mDataPublic.cacheOrderFunction.getClass().getName() == return.mData.cacheOrderFunction.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataPublic.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataGlobal.orderDataCache.cache.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.cacheOrderFunction.getClass().getName())
this.mDataPublic.cacheOrderFunction.getClass().getName() == orig(this.mDataLocal.orderDataCache.cache.getClass().getName())
this.mDataPublic.orderDataCache == orig(this.mDataPublic.orderDataCache)
this.mDataPublic.orderDataCache.cache == orig(this.mDataPublic.orderDataCache.cache)
this.mDataGlobal == orig(this.mDataGlobal)
this.mDataGlobal.currentSubs == orig(this.mDataGlobal.currentSubs)
this.mDataGlobal.dao == orig(this.mDataGlobal.dao)
this.mDataGlobal.tree == orig(this.mDataGlobal.tree)
this.mDataGlobal.tree.currentStackLevel == orig(this.mDataGlobal.tree.currentStackLevel)
this.mDataGlobal.tree.stack == orig(this.mDataGlobal.tree.stack)
this.mDataGlobal.tree.keyValue == orig(this.mDataGlobal.tree.keyValue)
this.mDataGlobal.tree.killSubnodesOperation == orig(this.mDataGlobal.tree.killSubnodesOperation)
this.mDataGlobal.tree.addSubnodesOperation == orig(this.mDataGlobal.tree.addSubnodesOperation)
this.mDataGlobal.tree.mergeSubnodesOperation == orig(this.mDataGlobal.tree.mergeSubnodesOperation)
this.mDataGlobal.tree.subs == orig(this.mDataGlobal.tree.subs)
this.mDataGlobal.tree.subs.getClass().getName() == return.subs.getClass().getName()
this.mDataGlobal.tree.subs[] == orig(this.mDataGlobal.tree.subs[])
this.mDataGlobal.tree.key.toString == orig(this.mDataGlobal.tree.key.toString)
this.mDataGlobal.tree.isNumeric == orig(this.mDataGlobal.tree.isNumeric)
this.mDataGlobal.tree.stackLevel == orig(this.mDataGlobal.tree.stackLevel)
this.mDataGlobal.tree.value == orig(this.mDataGlobal.tree.value)
this.mDataGlobal.tree.parent == orig(this.mDataGlobal.tree.parent)
this.mDataGlobal.tree.subnode == orig(this.mDataGlobal.tree.subnode)
this.mDataGlobal.tree.next == orig(this.mDataGlobal.tree.next)
this.mDataGlobal.tree.previous == orig(this.mDataGlobal.tree.previous)
this.mDataGlobal.cacheOrderFunction == orig(this.mDataGlobal.cacheOrderFunction)
this.mDataGlobal.orderDataCache == orig(this.mDataGlobal.orderDataCache)
this.mDataGlobal.orderDataCache.cache == orig(this.mDataGlobal.orderDataCache.cache)
this.mDataLocal == orig(this.mDataLocal)
this.mDataLocal.currentSubs == orig(this.mDataLocal.currentSubs)
this.mDataLocal.currentSubs.getClass().getName() == return.subs.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() == return.mData.currentSubs.getClass().getName()
this.mDataLocal.currentSubs.getClass().getName() == orig(this.mDataLocal.currentSubs.getClass().getName())
this.mDataLocal.currentSubs[] == orig(this.mDataLocal.currentSubs[])
this.mDataLocal.dao == orig(this.mDataLocal.dao)
this.mDataLocal.tree == orig(this.mDataLocal.tree)
this.mDataLocal.tree.currentStackLevel == orig(this.mDataLocal.tree.currentStackLevel)
this.mDataLocal.tree.stack == orig(this.mDataLocal.tree.stack)
this.mDataLocal.tree.keyValue == orig(this.mDataLocal.tree.keyValue)
this.mDataLocal.tree.killSubnodesOperation == orig(this.mDataLocal.tree.killSubnodesOperation)
this.mDataLocal.tree.addSubnodesOperation == orig(this.mDataLocal.tree.addSubnodesOperation)
this.mDataLocal.tree.mergeSubnodesOperation == orig(this.mDataLocal.tree.mergeSubnodesOperation)
this.mDataLocal.tree.subs == orig(this.mDataLocal.tree.subs)
this.mDataLocal.tree.subs.getClass().getName() == return.subs.getClass().getName()
this.mDataLocal.tree.subs[] == orig(this.mDataLocal.tree.subs[])
this.mDataLocal.tree.key.toString == orig(this.mDataLocal.tree.key.toString)
this.mDataLocal.tree.stackLevel == orig(this.mDataLocal.tree.stackLevel)
this.mDataLocal.tree.value == orig(this.mDataLocal.tree.value)
this.mDataLocal.tree.parent == orig(this.mDataLocal.tree.parent)
this.mDataLocal.tree.subnode == orig(this.mDataLocal.tree.subnode)
this.mDataLocal.tree.next == orig(this.mDataLocal.tree.next)
this.mDataLocal.tree.previous == orig(this.mDataLocal.tree.previous)
this.mDataLocal.cacheOrderFunction == orig(this.mDataLocal.cacheOrderFunction)
this.mDataLocal.orderDataCache == orig(this.mDataLocal.orderDataCache)
this.mDataLocal.orderDataCache.cache == orig(this.mDataLocal.orderDataCache.cache)
this.countNewOperator == orig(this.countNewOperator)
this.methodMap == orig(this.methodMap)
this.methodMap.getClass().getName() == orig(this.methodMap.getClass().getName())
this.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
this.mReq == orig(this.mReq)
this.mSes == orig(this.mSes)
this.Fnc == orig(this.Fnc)
mLibrary.mParent.m$ == orig(this)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.writer.getClass().getName() == orig(this.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataPublic.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataGlobal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.mDataLocal.tree.keyValue.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(this.stackedClasses.getClass().getName())
this.Cmd == orig(this.Cmd)
this.system == orig(this.system)
this.system.status == orig(this.system.status)
this.system.license == orig(this.system.license)
this.system.encryption == orig(this.system.encryption)
this.system.process == orig(this.system.process)
this.system.version == orig(this.system.version)
this.system.obj == orig(this.system.obj)
this.writer == orig(this.writer)
this.stackedClasses == orig(this.stackedClasses)
arg0[] == orig(arg0[])
return.subs == orig(arg0)
return.subs.getClass().getName() == return.mData.currentSubs.getClass().getName()
return.subs.getClass().getName() == orig(this.mDataPublic.tree.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.mDataGlobal.tree.subs.getClass().getName())
return.subs.getClass().getName() == orig(this.mDataLocal.tree.subs.getClass().getName())
return.subs.getClass().getName() == orig(arg0.getClass().getName())
mLibrary.mParent.m$.writer has only one value
mLibrary.mParent.m$.writer != null
this.writer has only one value
this.writer != null
arg0[] elements != null
return != null
return.subs != null
return.subs.getClass().getName() == java.lang.Object[].class
return.subs[] elements != null
return.mData != null
return.mData.currentSubs.getClass().getName() == java.lang.Object[].class
return.mData.currentSubs[] elements != null
return.mData.dao == null
return.mData.tree != null
return.mData.cacheOrderFunction != null
return.mData.orderDataCache != null
size(return.subs[]) one of { 1, 2, 3 }
this.mDataPublic.tree.susbscript.getClass().getName() != return.subs.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() != return.mData.currentSubs.getClass().getName()
this.mDataPublic.tree.susbscript.getClass().getName() in return.mData.currentSubs[].getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != return.subs.getClass().getName()
this.mDataPublic.cacheOrderFunction.getClass().getName() != return.mData.currentSubs.getClass().getName()
this.methodMap.getClass().getName() != return.subs.getClass().getName()
this.methodMap.getClass().getName() != return.mData.currentSubs.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != return.subs.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != return.mData.currentSubs.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.subs.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() != return.mData.currentSubs.getClass().getName()
===========================================================================
mLibrary.mData:::OBJECT
this.currentSubs.getClass().getName() == this.tree.subs.getClass().getName()
this.currentSubs.getClass().getName() == this.tree.subnode.subs.getClass().getName()
this.tree == this.tree.mergeSubnodesOperation.tree
this.tree.stack.mapLevel.getClass().getName() == this.tree.keyValue.getClass().getName()
this.tree.subs.getClass().getName() == this.tree.subnode.subs.getClass().getName()
this.tree.key == this.tree.susbscript
this.tree.susbscript.getClass().getName() == this.tree.subnode.susbscript.getClass().getName()
this.tree.susbscript.getClass().getName() == this.tree.subnode.value.getClass().getName()
this.tree.subnode.susbscript.getClass().getName() == this.tree.subnode.value.getClass().getName()
this.cacheOrderFunction.getClass().getName() == this.orderDataCache.cache.getClass().getName()
this.currentSubs.getClass().getName() == java.lang.Object[].class
this.currentSubs[] elements != null
this.dao == null
this.tree != null
this.tree.currentStackLevel one of { 0, 1 }
this.tree.stack.mapLevel has only one value
this.tree.stack.mapLevel != null
this.tree.stack.mapLevel.getClass().getName() == java.util.HashMap.class
this.tree.keyValue != null
this.tree.keyValue.getClass().getName() == java.util.HashMap.class
this.tree.killSubnodesOperation != null
this.tree.addSubnodesOperation != null
this.tree.mergeSubnodesOperation != null
this.tree.mergeSubnodesOperation.dest == null
this.tree.mergeSubnodesOperation.orig == null
this.tree.subs != null
this.tree.subs.getClass().getName() == java.lang.Object[].class
this.tree.subs[] contains no nulls and has only one value, of length 1
this.tree.subs[] elements has only one value
this.tree.subs[] elements != null
this.tree.subs[].getClass().getName() == [java.lang.String]
this.tree.subs[].getClass().getName() elements == java.lang.String.class
this.tree.key has only one value
this.tree.key != null
this.tree.key.toString == "@"
this.tree.susbscript has only one value
this.tree.susbscript != null
this.tree.susbscript.getClass().getName() == java.lang.String.class
this.tree.isNumeric == false
this.tree.stackLevel == null
this.tree.value == null
this.tree.parent == null
this.tree.subnode.subs != null
this.tree.subnode.subs.getClass().getName() == java.lang.Object[].class
this.tree.subnode.subs[] elements != null
this.tree.subnode.subs[].getClass().getName() == [java.lang.String]
this.tree.subnode.subs[].getClass().getName() elements == java.lang.String.class
this.tree.subnode.key != null
this.tree.subnode.susbscript != null
this.tree.subnode.susbscript.getClass().getName() == java.lang.String.class
this.tree.subnode.isNumeric == false
this.tree.subnode.value.getClass().getName() == java.lang.String.class
this.tree.subnode.parent != null
this.tree.subnode.previous == null
this.tree.next == null
this.tree.previous == null
this.cacheOrderFunction != null
this.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
this.orderDataCache != null
this.orderDataCache.cache != null
size(this.currentSubs[]) >= 1
size(this.tree.subs[]) == 1
size(this.tree.subnode.subs[]) == 1
this.currentSubs.getClass().getName() != this.tree.stack.mapLevel.getClass().getName()
this.currentSubs.getClass().getName() != this.tree.keyValue.getClass().getName()
this.currentSubs.getClass().getName() != this.tree.susbscript.getClass().getName()
this.currentSubs.getClass().getName() != this.tree.subnode.susbscript.getClass().getName()
this.currentSubs.getClass().getName() != this.tree.subnode.value.getClass().getName()
this.currentSubs.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.susbscript.getClass().getName() in this.currentSubs[].getClass().getName()
this.tree.subnode.susbscript.getClass().getName() in this.currentSubs[].getClass().getName()
this.tree.subnode.value.getClass().getName() in this.currentSubs[].getClass().getName()
this.tree.stack.mapLevel.getClass().getName() != this.tree.subs.getClass().getName()
this.tree.stack.mapLevel.getClass().getName() != this.tree.susbscript.getClass().getName()
this.tree.stack.mapLevel.getClass().getName() != this.tree.subnode.subs.getClass().getName()
this.tree.stack.mapLevel.getClass().getName() != this.tree.subnode.susbscript.getClass().getName()
this.tree.stack.mapLevel.getClass().getName() != this.tree.subnode.value.getClass().getName()
this.tree.stack.mapLevel.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.keyValue.getClass().getName() != this.tree.subs.getClass().getName()
this.tree.keyValue.getClass().getName() != this.tree.susbscript.getClass().getName()
this.tree.keyValue.getClass().getName() != this.tree.subnode.subs.getClass().getName()
this.tree.keyValue.getClass().getName() != this.tree.subnode.susbscript.getClass().getName()
this.tree.keyValue.getClass().getName() != this.tree.subnode.value.getClass().getName()
this.tree.keyValue.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.subs.getClass().getName() != this.tree.susbscript.getClass().getName()
this.tree.subs.getClass().getName() != this.tree.subnode.susbscript.getClass().getName()
this.tree.subs.getClass().getName() != this.tree.subnode.value.getClass().getName()
this.tree.subs.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.key in this.tree.subs[]
this.tree.subs[] elements == this.tree.key
this.tree.subs[] elements == this.tree.susbscript
this.tree.susbscript in this.tree.subs[]
this.tree.susbscript.getClass().getName() in this.tree.subs[].getClass().getName()
this.tree.subnode.susbscript.getClass().getName() in this.tree.subs[].getClass().getName()
this.tree.subnode.value.getClass().getName() in this.tree.subs[].getClass().getName()
this.tree.susbscript.getClass().getName() != this.tree.subnode.subs.getClass().getName()
this.tree.susbscript.getClass().getName() in this.tree.subnode.subs[].getClass().getName()
this.tree.susbscript.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.subnode.subs.getClass().getName() != this.tree.subnode.susbscript.getClass().getName()
this.tree.subnode.subs.getClass().getName() != this.tree.subnode.value.getClass().getName()
this.tree.subnode.subs.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.subnode.subs[] elements == this.tree.subnode.susbscript
this.tree.subnode.susbscript in this.tree.subnode.subs[]
this.tree.subnode.susbscript.getClass().getName() in this.tree.subnode.subs[].getClass().getName()
this.tree.subnode.value.getClass().getName() in this.tree.subnode.subs[].getClass().getName()
this.tree.subnode.susbscript.getClass().getName() != this.cacheOrderFunction.getClass().getName()
this.tree.subnode.value.getClass().getName() != this.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mData.get(java.lang.Object[]):::ENTER
this.currentSubs.getClass().getName() == arg0.getClass().getName()
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentSubs != null
this.tree.subnode != null
arg0 != null
arg0[] elements != null
size(this.currentSubs[]) one of { 1, 2, 3 }
size(arg0[]) one of { 1, 3, 4 }
===========================================================================
mLibrary.mData.get(java.lang.Object[]):::EXIT
this.currentSubs == orig(this.currentSubs)
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.currentSubs[] == orig(this.currentSubs[])
this.dao == orig(this.dao)
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.currentStackLevel == orig(this.tree.currentStackLevel)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.stack.mapLevel.getClass().getName() == orig(this.tree.stack.mapLevel.getClass().getName())
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == return.getClass().getName()
this.tree.susbscript.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode == orig(this.tree.subnode)
this.tree.subnode.subs == orig(this.tree.subnode.subs)
this.tree.subnode.subs[] == orig(this.tree.subnode.subs[])
this.tree.subnode.key == orig(this.tree.subnode.key)
this.tree.subnode.key.toString == orig(this.tree.subnode.key.toString)
this.tree.subnode.susbscript == orig(this.tree.subnode.susbscript)
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.value == orig(this.tree.subnode.value)
this.tree.subnode.value.getClass().getName() == return.getClass().getName()
this.tree.subnode.value.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.next == orig(this.tree.subnode.next)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
arg0[] == orig(arg0[])
this.currentSubs != null
this.tree.subnode != null
arg0[] elements != null
return.getClass().getName() == java.lang.String.class
size(this.currentSubs[]) one of { 1, 2, 3 }
this.currentSubs.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.currentSubs[].getClass().getName()
this.tree.keyValue.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.tree.subs[].getClass().getName()
return.getClass().getName() in this.tree.subnode.subs[].getClass().getName()
this.cacheOrderFunction.getClass().getName() != return.getClass().getName()
===========================================================================
mLibrary.mData.isDiskAccess(java.lang.Object[]):::ENTER
this.currentSubs.getClass().getName() == arg0.getClass().getName()
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentSubs != null
arg0 != null
arg0[] elements != null
===========================================================================
mLibrary.mData.isDiskAccess(java.lang.Object[]):::EXIT
this.currentSubs == orig(this.currentSubs)
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.currentSubs[] == orig(this.currentSubs[])
this.dao == orig(this.dao)
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.currentStackLevel == orig(this.tree.currentStackLevel)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.stack.mapLevel.getClass().getName() == orig(this.tree.stack.mapLevel.getClass().getName())
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode == orig(this.tree.subnode)
this.tree.subnode.subs == orig(this.tree.subnode.subs)
this.tree.subnode.subs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.tree.subnode.subs[] == orig(this.tree.subnode.subs[])
this.tree.subnode.key == orig(this.tree.subnode.key)
this.tree.subnode.key.toString == orig(this.tree.subnode.key.toString)
this.tree.subnode.susbscript == orig(this.tree.subnode.susbscript)
this.tree.subnode.susbscript.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.value == orig(this.tree.subnode.value)
this.tree.subnode.value.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.next == orig(this.tree.subnode.next)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
arg0[] == orig(arg0[])
this.currentSubs != null
arg0[] elements != null
return == false
===========================================================================
mLibrary.mData.isDiskAccess(java.lang.Object[]):::EXIT;condition="not(return == true)"
===========================================================================
mLibrary.mData.mData():::EXIT
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.currentSubs == null
this.tree.currentStackLevel == 0
this.tree.stack == null
this.tree.subnode == null
===========================================================================
mLibrary.mData.order(java.lang.Object[], int):::ENTER
this.currentSubs.getClass().getName() == arg0.getClass().getName()
this has only one value
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 1
this.currentSubs[] elements has only one value
this.currentSubs[].getClass().getName() == [java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 1
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVarAfterNew"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 2
arg1 == 1
size(this.currentSubs[]) == 1
size(arg0[]) == 2
this.currentSubs[] elements == this.tree.subnode.susbscript
this.tree.subnode.susbscript in this.currentSubs[]
===========================================================================
mLibrary.mData.order(java.lang.Object[], int):::EXIT
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.dao == orig(this.dao)
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.currentStackLevel == orig(this.tree.currentStackLevel)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.stack.mapLevel.getClass().getName())
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == return.getClass().getName()
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode == orig(this.tree.subnode)
this.tree.subnode.subs == orig(this.tree.subnode.subs)
this.tree.subnode.subs[] == orig(this.tree.subnode.subs[])
this.tree.subnode.key == orig(this.tree.subnode.key)
this.tree.subnode.key.toString == orig(this.tree.subnode.key.toString)
this.tree.subnode.susbscript == orig(this.tree.subnode.susbscript)
this.tree.subnode.susbscript.getClass().getName() == return.getClass().getName()
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.value == orig(this.tree.subnode.value)
this.tree.subnode.value.getClass().getName() == return.getClass().getName()
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.next == orig(this.tree.subnode.next)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
arg0[] == orig(arg0[])
return.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
return.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
return.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
size(this.currentSubs[])-1 == orig(size(this.currentSubs[]))
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 2
this.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 1
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVarAfterNew"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
arg0[] contains no nulls and has only one value, of length 2
return has only one value
return.getClass().getName() == java.lang.String.class
size(this.currentSubs[]) == 2
this.tree.subnode.value in this.currentSubs[]
return.getClass().getName() in this.currentSubs[].getClass().getName()
return.getClass().getName() in this.tree.subs[].getClass().getName()
return.getClass().getName() in this.tree.subnode.subs[].getClass().getName()
orig(this.currentSubs[]) elements == this.tree.subnode.susbscript
this.tree.subnode.susbscript in orig(this.currentSubs[])
return.getClass().getName() in orig(this.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mData.populateTree():::ENTER
this has only one value
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 2
this.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 1
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVarAfterNew"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
size(this.currentSubs[]) == 2
this.tree.subnode.value in this.currentSubs[]
===========================================================================
mLibrary.mData.populateTree():::EXIT
this.currentSubs == orig(this.currentSubs)
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.currentSubs[] == orig(this.currentSubs[])
this.dao == orig(this.dao)
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.currentStackLevel == orig(this.tree.currentStackLevel)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.stack.mapLevel.getClass().getName())
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode == orig(this.tree.subnode)
this.tree.subnode.subs == orig(this.tree.subnode.subs)
this.tree.subnode.subs[] == orig(this.tree.subnode.subs[])
this.tree.subnode.key == orig(this.tree.subnode.key)
this.tree.subnode.key.toString == orig(this.tree.subnode.key.toString)
this.tree.subnode.susbscript == orig(this.tree.subnode.susbscript)
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.value == orig(this.tree.subnode.value)
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.next == orig(this.tree.subnode.next)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 2
this.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 1
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVarAfterNew"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
size(this.currentSubs[]) == 2
this.tree.subnode.value in this.currentSubs[]
===========================================================================
mLibrary.mData.set(java.lang.Object):::ENTER
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree.susbscript.getClass().getName() == arg0.getClass().getName()
this.tree.subnode.key.toString one of { "locVar", "zzz" }
this.tree.subnode.stackLevel == null
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
size(this.currentSubs[]) one of { 1, 3, 4 }
===========================================================================
mLibrary.mData.set(java.lang.Object):::EXIT
this.currentSubs == orig(this.currentSubs)
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.currentSubs[] == orig(this.currentSubs[])
this.dao == orig(this.dao)
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.currentStackLevel == orig(this.tree.currentStackLevel)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == orig(arg0.getClass().getName())
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode.subs[].getClass().getName() == orig(this.tree.subnode.subs[].getClass().getName())
this.tree.subnode.susbscript.getClass().getName() == orig(arg0.getClass().getName())
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.value.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.subnode.value.getClass().getName() == orig(arg0.getClass().getName())
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
orig(this.tree.subnode.susbscript.getClass().getName()) == orig(arg0.getClass().getName())
size(this.tree.subnode.subs[]) == orig(size(this.tree.subnode.subs[]))
this.tree.subnode.key.toString one of { "%varPublica", "locVar", "locVarAfterNew" }
this.tree.subnode.stackLevel == null
orig(arg0.getClass().getName()) == java.lang.String.class
size(this.currentSubs[]) one of { 1, 3, 4 }
orig(this.tree.subnode.susbscript.getClass().getName()) in this.currentSubs[].getClass().getName()
orig(arg0.getClass().getName()) in this.currentSubs[].getClass().getName()
orig(this.tree.subnode.susbscript.getClass().getName()) in this.tree.subs[].getClass().getName()
orig(arg0.getClass().getName()) in this.tree.subs[].getClass().getName()
this.tree.subnode.subs[].getClass().getName() == orig(this.tree.subnode.subs[].getClass().getName()) (elementwise)
orig(this.tree.subnode.susbscript.getClass().getName()) in this.tree.subnode.subs[].getClass().getName()
orig(arg0.getClass().getName()) in this.tree.subnode.subs[].getClass().getName()
this.tree.subnode.value.getClass().getName() in orig(this.tree.subnode.subs[].getClass().getName())
orig(arg0.getClass().getName()) in orig(this.tree.subnode.subs[].getClass().getName())
===========================================================================
mLibrary.mData.stackingExcept(java.lang.Object[]):::ENTER
this.currentSubs.getClass().getName() == arg0.getClass().getName()
this has only one value
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 1
this.currentSubs[] elements has only one value
this.currentSubs[].getClass().getName() == [java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 0
this.tree.stack == null
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVar"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(this.currentSubs[]) == 1
size(arg0[]) == 1
===========================================================================
mLibrary.mData.stackingExcept(java.lang.Object[]):::EXIT
this.currentSubs == orig(this.currentSubs)
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.currentSubs[] == orig(this.currentSubs[])
this.dao == orig(this.dao)
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
arg0[] == orig(arg0[])
size(this.tree.subnode.subs[]) == orig(size(this.tree.subnode.subs[]))
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 1
this.currentSubs[] elements has only one value
this.currentSubs[].getClass().getName() == [java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 1
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "zzz"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next == null
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(this.currentSubs[]) == 1
this.currentSubs[] elements == this.tree.subnode.susbscript
this.tree.subnode.susbscript in this.currentSubs[]
===========================================================================
mLibrary.mData.subs(java.lang.Object[]):::ENTER
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree.subs.getClass().getName() == arg0.getClass().getName()
this.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
this.tree.subnode.key.toString one of { "locVar", "zzz" }
this.tree.subnode.stackLevel == null
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
size(this.currentSubs[]) one of { 1, 4 }
size(arg0[]) one of { 1, 3, 4 }
===========================================================================
mLibrary.mData.subs(java.lang.Object[]):::EXIT
this.currentSubs == return.currentSubs
this.currentSubs == orig(arg0)
this.currentSubs.getClass().getName() == return.currentSubs.getClass().getName()
this.currentSubs.getClass().getName() == return.tree.subs.getClass().getName()
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(arg0.getClass().getName())
this.dao == orig(this.dao)
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree == return.tree
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.currentStackLevel == return.tree.currentStackLevel
this.tree.currentStackLevel == orig(this.tree.currentStackLevel)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.keyValue == return.tree.keyValue
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == return.tree.keyValue.getClass().getName()
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == return.tree.killSubnodesOperation
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == return.tree.addSubnodesOperation
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == return.tree.mergeSubnodesOperation
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == return.tree.subs
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == return.tree.key
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == return.tree.susbscript
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == return.tree.susbscript.getClass().getName()
this.tree.susbscript.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
this.tree.isNumeric == return.tree.isNumeric
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode == return.tree.subnode
this.tree.subnode == orig(this.tree.subnode)
this.tree.subnode.subs == orig(this.tree.subnode.subs)
this.tree.subnode.subs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.tree.subnode.subs[] == orig(this.tree.subnode.subs[])
this.tree.subnode.key == orig(this.tree.subnode.key)
this.tree.subnode.key.toString == orig(this.tree.subnode.key.toString)
this.tree.subnode.susbscript == orig(this.tree.subnode.susbscript)
this.tree.subnode.susbscript.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.subnode.susbscript.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.stackLevel == orig(this.tree.subnode.stackLevel)
this.tree.subnode.value == orig(this.tree.subnode.value)
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.next == orig(this.tree.subnode.next)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == return.cacheOrderFunction
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == return.cacheOrderFunction.getClass().getName()
this.cacheOrderFunction.getClass().getName() == return.orderDataCache.cache.getClass().getName()
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == return.orderDataCache
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == return.orderDataCache.cache
this.orderDataCache.cache == orig(this.orderDataCache.cache)
arg0[] == orig(arg0[])
return == orig(this)
this.tree.subnode.key.toString one of { "locVar", "zzz" }
this.tree.subnode.stackLevel == null
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
return.dao == null
return.tree.subs[] contains no nulls and has only one value, of length 1
return.tree.subs[] elements has only one value
return.tree.subs[].getClass().getName() == [java.lang.String]
return.tree.subs[].getClass().getName() elements == java.lang.String.class
return.tree.key.toString == "@"
return.tree.stackLevel == null
return.tree.value == null
return.tree.parent == null
return.tree.next == null
return.tree.previous == null
size(this.currentSubs[]) one of { 1, 3, 4 }
size(return.currentSubs[]) one of { 1, 3, 4 }
size(return.tree.subs[]) == 1
return.tree.subs[] elements == this.tree.key
this.tree.key in return.tree.subs[]
return.tree.subs[] elements == this.tree.susbscript
this.tree.susbscript in return.tree.subs[]
this.tree.susbscript.getClass().getName() in return.currentSubs[].getClass().getName()
this.tree.susbscript.getClass().getName() in return.tree.subs[].getClass().getName()
this.tree.susbscript.getClass().getName() in orig(this.currentSubs[].getClass().getName())
this.tree.subnode.susbscript.getClass().getName() in return.currentSubs[].getClass().getName()
this.tree.subnode.susbscript.getClass().getName() in return.tree.subs[].getClass().getName()
this.tree.subnode.susbscript.getClass().getName() in orig(this.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mData.unstacking():::ENTER
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this has only one value
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 2
this.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 1
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVarAfterNew"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel == null
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
size(this.currentSubs[]) == 2
this.tree.subnode.value in this.currentSubs[]
===========================================================================
mLibrary.mData.unstacking():::EXIT
this.currentSubs == orig(this.currentSubs)
this.currentSubs.getClass().getName() == orig(this.currentSubs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subs.getClass().getName())
this.currentSubs.getClass().getName() == orig(this.tree.subnode.subs.getClass().getName())
this.currentSubs[] == orig(this.currentSubs[])
this.dao == orig(this.dao)
this.tree == br.com.innovatium.mumps2java.datastructure.Tree.this
this.tree == orig(this.tree)
this.tree == orig(this.tree.mergeSubnodesOperation.tree)
this.tree.stack == orig(this.tree.stack)
this.tree.stack.mapLevel == orig(this.tree.stack.mapLevel)
this.tree.keyValue == orig(this.tree.keyValue)
this.tree.keyValue.getClass().getName() == orig(this.tree.stack.mapLevel.getClass().getName())
this.tree.keyValue.getClass().getName() == orig(this.tree.keyValue.getClass().getName())
this.tree.killSubnodesOperation == orig(this.tree.killSubnodesOperation)
br.com.innovatium.mumps2java.datastructure.Tree.this == orig(br.com.innovatium.mumps2java.datastructure.Tree.this)
this.tree.addSubnodesOperation == orig(this.tree.addSubnodesOperation)
this.tree.mergeSubnodesOperation == orig(this.tree.mergeSubnodesOperation)
this.tree.mergeSubnodesOperation.dest == orig(this.tree.mergeSubnodesOperation.dest)
this.tree.mergeSubnodesOperation.orig == orig(this.tree.mergeSubnodesOperation.orig)
this.tree.subs == orig(this.tree.subs)
this.tree.subs[] == orig(this.tree.subs[])
this.tree.key == orig(this.tree.key)
this.tree.key.toString == orig(this.tree.key.toString)
this.tree.susbscript == orig(this.tree.susbscript)
this.tree.susbscript.getClass().getName() == orig(this.tree.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.susbscript.getClass().getName())
this.tree.susbscript.getClass().getName() == orig(this.tree.subnode.value.getClass().getName())
this.tree.isNumeric == orig(this.tree.isNumeric)
this.tree.stackLevel == orig(this.tree.stackLevel)
this.tree.value == orig(this.tree.value)
this.tree.parent == orig(this.tree.parent)
this.tree.subnode.isNumeric == orig(this.tree.subnode.isNumeric)
this.tree.subnode.parent == orig(this.tree.subnode.parent)
this.tree.subnode.subnode == orig(this.tree.subnode.subnode)
this.tree.subnode.next == orig(this.tree.subnode)
this.tree.subnode.previous == orig(this.tree.subnode.previous)
this.tree.next == orig(this.tree.next)
this.tree.previous == orig(this.tree.previous)
this.cacheOrderFunction == orig(this.cacheOrderFunction)
this.cacheOrderFunction.getClass().getName() == orig(this.cacheOrderFunction.getClass().getName())
this.cacheOrderFunction.getClass().getName() == orig(this.orderDataCache.cache.getClass().getName())
this.orderDataCache == orig(this.orderDataCache)
this.orderDataCache.cache == orig(this.orderDataCache.cache)
size(this.tree.subnode.subs[]) == orig(size(this.tree.subnode.subs[]))
this.currentSubs has only one value
this.currentSubs[] contains no nulls and has only one value, of length 2
this.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.currentSubs[].getClass().getName() elements == java.lang.String.class
this.tree has only one value
this.tree.currentStackLevel == 0
this.tree.stack has only one value
this.tree.keyValue has only one value
this.tree.killSubnodesOperation has only one value
br.com.innovatium.mumps2java.datastructure.Tree.this has only one value
this.tree.addSubnodesOperation has only one value
this.tree.mergeSubnodesOperation has only one value
this.tree.subs has only one value
this.tree.subnode has only one value
this.tree.subnode.subs has only one value
this.tree.subnode.subs[] contains no nulls and has only one value, of length 1
this.tree.subnode.subs[] elements has only one value
this.tree.subnode.key has only one value
this.tree.subnode.key.toString == "locVar"
this.tree.subnode.susbscript has only one value
this.tree.subnode.stackLevel has only one value
this.tree.subnode.value has only one value
this.tree.subnode.parent has only one value
this.tree.subnode.subnode == null
this.tree.subnode.next has only one value
this.cacheOrderFunction has only one value
this.orderDataCache has only one value
this.orderDataCache.cache has only one value
size(this.currentSubs[]) == 2
orig(this.tree.subnode.value) in this.currentSubs[]
===========================================================================
mLibrary.mFnc:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.methodMap.getClass().getName() == mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$ != null
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic != null
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == java.lang.Object[].class
mLibrary.mParent.m$.mDataPublic.currentSubs[] contains no nulls and has only one value, of length 3
mLibrary.mParent.m$.mDataPublic.currentSubs[] elements != null
mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName() == [java.lang.String, java.lang.Integer, java.lang.Integer]
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.tree != null
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction != null
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataPublic.orderDataCache != null
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal != null
mLibrary.mParent.m$.mDataGlobal.currentSubs == null
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.tree != null
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction != null
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache != null
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal != null
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements != null
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() elements == java.lang.String.class
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.tree != null
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction != null
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache != null
mLibrary.mParent.m$.countNewOperator one of { 0, 1 }
mLibrary.mParent.m$.methodMap.getClass().getName() == java.util.HashMap.class
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.system.status has only one value
mLibrary.mParent.m$.system.status != null
mLibrary.mParent.m$.system.license has only one value
mLibrary.mParent.m$.system.license != null
mLibrary.mParent.m$.system.encryption has only one value
mLibrary.mParent.m$.system.encryption != null
mLibrary.mParent.m$.system.process has only one value
mLibrary.mParent.m$.system.process != null
mLibrary.mParent.m$.system.version has only one value
mLibrary.mParent.m$.system.version != null
mLibrary.mParent.m$.system.obj == null
mLibrary.mParent.m$.writer.getClass().getName() == java.io.StringWriter.class
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses != null
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
size(mLibrary.mParent.m$.mDataPublic.currentSubs[]) == 3
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) one of { 1, 2 }
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.methodMap.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.methodMap.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
mLibrary.mParent.m$.methodMap.getClass().getName() != mLibrary.mParent.m$.writer.getClass().getName()
mLibrary.mParent.m$.writer.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
===========================================================================
mLibrary.mFnc:::OBJECT
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
this has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.Fnc == null
mLibrary.mParent.m$.Cmd == null
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
===========================================================================
mLibrary.mFnc.$get(java.lang.Object):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.getClass().getName() == mLibrary.mVar.class
===========================================================================
mLibrary.mFnc.$get(java.lang.Object):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs == orig(mLibrary.mParent.m$.mDataLocal.currentSubs)
mLibrary.mParent.m$.mDataLocal.currentSubs[] == orig(mLibrary.mParent.m$.mDataLocal.currentSubs[])
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
return.getClass().getName() == java.lang.String.class
return.getClass().getName() in mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName()
return.getClass().getName() in mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName()
===========================================================================
mLibrary.mFnc.$get(java.lang.Object, java.lang.Object):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.getClass().getName() == mLibrary.mVar.class
arg1 == null
===========================================================================
mLibrary.mFnc.$get(java.lang.Object, java.lang.Object):::EXIT273
return has only one value
===========================================================================
mLibrary.mFnc.$get(java.lang.Object, java.lang.Object):::EXIT275
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
return has only one value
orig(arg0) has only one value
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 2
===========================================================================
mLibrary.mFnc.$get(java.lang.Object, java.lang.Object):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs == orig(mLibrary.mParent.m$.mDataLocal.currentSubs)
mLibrary.mParent.m$.mDataLocal.currentSubs[] == orig(mLibrary.mParent.m$.mDataLocal.currentSubs[])
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
return.getClass().getName() == java.lang.String.class
return.getClass().getName() in mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName()
return.getClass().getName() in mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName()
===========================================================================
mLibrary.mFnc.$order(mLibrary.mVar):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0 has only one value
arg0.subs has only one value
arg0.subs[] contains no nulls and has only one value, of length 2
arg0.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 1
arg0.mData.currentSubs[] elements has only one value
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
size(arg0.subs[]) == 2
size(arg0.mData.currentSubs[]) == 1
===========================================================================
mLibrary.mFnc.$order(mLibrary.mVar):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mData.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
arg0.subs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.mData.currentSubs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.mData == orig(arg0.mData)
arg0.mData.dao == orig(arg0.mData.dao)
arg0.mData.tree == orig(arg0.mData.tree)
arg0.mData.cacheOrderFunction == orig(arg0.mData.cacheOrderFunction)
arg0.mData.orderDataCache == orig(arg0.mData.orderDataCache)
size(mLibrary.mParent.m$.mDataLocal.currentSubs[])-1 == orig(size(mLibrary.mParent.m$.mDataLocal.currentSubs[]))
size(arg0.mData.currentSubs[])-1 == orig(size(arg0.mData.currentSubs[]))
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.subs has only one value
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.subs[] contains no nulls and has only one value, of length 2
arg0.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 2
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
return has only one value
return.getClass().getName() == java.lang.String.class
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 2
size(arg0.subs[]) == 2
size(arg0.mData.currentSubs[]) == 2
return.getClass().getName() in mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName()
return.getClass().getName() in mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName()
return.getClass().getName() in arg0.subs[].getClass().getName()
return.getClass().getName() in arg0.mData.currentSubs[].getClass().getName()
return.getClass().getName() in orig(mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName())
return.getClass().getName() in orig(arg0.mData.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mFnc.$order(mLibrary.mVar, java.lang.Object):::ENTER
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 1
mLibrary.mParent.m$.mDataLocal.currentSubs[] elements has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0 has only one value
arg0.subs has only one value
arg0.subs[] contains no nulls and has only one value, of length 2
arg0.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 1
arg0.mData.currentSubs[] elements has only one value
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
arg1 has only one value
arg1.getClass().getName() == java.lang.Integer.class
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 1
size(arg0.subs[]) == 2
size(arg0.mData.currentSubs[]) == 1
arg1.getClass().getName() in mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName()
===========================================================================
mLibrary.mFnc.$order(mLibrary.mVar, java.lang.Object):::EXIT
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
mLibrary.mParent.m$.xecuteCount == orig(mLibrary.mParent.m$.xecuteCount)
mLibrary.mParent.m$.mDataPublic == orig(mLibrary.mParent.m$.mDataPublic)
mLibrary.mParent.m$.mDataPublic.currentSubs == orig(mLibrary.mParent.m$.mDataPublic.currentSubs)
mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataPublic.currentSubs[] == orig(mLibrary.mParent.m$.mDataPublic.currentSubs[])
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataPublic.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataGlobal.dao)
mLibrary.mParent.m$.mDataPublic.dao == orig(mLibrary.mParent.m$.mDataLocal.dao)
mLibrary.mParent.m$.mDataPublic.tree == orig(mLibrary.mParent.m$.mDataPublic.tree)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mData.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mData.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.orderDataCache == orig(mLibrary.mParent.m$.mDataPublic.orderDataCache)
mLibrary.mParent.m$.mDataGlobal == orig(mLibrary.mParent.m$.mDataGlobal)
mLibrary.mParent.m$.mDataGlobal.currentSubs == orig(mLibrary.mParent.m$.mDataGlobal.currentSubs)
mLibrary.mParent.m$.mDataGlobal.tree == orig(mLibrary.mParent.m$.mDataGlobal.tree)
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction)
mLibrary.mParent.m$.mDataGlobal.orderDataCache == orig(mLibrary.mParent.m$.mDataGlobal.orderDataCache)
mLibrary.mParent.m$.mDataLocal == orig(mLibrary.mParent.m$.mDataLocal)
mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName() == arg0.subs.getClass().getName()
mLibrary.mParent.m$.mDataLocal.tree == orig(mLibrary.mParent.m$.mDataLocal.tree)
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction == orig(mLibrary.mParent.m$.mDataLocal.cacheOrderFunction)
mLibrary.mParent.m$.mDataLocal.orderDataCache == orig(mLibrary.mParent.m$.mDataLocal.orderDataCache)
mLibrary.mParent.m$.countNewOperator == orig(mLibrary.mParent.m$.countNewOperator)
mLibrary.mParent.m$.methodMap == orig(mLibrary.mParent.m$.methodMap)
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.methodMap.getClass().getName())
mLibrary.mParent.m$.methodMap.getClass().getName() == orig(mLibrary.mParent.m$.stackedClasses.getClass().getName())
mLibrary.mParent.m$.mReq == orig(mLibrary.mParent.m$.mReq)
mLibrary.mParent.m$.mSes == orig(mLibrary.mParent.m$.mSes)
mLibrary.mParent.m$.Fnc == orig(mLibrary.mParent.m$.Fnc)
mLibrary.mParent.m$.Cmd == orig(mLibrary.mParent.m$.Cmd)
mLibrary.mParent.m$.system == orig(mLibrary.mParent.m$.system)
mLibrary.mParent.m$.system.status == orig(mLibrary.mParent.m$.system.status)
mLibrary.mParent.m$.system.license == orig(mLibrary.mParent.m$.system.license)
mLibrary.mParent.m$.system.encryption == orig(mLibrary.mParent.m$.system.encryption)
mLibrary.mParent.m$.system.process == orig(mLibrary.mParent.m$.system.process)
mLibrary.mParent.m$.system.version == orig(mLibrary.mParent.m$.system.version)
mLibrary.mParent.m$.system.obj == orig(mLibrary.mParent.m$.system.obj)
mLibrary.mParent.m$.writer == orig(mLibrary.mParent.m$.writer)
mLibrary.mParent.m$.writer.getClass().getName() == orig(mLibrary.mParent.m$.writer.getClass().getName())
mLibrary.mParent.m$.stackedClasses == orig(mLibrary.mParent.m$.stackedClasses)
arg0.subs == orig(arg0.subs)
arg0.subs.getClass().getName() == arg0.mData.currentSubs.getClass().getName()
arg0.subs.getClass().getName() == orig(mLibrary.mParent.m$.mDataPublic.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(mLibrary.mParent.m$.mDataLocal.currentSubs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.subs.getClass().getName())
arg0.subs.getClass().getName() == orig(arg0.mData.currentSubs.getClass().getName())
arg0.subs[] == orig(arg0.subs[])
arg0.mData == orig(arg0.mData)
arg0.mData.dao == orig(arg0.mData.dao)
arg0.mData.tree == orig(arg0.mData.tree)
arg0.mData.cacheOrderFunction == orig(arg0.mData.cacheOrderFunction)
arg0.mData.orderDataCache == orig(arg0.mData.orderDataCache)
size(mLibrary.mParent.m$.mDataLocal.currentSubs[])-1 == orig(size(mLibrary.mParent.m$.mDataLocal.currentSubs[]))
size(arg0.mData.currentSubs[])-1 == orig(size(arg0.mData.currentSubs[]))
mLibrary.mParent.m$.mDataPublic.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs has only one value
mLibrary.mParent.m$.mDataLocal.currentSubs[] contains no nulls and has only one value, of length 2
mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
mLibrary.mParent.m$.countNewOperator == 1
mLibrary.mParent.m$.methodMap has only one value
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system has only one value
mLibrary.mParent.m$.writer has only one value
arg0.subs has only one value
arg0.subs.getClass().getName() == java.lang.Object[].class
arg0.subs[] contains no nulls and has only one value, of length 2
arg0.subs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.subs[].getClass().getName() elements == java.lang.String.class
arg0.mData has only one value
arg0.mData.currentSubs has only one value
arg0.mData.currentSubs[] contains no nulls and has only one value, of length 2
arg0.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
arg0.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
arg0.mData.dao == null
arg0.mData.tree has only one value
arg0.mData.cacheOrderFunction has only one value
arg0.mData.orderDataCache has only one value
return has only one value
return.getClass().getName() == java.lang.String.class
size(mLibrary.mParent.m$.mDataLocal.currentSubs[]) == 2
size(arg0.subs[]) == 2
size(arg0.mData.currentSubs[]) == 2
return.getClass().getName() in mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName()
orig(arg1.getClass().getName()) in mLibrary.mParent.m$.mDataPublic.currentSubs[].getClass().getName()
return.getClass().getName() in mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName()
return.getClass().getName() in arg0.subs[].getClass().getName()
return.getClass().getName() in arg0.mData.currentSubs[].getClass().getName()
return.getClass().getName() in orig(mLibrary.mParent.m$.mDataLocal.currentSubs[].getClass().getName())
return.getClass().getName() in orig(arg0.mData.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mFnc.mFnc(mLibrary.mContext):::ENTER
arg0 has only one value
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc == null
mLibrary.mParent.m$ == null
arg0.Cmd == null
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mLibrary.mFnc.mFnc(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc == null
arg0.Cmd == null
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mLibrary.mFncUtil.castString(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == java.lang.String.class
===========================================================================
mLibrary.mFncUtil.castString(java.lang.Object):::EXIT78
===========================================================================
mLibrary.mFncUtil.castString(java.lang.Object):::EXIT
return == orig(arg0)
return != null
===========================================================================
mLibrary.mFncUtil.concat(java.lang.Object[], java.lang.Object[]):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg0.getClass().getName() == java.lang.Object[].class
size(arg0[]) == 1
size(arg1[]) == 3
===========================================================================
mLibrary.mFncUtil.concat(java.lang.Object[], java.lang.Object[]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 4
===========================================================================
mLibrary.mFncUtil.numberConverter(java.lang.Object):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.Integer.class
===========================================================================
mLibrary.mFncUtil.numberConverter(java.lang.Object):::EXIT300
===========================================================================
mLibrary.mFncUtil.numberConverter(java.lang.Object):::EXIT
return has only one value
===========================================================================
mLibrary.mFncUtil.toString(java.lang.Object):::ENTER
arg0 != null
===========================================================================
mLibrary.mFncUtil.toString(java.lang.Object):::EXIT
return != null
===========================================================================
mLibrary.mParent:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == mLibrary.mParent.m$.mDataLocal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() != mLibrary.mParent.m$.stackedClasses.getClass().getName()
===========================================================================
mLibrary.mParent:::OBJECT
===========================================================================
mLibrary.mParent.mParent(mLibrary.mContext):::ENTER
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataGlobal.cacheOrderFunction.getClass().getName()
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataLocal.cacheOrderFunction.getClass().getName()
arg0 has only one value
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
arg0.mDataPublic.cacheOrderFunction.getClass().getName() != arg0.stackedClasses.getClass().getName()
===========================================================================
mLibrary.mParent.mParent(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataPublic.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataGlobal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == arg0.mDataLocal.cacheOrderFunction.getClass().getName()
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mDataPublic.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mDataGlobal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == orig(arg0.mDataLocal.cacheOrderFunction.getClass().getName())
mLibrary.mParent.m$.stackedClasses.getClass().getName() == arg0.stackedClasses.getClass().getName()
mLibrary.mParent.m$.stackedClasses.getClass().getName() == orig(arg0.stackedClasses.getClass().getName())
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mLibrary.mVar:::OBJECT
this.subs.getClass().getName() == this.mData.currentSubs.getClass().getName()
this.subs.getClass().getName() == this.mData.tree.subs.getClass().getName()
this.mData.tree.key == this.mData.tree.susbscript
this.mData.cacheOrderFunction.getClass().getName() == this.mData.orderDataCache.cache.getClass().getName()
this.subs != null
this.subs.getClass().getName() == java.lang.Object[].class
this.subs[] elements != null
this.mData != null
this.mData.currentSubs.getClass().getName() == java.lang.Object[].class
this.mData.currentSubs[] elements != null
this.mData.dao == null
this.mData.tree != null
this.mData.tree.currentStackLevel one of { 0, 1 }
this.mData.tree.keyValue != null
this.mData.tree.keyValue.getClass().getName() == java.util.HashMap.class
this.mData.tree.killSubnodesOperation != null
this.mData.tree.addSubnodesOperation != null
this.mData.tree.mergeSubnodesOperation != null
this.mData.tree.subs != null
this.mData.tree.subs[] contains no nulls and has only one value, of length 1
this.mData.tree.subs[] elements has only one value
this.mData.tree.subs[] elements != null
this.mData.tree.subs[].getClass().getName() == [java.lang.String]
this.mData.tree.subs[].getClass().getName() elements == java.lang.String.class
this.mData.tree.key has only one value
this.mData.tree.key != null
this.mData.tree.key.toString == "@"
this.mData.tree.susbscript has only one value
this.mData.tree.susbscript != null
this.mData.tree.susbscript.getClass().getName() == java.lang.String.class
this.mData.tree.isNumeric == false
this.mData.tree.stackLevel == null
this.mData.tree.value == null
this.mData.tree.parent == null
this.mData.tree.next == null
this.mData.tree.previous == null
this.mData.cacheOrderFunction != null
this.mData.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
this.mData.orderDataCache != null
this.mData.orderDataCache.cache != null
size(this.mData.currentSubs[]) >= 1
size(this.mData.tree.subs[]) == 1
this.subs.getClass().getName() != this.mData.tree.keyValue.getClass().getName()
this.subs.getClass().getName() != this.mData.tree.susbscript.getClass().getName()
this.subs.getClass().getName() != this.mData.cacheOrderFunction.getClass().getName()
this.mData.tree.susbscript.getClass().getName() in this.subs[].getClass().getName()
this.mData.currentSubs.getClass().getName() != this.mData.tree.keyValue.getClass().getName()
this.mData.currentSubs.getClass().getName() != this.mData.tree.susbscript.getClass().getName()
this.mData.currentSubs.getClass().getName() != this.mData.cacheOrderFunction.getClass().getName()
this.mData.tree.susbscript.getClass().getName() in this.mData.currentSubs[].getClass().getName()
this.mData.tree.keyValue.getClass().getName() != this.mData.tree.susbscript.getClass().getName()
this.mData.tree.keyValue.getClass().getName() != this.mData.cacheOrderFunction.getClass().getName()
this.mData.tree.key in this.mData.tree.subs[]
this.mData.tree.subs[] elements == this.mData.tree.key
this.mData.tree.subs[] elements == this.mData.tree.susbscript
this.mData.tree.susbscript in this.mData.tree.subs[]
this.mData.tree.susbscript.getClass().getName() in this.mData.tree.subs[].getClass().getName()
this.mData.tree.susbscript.getClass().getName() != this.mData.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mVar.get():::ENTER
this.mData.currentSubs != null
this.mData.tree.subnode != null
size(this.subs[]) one of { 1, 3, 4 }
size(this.mData.currentSubs[]) one of { 1, 2, 3 }
===========================================================================
mLibrary.mVar.get():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.currentSubs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.tree.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.mData == orig(this.mData)
this.mData.currentSubs == orig(this.mData.currentSubs)
this.mData.currentSubs[] == orig(this.mData.currentSubs[])
this.mData.dao == orig(this.mData.dao)
this.mData.tree == orig(this.mData.tree)
this.mData.tree.currentStackLevel == orig(this.mData.tree.currentStackLevel)
this.mData.tree.stack == orig(this.mData.tree.stack)
this.mData.tree.keyValue == orig(this.mData.tree.keyValue)
this.mData.tree.keyValue.getClass().getName() == orig(this.mData.tree.keyValue.getClass().getName())
this.mData.tree.killSubnodesOperation == orig(this.mData.tree.killSubnodesOperation)
this.mData.tree.addSubnodesOperation == orig(this.mData.tree.addSubnodesOperation)
this.mData.tree.mergeSubnodesOperation == orig(this.mData.tree.mergeSubnodesOperation)
this.mData.tree.subs == orig(this.mData.tree.subs)
this.mData.tree.subs[] == orig(this.mData.tree.subs[])
this.mData.tree.key == orig(this.mData.tree.key)
this.mData.tree.key.toString == orig(this.mData.tree.key.toString)
this.mData.tree.susbscript == orig(this.mData.tree.susbscript)
this.mData.tree.susbscript.getClass().getName() == return.getClass().getName()
this.mData.tree.susbscript.getClass().getName() == orig(this.mData.tree.susbscript.getClass().getName())
this.mData.tree.isNumeric == orig(this.mData.tree.isNumeric)
this.mData.tree.stackLevel == orig(this.mData.tree.stackLevel)
this.mData.tree.value == orig(this.mData.tree.value)
this.mData.tree.parent == orig(this.mData.tree.parent)
this.mData.tree.subnode == orig(this.mData.tree.subnode)
this.mData.tree.next == orig(this.mData.tree.next)
this.mData.tree.previous == orig(this.mData.tree.previous)
this.mData.cacheOrderFunction == orig(this.mData.cacheOrderFunction)
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.cacheOrderFunction.getClass().getName())
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.orderDataCache.cache.getClass().getName())
this.mData.orderDataCache == orig(this.mData.orderDataCache)
this.mData.orderDataCache.cache == orig(this.mData.orderDataCache.cache)
this.mData.currentSubs != null
this.mData.tree.subnode != null
return.getClass().getName() == java.lang.String.class
size(this.subs[]) one of { 1, 3, 4 }
size(this.mData.currentSubs[]) one of { 1, 2, 3 }
this.subs.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.subs[].getClass().getName()
return.getClass().getName() in this.mData.currentSubs[].getClass().getName()
this.mData.tree.keyValue.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.mData.tree.subs[].getClass().getName()
this.mData.cacheOrderFunction.getClass().getName() != return.getClass().getName()
===========================================================================
mLibrary.mVar.getName():::ENTER
this has only one value
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.mData has only one value
this.mData.currentSubs has only one value
this.mData.currentSubs[] contains no nulls and has only one value, of length 1
this.mData.currentSubs[] elements has only one value
this.mData.currentSubs[].getClass().getName() == [java.lang.String]
this.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mData.tree has only one value
this.mData.tree.currentStackLevel == 0
this.mData.tree.stack == null
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.tree.subnode has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
size(this.subs[]) == 1
size(this.mData.currentSubs[]) == 1
===========================================================================
mLibrary.mVar.getName():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.currentSubs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.tree.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.mData == orig(this.mData)
this.mData.currentSubs == orig(this.mData.currentSubs)
this.mData.currentSubs[] == orig(this.mData.currentSubs[])
this.mData.dao == orig(this.mData.dao)
this.mData.tree == orig(this.mData.tree)
this.mData.tree.currentStackLevel == orig(this.mData.tree.currentStackLevel)
this.mData.tree.stack == orig(this.mData.tree.stack)
this.mData.tree.keyValue == orig(this.mData.tree.keyValue)
this.mData.tree.keyValue.getClass().getName() == orig(this.mData.tree.keyValue.getClass().getName())
this.mData.tree.killSubnodesOperation == orig(this.mData.tree.killSubnodesOperation)
this.mData.tree.addSubnodesOperation == orig(this.mData.tree.addSubnodesOperation)
this.mData.tree.mergeSubnodesOperation == orig(this.mData.tree.mergeSubnodesOperation)
this.mData.tree.subs == orig(this.mData.tree.subs)
this.mData.tree.subs[] == orig(this.mData.tree.subs[])
this.mData.tree.key == orig(this.mData.tree.key)
this.mData.tree.key.toString == orig(this.mData.tree.key.toString)
this.mData.tree.susbscript == orig(this.mData.tree.susbscript)
this.mData.tree.susbscript.getClass().getName() == orig(this.mData.tree.susbscript.getClass().getName())
this.mData.tree.isNumeric == orig(this.mData.tree.isNumeric)
this.mData.tree.stackLevel == orig(this.mData.tree.stackLevel)
this.mData.tree.value == orig(this.mData.tree.value)
this.mData.tree.parent == orig(this.mData.tree.parent)
this.mData.tree.subnode == orig(this.mData.tree.subnode)
this.mData.tree.next == orig(this.mData.tree.next)
this.mData.tree.previous == orig(this.mData.tree.previous)
this.mData.cacheOrderFunction == orig(this.mData.cacheOrderFunction)
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.cacheOrderFunction.getClass().getName())
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.orderDataCache.cache.getClass().getName())
this.mData.orderDataCache == orig(this.mData.orderDataCache)
this.mData.orderDataCache.cache == orig(this.mData.orderDataCache.cache)
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 1
this.subs[] elements has only one value
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.mData has only one value
this.mData.currentSubs has only one value
this.mData.currentSubs[] contains no nulls and has only one value, of length 1
this.mData.currentSubs[] elements has only one value
this.mData.currentSubs[].getClass().getName() == [java.lang.String]
this.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mData.tree has only one value
this.mData.tree.currentStackLevel == 0
this.mData.tree.stack == null
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.tree.subnode has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
return has only one value
return.toString == "zzz"
size(this.subs[]) == 1
size(this.mData.currentSubs[]) == 1
===========================================================================
mLibrary.mVar.getSubs():::ENTER
this.subs[].getClass().getName() elements == java.lang.String.class
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.mData has only one value
this.mData.currentSubs has only one value
this.mData.currentSubs[] contains no nulls and has only one value, of length 1
this.mData.currentSubs[] elements has only one value
this.mData.currentSubs[].getClass().getName() == [java.lang.String]
this.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mData.tree has only one value
this.mData.tree.currentStackLevel == 1
this.mData.tree.stack has only one value
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.tree.subnode has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
size(this.subs[]) one of { 1, 2 }
size(this.mData.currentSubs[]) == 1
===========================================================================
mLibrary.mVar.getSubs():::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == return.getClass().getName()
this.subs[] == orig(this.subs[])
this.mData == orig(this.mData)
this.mData.currentSubs == orig(this.mData.currentSubs)
this.mData.currentSubs.getClass().getName() == return.getClass().getName()
this.mData.currentSubs[] == orig(this.mData.currentSubs[])
this.mData.dao == orig(this.mData.dao)
this.mData.tree == orig(this.mData.tree)
this.mData.tree.currentStackLevel == orig(this.mData.tree.currentStackLevel)
this.mData.tree.stack == orig(this.mData.tree.stack)
this.mData.tree.keyValue == orig(this.mData.tree.keyValue)
this.mData.tree.keyValue.getClass().getName() == orig(this.mData.tree.keyValue.getClass().getName())
this.mData.tree.killSubnodesOperation == orig(this.mData.tree.killSubnodesOperation)
this.mData.tree.addSubnodesOperation == orig(this.mData.tree.addSubnodesOperation)
this.mData.tree.mergeSubnodesOperation == orig(this.mData.tree.mergeSubnodesOperation)
this.mData.tree.subs == orig(this.mData.tree.subs)
this.mData.tree.subs.getClass().getName() == return.getClass().getName()
this.mData.tree.subs[] == orig(this.mData.tree.subs[])
this.mData.tree.key == orig(this.mData.tree.key)
this.mData.tree.key.toString == orig(this.mData.tree.key.toString)
this.mData.tree.susbscript == orig(this.mData.tree.susbscript)
this.mData.tree.susbscript.getClass().getName() == orig(this.mData.tree.susbscript.getClass().getName())
this.mData.tree.isNumeric == orig(this.mData.tree.isNumeric)
this.mData.tree.stackLevel == orig(this.mData.tree.stackLevel)
this.mData.tree.value == orig(this.mData.tree.value)
this.mData.tree.parent == orig(this.mData.tree.parent)
this.mData.tree.subnode == orig(this.mData.tree.subnode)
this.mData.tree.next == orig(this.mData.tree.next)
this.mData.tree.previous == orig(this.mData.tree.previous)
this.mData.cacheOrderFunction == orig(this.mData.cacheOrderFunction)
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.cacheOrderFunction.getClass().getName())
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.orderDataCache.cache.getClass().getName())
this.mData.orderDataCache == orig(this.mData.orderDataCache)
this.mData.orderDataCache.cache == orig(this.mData.orderDataCache.cache)
return.getClass().getName() == orig(this.subs.getClass().getName())
return.getClass().getName() == orig(this.mData.currentSubs.getClass().getName())
return.getClass().getName() == orig(this.mData.tree.subs.getClass().getName())
this.subs[].getClass().getName() elements == java.lang.String.class
this.subs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.mData has only one value
this.mData.currentSubs has only one value
this.mData.currentSubs[] contains no nulls and has only one value, of length 1
this.mData.currentSubs[] elements has only one value
this.mData.currentSubs[].getClass().getName() == [java.lang.String]
this.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mData.tree has only one value
this.mData.tree.currentStackLevel == 1
this.mData.tree.stack has only one value
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.tree.subnode has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
return.getClass().getName() == java.lang.Object[].class
size(this.subs[]) one of { 1, 2 }
size(this.mData.currentSubs[]) == 1
size(return[]) one of { 1, 2 }
===========================================================================
mLibrary.mVar.mVar(java.lang.Object[], mLibrary.mData):::ENTER
arg0.getClass().getName() == arg1.currentSubs.getClass().getName()
arg0.getClass().getName() == arg1.tree.subs.getClass().getName()
arg1.tree.key == arg1.tree.susbscript
arg1.cacheOrderFunction.getClass().getName() == arg1.orderDataCache.cache.getClass().getName()
arg0 != null
arg0.getClass().getName() == java.lang.Object[].class
arg0[] elements != null
arg1 != null
arg1.currentSubs.getClass().getName() == java.lang.Object[].class
arg1.currentSubs[] elements != null
arg1.dao == null
arg1.tree != null
arg1.tree.currentStackLevel one of { 0, 1 }
arg1.tree.keyValue != null
arg1.tree.keyValue.getClass().getName() == java.util.HashMap.class
arg1.tree.killSubnodesOperation != null
arg1.tree.addSubnodesOperation != null
arg1.tree.mergeSubnodesOperation != null
arg1.tree.subs != null
arg1.tree.subs[] contains no nulls and has only one value, of length 1
arg1.tree.subs[] elements has only one value
arg1.tree.subs[] elements != null
arg1.tree.subs[].getClass().getName() == [java.lang.String]
arg1.tree.subs[].getClass().getName() elements == java.lang.String.class
arg1.tree.key has only one value
arg1.tree.key != null
arg1.tree.key.toString == "@"
arg1.tree.susbscript has only one value
arg1.tree.susbscript != null
arg1.tree.susbscript.getClass().getName() == java.lang.String.class
arg1.tree.isNumeric == false
arg1.tree.stackLevel == null
arg1.tree.value == null
arg1.tree.parent == null
arg1.tree.next == null
arg1.tree.previous == null
arg1.cacheOrderFunction != null
arg1.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg1.orderDataCache != null
arg1.orderDataCache.cache != null
size(arg1.currentSubs[]) >= 1
size(arg1.tree.subs[]) == 1
arg0.getClass().getName() != arg1.tree.keyValue.getClass().getName()
arg0.getClass().getName() != arg1.tree.susbscript.getClass().getName()
arg0.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
arg1.currentSubs.getClass().getName() != arg1.tree.keyValue.getClass().getName()
arg1.currentSubs.getClass().getName() != arg1.tree.susbscript.getClass().getName()
arg1.currentSubs.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
arg1.tree.susbscript.getClass().getName() in arg1.currentSubs[].getClass().getName()
arg1.tree.keyValue.getClass().getName() != arg1.tree.susbscript.getClass().getName()
arg1.tree.keyValue.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
arg1.tree.key in arg1.tree.subs[]
arg1.tree.subs[] elements == arg1.tree.key
arg1.tree.subs[] elements == arg1.tree.susbscript
arg1.tree.susbscript in arg1.tree.subs[]
arg1.tree.susbscript.getClass().getName() in arg1.tree.subs[].getClass().getName()
arg1.tree.susbscript.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mVar.mVar(java.lang.Object[], mLibrary.mData):::EXIT
this.subs == orig(arg0)
this.subs.getClass().getName() == arg1.currentSubs.getClass().getName()
this.subs.getClass().getName() == arg1.tree.subs.getClass().getName()
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs.getClass().getName() == orig(arg1.tree.subs.getClass().getName())
this.mData == orig(arg1)
this.mData.currentSubs == arg1.currentSubs
this.mData.currentSubs.getClass().getName() == arg1.currentSubs.getClass().getName()
this.mData.tree == arg1.tree
this.mData.tree.currentStackLevel == arg1.tree.currentStackLevel
this.mData.tree.stack == arg1.tree.stack
this.mData.tree.keyValue == arg1.tree.keyValue
this.mData.tree.keyValue.getClass().getName() == arg1.tree.keyValue.getClass().getName()
this.mData.tree.killSubnodesOperation == arg1.tree.killSubnodesOperation
this.mData.tree.addSubnodesOperation == arg1.tree.addSubnodesOperation
this.mData.tree.mergeSubnodesOperation == arg1.tree.mergeSubnodesOperation
this.mData.tree.subs == arg1.tree.subs
this.mData.tree.key == arg1.tree.key
this.mData.tree.susbscript == arg1.tree.susbscript
this.mData.tree.susbscript.getClass().getName() == arg1.tree.susbscript.getClass().getName()
this.mData.tree.isNumeric == arg1.tree.isNumeric
this.mData.tree.subnode == arg1.tree.subnode
this.mData.cacheOrderFunction == arg1.cacheOrderFunction
this.mData.cacheOrderFunction.getClass().getName() == arg1.cacheOrderFunction.getClass().getName()
this.mData.orderDataCache == arg1.orderDataCache
this.mData.orderDataCache.cache == arg1.orderDataCache.cache
this.mData.orderDataCache.cache.getClass().getName() == arg1.cacheOrderFunction.getClass().getName()
arg0[] == orig(arg0[])
arg1.currentSubs == orig(arg1.currentSubs)
arg1.currentSubs.getClass().getName() == orig(arg1.currentSubs.getClass().getName())
arg1.currentSubs[] == orig(arg1.currentSubs[])
arg1.dao == orig(arg1.dao)
arg1.tree == orig(arg1.tree)
arg1.tree.currentStackLevel == orig(arg1.tree.currentStackLevel)
arg1.tree.stack == orig(arg1.tree.stack)
arg1.tree.keyValue == orig(arg1.tree.keyValue)
arg1.tree.keyValue.getClass().getName() == orig(arg1.tree.keyValue.getClass().getName())
arg1.tree.killSubnodesOperation == orig(arg1.tree.killSubnodesOperation)
arg1.tree.addSubnodesOperation == orig(arg1.tree.addSubnodesOperation)
arg1.tree.mergeSubnodesOperation == orig(arg1.tree.mergeSubnodesOperation)
arg1.tree.subs == orig(arg1.tree.subs)
arg1.tree.subs[] == orig(arg1.tree.subs[])
arg1.tree.key == arg1.tree.susbscript
arg1.tree.key == orig(arg1.tree.key)
arg1.tree.key.toString == orig(arg1.tree.key.toString)
arg1.tree.susbscript == orig(arg1.tree.susbscript)
arg1.tree.susbscript.getClass().getName() == orig(arg1.tree.susbscript.getClass().getName())
arg1.tree.isNumeric == orig(arg1.tree.isNumeric)
arg1.tree.stackLevel == orig(arg1.tree.stackLevel)
arg1.tree.value == orig(arg1.tree.value)
arg1.tree.parent == orig(arg1.tree.parent)
arg1.tree.subnode == orig(arg1.tree.subnode)
arg1.tree.next == orig(arg1.tree.next)
arg1.tree.previous == orig(arg1.tree.previous)
arg1.cacheOrderFunction == orig(arg1.cacheOrderFunction)
arg1.cacheOrderFunction.getClass().getName() == arg1.orderDataCache.cache.getClass().getName()
arg1.cacheOrderFunction.getClass().getName() == orig(arg1.cacheOrderFunction.getClass().getName())
arg1.cacheOrderFunction.getClass().getName() == orig(arg1.orderDataCache.cache.getClass().getName())
arg1.orderDataCache == orig(arg1.orderDataCache)
arg1.orderDataCache.cache == orig(arg1.orderDataCache.cache)
arg0[] elements != null
arg1.currentSubs.getClass().getName() == java.lang.Object[].class
arg1.currentSubs[] elements != null
arg1.dao == null
arg1.tree != null
arg1.tree.currentStackLevel one of { 0, 1 }
arg1.tree.keyValue != null
arg1.tree.keyValue.getClass().getName() == java.util.HashMap.class
arg1.tree.killSubnodesOperation != null
arg1.tree.addSubnodesOperation != null
arg1.tree.mergeSubnodesOperation != null
arg1.tree.subs != null
arg1.tree.subs[] contains no nulls and has only one value, of length 1
arg1.tree.subs[] elements has only one value
arg1.tree.subs[] elements != null
arg1.tree.subs[].getClass().getName() == [java.lang.String]
arg1.tree.subs[].getClass().getName() elements == java.lang.String.class
arg1.tree.key has only one value
arg1.tree.key != null
arg1.tree.key.toString == "@"
arg1.tree.susbscript has only one value
arg1.tree.susbscript != null
arg1.tree.susbscript.getClass().getName() == java.lang.String.class
arg1.tree.isNumeric == false
arg1.tree.stackLevel == null
arg1.tree.value == null
arg1.tree.parent == null
arg1.tree.next == null
arg1.tree.previous == null
arg1.cacheOrderFunction != null
arg1.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg1.orderDataCache != null
arg1.orderDataCache.cache != null
size(arg1.currentSubs[]) >= 1
size(arg1.tree.subs[]) == 1
this.subs.getClass().getName() != arg1.tree.keyValue.getClass().getName()
this.subs.getClass().getName() != arg1.tree.susbscript.getClass().getName()
this.subs.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
arg1.tree.susbscript.getClass().getName() in this.subs[].getClass().getName()
arg1.tree.susbscript.getClass().getName() in this.mData.currentSubs[].getClass().getName()
arg1.tree.key in this.mData.tree.subs[]
this.mData.tree.subs[] elements == arg1.tree.key
arg1.tree.susbscript in this.mData.tree.subs[]
this.mData.tree.subs[] elements == arg1.tree.susbscript
arg1.tree.susbscript.getClass().getName() in this.mData.tree.subs[].getClass().getName()
arg1.currentSubs.getClass().getName() != arg1.tree.keyValue.getClass().getName()
arg1.currentSubs.getClass().getName() != arg1.tree.susbscript.getClass().getName()
arg1.currentSubs.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
arg1.tree.susbscript.getClass().getName() in arg1.currentSubs[].getClass().getName()
arg1.tree.keyValue.getClass().getName() != arg1.tree.susbscript.getClass().getName()
arg1.tree.keyValue.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
arg1.tree.key in arg1.tree.subs[]
arg1.tree.subs[] elements == arg1.tree.key
arg1.tree.subs[] elements == arg1.tree.susbscript
arg1.tree.susbscript in arg1.tree.subs[]
arg1.tree.susbscript.getClass().getName() in arg1.tree.subs[].getClass().getName()
arg1.tree.susbscript.getClass().getName() != arg1.cacheOrderFunction.getClass().getName()
===========================================================================
mLibrary.mVar.order(int):::ENTER
this has only one value
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 2
this.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.mData has only one value
this.mData.currentSubs has only one value
this.mData.currentSubs[] contains no nulls and has only one value, of length 1
this.mData.currentSubs[] elements has only one value
this.mData.currentSubs[].getClass().getName() == [java.lang.String]
this.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mData.tree has only one value
this.mData.tree.currentStackLevel == 1
this.mData.tree.stack has only one value
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.tree.subnode has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
arg0 == 1
size(this.subs[]) == 2
size(this.mData.currentSubs[]) == 1
===========================================================================
mLibrary.mVar.order(int):::EXIT
this.subs == this.mData.currentSubs
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.currentSubs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.tree.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.mData == orig(this.mData)
this.mData.dao == orig(this.mData.dao)
this.mData.tree == orig(this.mData.tree)
this.mData.tree.currentStackLevel == orig(this.mData.tree.currentStackLevel)
this.mData.tree.stack == orig(this.mData.tree.stack)
this.mData.tree.keyValue == orig(this.mData.tree.keyValue)
this.mData.tree.keyValue.getClass().getName() == orig(this.mData.tree.keyValue.getClass().getName())
this.mData.tree.killSubnodesOperation == orig(this.mData.tree.killSubnodesOperation)
this.mData.tree.addSubnodesOperation == orig(this.mData.tree.addSubnodesOperation)
this.mData.tree.mergeSubnodesOperation == orig(this.mData.tree.mergeSubnodesOperation)
this.mData.tree.subs == orig(this.mData.tree.subs)
this.mData.tree.subs[] == orig(this.mData.tree.subs[])
this.mData.tree.key == orig(this.mData.tree.key)
this.mData.tree.key.toString == orig(this.mData.tree.key.toString)
this.mData.tree.susbscript == orig(this.mData.tree.susbscript)
this.mData.tree.susbscript.getClass().getName() == return.getClass().getName()
this.mData.tree.isNumeric == orig(this.mData.tree.isNumeric)
this.mData.tree.stackLevel == orig(this.mData.tree.stackLevel)
this.mData.tree.value == orig(this.mData.tree.value)
this.mData.tree.parent == orig(this.mData.tree.parent)
this.mData.tree.subnode == orig(this.mData.tree.subnode)
this.mData.tree.next == orig(this.mData.tree.next)
this.mData.tree.previous == orig(this.mData.tree.previous)
this.mData.cacheOrderFunction == orig(this.mData.cacheOrderFunction)
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.cacheOrderFunction.getClass().getName())
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.orderDataCache.cache.getClass().getName())
this.mData.orderDataCache == orig(this.mData.orderDataCache)
this.mData.orderDataCache.cache == orig(this.mData.orderDataCache.cache)
return.getClass().getName() == orig(this.mData.tree.susbscript.getClass().getName())
size(this.mData.currentSubs[])-1 == orig(size(this.mData.currentSubs[]))
this.subs has only one value
this.subs[] contains no nulls and has only one value, of length 2
this.subs[].getClass().getName() == [java.lang.String, java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.mData has only one value
this.mData.currentSubs[] contains no nulls and has only one value, of length 2
this.mData.currentSubs[].getClass().getName() == [java.lang.String, java.lang.String]
this.mData.currentSubs[].getClass().getName() elements == java.lang.String.class
this.mData.tree has only one value
this.mData.tree.currentStackLevel == 1
this.mData.tree.stack has only one value
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.tree.subnode has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
return has only one value
return.getClass().getName() == java.lang.String.class
size(this.subs[]) == 2
size(this.mData.currentSubs[]) == 2
return.getClass().getName() in this.subs[].getClass().getName()
return.getClass().getName() in this.mData.currentSubs[].getClass().getName()
return.getClass().getName() in this.mData.tree.subs[].getClass().getName()
return.getClass().getName() in orig(this.mData.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mVar.set(java.lang.Object):::ENTER
this.mData.tree.susbscript.getClass().getName() == arg0.getClass().getName()
this.mData.currentSubs[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String] }
size(this.subs[]) one of { 1, 3, 4 }
size(this.mData.currentSubs[]) one of { 1, 4 }
===========================================================================
mLibrary.mVar.set(java.lang.Object):::EXIT
this.subs == this.mData.currentSubs
this.subs == orig(this.subs)
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.currentSubs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.tree.subs.getClass().getName())
this.subs[] == orig(this.subs[])
this.mData == orig(this.mData)
this.mData.dao == orig(this.mData.dao)
this.mData.tree == orig(this.mData.tree)
this.mData.tree.currentStackLevel == orig(this.mData.tree.currentStackLevel)
this.mData.tree.stack == orig(this.mData.tree.stack)
this.mData.tree.keyValue == orig(this.mData.tree.keyValue)
this.mData.tree.keyValue.getClass().getName() == orig(this.mData.tree.keyValue.getClass().getName())
this.mData.tree.killSubnodesOperation == orig(this.mData.tree.killSubnodesOperation)
this.mData.tree.addSubnodesOperation == orig(this.mData.tree.addSubnodesOperation)
this.mData.tree.mergeSubnodesOperation == orig(this.mData.tree.mergeSubnodesOperation)
this.mData.tree.subs == orig(this.mData.tree.subs)
this.mData.tree.subs[] == orig(this.mData.tree.subs[])
this.mData.tree.key == orig(this.mData.tree.key)
this.mData.tree.key.toString == orig(this.mData.tree.key.toString)
this.mData.tree.susbscript == orig(this.mData.tree.susbscript)
this.mData.tree.susbscript.getClass().getName() == orig(arg0.getClass().getName())
this.mData.tree.isNumeric == orig(this.mData.tree.isNumeric)
this.mData.tree.stackLevel == orig(this.mData.tree.stackLevel)
this.mData.tree.value == orig(this.mData.tree.value)
this.mData.tree.parent == orig(this.mData.tree.parent)
this.mData.tree.next == orig(this.mData.tree.next)
this.mData.tree.previous == orig(this.mData.tree.previous)
this.mData.cacheOrderFunction == orig(this.mData.cacheOrderFunction)
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.cacheOrderFunction.getClass().getName())
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.orderDataCache.cache.getClass().getName())
this.mData.orderDataCache == orig(this.mData.orderDataCache)
this.mData.orderDataCache.cache == orig(this.mData.orderDataCache.cache)
orig(arg0.getClass().getName()) == java.lang.String.class
size(this.subs[]) one of { 1, 3, 4 }
size(this.mData.currentSubs[]) one of { 1, 3, 4 }
orig(arg0.getClass().getName()) in this.subs[].getClass().getName()
orig(arg0.getClass().getName()) in this.mData.currentSubs[].getClass().getName()
orig(arg0.getClass().getName()) in this.mData.tree.subs[].getClass().getName()
orig(arg0.getClass().getName()) in orig(this.mData.currentSubs[].getClass().getName())
===========================================================================
mLibrary.mVar.var(java.lang.Object[]):::ENTER
this.subs.getClass().getName() == arg0.getClass().getName()
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.mData has only one value
this.mData.tree has only one value
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
size(this.subs[]) == 1
size(this.mData.currentSubs[]) one of { 1, 2, 4 }
size(arg0[]) == 3
===========================================================================
mLibrary.mVar.var(java.lang.Object[]):::EXIT
this.subs == orig(this.subs)
this.subs.getClass().getName() == return.subs.getClass().getName()
this.subs.getClass().getName() == return.mData.currentSubs.getClass().getName()
this.subs.getClass().getName() == orig(this.subs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.currentSubs.getClass().getName())
this.subs.getClass().getName() == orig(this.mData.tree.subs.getClass().getName())
this.subs.getClass().getName() == orig(arg0.getClass().getName())
this.subs[] == orig(this.subs[])
this.mData == return.mData
this.mData == orig(this.mData)
this.mData.currentSubs == return.mData.currentSubs
this.mData.currentSubs == orig(this.mData.currentSubs)
this.mData.currentSubs[] == orig(this.mData.currentSubs[])
this.mData.dao == orig(this.mData.dao)
this.mData.tree == return.mData.tree
this.mData.tree == orig(this.mData.tree)
this.mData.tree.currentStackLevel == orig(this.mData.tree.currentStackLevel)
this.mData.tree.stack == orig(this.mData.tree.stack)
this.mData.tree.keyValue == orig(this.mData.tree.keyValue)
this.mData.tree.keyValue.getClass().getName() == orig(this.mData.tree.keyValue.getClass().getName())
this.mData.tree.killSubnodesOperation == orig(this.mData.tree.killSubnodesOperation)
this.mData.tree.addSubnodesOperation == orig(this.mData.tree.addSubnodesOperation)
this.mData.tree.mergeSubnodesOperation == orig(this.mData.tree.mergeSubnodesOperation)
this.mData.tree.subs == orig(this.mData.tree.subs)
this.mData.tree.subs[] == orig(this.mData.tree.subs[])
this.mData.tree.key == orig(this.mData.tree.key)
this.mData.tree.key.toString == orig(this.mData.tree.key.toString)
this.mData.tree.susbscript == orig(this.mData.tree.susbscript)
this.mData.tree.susbscript.getClass().getName() == orig(this.mData.tree.susbscript.getClass().getName())
this.mData.tree.isNumeric == orig(this.mData.tree.isNumeric)
this.mData.tree.stackLevel == orig(this.mData.tree.stackLevel)
this.mData.tree.value == orig(this.mData.tree.value)
this.mData.tree.parent == orig(this.mData.tree.parent)
this.mData.tree.subnode == orig(this.mData.tree.subnode)
this.mData.tree.next == orig(this.mData.tree.next)
this.mData.tree.previous == orig(this.mData.tree.previous)
this.mData.cacheOrderFunction == return.mData.cacheOrderFunction
this.mData.cacheOrderFunction == orig(this.mData.cacheOrderFunction)
this.mData.cacheOrderFunction.getClass().getName() == return.mData.cacheOrderFunction.getClass().getName()
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.cacheOrderFunction.getClass().getName())
this.mData.cacheOrderFunction.getClass().getName() == orig(this.mData.orderDataCache.cache.getClass().getName())
this.mData.orderDataCache == return.mData.orderDataCache
this.mData.orderDataCache == orig(this.mData.orderDataCache)
this.mData.orderDataCache.cache == orig(this.mData.orderDataCache.cache)
arg0[] == orig(arg0[])
this.subs[].getClass().getName() == [java.lang.String]
this.subs[].getClass().getName() elements == java.lang.String.class
this.mData has only one value
this.mData.tree has only one value
this.mData.tree.keyValue has only one value
this.mData.tree.killSubnodesOperation has only one value
this.mData.tree.addSubnodesOperation has only one value
this.mData.tree.mergeSubnodesOperation has only one value
this.mData.tree.subs has only one value
this.mData.cacheOrderFunction has only one value
this.mData.orderDataCache has only one value
this.mData.orderDataCache.cache has only one value
return.subs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.Integer, java.lang.String]
return.mData.dao == null
size(this.subs[]) == 1
size(this.mData.currentSubs[]) one of { 1, 2, 4 }
size(return.subs[]) == 4
size(return.mData.currentSubs[]) one of { 1, 2, 4 }
this.mData.tree.susbscript.getClass().getName() in return.subs[].getClass().getName()
this.mData.tree.susbscript.getClass().getName() in return.mData.currentSubs[].getClass().getName()
===========================================================================
mSystem.Encryption:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Encryption:::OBJECT
this has only one value
===========================================================================
mSystem.Encryption.Encryption(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Encryption.Encryption(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mSystem.License:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.License:::OBJECT
this has only one value
===========================================================================
mSystem.License.License(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.License.License(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mSystem.Process:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Process:::OBJECT
this has only one value
===========================================================================
mSystem.Process.Process(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Process.Process(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mSystem.Status:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Status:::OBJECT
this has only one value
===========================================================================
mSystem.Status.Status(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Status.Status(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mSystem.Version:::CLASS
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Version:::OBJECT
this has only one value
===========================================================================
mSystem.Version.Version(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.Version.Version(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
===========================================================================
mSystem.mSystem:::OBJECT
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataGlobal.currentSubs
mLibrary.mParent.m$.mDataPublic.currentSubs == mLibrary.mParent.m$.mDataLocal.currentSubs
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataGlobal.dao
mLibrary.mParent.m$.mDataPublic.dao == mLibrary.mParent.m$.mDataLocal.dao
this has only one value
this.status has only one value
mLibrary.mParent.m$ has only one value
mLibrary.mParent.m$.xecuteCount == 0
mLibrary.mParent.m$.mDataPublic has only one value
mLibrary.mParent.m$.mDataGlobal has only one value
mLibrary.mParent.m$.mDataLocal has only one value
mLibrary.mParent.m$.countNewOperator == 0
mLibrary.mParent.m$.methodMap == null
mLibrary.mParent.m$.mReq == null
mLibrary.mParent.m$.mSes == null
mLibrary.mParent.m$.Fnc has only one value
mLibrary.mParent.m$.Cmd has only one value
mLibrary.mParent.m$.system == null
mLibrary.mParent.m$.writer == null
mLibrary.mParent.m$.stackedClasses has only one value
mLibrary.mParent.m$.stackedClasses.getClass().getName() == java.util.HashMap.class
this.license has only one value
this.encryption has only one value
this.process has only one value
this.version has only one value
this.obj == null
mLibrary.mParent.m$.mDataPublic.currentSubs == null
mLibrary.mParent.m$.mDataPublic.dao == null
mLibrary.mParent.m$.mDataPublic.tree has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
mLibrary.mParent.m$.mDataPublic.orderDataCache has only one value
mLibrary.mParent.m$.mDataGlobal.tree has only one value
mLibrary.mParent.m$.mDataGlobal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataGlobal.orderDataCache has only one value
mLibrary.mParent.m$.mDataLocal.tree has only one value
mLibrary.mParent.m$.mDataLocal.cacheOrderFunction has only one value
mLibrary.mParent.m$.mDataLocal.orderDataCache has only one value
===========================================================================
mSystem.mSystem.mSystem(mLibrary.mContext):::ENTER
arg0 == mLibrary.mParent.m$
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.cacheOrderFunction.getClass().getName() == java.util.HashSet.class
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
mLibrary.mParent.m$ has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
arg0.stackedClasses.getClass().getName() == java.util.HashMap.class
===========================================================================
mSystem.mSystem.mSystem(mLibrary.mContext):::EXIT
mLibrary.mParent.m$ == orig(arg0)
mLibrary.mParent.m$ == orig(mLibrary.mParent.m$)
arg0.xecuteCount == orig(arg0.xecuteCount)
arg0.mDataPublic == orig(arg0.mDataPublic)
arg0.mDataPublic.currentSubs == orig(arg0.mDataPublic.currentSubs)
arg0.mDataPublic.dao == orig(arg0.mDataPublic.dao)
arg0.mDataPublic.tree == orig(arg0.mDataPublic.tree)
arg0.mDataPublic.cacheOrderFunction == orig(arg0.mDataPublic.cacheOrderFunction)
arg0.mDataPublic.orderDataCache == orig(arg0.mDataPublic.orderDataCache)
arg0.mDataGlobal == orig(arg0.mDataGlobal)
arg0.mDataGlobal.currentSubs == orig(arg0.mDataGlobal.currentSubs)
arg0.mDataGlobal.dao == orig(arg0.mDataGlobal.dao)
arg0.mDataGlobal.tree == orig(arg0.mDataGlobal.tree)
arg0.mDataGlobal.cacheOrderFunction == orig(arg0.mDataGlobal.cacheOrderFunction)
arg0.mDataGlobal.orderDataCache == orig(arg0.mDataGlobal.orderDataCache)
arg0.mDataLocal == orig(arg0.mDataLocal)
arg0.mDataLocal.currentSubs == orig(arg0.mDataLocal.currentSubs)
arg0.mDataLocal.dao == orig(arg0.mDataLocal.dao)
arg0.mDataLocal.tree == orig(arg0.mDataLocal.tree)
arg0.mDataLocal.cacheOrderFunction == orig(arg0.mDataLocal.cacheOrderFunction)
arg0.mDataLocal.orderDataCache == orig(arg0.mDataLocal.orderDataCache)
arg0.countNewOperator == orig(arg0.countNewOperator)
arg0.methodMap == orig(arg0.methodMap)
arg0.mReq == orig(arg0.mReq)
arg0.mSes == orig(arg0.mSes)
arg0.Fnc == orig(arg0.Fnc)
arg0.Cmd == orig(arg0.Cmd)
arg0.system == orig(arg0.system)
arg0.writer == orig(arg0.writer)
arg0.stackedClasses == orig(arg0.stackedClasses)
arg0.xecuteCount == 0
arg0.mDataPublic has only one value
arg0.mDataPublic.currentSubs == null
arg0.mDataPublic.dao == null
arg0.mDataPublic.tree has only one value
arg0.mDataPublic.cacheOrderFunction has only one value
arg0.mDataPublic.orderDataCache has only one value
arg0.mDataGlobal has only one value
arg0.mDataGlobal.currentSubs == null
arg0.mDataGlobal.dao == null
arg0.mDataGlobal.tree has only one value
arg0.mDataGlobal.cacheOrderFunction has only one value
arg0.mDataGlobal.orderDataCache has only one value
arg0.mDataLocal has only one value
arg0.mDataLocal.currentSubs == null
arg0.mDataLocal.dao == null
arg0.mDataLocal.tree has only one value
arg0.mDataLocal.cacheOrderFunction has only one value
arg0.mDataLocal.orderDataCache has only one value
arg0.countNewOperator == 0
arg0.methodMap == null
arg0.mReq == null
arg0.mSes == null
arg0.Fnc has only one value
arg0.Cmd has only one value
arg0.system == null
arg0.writer == null
arg0.stackedClasses has only one value
Exiting Daikon.
