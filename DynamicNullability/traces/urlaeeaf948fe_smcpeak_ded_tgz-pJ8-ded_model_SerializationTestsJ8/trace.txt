Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
ded.model.ArrowStyle:::CLASS
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
ded.model.ArrowStyle.AS_NONE.description has only one value
ded.model.ArrowStyle.AS_NONE.description.toString == "None"
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == "Filled triangle"
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == "Double angle"
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.ArrowStyle:::OBJECT
this.description.toString one of { "Double angle", "Filled triangle", "None" }
===========================================================================
ded.model.ArrowStyle.ArrowStyle(java.lang.String, int, java.lang.String):::ENTER
arg0.toString one of { "AS_DOUBLE_ANGLE", "AS_FILLED_TRIANGLE", "AS_NONE" }
arg1 one of { 0, 1, 2 }
arg2.toString one of { "Double angle", "Filled triangle", "None" }
===========================================================================
ded.model.ArrowStyle.ArrowStyle(java.lang.String, int, java.lang.String):::EXIT
this.description == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "AS_DOUBLE_ANGLE", "AS_FILLED_TRIANGLE", "AS_NONE" }
arg2.toString one of { "Double angle", "Filled triangle", "None" }
===========================================================================
ded.model.ArrowStyle.values():::ENTER
===========================================================================
ded.model.ArrowStyle.values():::EXIT
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == return.getClass().getName()
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].description contains no nulls and has only one value, of length 3
return[].description.toString == [None, Filled triangle, Double angle]
return[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
size(return[]) == 3
===========================================================================
ded.model.Diagram$ElementFilter:::OBJECT
this has only one value
===========================================================================
ded.model.Diagram$ElementFilter.ElementFilter():::EXIT
===========================================================================
ded.model.Diagram$ElementFilter.testEntity(ded.model.Entity):::ENTER
ded.model.Entity.defaultShape has only one value
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
arg0.shape.displayName.toString one of { "Ellipse", "No shape" }
arg0.shape.numParams == 0
arg0.fillColor has only one value
arg0.fillColor.toString == "Gray"
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.name.toString one of { "e1", "e2" }
arg0.nameAlign has only one value
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shapeParams == null
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName has only one value
arg0.imageFileName.toString == ""
arg0.imageFillStyle has only one value
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.Diagram$ElementFilter.testEntity(ded.model.Entity):::EXIT
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
arg0.loc == orig(arg0.loc)
arg0.size == orig(arg0.size)
arg0.shape == orig(arg0.shape)
arg0.shape.displayName == orig(arg0.shape.displayName)
arg0.shape.displayName.toString == orig(arg0.shape.displayName.toString)
arg0.shape.numParams == orig(arg0.shape.numParams)
arg0.fillColor == orig(arg0.fillColor)
arg0.fillColor.toString == orig(arg0.fillColor.toString)
arg0.lineColor == orig(arg0.lineColor)
arg0.lineColor.toString == orig(arg0.lineColor.toString)
arg0.textColor == orig(arg0.textColor)
arg0.textColor.toString == orig(arg0.textColor.toString)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.nameAlign == orig(arg0.nameAlign)
arg0.nameAlign.displayName == orig(arg0.nameAlign.displayName)
arg0.nameAlign.displayName.toString == orig(arg0.nameAlign.displayName.toString)
arg0.attributes == orig(arg0.attributes)
arg0.attributes.toString == orig(arg0.attributes.toString)
arg0.shapeParams == orig(arg0.shapeParams)
arg0.shapeFlags == orig(arg0.shapeFlags)
arg0.shapeFlags.getClass().getName() == orig(arg0.shapeFlags.getClass().getName())
arg0.anchorName == orig(arg0.anchorName)
arg0.anchorName.toString == orig(arg0.anchorName.toString)
arg0.imageFileName == orig(arg0.imageFileName)
arg0.imageFileName.toString == orig(arg0.imageFileName.toString)
arg0.imageFillStyle == orig(arg0.imageFillStyle)
arg0.imageFillStyle.description == orig(arg0.imageFillStyle.description)
arg0.imageFillStyle.description.toString == orig(arg0.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
ded.model.Entity.defaultShape has only one value
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
arg0.shape.displayName.toString one of { "Ellipse", "No shape" }
arg0.shape.numParams == 0
arg0.fillColor has only one value
arg0.fillColor.toString == "Gray"
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.name.toString one of { "e1", "e2" }
arg0.nameAlign has only one value
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shapeParams == null
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName has only one value
arg0.imageFileName.toString == ""
arg0.imageFillStyle has only one value
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
return == true
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.Diagram$ElementFilter.testEntity(ded.model.Entity):::EXIT;condition="return == true"
===========================================================================
ded.model.Diagram$ElementFilter.testInheritance(ded.model.Inheritance):::ENTER
arg0 has only one value
arg0.parent has only one value
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.parent.loc has only one value
arg0.parent.size has only one value
arg0.parent.shape has only one value
arg0.parent.fillColor has only one value
arg0.parent.fillColor.toString == "Gray"
arg0.parent.lineColor has only one value
arg0.parent.lineColor.toString == "Black"
arg0.parent.textColor has only one value
arg0.parent.textColor.toString == "Black"
arg0.parent.name has only one value
arg0.parent.name.toString == "e1"
arg0.parent.nameAlign has only one value
arg0.parent.attributes has only one value
arg0.parent.attributes.toString == "attr1\nattr2\nattr3"
arg0.parent.shapeParams == null
arg0.parent.shapeFlags has only one value
arg0.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.parent.anchorName has only one value
arg0.parent.anchorName.toString == ""
arg0.parent.imageFileName has only one value
arg0.parent.imageFileName.toString == ""
arg0.parent.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.open == true
arg0.pt has only one value
ded.model.Inheritance.$assertionsDisabled == false
===========================================================================
ded.model.Diagram$ElementFilter.testInheritance(ded.model.Inheritance):::EXIT
arg0.parent == orig(arg0.parent)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
arg0.parent.loc == orig(arg0.parent.loc)
arg0.parent.size == orig(arg0.parent.size)
arg0.parent.shape == orig(arg0.parent.shape)
arg0.parent.fillColor == orig(arg0.parent.fillColor)
arg0.parent.fillColor.toString == orig(arg0.parent.fillColor.toString)
arg0.parent.lineColor == orig(arg0.parent.lineColor)
arg0.parent.lineColor.toString == orig(arg0.parent.lineColor.toString)
arg0.parent.textColor == orig(arg0.parent.textColor)
arg0.parent.textColor.toString == orig(arg0.parent.textColor.toString)
arg0.parent.name == orig(arg0.parent.name)
arg0.parent.name.toString == orig(arg0.parent.name.toString)
arg0.parent.nameAlign == orig(arg0.parent.nameAlign)
arg0.parent.attributes == orig(arg0.parent.attributes)
arg0.parent.attributes.toString == orig(arg0.parent.attributes.toString)
arg0.parent.shapeParams == orig(arg0.parent.shapeParams)
arg0.parent.shapeFlags == orig(arg0.parent.shapeFlags)
arg0.parent.shapeFlags.getClass().getName() == orig(arg0.parent.shapeFlags.getClass().getName())
arg0.parent.anchorName == orig(arg0.parent.anchorName)
arg0.parent.anchorName.toString == orig(arg0.parent.anchorName.toString)
arg0.parent.imageFileName == orig(arg0.parent.imageFileName)
arg0.parent.imageFileName.toString == orig(arg0.parent.imageFileName.toString)
arg0.parent.imageFillStyle == orig(arg0.parent.imageFillStyle)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
arg0.open == orig(arg0.open)
arg0.pt == orig(arg0.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
arg0.parent has only one value
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.parent.loc has only one value
arg0.parent.size has only one value
arg0.parent.shape has only one value
arg0.parent.fillColor has only one value
arg0.parent.fillColor.toString == "Gray"
arg0.parent.lineColor has only one value
arg0.parent.lineColor.toString == "Black"
arg0.parent.textColor has only one value
arg0.parent.textColor.toString == "Black"
arg0.parent.name has only one value
arg0.parent.name.toString == "e1"
arg0.parent.nameAlign has only one value
arg0.parent.attributes has only one value
arg0.parent.attributes.toString == "attr1\nattr2\nattr3"
arg0.parent.shapeParams == null
arg0.parent.shapeFlags has only one value
arg0.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.parent.anchorName has only one value
arg0.parent.anchorName.toString == ""
arg0.parent.imageFileName has only one value
arg0.parent.imageFileName.toString == ""
arg0.parent.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.open == true
arg0.pt has only one value
ded.model.Inheritance.$assertionsDisabled == false
return == true
===========================================================================
ded.model.Diagram$ElementFilter.testInheritance(ded.model.Inheritance):::EXIT;condition="return == true"
===========================================================================
ded.model.Diagram$ElementFilter.testRelation(ded.model.Relation):::ENTER
ded.model.Relation.defaultRoutingAlgorithm has only one value
ded.model.RoutingAlgorithm.RA_DIRECT has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT has only one value
ded.model.Relation.defaultRoutingAlgorithm.description has only one value
ded.model.Relation.defaultRoutingAlgorithm.description.toString == "Horizontal First Manhattan"
ded.model.RoutingAlgorithm.$VALUES has only one value
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == ded.model.RoutingAlgorithm[].class
ded.model.RoutingAlgorithm.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() == [ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm]
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() elements == ded.model.RoutingAlgorithm.class
ded.model.RoutingAlgorithm.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].description.toString == [Direct, Horizontal First Manhattan, Vertical First Manhattan]
ded.model.RoutingAlgorithm.$VALUES[].description.toString elements one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
ded.model.Relation.defaultLineColor has only one value
ded.model.Relation.defaultLineColor.toString == "Black"
ded.model.Relation.defaultTextColor has only one value
ded.model.Relation.defaultTextColor.toString == "Black"
arg0.start.inheritance == null
ded.model.RelationEndpoint.$assertionsDisabled == false
arg0.controlPts[].getClass().getName() elements == java.awt.Point.class
arg0.controlPts[].getClass().getName() one of { [], [java.awt.Point, java.awt.Point] }
arg0.routingAlg.description.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
arg0.label.toString one of { "", "r1" }
arg0.lineWidth == null
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.dashStructure[] == []
arg0.dashStructure[].getClass().getName() == []
ded.model.Relation.$assertionsDisabled == false
size(ded.model.RoutingAlgorithm.$VALUES[]) == 3
size(arg0.controlPts[]) one of { 0, 2 }
===========================================================================
ded.model.Diagram$ElementFilter.testRelation(ded.model.Relation):::EXIT
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.Relation.defaultRoutingAlgorithm)
ded.model.RoutingAlgorithm.RA_DIRECT == orig(ded.model.RoutingAlgorithm.RA_DIRECT)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT)
ded.model.Relation.defaultRoutingAlgorithm.description == orig(ded.model.Relation.defaultRoutingAlgorithm.description)
ded.model.Relation.defaultRoutingAlgorithm.description.toString == orig(ded.model.Relation.defaultRoutingAlgorithm.description.toString)
ded.model.RoutingAlgorithm.$VALUES == orig(ded.model.RoutingAlgorithm.$VALUES)
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == orig(ded.model.RoutingAlgorithm.$VALUES.getClass().getName())
ded.model.RoutingAlgorithm.$VALUES[] == orig(ded.model.RoutingAlgorithm.$VALUES[])
ded.model.RoutingAlgorithm.$VALUES[].description == orig(ded.model.RoutingAlgorithm.$VALUES[].description)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultLineColor)
ded.model.Relation.defaultLineColor.toString == orig(ded.model.Relation.defaultLineColor.toString)
ded.model.Relation.defaultTextColor == orig(ded.model.Relation.defaultTextColor)
ded.model.Relation.defaultTextColor.toString == orig(ded.model.Relation.defaultTextColor.toString)
arg0.start == orig(arg0.start)
arg0.start.entity == orig(arg0.start.entity)
arg0.start.inheritance == orig(arg0.start.inheritance)
arg0.start.pt == orig(arg0.start.pt)
arg0.start.arrowStyle == orig(arg0.start.arrowStyle)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
arg0.end == orig(arg0.end)
arg0.end.entity == orig(arg0.end.entity)
arg0.end.inheritance == orig(arg0.end.inheritance)
arg0.end.pt == orig(arg0.end.pt)
arg0.end.arrowStyle == orig(arg0.end.arrowStyle)
arg0.controlPts == orig(arg0.controlPts)
arg0.controlPts[] == orig(arg0.controlPts[])
arg0.routingAlg == orig(arg0.routingAlg)
arg0.routingAlg.description == orig(arg0.routingAlg.description)
arg0.routingAlg.description.toString == orig(arg0.routingAlg.description.toString)
arg0.label == orig(arg0.label)
arg0.label.toString == orig(arg0.label.toString)
arg0.lineWidth == orig(arg0.lineWidth)
arg0.lineColor == orig(arg0.lineColor)
arg0.lineColor.toString == orig(arg0.lineColor.toString)
arg0.textColor == orig(arg0.textColor)
arg0.textColor.toString == orig(arg0.textColor.toString)
arg0.dashStructure == orig(arg0.dashStructure)
arg0.dashStructure[] == orig(arg0.dashStructure[])
ded.model.Relation.$assertionsDisabled == orig(ded.model.Relation.$assertionsDisabled)
ded.model.Relation.defaultRoutingAlgorithm has only one value
ded.model.RoutingAlgorithm.RA_DIRECT has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT has only one value
ded.model.Relation.defaultRoutingAlgorithm.description has only one value
ded.model.Relation.defaultRoutingAlgorithm.description.toString == "Horizontal First Manhattan"
ded.model.RoutingAlgorithm.$VALUES has only one value
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == ded.model.RoutingAlgorithm[].class
ded.model.RoutingAlgorithm.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() == [ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm]
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() elements == ded.model.RoutingAlgorithm.class
ded.model.RoutingAlgorithm.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].description.toString == [Direct, Horizontal First Manhattan, Vertical First Manhattan]
ded.model.RoutingAlgorithm.$VALUES[].description.toString elements one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
ded.model.Relation.defaultLineColor has only one value
ded.model.Relation.defaultLineColor.toString == "Black"
ded.model.Relation.defaultTextColor has only one value
ded.model.Relation.defaultTextColor.toString == "Black"
arg0.start.inheritance == null
ded.model.RelationEndpoint.$assertionsDisabled == false
arg0.controlPts[].getClass().getName() elements == java.awt.Point.class
arg0.controlPts[].getClass().getName() one of { [], [java.awt.Point, java.awt.Point] }
arg0.routingAlg.description.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
arg0.label.toString one of { "", "r1" }
arg0.lineWidth == null
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.dashStructure[] == []
arg0.dashStructure[].getClass().getName() == []
ded.model.Relation.$assertionsDisabled == false
return == true
size(ded.model.RoutingAlgorithm.$VALUES[]) == 3
size(arg0.controlPts[]) one of { 0, 2 }
===========================================================================
ded.model.Diagram$ElementFilter.testRelation(ded.model.Relation):::EXIT;condition="return == true"
===========================================================================
ded.model.Diagram:::CLASS
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType != null
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor != null
ded.model.Diagram.defaultBackgroundColor.toString == "White"
ded.model.Diagram.$assertionsDisabled == false
===========================================================================
ded.model.Diagram:::OBJECT
ded.model.Diagram.defaultBackgroundColor == this.backgroundColor
this.windowSize != null
this.drawFileName == true
this.backgroundColor.toString == "White"
this.entities != null
this.entities[] elements != null
this.entities[].getClass().getName() elements == ded.model.Entity.class
this.entities[].getClass().getName() one of { [], [ded.model.Entity, ded.model.Entity] }
this.inheritances != null
this.inheritances[] elements != null
this.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
this.inheritances[].getClass().getName() one of { [], [ded.model.Inheritance] }
this.relations != null
this.relations[] elements != null
this.relations[].getClass().getName() elements == ded.model.Relation.class
this.relations[].getClass().getName() one of { [], [ded.model.Relation, ded.model.Relation, ded.model.Relation] }
this.namedColors != null
size(this.entities[]) one of { 0, 2 }
size(this.entities[])-1 != 0
size(this.inheritances[]) one of { 0, 1 }
size(this.relations[]) one of { 0, 3 }
size(this.relations[])-1 != 0
===========================================================================
ded.model.Diagram.Diagram():::EXIT
this.windowSize has only one value
this.entities has only one value
this.entities[] == []
this.entities[].getClass().getName() == []
this.inheritances has only one value
this.inheritances[] == []
this.inheritances[].getClass().getName() == []
this.relations has only one value
this.relations[] == []
this.relations[].getClass().getName() == []
this.namedColors has only one value
===========================================================================
ded.model.Diagram.Diagram(ded.model.Diagram, ded.model.Diagram$ElementFilter):::ENTER
ded.model.Diagram.defaultBackgroundColor == arg0.backgroundColor
arg0 has only one value
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.windowSize has only one value
arg0.drawFileName == true
arg0.backgroundColor.toString == "White"
arg0.entities has only one value
arg0.entities[] contains no nulls and has only one value, of length 2
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances has only one value
arg0.inheritances[] contains no nulls and has only one value, of length 1
arg0.inheritances[] elements has only one value
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations has only one value
arg0.relations[] contains no nulls and has only one value, of length 3
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
arg0.namedColors has only one value
ded.model.Diagram.$assertionsDisabled == false
arg1 has only one value
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.Diagram.Diagram(ded.model.Diagram, ded.model.Diagram$ElementFilter):::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == arg0.backgroundColor
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor == orig(arg0.backgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
this.drawFileName == arg0.drawFileName
this.drawFileName == orig(arg0.drawFileName)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
arg0.windowSize == orig(arg0.windowSize)
arg0.backgroundColor.toString == orig(arg0.backgroundColor.toString)
arg0.entities == orig(arg0.entities)
arg0.entities[] == orig(arg0.entities[])
arg0.inheritances == orig(arg0.inheritances)
arg0.inheritances[] == orig(arg0.inheritances[])
arg0.relations == orig(arg0.relations)
arg0.relations[] == orig(arg0.relations[])
arg0.namedColors == orig(arg0.namedColors)
this.windowSize has only one value
this.entities has only one value
this.entities[] contains no nulls and has only one value, of length 2
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances has only one value
this.inheritances[] contains no nulls and has only one value, of length 1
this.inheritances[] elements has only one value
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations has only one value
this.relations[] contains no nulls and has only one value, of length 3
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
this.namedColors has only one value
arg0.windowSize has only one value
arg0.backgroundColor.toString == "White"
arg0.entities has only one value
arg0.entities[] contains no nulls and has only one value, of length 2
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances has only one value
arg0.inheritances[] contains no nulls and has only one value, of length 1
arg0.inheritances[] elements has only one value
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations has only one value
arg0.relations[] contains no nulls and has only one value, of length 3
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
arg0.namedColors has only one value
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.Diagram.Diagram(org.json.JSONObject):::ENTER
arg0 has only one value
arg0.map has only one value
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
ded.model.Diagram.Diagram(org.json.JSONObject):::EXIT
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
this.windowSize has only one value
this.entities has only one value
this.entities[] contains no nulls and has only one value, of length 2
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances has only one value
this.inheritances[] contains no nulls and has only one value, of length 1
this.inheritances[] elements has only one value
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations has only one value
this.relations[] contains no nulls and has only one value, of length 3
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
this.namedColors has only one value
arg0.map has only one value
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.copyRelationEndpoint(ded.model.RelationEndpoint, java.util.IdentityHashMap, java.util.IdentityHashMap):::ENTER
ded.model.Entity.defaultFillColor == arg0.entity.fillColor
ded.model.Entity.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Entity.defaultLineColor == arg0.entity.lineColor
ded.model.Entity.defaultNameAlign == arg0.entity.nameAlign
ded.model.Entity.defaultImageFillStyle == arg0.entity.imageFillStyle
arg0.entity.lineColor == arg0.entity.textColor
arg0.entity.anchorName == arg0.entity.imageFileName
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.entity.fillColor has only one value
arg0.entity.fillColor.toString == "Gray"
arg0.entity.lineColor has only one value
arg0.entity.lineColor.toString == "Black"
arg0.entity.textColor.toString == "Black"
arg0.entity.name.toString one of { "e1", "e2" }
arg0.entity.nameAlign has only one value
arg0.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.entity.shapeParams == null
arg0.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.entity.anchorName has only one value
arg0.entity.anchorName.toString == ""
arg0.entity.imageFileName.toString == ""
arg0.entity.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.inheritance.parent has only one value
arg0.inheritance.open == true
arg0.inheritance.pt has only one value
ded.model.Inheritance.$assertionsDisabled == false
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
arg0.arrowStyle.description.toString one of { "Double angle", "Filled triangle", "None" }
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.RelationEndpoint.$assertionsDisabled == false
arg1 has only one value
arg2 has only one value
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.Diagram.copyRelationEndpoint(ded.model.RelationEndpoint, java.util.IdentityHashMap, java.util.IdentityHashMap):::EXIT334
===========================================================================
ded.model.Diagram.copyRelationEndpoint(ded.model.RelationEndpoint, java.util.IdentityHashMap, java.util.IdentityHashMap):::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
arg0.entity == orig(arg0.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == arg0.entity.fillColor
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Entity.defaultLineColor == arg0.entity.lineColor
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == arg0.entity.nameAlign
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == arg0.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
arg0.entity.loc == orig(arg0.entity.loc)
arg0.entity.size == orig(arg0.entity.size)
arg0.entity.shape == return.entity.shape
arg0.entity.shape == orig(arg0.entity.shape)
arg0.entity.fillColor == return.entity.fillColor
arg0.entity.fillColor == orig(arg0.entity.fillColor)
arg0.entity.fillColor.toString == orig(arg0.entity.fillColor.toString)
arg0.entity.lineColor == arg0.entity.textColor
arg0.entity.lineColor == return.entity.lineColor
arg0.entity.lineColor == return.entity.textColor
arg0.entity.lineColor == orig(arg0.entity.lineColor)
arg0.entity.lineColor == orig(arg0.entity.textColor)
arg0.entity.lineColor.toString == orig(arg0.entity.lineColor.toString)
arg0.entity.textColor.toString == orig(arg0.entity.textColor.toString)
arg0.entity.name == return.entity.name
arg0.entity.name == orig(arg0.entity.name)
arg0.entity.name.toString == orig(arg0.entity.name.toString)
arg0.entity.nameAlign == return.entity.nameAlign
arg0.entity.nameAlign == orig(arg0.entity.nameAlign)
arg0.entity.attributes == return.entity.attributes
arg0.entity.attributes == orig(arg0.entity.attributes)
arg0.entity.attributes.toString == orig(arg0.entity.attributes.toString)
arg0.entity.shapeParams == orig(arg0.entity.shapeParams)
arg0.entity.shapeFlags == orig(arg0.entity.shapeFlags)
arg0.entity.shapeFlags.getClass().getName() == return.entity.shapeFlags.getClass().getName()
arg0.entity.shapeFlags.getClass().getName() == orig(arg0.entity.shapeFlags.getClass().getName())
arg0.entity.anchorName == arg0.entity.imageFileName
arg0.entity.anchorName == return.entity.anchorName
arg0.entity.anchorName == return.entity.imageFileName
arg0.entity.anchorName == orig(arg0.entity.anchorName)
arg0.entity.anchorName == orig(arg0.entity.imageFileName)
arg0.entity.anchorName.toString == orig(arg0.entity.anchorName.toString)
arg0.entity.imageFileName.toString == orig(arg0.entity.imageFileName.toString)
arg0.entity.imageFillStyle == return.entity.imageFillStyle
arg0.entity.imageFillStyle == orig(arg0.entity.imageFillStyle)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
arg0.inheritance == orig(arg0.inheritance)
arg0.inheritance.parent == orig(arg0.inheritance.parent)
arg0.inheritance.open == return.inheritance.open
arg0.inheritance.open == orig(arg0.inheritance.open)
arg0.inheritance.pt == orig(arg0.inheritance.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
arg0.pt == orig(arg0.pt)
arg0.arrowStyle == return.arrowStyle
arg0.arrowStyle == orig(arg0.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
arg0.arrowStyle.description == return.arrowStyle.description
arg0.arrowStyle.description == orig(arg0.arrowStyle.description)
arg0.arrowStyle.description.toString == orig(arg0.arrowStyle.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.entity.fillColor has only one value
arg0.entity.fillColor.toString == "Gray"
arg0.entity.lineColor has only one value
arg0.entity.lineColor.toString == "Black"
arg0.entity.textColor.toString == "Black"
arg0.entity.name.toString one of { "e1", "e2" }
arg0.entity.nameAlign has only one value
arg0.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.entity.shapeParams == null
arg0.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.entity.anchorName has only one value
arg0.entity.anchorName.toString == ""
arg0.entity.imageFileName.toString == ""
arg0.entity.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.inheritance.parent has only one value
arg0.inheritance.open == true
arg0.inheritance.pt has only one value
ded.model.Inheritance.$assertionsDisabled == false
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
arg0.arrowStyle.description.toString one of { "Double angle", "Filled triangle", "None" }
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.RelationEndpoint.$assertionsDisabled == false
return.entity.fillColor.toString == "Gray"
return.entity.lineColor.toString == "Black"
return.entity.textColor.toString == "Black"
return.entity.name.toString one of { "e1", "e2" }
return.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
return.entity.shapeParams == null
return.entity.anchorName.toString == ""
return.entity.imageFileName.toString == ""
return.inheritance.parent has only one value
return.inheritance.pt has only one value
return.arrowStyle.description.toString one of { "Double angle", "Filled triangle", "None" }
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.Diagram.deepCopy():::ENTER
this has only one value
this.windowSize has only one value
this.entities has only one value
this.entities[] contains no nulls and has only one value, of length 2
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances has only one value
this.inheritances[] contains no nulls and has only one value, of length 1
this.inheritances[] elements has only one value
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations has only one value
this.relations[] contains no nulls and has only one value, of length 3
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
this.namedColors has only one value
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.deepCopy():::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == return.backgroundColor
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor == orig(this.backgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
this.windowSize == orig(this.windowSize)
this.drawFileName == return.drawFileName
this.drawFileName == orig(this.drawFileName)
this.backgroundColor.toString == orig(this.backgroundColor.toString)
this.entities == orig(this.entities)
this.entities[] == orig(this.entities[])
this.inheritances == orig(this.inheritances)
this.inheritances[] == orig(this.inheritances[])
this.relations == orig(this.relations)
this.relations[] == orig(this.relations[])
this.namedColors == orig(this.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
this.windowSize has only one value
this.entities has only one value
this.entities[] contains no nulls and has only one value, of length 2
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances has only one value
this.inheritances[] contains no nulls and has only one value, of length 1
this.inheritances[] elements has only one value
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations has only one value
this.relations[] contains no nulls and has only one value, of length 3
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
this.namedColors has only one value
return has only one value
return.windowSize has only one value
return.backgroundColor.toString == "White"
return.entities has only one value
return.entities[] contains no nulls and has only one value, of length 2
return.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
return.entities[].getClass().getName() elements == ded.model.Entity.class
return.inheritances has only one value
return.inheritances[] contains no nulls and has only one value, of length 1
return.inheritances[] elements has only one value
return.inheritances[].getClass().getName() == [ded.model.Inheritance]
return.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
return.relations has only one value
return.relations[] contains no nulls and has only one value, of length 3
return.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
return.relations[].getClass().getName() elements == ded.model.Relation.class
return.namedColors has only one value
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
size(return.entities[]) == 2
size(return.inheritances[]) == 1
size(return.relations[]) == 3
===========================================================================
ded.model.Diagram.equals(java.lang.Object):::ENTER
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.getClass().getName() == ded.model.Diagram.class
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.equals(java.lang.Object):::EXIT760
===========================================================================
ded.model.Diagram.equals(java.lang.Object):::EXIT760;condition="return == true"
===========================================================================
ded.model.Diagram.equals(java.lang.Object):::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor == orig(this.backgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
this.windowSize == orig(this.windowSize)
this.drawFileName == orig(this.drawFileName)
this.backgroundColor.toString == orig(this.backgroundColor.toString)
this.entities == orig(this.entities)
this.entities[] == orig(this.entities[])
this.inheritances == orig(this.inheritances)
this.inheritances[] == orig(this.inheritances[])
this.relations == orig(this.relations)
this.relations[] == orig(this.relations[])
this.namedColors == orig(this.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
return == true
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
ded.model.Diagram.makeDefaultColors():::ENTER
===========================================================================
ded.model.Diagram.makeDefaultColors():::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
===========================================================================
ded.model.Diagram.selfCheck():::ENTER
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.selfCheck():::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor == orig(this.backgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
this.windowSize == orig(this.windowSize)
this.drawFileName == orig(this.drawFileName)
this.backgroundColor.toString == orig(this.backgroundColor.toString)
this.entities == orig(this.entities)
this.entities[] == orig(this.entities[])
this.inheritances == orig(this.inheritances)
this.inheritances[] == orig(this.inheritances[])
this.relations == orig(this.relations)
this.relations[] == orig(this.relations[])
this.namedColors == orig(this.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.toJSON():::ENTER
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Diagram.toJSON():::EXIT
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor == orig(this.backgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
this.windowSize == orig(this.windowSize)
this.drawFileName == orig(this.drawFileName)
this.backgroundColor.toString == orig(this.backgroundColor.toString)
this.entities == orig(this.entities)
this.entities[] == orig(this.entities[])
this.inheritances == orig(this.inheritances)
this.inheritances[] == orig(this.inheritances[])
this.relations == orig(this.relations)
this.relations[] == orig(this.relations[])
this.namedColors == orig(this.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
this.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
this.inheritances[].getClass().getName() == [ded.model.Inheritance]
this.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
size(this.entities[]) == 2
size(this.inheritances[]) == 1
size(this.relations[]) == 3
===========================================================================
ded.model.Entity:::CLASS
ded.model.Entity.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultShape != null
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_NO_SHAPE != null
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_RECTANGLE != null
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_ELLIPSE != null
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CUBOID != null
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_CYLINDER != null
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_WINDOW != null
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_SCROLLBAR != null
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_PUSHBUTTON != null
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_TEXT_EDIT != null
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_DROPDOWN != null
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_COMBO_BOX != null
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX != null
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_RADIO_BUTTON != null
ded.model.EntityShape.ES_NO_SHAPE.displayName has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName != null
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == "No shape"
ded.model.EntityShape.ES_NO_SHAPE.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES != null
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[] elements != null
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName elements != null
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.EntityShape.ES_RECTANGLE.displayName has only one value
ded.model.EntityShape.ES_RECTANGLE.displayName != null
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == "Rectangle"
ded.model.EntityShape.ES_RECTANGLE.numParams == 0
ded.model.EntityShape.ES_ELLIPSE.displayName has only one value
ded.model.EntityShape.ES_ELLIPSE.displayName != null
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == "Ellipse"
ded.model.EntityShape.ES_ELLIPSE.numParams == 0
ded.model.EntityShape.ES_CUBOID.displayName has only one value
ded.model.EntityShape.ES_CUBOID.displayName != null
ded.model.EntityShape.ES_CUBOID.displayName.toString == "Cuboid"
ded.model.EntityShape.ES_CUBOID.numParams == 2
ded.model.EntityShape.ES_CYLINDER.displayName has only one value
ded.model.EntityShape.ES_CYLINDER.displayName != null
ded.model.EntityShape.ES_CYLINDER.displayName.toString == "Cylinder"
ded.model.EntityShape.ES_CYLINDER.numParams == 0
ded.model.EntityShape.ES_WINDOW.displayName has only one value
ded.model.EntityShape.ES_WINDOW.displayName != null
ded.model.EntityShape.ES_WINDOW.displayName.toString == "Window"
ded.model.EntityShape.ES_WINDOW.numParams == 2
ded.model.EntityShape.ES_SCROLLBAR.displayName has only one value
ded.model.EntityShape.ES_SCROLLBAR.displayName != null
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == "Scroll bar"
ded.model.EntityShape.ES_SCROLLBAR.numParams == 2
ded.model.EntityShape.ES_PUSHBUTTON.displayName has only one value
ded.model.EntityShape.ES_PUSHBUTTON.displayName != null
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == "Push button"
ded.model.EntityShape.ES_PUSHBUTTON.numParams == 0
ded.model.EntityShape.ES_TEXT_EDIT.displayName has only one value
ded.model.EntityShape.ES_TEXT_EDIT.displayName != null
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == "Text edit"
ded.model.EntityShape.ES_TEXT_EDIT.numParams == 0
ded.model.EntityShape.ES_DROPDOWN.displayName has only one value
ded.model.EntityShape.ES_DROPDOWN.displayName != null
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == "Dropdown"
ded.model.EntityShape.ES_DROPDOWN.numParams == 0
ded.model.EntityShape.ES_COMBO_BOX.displayName has only one value
ded.model.EntityShape.ES_COMBO_BOX.displayName != null
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == "Combo box"
ded.model.EntityShape.ES_COMBO_BOX.numParams == 0
ded.model.EntityShape.ES_CHECK_BOX.displayName has only one value
ded.model.EntityShape.ES_CHECK_BOX.displayName != null
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == "Check box"
ded.model.EntityShape.ES_CHECK_BOX.numParams == 0
ded.model.EntityShape.ES_RADIO_BUTTON.displayName has only one value
ded.model.EntityShape.ES_RADIO_BUTTON.displayName != null
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == "Radio button"
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == 0
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName != null
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor != null
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor != null
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultNameAlign != null
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_LEFT != null
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_CENTER != null
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.TextAlign.TA_RIGHT != null
ded.model.TextAlign.TA_LEFT.displayName has only one value
ded.model.TextAlign.TA_LEFT.displayName != null
ded.model.TextAlign.TA_LEFT.displayName.toString == "Left"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES != null
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[] elements != null
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName elements != null
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.TextAlign.TA_CENTER.displayName has only one value
ded.model.TextAlign.TA_CENTER.displayName != null
ded.model.TextAlign.TA_CENTER.displayName.toString == "Center"
ded.model.TextAlign.TA_RIGHT.displayName has only one value
ded.model.TextAlign.TA_RIGHT.displayName != null
ded.model.TextAlign.TA_RIGHT.displayName.toString == "Right"
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName != null
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.Entity.defaultImageFillStyle != null
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT != null
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_STRETCH != null
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_TILE != null
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE != null
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.ImageFillStyle.IFS_CENTER != null
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description != null
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES != null
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[] elements != null
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description elements != null
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
ded.model.ImageFillStyle.IFS_STRETCH.description has only one value
ded.model.ImageFillStyle.IFS_STRETCH.description != null
ded.model.ImageFillStyle.IFS_STRETCH.description.toString == "Stretch image to fill space"
ded.model.ImageFillStyle.IFS_TILE.description has only one value
ded.model.ImageFillStyle.IFS_TILE.description != null
ded.model.ImageFillStyle.IFS_TILE.description.toString == "Tile image to fill space"
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description != null
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString == "Lock entity size to match image"
ded.model.ImageFillStyle.IFS_CENTER.description has only one value
ded.model.ImageFillStyle.IFS_CENTER.description != null
ded.model.ImageFillStyle.IFS_CENTER.description.toString == "One copy centered horiz and vert"
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description != null
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
ded.model.EntityShape.$VALUES.getClass().getName() != ded.model.TextAlign.$VALUES.getClass().getName()
ded.model.EntityShape.$VALUES.getClass().getName() != ded.model.ImageFillStyle.$VALUES.getClass().getName()
ded.model.TextAlign.$VALUES.getClass().getName() != ded.model.ImageFillStyle.$VALUES.getClass().getName()
===========================================================================
ded.model.Entity:::OBJECT
ded.model.Entity.defaultFillColor == this.fillColor
ded.model.Entity.defaultLineColor == this.lineColor
ded.model.Entity.defaultLineColor == this.textColor
ded.model.Entity.defaultNameAlign == this.nameAlign
ded.model.Entity.defaultImageFillStyle == this.imageFillStyle
this.anchorName == this.imageFileName
this.loc != null
this.size != null
this.shape != null
this.shape.displayName != null
this.shape.displayName.toString one of { "Ellipse", "No shape", "Rectangle" }
this.shape.numParams == 0
this.fillColor.toString == "Gray"
this.lineColor.toString == "Black"
this.textColor.toString == "Black"
this.name != null
this.name.toString one of { "", "e1", "e2" }
this.nameAlign.displayName has only one value
this.nameAlign.displayName != null
this.nameAlign.displayName.toString == "Center"
this.attributes != null
this.attributes.toString one of { "", "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
this.shapeParams == null
this.shapeFlags != null
this.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
this.anchorName has only one value
this.anchorName != null
this.anchorName.toString == ""
this.imageFileName.toString == ""
this.imageFillStyle.description has only one value
this.imageFillStyle.description != null
this.imageFillStyle.description.toString == "One copy in upper left"
ded.model.EntityShape.$VALUES.getClass().getName() != this.shapeFlags.getClass().getName()
ded.model.TextAlign.$VALUES.getClass().getName() != this.shapeFlags.getClass().getName()
ded.model.ImageFillStyle.$VALUES.getClass().getName() != this.shapeFlags.getClass().getName()
===========================================================================
ded.model.Entity.Entity():::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultShape == this.shape
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
this.name == this.attributes
this.name == this.anchorName
this.name == this.imageFileName
this.shape.displayName has only one value
this.shape.displayName.toString == "Rectangle"
this.name has only one value
this.name.toString == ""
this.attributes.toString == ""
===========================================================================
ded.model.Entity.Entity(ded.model.Entity):::ENTER
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultFillColor == arg0.fillColor
ded.model.Entity.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Entity.defaultLineColor == arg0.lineColor
ded.model.Entity.defaultLineColor == arg0.textColor
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.Entity.defaultNameAlign == arg0.nameAlign
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.Entity.defaultImageFillStyle == arg0.imageFillStyle
arg0.anchorName == arg0.imageFileName
ded.model.Entity.defaultShape has only one value
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
arg0.shape.displayName.toString one of { "Ellipse", "No shape" }
arg0.shape.numParams == 0
arg0.fillColor.toString == "Gray"
arg0.lineColor.toString == "Black"
arg0.textColor.toString == "Black"
arg0.name.toString one of { "e1", "e2" }
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shapeParams == null
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName.toString == ""
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.Entity.Entity(ded.model.Entity):::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultShape == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.Entity.defaultFillColor == arg0.fillColor
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor == orig(arg0.fillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == arg0.lineColor
ded.model.Entity.defaultLineColor == arg0.textColor
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor == orig(arg0.lineColor)
ded.model.Entity.defaultLineColor == orig(arg0.textColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.Entity.defaultNameAlign == arg0.nameAlign
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultNameAlign == orig(ded.model.TextAlign.TA_CENTER)
ded.model.Entity.defaultNameAlign == orig(arg0.nameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.Entity.defaultImageFillStyle == arg0.imageFillStyle
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.Entity.defaultImageFillStyle == orig(arg0.imageFillStyle)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
this.shape == arg0.shape
this.shape == orig(arg0.shape)
this.shape.displayName == arg0.shape.displayName
this.shape.displayName == orig(arg0.shape.displayName)
this.shape.numParams == arg0.shape.numParams
this.shape.numParams == orig(arg0.shape.numParams)
this.name == arg0.name
this.name == orig(arg0.name)
this.nameAlign.displayName == arg0.nameAlign.displayName
this.nameAlign.displayName == orig(arg0.nameAlign.displayName)
this.attributes == arg0.attributes
this.attributes == orig(arg0.attributes)
this.shapeFlags.getClass().getName() == arg0.shapeFlags.getClass().getName()
this.shapeFlags.getClass().getName() == orig(arg0.shapeFlags.getClass().getName())
this.anchorName == arg0.anchorName
this.anchorName == arg0.imageFileName
this.anchorName == orig(arg0.anchorName)
this.anchorName == orig(arg0.imageFileName)
this.imageFillStyle.description == arg0.imageFillStyle.description
this.imageFillStyle.description == orig(arg0.imageFillStyle.description)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
arg0.loc == orig(arg0.loc)
arg0.size == orig(arg0.size)
arg0.shape.displayName.toString == orig(arg0.shape.displayName.toString)
arg0.fillColor.toString == orig(arg0.fillColor.toString)
arg0.lineColor.toString == orig(arg0.lineColor.toString)
arg0.textColor.toString == orig(arg0.textColor.toString)
arg0.name.toString == orig(arg0.name.toString)
arg0.nameAlign.displayName.toString == orig(arg0.nameAlign.displayName.toString)
arg0.attributes.toString == orig(arg0.attributes.toString)
arg0.shapeParams == orig(arg0.shapeParams)
arg0.shapeFlags == orig(arg0.shapeFlags)
arg0.anchorName.toString == orig(arg0.anchorName.toString)
arg0.imageFileName.toString == orig(arg0.imageFileName.toString)
arg0.imageFillStyle.description.toString == orig(arg0.imageFillStyle.description.toString)
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shape.displayName.toString one of { "Ellipse", "No shape" }
arg0.fillColor.toString == "Gray"
arg0.lineColor.toString == "Black"
arg0.textColor.toString == "Black"
arg0.name.toString one of { "e1", "e2" }
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shapeParams == null
arg0.anchorName.toString == ""
arg0.imageFileName.toString == ""
arg0.imageFillStyle.description.toString == "One copy in upper left"
===========================================================================
ded.model.Entity.Entity(org.json.JSONObject, int):::ENTER
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1 == 23
===========================================================================
ded.model.Entity.Entity(org.json.JSONObject, int):::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
ded.model.Entity.equals(java.lang.Object):::ENTER
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0 != null
arg0.getClass().getName() == ded.model.Entity.class
ded.model.EntityShape.$VALUES.getClass().getName() != arg0.getClass().getName()
ded.model.TextAlign.$VALUES.getClass().getName() != arg0.getClass().getName()
ded.model.ImageFillStyle.$VALUES.getClass().getName() != arg0.getClass().getName()
this.shapeFlags.getClass().getName() != arg0.getClass().getName()
===========================================================================
ded.model.Entity.equals(java.lang.Object):::EXIT401
(return == false)  ==>  (ded.model.EntityShape.ES_NO_SHAPE == this.shape)
(return == false)  ==>  (this.attributes.toString == "funny\"characters\\in'this,string!")
(return == false)  ==>  (this.name.toString == "e2")
(return == false)  ==>  (this.shape has only one value)
(return == false)  ==>  (this.shape.displayName has only one value)
(return == false)  ==>  (this.shape.displayName.toString == "No shape")
(return == true)  ==>  (this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" })
(return == true)  ==>  (this.name.toString one of { "e1", "e2" })
(return == true)  ==>  (this.shape.displayName.toString one of { "Ellipse", "No shape" })
===========================================================================
ded.model.Entity.equals(java.lang.Object):::EXIT401;condition="return == true"
===========================================================================
ded.model.Entity.equals(java.lang.Object):::EXIT401;condition="not(return == true)"
===========================================================================
ded.model.Entity.equals(java.lang.Object):::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultShape == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor == orig(this.fillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor == orig(this.lineColor)
ded.model.Entity.defaultLineColor == orig(this.textColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultNameAlign == orig(ded.model.TextAlign.TA_CENTER)
ded.model.Entity.defaultNameAlign == orig(this.nameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.TextAlign.TA_LEFT.displayName == orig(ded.model.TextAlign.TA_LEFT.displayName)
ded.model.TextAlign.TA_LEFT.displayName.toString == orig(ded.model.TextAlign.TA_LEFT.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.TextAlign.TA_CENTER.displayName)
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.TextAlign.TA_CENTER.displayName.toString == orig(ded.model.TextAlign.TA_CENTER.displayName.toString)
ded.model.TextAlign.TA_RIGHT.displayName == orig(ded.model.TextAlign.TA_RIGHT.displayName)
ded.model.TextAlign.TA_RIGHT.displayName.toString == orig(ded.model.TextAlign.TA_RIGHT.displayName.toString)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.Entity.defaultImageFillStyle == orig(this.imageFillStyle)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.ImageFillStyle.IFS_STRETCH.description == orig(ded.model.ImageFillStyle.IFS_STRETCH.description)
ded.model.ImageFillStyle.IFS_STRETCH.description.toString == orig(ded.model.ImageFillStyle.IFS_STRETCH.description.toString)
ded.model.ImageFillStyle.IFS_TILE.description == orig(ded.model.ImageFillStyle.IFS_TILE.description)
ded.model.ImageFillStyle.IFS_TILE.description.toString == orig(ded.model.ImageFillStyle.IFS_TILE.description.toString)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString)
ded.model.ImageFillStyle.IFS_CENTER.description == orig(ded.model.ImageFillStyle.IFS_CENTER.description)
ded.model.ImageFillStyle.IFS_CENTER.description.toString == orig(ded.model.ImageFillStyle.IFS_CENTER.description.toString)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
this.loc == orig(this.loc)
this.size == orig(this.size)
this.shape == orig(this.shape)
this.shape.displayName == orig(this.shape.displayName)
this.shape.displayName.toString == orig(this.shape.displayName.toString)
this.shape.numParams == orig(this.shape.numParams)
this.fillColor.toString == orig(this.fillColor.toString)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.nameAlign.displayName == orig(this.nameAlign.displayName)
this.nameAlign.displayName.toString == orig(this.nameAlign.displayName.toString)
this.attributes == orig(this.attributes)
this.attributes.toString == orig(this.attributes.toString)
this.shapeParams == orig(this.shapeParams)
this.shapeFlags == orig(this.shapeFlags)
this.shapeFlags.getClass().getName() == orig(this.shapeFlags.getClass().getName())
this.anchorName == orig(this.anchorName)
this.anchorName == orig(this.imageFileName)
this.anchorName.toString == orig(this.anchorName.toString)
this.imageFileName.toString == orig(this.imageFileName.toString)
this.imageFillStyle.description == orig(this.imageFillStyle.description)
this.imageFillStyle.description.toString == orig(this.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
(return == false)  ==>  (ded.model.EntityShape.ES_NO_SHAPE == this.shape)
(return == false)  ==>  (this.attributes.toString == "funny\"characters\\in'this,string!")
(return == false)  ==>  (this.name.toString == "e2")
(return == false)  ==>  (this.shape has only one value)
(return == false)  ==>  (this.shape.displayName has only one value)
(return == false)  ==>  (this.shape.displayName.toString == "No shape")
(return == true)  ==>  (this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" })
(return == true)  ==>  (this.name.toString one of { "e1", "e2" })
(return == true)  ==>  (this.shape.displayName.toString one of { "Ellipse", "No shape" })
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
ded.model.EntityShape.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
ded.model.TextAlign.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
ded.model.ImageFillStyle.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.shapeFlags.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
ded.model.Entity.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
ded.model.Entity.equals(java.lang.Object):::EXIT;condition="not(return == true)"
ded.model.EntityShape.ES_NO_SHAPE == this.shape
ded.model.EntityShape.ES_NO_SHAPE == orig(this.shape)
this.shape.displayName has only one value
this.shape.displayName.toString == "No shape"
this.name.toString == "e2"
this.attributes.toString == "funny\"characters\\in'this,string!"
return == false
===========================================================================
ded.model.Entity.fromJSONRef(java.util.ArrayList, long):::ENTER
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0[].getClass().getName() elements == ded.model.Entity.class
arg1 one of { 0, 1 }
size(arg0[]) == 2
===========================================================================
ded.model.Entity.fromJSONRef(java.util.ArrayList, long):::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultShape == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.Entity.defaultFillColor == return.fillColor
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == return.lineColor
ded.model.Entity.defaultLineColor == return.textColor
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.Entity.defaultNameAlign == return.nameAlign
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultNameAlign == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.TextAlign.TA_LEFT.displayName == orig(ded.model.TextAlign.TA_LEFT.displayName)
ded.model.TextAlign.TA_LEFT.displayName.toString == orig(ded.model.TextAlign.TA_LEFT.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.TextAlign.TA_CENTER.displayName)
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.TextAlign.TA_CENTER.displayName.toString == orig(ded.model.TextAlign.TA_CENTER.displayName.toString)
ded.model.TextAlign.TA_RIGHT.displayName == orig(ded.model.TextAlign.TA_RIGHT.displayName)
ded.model.TextAlign.TA_RIGHT.displayName.toString == orig(ded.model.TextAlign.TA_RIGHT.displayName.toString)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.Entity.defaultImageFillStyle == return.imageFillStyle
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.ImageFillStyle.IFS_STRETCH.description == orig(ded.model.ImageFillStyle.IFS_STRETCH.description)
ded.model.ImageFillStyle.IFS_STRETCH.description.toString == orig(ded.model.ImageFillStyle.IFS_STRETCH.description.toString)
ded.model.ImageFillStyle.IFS_TILE.description == orig(ded.model.ImageFillStyle.IFS_TILE.description)
ded.model.ImageFillStyle.IFS_TILE.description.toString == orig(ded.model.ImageFillStyle.IFS_TILE.description.toString)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString)
ded.model.ImageFillStyle.IFS_CENTER.description == orig(ded.model.ImageFillStyle.IFS_CENTER.description)
ded.model.ImageFillStyle.IFS_CENTER.description.toString == orig(ded.model.ImageFillStyle.IFS_CENTER.description.toString)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
arg0[] == orig(arg0[])
return.anchorName == return.imageFileName
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0[].getClass().getName() elements == ded.model.Entity.class
return.shape.displayName.toString one of { "Ellipse", "No shape" }
return.shape.numParams == 0
return.fillColor.toString == "Gray"
return.lineColor.toString == "Black"
return.textColor.toString == "Black"
return.name.toString one of { "e1", "e2" }
return.nameAlign.displayName has only one value
return.nameAlign.displayName.toString == "Center"
return.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
return.shapeParams == null
return.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
return.anchorName has only one value
return.anchorName.toString == ""
return.imageFileName.toString == ""
return.imageFillStyle.description has only one value
return.imageFillStyle.description.toString == "One copy in upper left"
===========================================================================
ded.model.Entity.hashCode():::ENTER
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
===========================================================================
ded.model.Entity.hashCode():::EXIT
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor == orig(this.fillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor == orig(this.lineColor)
ded.model.Entity.defaultLineColor == orig(this.textColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultNameAlign == orig(this.nameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.TextAlign.TA_LEFT.displayName == orig(ded.model.TextAlign.TA_LEFT.displayName)
ded.model.TextAlign.TA_LEFT.displayName.toString == orig(ded.model.TextAlign.TA_LEFT.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.TextAlign.TA_CENTER.displayName)
ded.model.TextAlign.TA_CENTER.displayName.toString == orig(ded.model.TextAlign.TA_CENTER.displayName.toString)
ded.model.TextAlign.TA_RIGHT.displayName == orig(ded.model.TextAlign.TA_RIGHT.displayName)
ded.model.TextAlign.TA_RIGHT.displayName.toString == orig(ded.model.TextAlign.TA_RIGHT.displayName.toString)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.defaultImageFillStyle == orig(this.imageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.ImageFillStyle.IFS_STRETCH.description == orig(ded.model.ImageFillStyle.IFS_STRETCH.description)
ded.model.ImageFillStyle.IFS_STRETCH.description.toString == orig(ded.model.ImageFillStyle.IFS_STRETCH.description.toString)
ded.model.ImageFillStyle.IFS_TILE.description == orig(ded.model.ImageFillStyle.IFS_TILE.description)
ded.model.ImageFillStyle.IFS_TILE.description.toString == orig(ded.model.ImageFillStyle.IFS_TILE.description.toString)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString)
ded.model.ImageFillStyle.IFS_CENTER.description == orig(ded.model.ImageFillStyle.IFS_CENTER.description)
ded.model.ImageFillStyle.IFS_CENTER.description.toString == orig(ded.model.ImageFillStyle.IFS_CENTER.description.toString)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
this.loc == orig(this.loc)
this.size == orig(this.size)
this.shape == orig(this.shape)
this.shape.displayName == orig(this.shape.displayName)
this.shape.displayName.toString == orig(this.shape.displayName.toString)
this.shape.numParams == orig(this.shape.numParams)
this.fillColor.toString == orig(this.fillColor.toString)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.nameAlign.displayName == orig(this.nameAlign.displayName)
this.nameAlign.displayName.toString == orig(this.nameAlign.displayName.toString)
this.attributes == orig(this.attributes)
this.attributes.toString == orig(this.attributes.toString)
this.shapeParams == orig(this.shapeParams)
this.shapeFlags == orig(this.shapeFlags)
this.shapeFlags.getClass().getName() == orig(this.shapeFlags.getClass().getName())
this.anchorName == orig(this.anchorName)
this.anchorName == orig(this.imageFileName)
this.anchorName.toString == orig(this.anchorName.toString)
this.imageFileName.toString == orig(this.imageFileName.toString)
this.imageFillStyle.description == orig(this.imageFillStyle.description)
this.imageFillStyle.description.toString == orig(this.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
return one of { -76481416, 1974819763 }
===========================================================================
ded.model.Entity.toJSON():::ENTER
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
===========================================================================
ded.model.Entity.toJSON():::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultShape == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor == orig(this.fillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor == orig(this.lineColor)
ded.model.Entity.defaultLineColor == orig(this.textColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultNameAlign == orig(ded.model.TextAlign.TA_CENTER)
ded.model.Entity.defaultNameAlign == orig(this.nameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.TextAlign.TA_LEFT.displayName == orig(ded.model.TextAlign.TA_LEFT.displayName)
ded.model.TextAlign.TA_LEFT.displayName.toString == orig(ded.model.TextAlign.TA_LEFT.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.TextAlign.TA_CENTER.displayName)
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.TextAlign.TA_CENTER.displayName.toString == orig(ded.model.TextAlign.TA_CENTER.displayName.toString)
ded.model.TextAlign.TA_RIGHT.displayName == orig(ded.model.TextAlign.TA_RIGHT.displayName)
ded.model.TextAlign.TA_RIGHT.displayName.toString == orig(ded.model.TextAlign.TA_RIGHT.displayName.toString)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.Entity.defaultImageFillStyle == orig(this.imageFillStyle)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.ImageFillStyle.IFS_STRETCH.description == orig(ded.model.ImageFillStyle.IFS_STRETCH.description)
ded.model.ImageFillStyle.IFS_STRETCH.description.toString == orig(ded.model.ImageFillStyle.IFS_STRETCH.description.toString)
ded.model.ImageFillStyle.IFS_TILE.description == orig(ded.model.ImageFillStyle.IFS_TILE.description)
ded.model.ImageFillStyle.IFS_TILE.description.toString == orig(ded.model.ImageFillStyle.IFS_TILE.description.toString)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString)
ded.model.ImageFillStyle.IFS_CENTER.description == orig(ded.model.ImageFillStyle.IFS_CENTER.description)
ded.model.ImageFillStyle.IFS_CENTER.description.toString == orig(ded.model.ImageFillStyle.IFS_CENTER.description.toString)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
this.loc == orig(this.loc)
this.size == orig(this.size)
this.shape == orig(this.shape)
this.shape.displayName == orig(this.shape.displayName)
this.shape.displayName.toString == orig(this.shape.displayName.toString)
this.shape.numParams == orig(this.shape.numParams)
this.fillColor.toString == orig(this.fillColor.toString)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.nameAlign.displayName == orig(this.nameAlign.displayName)
this.nameAlign.displayName.toString == orig(this.nameAlign.displayName.toString)
this.attributes == orig(this.attributes)
this.attributes.toString == orig(this.attributes.toString)
this.shapeParams == orig(this.shapeParams)
this.shapeFlags == orig(this.shapeFlags)
this.shapeFlags.getClass().getName() == orig(this.shapeFlags.getClass().getName())
this.anchorName == orig(this.anchorName)
this.anchorName == orig(this.imageFileName)
this.anchorName.toString == orig(this.anchorName.toString)
this.imageFileName.toString == orig(this.imageFileName.toString)
this.imageFillStyle.description == orig(this.imageFillStyle.description)
this.imageFillStyle.description.toString == orig(this.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
ded.model.Entity.toJSONRef(java.util.HashMap):::ENTER
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
===========================================================================
ded.model.Entity.toJSONRef(java.util.HashMap):::EXIT
ded.model.Entity.defaultShape == ded.model.EntityShape.ES_RECTANGLE
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultShape == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == ded.model.Entity.defaultShape.displayName
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor == orig(this.fillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultLineColor == orig(this.lineColor)
ded.model.Entity.defaultLineColor == orig(this.textColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == ded.model.TextAlign.TA_CENTER
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultNameAlign == orig(ded.model.TextAlign.TA_CENTER)
ded.model.Entity.defaultNameAlign == orig(this.nameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.TextAlign.TA_LEFT.displayName == orig(ded.model.TextAlign.TA_LEFT.displayName)
ded.model.TextAlign.TA_LEFT.displayName.toString == orig(ded.model.TextAlign.TA_LEFT.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.TextAlign.TA_CENTER.displayName == ded.model.Entity.defaultNameAlign.displayName
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.TextAlign.TA_CENTER.displayName)
ded.model.TextAlign.TA_CENTER.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.TextAlign.TA_CENTER.displayName.toString == orig(ded.model.TextAlign.TA_CENTER.displayName.toString)
ded.model.TextAlign.TA_RIGHT.displayName == orig(ded.model.TextAlign.TA_RIGHT.displayName)
ded.model.TextAlign.TA_RIGHT.displayName.toString == orig(ded.model.TextAlign.TA_RIGHT.displayName.toString)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.Entity.defaultImageFillStyle == ded.model.ImageFillStyle.IFS_UPPER_LEFT
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.Entity.defaultImageFillStyle == orig(this.imageFillStyle)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == ded.model.Entity.defaultImageFillStyle.description
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.ImageFillStyle.IFS_STRETCH.description == orig(ded.model.ImageFillStyle.IFS_STRETCH.description)
ded.model.ImageFillStyle.IFS_STRETCH.description.toString == orig(ded.model.ImageFillStyle.IFS_STRETCH.description.toString)
ded.model.ImageFillStyle.IFS_TILE.description == orig(ded.model.ImageFillStyle.IFS_TILE.description)
ded.model.ImageFillStyle.IFS_TILE.description.toString == orig(ded.model.ImageFillStyle.IFS_TILE.description.toString)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description)
ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE.description.toString)
ded.model.ImageFillStyle.IFS_CENTER.description == orig(ded.model.ImageFillStyle.IFS_CENTER.description)
ded.model.ImageFillStyle.IFS_CENTER.description.toString == orig(ded.model.ImageFillStyle.IFS_CENTER.description.toString)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
this.loc == orig(this.loc)
this.size == orig(this.size)
this.shape == orig(this.shape)
this.shape.displayName == orig(this.shape.displayName)
this.shape.displayName.toString == orig(this.shape.displayName.toString)
this.shape.numParams == orig(this.shape.numParams)
this.fillColor.toString == orig(this.fillColor.toString)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.nameAlign.displayName == orig(this.nameAlign.displayName)
this.nameAlign.displayName.toString == orig(this.nameAlign.displayName.toString)
this.attributes == orig(this.attributes)
this.attributes.toString == orig(this.attributes.toString)
this.shapeParams == orig(this.shapeParams)
this.shapeFlags == orig(this.shapeFlags)
this.shapeFlags.getClass().getName() == orig(this.shapeFlags.getClass().getName())
this.anchorName == orig(this.anchorName)
this.anchorName == orig(this.imageFileName)
this.anchorName.toString == orig(this.anchorName.toString)
this.imageFileName.toString == orig(this.imageFileName.toString)
this.imageFillStyle.description == orig(this.imageFillStyle.description)
this.imageFillStyle.description.toString == orig(this.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.shape.displayName.toString one of { "Ellipse", "No shape" }
this.name.toString one of { "e1", "e2" }
this.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
return one of { 0, 1 }
===========================================================================
ded.model.EntityShape:::CLASS
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == "No shape"
ded.model.EntityShape.ES_NO_SHAPE.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.EntityShape.ES_RECTANGLE.displayName has only one value
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == "Rectangle"
ded.model.EntityShape.ES_RECTANGLE.numParams == 0
ded.model.EntityShape.ES_ELLIPSE.displayName has only one value
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == "Ellipse"
ded.model.EntityShape.ES_ELLIPSE.numParams == 0
ded.model.EntityShape.ES_CUBOID.displayName has only one value
ded.model.EntityShape.ES_CUBOID.displayName.toString == "Cuboid"
ded.model.EntityShape.ES_CUBOID.numParams == 2
ded.model.EntityShape.ES_CYLINDER.displayName has only one value
ded.model.EntityShape.ES_CYLINDER.displayName.toString == "Cylinder"
ded.model.EntityShape.ES_CYLINDER.numParams == 0
ded.model.EntityShape.ES_WINDOW.displayName has only one value
ded.model.EntityShape.ES_WINDOW.displayName.toString == "Window"
ded.model.EntityShape.ES_WINDOW.numParams == 2
ded.model.EntityShape.ES_SCROLLBAR.displayName has only one value
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == "Scroll bar"
ded.model.EntityShape.ES_SCROLLBAR.numParams == 2
ded.model.EntityShape.ES_PUSHBUTTON.displayName has only one value
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == "Push button"
ded.model.EntityShape.ES_PUSHBUTTON.numParams == 0
ded.model.EntityShape.ES_TEXT_EDIT.displayName has only one value
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == "Text edit"
ded.model.EntityShape.ES_TEXT_EDIT.numParams == 0
ded.model.EntityShape.ES_DROPDOWN.displayName has only one value
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == "Dropdown"
ded.model.EntityShape.ES_DROPDOWN.numParams == 0
ded.model.EntityShape.ES_COMBO_BOX.displayName has only one value
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == "Combo box"
ded.model.EntityShape.ES_COMBO_BOX.numParams == 0
ded.model.EntityShape.ES_CHECK_BOX.displayName has only one value
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == "Check box"
ded.model.EntityShape.ES_CHECK_BOX.numParams == 0
ded.model.EntityShape.ES_RADIO_BUTTON.displayName has only one value
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == "Radio button"
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == 0
size(ded.model.EntityShape.$VALUES[]) == 13
===========================================================================
ded.model.EntityShape:::OBJECT
this.displayName != null
this.numParams one of { 0, 2 }
===========================================================================
ded.model.EntityShape.EntityShape(java.lang.String, int, java.lang.String, int):::ENTER
arg0 != null
arg2 != null
arg3 one of { 0, 2 }
===========================================================================
ded.model.EntityShape.EntityShape(java.lang.String, int, java.lang.String, int):::EXIT
this.displayName == orig(arg2)
this.numParams == orig(arg3)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
===========================================================================
ded.model.EntityShape.values():::ENTER
===========================================================================
ded.model.EntityShape.values():::EXIT
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == return.getClass().getName()
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
return has only one value
return[] contains no nulls and has only one value, of length 13
return[].displayName contains no nulls and has only one value, of length 13
return[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
return[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
return[].numParams elements one of { 0, 2 }
size(return[]) == 13
===========================================================================
ded.model.ImageFillStyle:::OBJECT
===========================================================================
ded.model.ImageFillStyle.ImageFillStyle(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
ded.model.ImageFillStyle.ImageFillStyle(java.lang.String, int, java.lang.String):::EXIT
this.description == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
===========================================================================
ded.model.Inheritance:::CLASS
ded.model.Inheritance.$assertionsDisabled == false
===========================================================================
ded.model.Inheritance:::OBJECT
this.parent != null
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultShape != null
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_NO_SHAPE != null
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_RECTANGLE != null
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_ELLIPSE != null
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CUBOID != null
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_CYLINDER != null
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_WINDOW != null
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_SCROLLBAR != null
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_PUSHBUTTON != null
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_TEXT_EDIT != null
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_DROPDOWN != null
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_COMBO_BOX != null
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX != null
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_RADIO_BUTTON != null
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName != null
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES != null
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[] elements != null
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName elements != null
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor != null
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor != null
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor != null
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultNameAlign != null
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_LEFT != null
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_CENTER != null
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.TextAlign.TA_RIGHT != null
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName != null
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES != null
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[] elements != null
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName elements != null
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.Entity.defaultImageFillStyle != null
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT != null
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_STRETCH != null
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_TILE != null
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE != null
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.ImageFillStyle.IFS_CENTER != null
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description != null
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES != null
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[] elements != null
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description elements != null
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
this.parent.loc != null
this.parent.size != null
this.parent.shape has only one value
this.parent.shape != null
this.parent.shape.displayName has only one value
this.parent.shape.displayName != null
this.parent.shape.displayName.toString == "Ellipse"
this.parent.shape.numParams == 0
this.parent.fillColor has only one value
this.parent.fillColor != null
this.parent.fillColor.toString == "Gray"
this.parent.lineColor has only one value
this.parent.lineColor != null
this.parent.lineColor.toString == "Black"
this.parent.textColor has only one value
this.parent.textColor != null
this.parent.textColor.toString == "Black"
this.parent.name != null
this.parent.name.toString == "e1"
this.parent.nameAlign has only one value
this.parent.nameAlign != null
this.parent.nameAlign.displayName has only one value
this.parent.nameAlign.displayName != null
this.parent.nameAlign.displayName.toString == "Center"
this.parent.attributes != null
this.parent.attributes.toString == "attr1\nattr2\nattr3"
this.parent.shapeParams == null
this.parent.shapeFlags != null
this.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
this.parent.anchorName has only one value
this.parent.anchorName != null
this.parent.anchorName.toString == ""
this.parent.imageFileName has only one value
this.parent.imageFileName != null
this.parent.imageFileName.toString == ""
this.parent.imageFillStyle has only one value
this.parent.imageFillStyle != null
this.parent.imageFillStyle.description has only one value
this.parent.imageFillStyle.description != null
this.parent.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
this.open == true
this.pt != null
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.Inheritance.Inheritance(ded.model.Entity, boolean, java.awt.Point):::ENTER
arg0 has only one value
ded.model.Entity.defaultShape has only one value
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
arg0.loc has only one value
arg0.size has only one value
arg0.shape has only one value
arg0.shape.displayName has only one value
arg0.shape.displayName.toString == "Ellipse"
arg0.shape.numParams == 0
arg0.fillColor has only one value
arg0.fillColor.toString == "Gray"
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.name has only one value
arg0.name.toString == "e1"
arg0.nameAlign has only one value
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes has only one value
arg0.attributes.toString == "attr1\nattr2\nattr3"
arg0.shapeParams == null
arg0.shapeFlags has only one value
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName has only one value
arg0.imageFileName.toString == ""
arg0.imageFillStyle has only one value
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
arg1 == true
arg2 has only one value
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.Inheritance.Inheritance(ded.model.Entity, boolean, java.awt.Point):::EXIT
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
arg0.loc == orig(arg0.loc)
arg0.size == orig(arg0.size)
arg0.shape == orig(arg0.shape)
arg0.shape.displayName == orig(arg0.shape.displayName)
arg0.shape.displayName.toString == orig(arg0.shape.displayName.toString)
arg0.shape.numParams == orig(arg0.shape.numParams)
arg0.fillColor == orig(arg0.fillColor)
arg0.fillColor.toString == orig(arg0.fillColor.toString)
arg0.lineColor == orig(arg0.lineColor)
arg0.lineColor.toString == orig(arg0.lineColor.toString)
arg0.textColor == orig(arg0.textColor)
arg0.textColor.toString == orig(arg0.textColor.toString)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.nameAlign == orig(arg0.nameAlign)
arg0.nameAlign.displayName == orig(arg0.nameAlign.displayName)
arg0.nameAlign.displayName.toString == orig(arg0.nameAlign.displayName.toString)
arg0.attributes == orig(arg0.attributes)
arg0.attributes.toString == orig(arg0.attributes.toString)
arg0.shapeParams == orig(arg0.shapeParams)
arg0.shapeFlags == orig(arg0.shapeFlags)
arg0.shapeFlags.getClass().getName() == orig(arg0.shapeFlags.getClass().getName())
arg0.anchorName == orig(arg0.anchorName)
arg0.anchorName.toString == orig(arg0.anchorName.toString)
arg0.imageFileName == orig(arg0.imageFileName)
arg0.imageFileName.toString == orig(arg0.imageFileName.toString)
arg0.imageFillStyle == orig(arg0.imageFillStyle)
arg0.imageFillStyle.description == orig(arg0.imageFillStyle.description)
arg0.imageFillStyle.description.toString == orig(arg0.imageFillStyle.description.toString)
this.parent has only one value
this.parent.loc has only one value
this.parent.size has only one value
this.parent.name has only one value
this.parent.attributes has only one value
this.parent.shapeFlags has only one value
this.pt has only one value
arg0.loc has only one value
arg0.size has only one value
arg0.shape has only one value
arg0.shape.displayName has only one value
arg0.shape.displayName.toString == "Ellipse"
arg0.shape.numParams == 0
arg0.fillColor has only one value
arg0.fillColor.toString == "Gray"
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.name has only one value
arg0.name.toString == "e1"
arg0.nameAlign has only one value
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes has only one value
arg0.attributes.toString == "attr1\nattr2\nattr3"
arg0.shapeParams == null
arg0.shapeFlags has only one value
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName has only one value
arg0.imageFileName.toString == ""
arg0.imageFillStyle has only one value
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
===========================================================================
ded.model.Inheritance.Inheritance(ded.model.Inheritance, ded.model.Entity):::ENTER
arg0 has only one value
arg0.parent has only one value
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.parent.loc has only one value
arg0.parent.size has only one value
arg0.parent.shape has only one value
arg0.parent.fillColor has only one value
arg0.parent.fillColor.toString == "Gray"
arg0.parent.lineColor has only one value
arg0.parent.lineColor.toString == "Black"
arg0.parent.textColor has only one value
arg0.parent.textColor.toString == "Black"
arg0.parent.name has only one value
arg0.parent.name.toString == "e1"
arg0.parent.nameAlign has only one value
arg0.parent.attributes has only one value
arg0.parent.attributes.toString == "attr1\nattr2\nattr3"
arg0.parent.shapeParams == null
arg0.parent.shapeFlags has only one value
arg0.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.parent.anchorName has only one value
arg0.parent.anchorName.toString == ""
arg0.parent.imageFileName has only one value
arg0.parent.imageFileName.toString == ""
arg0.parent.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.open == true
arg0.pt has only one value
ded.model.Inheritance.$assertionsDisabled == false
arg1 has only one value
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
arg1.loc has only one value
arg1.size has only one value
arg1.shape has only one value
arg1.shape.displayName has only one value
arg1.shape.displayName.toString == "Ellipse"
arg1.shape.numParams == 0
arg1.fillColor has only one value
arg1.fillColor.toString == "Gray"
arg1.lineColor has only one value
arg1.lineColor.toString == "Black"
arg1.textColor has only one value
arg1.textColor.toString == "Black"
arg1.name has only one value
arg1.name.toString == "e1"
arg1.nameAlign has only one value
arg1.nameAlign.displayName has only one value
arg1.nameAlign.displayName.toString == "Center"
arg1.attributes has only one value
arg1.attributes.toString == "attr1\nattr2\nattr3"
arg1.shapeParams == null
arg1.shapeFlags has only one value
arg1.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg1.anchorName has only one value
arg1.anchorName.toString == ""
arg1.imageFileName has only one value
arg1.imageFileName.toString == ""
arg1.imageFillStyle has only one value
arg1.imageFillStyle.description has only one value
arg1.imageFillStyle.description.toString == "One copy in upper left"
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.Inheritance.Inheritance(ded.model.Inheritance, ded.model.Entity):::EXIT
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
arg0.parent == orig(arg0.parent)
arg0.parent.loc == orig(arg0.parent.loc)
arg0.parent.size == orig(arg0.parent.size)
arg0.parent.shape == orig(arg0.parent.shape)
arg0.parent.fillColor == orig(arg0.parent.fillColor)
arg0.parent.fillColor.toString == orig(arg0.parent.fillColor.toString)
arg0.parent.lineColor == orig(arg0.parent.lineColor)
arg0.parent.lineColor.toString == orig(arg0.parent.lineColor.toString)
arg0.parent.textColor == orig(arg0.parent.textColor)
arg0.parent.textColor.toString == orig(arg0.parent.textColor.toString)
arg0.parent.name == orig(arg0.parent.name)
arg0.parent.name.toString == orig(arg0.parent.name.toString)
arg0.parent.nameAlign == orig(arg0.parent.nameAlign)
arg0.parent.attributes == orig(arg0.parent.attributes)
arg0.parent.attributes.toString == orig(arg0.parent.attributes.toString)
arg0.parent.shapeParams == orig(arg0.parent.shapeParams)
arg0.parent.shapeFlags == orig(arg0.parent.shapeFlags)
arg0.parent.shapeFlags.getClass().getName() == orig(arg0.parent.shapeFlags.getClass().getName())
arg0.parent.anchorName == orig(arg0.parent.anchorName)
arg0.parent.anchorName.toString == orig(arg0.parent.anchorName.toString)
arg0.parent.imageFileName == orig(arg0.parent.imageFileName)
arg0.parent.imageFileName.toString == orig(arg0.parent.imageFileName.toString)
arg0.parent.imageFillStyle == orig(arg0.parent.imageFillStyle)
arg0.open == orig(arg0.open)
arg0.pt == orig(arg0.pt)
arg1.loc == orig(arg1.loc)
arg1.size == orig(arg1.size)
arg1.shape == orig(arg1.shape)
arg1.shape.displayName == orig(arg1.shape.displayName)
arg1.shape.displayName.toString == orig(arg1.shape.displayName.toString)
arg1.shape.numParams == orig(arg1.shape.numParams)
arg1.fillColor == orig(arg1.fillColor)
arg1.fillColor.toString == orig(arg1.fillColor.toString)
arg1.lineColor == orig(arg1.lineColor)
arg1.lineColor.toString == orig(arg1.lineColor.toString)
arg1.textColor == orig(arg1.textColor)
arg1.textColor.toString == orig(arg1.textColor.toString)
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.nameAlign == orig(arg1.nameAlign)
arg1.nameAlign.displayName == orig(arg1.nameAlign.displayName)
arg1.nameAlign.displayName.toString == orig(arg1.nameAlign.displayName.toString)
arg1.attributes == orig(arg1.attributes)
arg1.attributes.toString == orig(arg1.attributes.toString)
arg1.shapeParams == orig(arg1.shapeParams)
arg1.shapeFlags == orig(arg1.shapeFlags)
arg1.shapeFlags.getClass().getName() == orig(arg1.shapeFlags.getClass().getName())
arg1.anchorName == orig(arg1.anchorName)
arg1.anchorName.toString == orig(arg1.anchorName.toString)
arg1.imageFileName == orig(arg1.imageFileName)
arg1.imageFileName.toString == orig(arg1.imageFileName.toString)
arg1.imageFillStyle == orig(arg1.imageFillStyle)
arg1.imageFillStyle.description == orig(arg1.imageFillStyle.description)
arg1.imageFillStyle.description.toString == orig(arg1.imageFillStyle.description.toString)
this.parent has only one value
this.parent.loc has only one value
this.parent.size has only one value
this.parent.name has only one value
this.parent.attributes has only one value
this.parent.shapeFlags has only one value
this.pt has only one value
arg0.parent has only one value
arg0.parent.loc has only one value
arg0.parent.size has only one value
arg0.parent.shape has only one value
arg0.parent.fillColor has only one value
arg0.parent.fillColor.toString == "Gray"
arg0.parent.lineColor has only one value
arg0.parent.lineColor.toString == "Black"
arg0.parent.textColor has only one value
arg0.parent.textColor.toString == "Black"
arg0.parent.name has only one value
arg0.parent.name.toString == "e1"
arg0.parent.nameAlign has only one value
arg0.parent.attributes has only one value
arg0.parent.attributes.toString == "attr1\nattr2\nattr3"
arg0.parent.shapeParams == null
arg0.parent.shapeFlags has only one value
arg0.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.parent.anchorName has only one value
arg0.parent.anchorName.toString == ""
arg0.parent.imageFileName has only one value
arg0.parent.imageFileName.toString == ""
arg0.parent.imageFillStyle has only one value
arg0.open == true
arg0.pt has only one value
arg1.loc has only one value
arg1.size has only one value
arg1.shape has only one value
arg1.shape.displayName has only one value
arg1.shape.displayName.toString == "Ellipse"
arg1.shape.numParams == 0
arg1.fillColor has only one value
arg1.fillColor.toString == "Gray"
arg1.lineColor has only one value
arg1.lineColor.toString == "Black"
arg1.textColor has only one value
arg1.textColor.toString == "Black"
arg1.name has only one value
arg1.name.toString == "e1"
arg1.nameAlign has only one value
arg1.nameAlign.displayName has only one value
arg1.nameAlign.displayName.toString == "Center"
arg1.attributes has only one value
arg1.attributes.toString == "attr1\nattr2\nattr3"
arg1.shapeParams == null
arg1.shapeFlags has only one value
arg1.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg1.anchorName has only one value
arg1.anchorName.toString == ""
arg1.imageFileName has only one value
arg1.imageFileName.toString == ""
arg1.imageFillStyle has only one value
arg1.imageFillStyle.description has only one value
arg1.imageFillStyle.description.toString == "One copy in upper left"
===========================================================================
ded.model.Inheritance.Inheritance(org.json.JSONObject, java.util.ArrayList):::ENTER
arg0 has only one value
arg0.map has only one value
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg1[].getClass().getName() elements == ded.model.Entity.class
size(arg1[]) == 2
===========================================================================
ded.model.Inheritance.Inheritance(org.json.JSONObject, java.util.ArrayList):::EXIT
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg1[] == orig(arg1[])
this.parent has only one value
this.parent.loc has only one value
this.parent.size has only one value
this.parent.name has only one value
this.parent.attributes has only one value
this.parent.shapeFlags has only one value
this.pt has only one value
arg0.map has only one value
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg1[].getClass().getName() elements == ded.model.Entity.class
===========================================================================
ded.model.Inheritance.equals(java.lang.Object):::ENTER
arg0.getClass().getName() == ded.model.Inheritance.class
===========================================================================
ded.model.Inheritance.equals(java.lang.Object):::EXIT64
===========================================================================
ded.model.Inheritance.equals(java.lang.Object):::EXIT64;condition="return == true"
===========================================================================
ded.model.Inheritance.equals(java.lang.Object):::EXIT
this.parent == orig(this.parent)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.parent.loc == orig(this.parent.loc)
this.parent.size == orig(this.parent.size)
this.parent.shape == orig(this.parent.shape)
this.parent.shape.displayName == orig(this.parent.shape.displayName)
this.parent.shape.displayName.toString == orig(this.parent.shape.displayName.toString)
this.parent.shape.numParams == orig(this.parent.shape.numParams)
this.parent.fillColor == orig(this.parent.fillColor)
this.parent.fillColor.toString == orig(this.parent.fillColor.toString)
this.parent.lineColor == orig(this.parent.lineColor)
this.parent.lineColor.toString == orig(this.parent.lineColor.toString)
this.parent.textColor == orig(this.parent.textColor)
this.parent.textColor.toString == orig(this.parent.textColor.toString)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.nameAlign == orig(this.parent.nameAlign)
this.parent.nameAlign.displayName == orig(this.parent.nameAlign.displayName)
this.parent.nameAlign.displayName.toString == orig(this.parent.nameAlign.displayName.toString)
this.parent.attributes == orig(this.parent.attributes)
this.parent.attributes.toString == orig(this.parent.attributes.toString)
this.parent.shapeParams == orig(this.parent.shapeParams)
this.parent.shapeFlags == orig(this.parent.shapeFlags)
this.parent.shapeFlags.getClass().getName() == orig(this.parent.shapeFlags.getClass().getName())
this.parent.anchorName == orig(this.parent.anchorName)
this.parent.anchorName.toString == orig(this.parent.anchorName.toString)
this.parent.imageFileName == orig(this.parent.imageFileName)
this.parent.imageFileName.toString == orig(this.parent.imageFileName.toString)
this.parent.imageFillStyle == orig(this.parent.imageFillStyle)
this.parent.imageFillStyle.description == orig(this.parent.imageFillStyle.description)
this.parent.imageFillStyle.description.toString == orig(this.parent.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.open == orig(this.open)
this.pt == orig(this.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
return == true
===========================================================================
ded.model.Inheritance.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
ded.model.Inheritance.fromJSONRef(java.util.ArrayList, long):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [ded.model.Inheritance]
arg0[].getClass().getName() elements == ded.model.Inheritance.class
arg1 == 0
size(arg0[]) == 1
===========================================================================
ded.model.Inheritance.fromJSONRef(java.util.ArrayList, long):::EXIT
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [ded.model.Inheritance]
arg0[].getClass().getName() elements == ded.model.Inheritance.class
return has only one value
return.parent has only one value
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
return.parent.loc has only one value
return.parent.size has only one value
return.parent.shape has only one value
return.parent.fillColor has only one value
return.parent.fillColor.toString == "Gray"
return.parent.lineColor has only one value
return.parent.lineColor.toString == "Black"
return.parent.textColor has only one value
return.parent.textColor.toString == "Black"
return.parent.name has only one value
return.parent.name.toString == "e1"
return.parent.nameAlign has only one value
return.parent.attributes has only one value
return.parent.attributes.toString == "attr1\nattr2\nattr3"
return.parent.shapeParams == null
return.parent.shapeFlags has only one value
return.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
return.parent.anchorName has only one value
return.parent.anchorName.toString == ""
return.parent.imageFileName has only one value
return.parent.imageFileName.toString == ""
return.parent.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
return.open == true
return.pt has only one value
===========================================================================
ded.model.Inheritance.globalSelfCheck(ded.model.Diagram):::ENTER
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.drawFileName == true
arg0.backgroundColor has only one value
arg0.backgroundColor.toString == "White"
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
ded.model.Diagram.$assertionsDisabled == false
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.Inheritance.globalSelfCheck(ded.model.Diagram):::EXIT
this.parent == orig(this.parent)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.parent.loc == orig(this.parent.loc)
this.parent.size == orig(this.parent.size)
this.parent.shape == orig(this.parent.shape)
this.parent.shape.displayName == orig(this.parent.shape.displayName)
this.parent.shape.displayName.toString == orig(this.parent.shape.displayName.toString)
this.parent.shape.numParams == orig(this.parent.shape.numParams)
this.parent.fillColor == orig(this.parent.fillColor)
this.parent.fillColor.toString == orig(this.parent.fillColor.toString)
this.parent.lineColor == orig(this.parent.lineColor)
this.parent.lineColor.toString == orig(this.parent.lineColor.toString)
this.parent.textColor == orig(this.parent.textColor)
this.parent.textColor.toString == orig(this.parent.textColor.toString)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.nameAlign == orig(this.parent.nameAlign)
this.parent.nameAlign.displayName == orig(this.parent.nameAlign.displayName)
this.parent.nameAlign.displayName.toString == orig(this.parent.nameAlign.displayName.toString)
this.parent.attributes == orig(this.parent.attributes)
this.parent.attributes.toString == orig(this.parent.attributes.toString)
this.parent.shapeParams == orig(this.parent.shapeParams)
this.parent.shapeFlags == orig(this.parent.shapeFlags)
this.parent.shapeFlags.getClass().getName() == orig(this.parent.shapeFlags.getClass().getName())
this.parent.anchorName == orig(this.parent.anchorName)
this.parent.anchorName.toString == orig(this.parent.anchorName.toString)
this.parent.imageFileName == orig(this.parent.imageFileName)
this.parent.imageFileName.toString == orig(this.parent.imageFileName.toString)
this.parent.imageFillStyle == orig(this.parent.imageFillStyle)
this.parent.imageFillStyle.description == orig(this.parent.imageFillStyle.description)
this.parent.imageFillStyle.description.toString == orig(this.parent.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.open == orig(this.open)
this.pt == orig(this.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
arg0.windowSize == orig(arg0.windowSize)
arg0.drawFileName == orig(arg0.drawFileName)
arg0.backgroundColor == orig(arg0.backgroundColor)
arg0.backgroundColor.toString == orig(arg0.backgroundColor.toString)
arg0.entities == orig(arg0.entities)
arg0.entities[] == orig(arg0.entities[])
arg0.inheritances == orig(arg0.inheritances)
arg0.inheritances[] == orig(arg0.inheritances[])
arg0.relations == orig(arg0.relations)
arg0.relations[] == orig(arg0.relations[])
arg0.namedColors == orig(arg0.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.drawFileName == true
arg0.backgroundColor has only one value
arg0.backgroundColor.toString == "White"
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
ded.model.Diagram.$assertionsDisabled == false
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.Inheritance.hashCode():::ENTER
===========================================================================
ded.model.Inheritance.hashCode():::EXIT
this.parent == orig(this.parent)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.parent.loc == orig(this.parent.loc)
this.parent.size == orig(this.parent.size)
this.parent.shape == orig(this.parent.shape)
this.parent.shape.displayName == orig(this.parent.shape.displayName)
this.parent.shape.displayName.toString == orig(this.parent.shape.displayName.toString)
this.parent.shape.numParams == orig(this.parent.shape.numParams)
this.parent.fillColor == orig(this.parent.fillColor)
this.parent.fillColor.toString == orig(this.parent.fillColor.toString)
this.parent.lineColor == orig(this.parent.lineColor)
this.parent.lineColor.toString == orig(this.parent.lineColor.toString)
this.parent.textColor == orig(this.parent.textColor)
this.parent.textColor.toString == orig(this.parent.textColor.toString)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.nameAlign == orig(this.parent.nameAlign)
this.parent.nameAlign.displayName == orig(this.parent.nameAlign.displayName)
this.parent.nameAlign.displayName.toString == orig(this.parent.nameAlign.displayName.toString)
this.parent.attributes == orig(this.parent.attributes)
this.parent.attributes.toString == orig(this.parent.attributes.toString)
this.parent.shapeParams == orig(this.parent.shapeParams)
this.parent.shapeFlags == orig(this.parent.shapeFlags)
this.parent.shapeFlags.getClass().getName() == orig(this.parent.shapeFlags.getClass().getName())
this.parent.anchorName == orig(this.parent.anchorName)
this.parent.anchorName.toString == orig(this.parent.anchorName.toString)
this.parent.imageFileName == orig(this.parent.imageFileName)
this.parent.imageFileName.toString == orig(this.parent.imageFileName.toString)
this.parent.imageFillStyle == orig(this.parent.imageFillStyle)
this.parent.imageFillStyle.description == orig(this.parent.imageFillStyle.description)
this.parent.imageFillStyle.description.toString == orig(this.parent.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.open == orig(this.open)
this.pt == orig(this.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
return == 1707913073
===========================================================================
ded.model.Inheritance.toJSON(java.util.HashMap):::ENTER
===========================================================================
ded.model.Inheritance.toJSON(java.util.HashMap):::EXIT
this.parent == orig(this.parent)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.parent.loc == orig(this.parent.loc)
this.parent.size == orig(this.parent.size)
this.parent.shape == orig(this.parent.shape)
this.parent.shape.displayName == orig(this.parent.shape.displayName)
this.parent.shape.displayName.toString == orig(this.parent.shape.displayName.toString)
this.parent.shape.numParams == orig(this.parent.shape.numParams)
this.parent.fillColor == orig(this.parent.fillColor)
this.parent.fillColor.toString == orig(this.parent.fillColor.toString)
this.parent.lineColor == orig(this.parent.lineColor)
this.parent.lineColor.toString == orig(this.parent.lineColor.toString)
this.parent.textColor == orig(this.parent.textColor)
this.parent.textColor.toString == orig(this.parent.textColor.toString)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.nameAlign == orig(this.parent.nameAlign)
this.parent.nameAlign.displayName == orig(this.parent.nameAlign.displayName)
this.parent.nameAlign.displayName.toString == orig(this.parent.nameAlign.displayName.toString)
this.parent.attributes == orig(this.parent.attributes)
this.parent.attributes.toString == orig(this.parent.attributes.toString)
this.parent.shapeParams == orig(this.parent.shapeParams)
this.parent.shapeFlags == orig(this.parent.shapeFlags)
this.parent.shapeFlags.getClass().getName() == orig(this.parent.shapeFlags.getClass().getName())
this.parent.anchorName == orig(this.parent.anchorName)
this.parent.anchorName.toString == orig(this.parent.anchorName.toString)
this.parent.imageFileName == orig(this.parent.imageFileName)
this.parent.imageFileName.toString == orig(this.parent.imageFileName.toString)
this.parent.imageFillStyle == orig(this.parent.imageFillStyle)
this.parent.imageFillStyle.description == orig(this.parent.imageFillStyle.description)
this.parent.imageFillStyle.description.toString == orig(this.parent.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.open == orig(this.open)
this.pt == orig(this.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
ded.model.Inheritance.toJSONRef(java.util.HashMap):::ENTER
===========================================================================
ded.model.Inheritance.toJSONRef(java.util.HashMap):::EXIT
this.parent == orig(this.parent)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.parent.loc == orig(this.parent.loc)
this.parent.size == orig(this.parent.size)
this.parent.shape == orig(this.parent.shape)
this.parent.shape.displayName == orig(this.parent.shape.displayName)
this.parent.shape.displayName.toString == orig(this.parent.shape.displayName.toString)
this.parent.shape.numParams == orig(this.parent.shape.numParams)
this.parent.fillColor == orig(this.parent.fillColor)
this.parent.fillColor.toString == orig(this.parent.fillColor.toString)
this.parent.lineColor == orig(this.parent.lineColor)
this.parent.lineColor.toString == orig(this.parent.lineColor.toString)
this.parent.textColor == orig(this.parent.textColor)
this.parent.textColor.toString == orig(this.parent.textColor.toString)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.nameAlign == orig(this.parent.nameAlign)
this.parent.nameAlign.displayName == orig(this.parent.nameAlign.displayName)
this.parent.nameAlign.displayName.toString == orig(this.parent.nameAlign.displayName.toString)
this.parent.attributes == orig(this.parent.attributes)
this.parent.attributes.toString == orig(this.parent.attributes.toString)
this.parent.shapeParams == orig(this.parent.shapeParams)
this.parent.shapeFlags == orig(this.parent.shapeFlags)
this.parent.shapeFlags.getClass().getName() == orig(this.parent.shapeFlags.getClass().getName())
this.parent.anchorName == orig(this.parent.anchorName)
this.parent.anchorName.toString == orig(this.parent.anchorName.toString)
this.parent.imageFileName == orig(this.parent.imageFileName)
this.parent.imageFileName.toString == orig(this.parent.imageFileName.toString)
this.parent.imageFillStyle == orig(this.parent.imageFillStyle)
this.parent.imageFillStyle.description == orig(this.parent.imageFillStyle.description)
this.parent.imageFillStyle.description.toString == orig(this.parent.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.open == orig(this.open)
this.pt == orig(this.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
return == 0
===========================================================================
ded.model.Relation:::CLASS
ded.model.Relation.defaultRoutingAlgorithm == ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == ded.model.Relation.defaultRoutingAlgorithm.description
ded.model.Relation.defaultLineColor == ded.model.Relation.defaultTextColor
ded.model.Relation.defaultRoutingAlgorithm has only one value
ded.model.Relation.defaultRoutingAlgorithm != null
ded.model.RoutingAlgorithm.RA_DIRECT has only one value
ded.model.RoutingAlgorithm.RA_DIRECT != null
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT != null
ded.model.RoutingAlgorithm.RA_DIRECT.description has only one value
ded.model.RoutingAlgorithm.RA_DIRECT.description != null
ded.model.RoutingAlgorithm.RA_DIRECT.description.toString == "Direct"
ded.model.RoutingAlgorithm.$VALUES has only one value
ded.model.RoutingAlgorithm.$VALUES != null
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == ded.model.RoutingAlgorithm[].class
ded.model.RoutingAlgorithm.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[] elements != null
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() == [ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm]
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() elements == ded.model.RoutingAlgorithm.class
ded.model.RoutingAlgorithm.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].description elements != null
ded.model.RoutingAlgorithm.$VALUES[].description.toString == [Direct, Horizontal First Manhattan, Vertical First Manhattan]
ded.model.RoutingAlgorithm.$VALUES[].description.toString elements one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description != null
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString == "Horizontal First Manhattan"
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description != null
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString == "Vertical First Manhattan"
ded.model.Relation.defaultRoutingAlgorithm.description.toString == "Horizontal First Manhattan"
ded.model.Relation.defaultLineColor has only one value
ded.model.Relation.defaultLineColor != null
ded.model.Relation.defaultLineColor.toString == "Black"
ded.model.Relation.defaultTextColor.toString == "Black"
ded.model.Relation.$assertionsDisabled == false
size(ded.model.RoutingAlgorithm.$VALUES[]) == 3
===========================================================================
ded.model.Relation:::OBJECT
ded.model.Relation.defaultLineColor == ded.model.Entity.defaultLineColor
ded.model.Relation.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Relation.defaultLineColor == this.start.entity.lineColor
ded.model.Relation.defaultLineColor == this.end.entity.lineColor
ded.model.Relation.defaultLineColor == this.lineColor
ded.model.Relation.defaultLineColor == this.textColor
ded.model.Entity.defaultFillColor == this.start.entity.fillColor
ded.model.Entity.defaultFillColor == this.end.entity.fillColor
ded.model.Entity.defaultNameAlign == this.start.entity.nameAlign
ded.model.Entity.defaultNameAlign == this.end.entity.nameAlign
ded.model.Entity.defaultImageFillStyle == this.start.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == this.end.entity.imageFillStyle
this.start.entity.fillColor == this.end.entity.fillColor
this.start.entity.lineColor == this.start.entity.textColor
this.start.entity.lineColor == this.end.entity.lineColor
this.start.entity.nameAlign == this.end.entity.nameAlign
this.start.entity.shapeFlags.getClass().getName() == this.end.entity.shapeFlags.getClass().getName()
this.start.entity.anchorName == this.start.entity.imageFileName
this.start.entity.anchorName == this.end.entity.anchorName
this.start.entity.imageFillStyle == this.end.entity.imageFillStyle
this.end.entity.lineColor == this.end.entity.textColor
this.end.entity.anchorName == this.end.entity.imageFileName
this.start != null
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultShape != null
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor != null
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultNameAlign != null
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.Entity.defaultImageFillStyle != null
this.start.entity.loc != null
this.start.entity.size != null
this.start.entity.shape != null
this.start.entity.fillColor has only one value
this.start.entity.fillColor != null
this.start.entity.fillColor.toString == "Gray"
this.start.entity.lineColor has only one value
this.start.entity.lineColor != null
this.start.entity.lineColor.toString == "Black"
this.start.entity.textColor.toString == "Black"
this.start.entity.name != null
this.start.entity.name.toString one of { "e1", "e2" }
this.start.entity.nameAlign has only one value
this.start.entity.nameAlign != null
this.start.entity.attributes != null
this.start.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
this.start.entity.shapeParams == null
this.start.entity.shapeFlags != null
this.start.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
this.start.entity.anchorName has only one value
this.start.entity.anchorName != null
this.start.entity.anchorName.toString == ""
this.start.entity.imageFileName.toString == ""
this.start.entity.imageFillStyle has only one value
this.start.entity.imageFillStyle != null
ded.model.Entity.$assertionsDisabled == false
this.start.inheritance == null
ded.model.Inheritance.$assertionsDisabled == false
this.start.arrowStyle != null
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_NONE != null
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE != null
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE != null
this.start.arrowStyle.description != null
this.start.arrowStyle.description.toString one of { "Double angle", "None" }
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES != null
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[] elements != null
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description elements != null
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.RelationEndpoint.$assertionsDisabled == false
this.end != null
this.end.entity.loc != null
this.end.entity.size != null
this.end.entity.shape has only one value
this.end.entity.shape != null
this.end.entity.fillColor has only one value
this.end.entity.fillColor != null
this.end.entity.fillColor.toString == "Gray"
this.end.entity.lineColor has only one value
this.end.entity.lineColor != null
this.end.entity.lineColor.toString == "Black"
this.end.entity.textColor.toString == "Black"
this.end.entity.name != null
this.end.entity.name.toString == "e2"
this.end.entity.nameAlign has only one value
this.end.entity.nameAlign != null
this.end.entity.attributes != null
this.end.entity.attributes.toString == "funny\"characters\\in'this,string!"
this.end.entity.shapeParams == null
this.end.entity.shapeFlags != null
this.end.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
this.end.entity.anchorName has only one value
this.end.entity.anchorName != null
this.end.entity.anchorName.toString == ""
this.end.entity.imageFileName.toString == ""
this.end.entity.imageFillStyle has only one value
this.end.entity.imageFillStyle != null
this.end.inheritance.parent != null
this.end.inheritance.open == true
this.end.inheritance.pt != null
this.end.arrowStyle != null
this.end.arrowStyle.description != null
this.end.arrowStyle.description.toString one of { "Filled triangle", "None" }
this.controlPts != null
this.controlPts[] elements != null
this.controlPts[].getClass().getName() elements == java.awt.Point.class
this.controlPts[].getClass().getName() one of { [], [java.awt.Point, java.awt.Point] }
this.routingAlg != null
this.routingAlg.description != null
this.routingAlg.description.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
this.label != null
this.label.toString one of { "", "r1" }
this.lineWidth == null
this.lineColor.toString == "Black"
this.textColor.toString == "Black"
this.dashStructure != null
this.dashStructure[] == []
this.dashStructure[].getClass().getName() == []
size(ded.model.ArrowStyle.$VALUES[]) == 3
size(this.controlPts[]) one of { 0, 2 }
size(this.controlPts[])-1 != 0
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != this.start.entity.shapeFlags.getClass().getName()
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != ded.model.ArrowStyle.$VALUES.getClass().getName()
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != this.end.entity.shapeFlags.getClass().getName()
this.start.entity.shapeFlags.getClass().getName() != ded.model.ArrowStyle.$VALUES.getClass().getName()
ded.model.ArrowStyle.$VALUES.getClass().getName() != this.end.entity.shapeFlags.getClass().getName()
===========================================================================
ded.model.Relation.Relation(ded.model.Relation, ded.model.RelationEndpoint, ded.model.RelationEndpoint):::ENTER
ded.model.Relation.defaultRoutingAlgorithm == ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ
ded.model.Relation.defaultLineColor == ded.model.Relation.defaultTextColor
ded.model.Relation.defaultLineColor == arg0.lineColor
ded.model.Relation.defaultLineColor == arg0.textColor
ded.model.Relation.defaultLineColor == ded.model.Entity.defaultLineColor
ded.model.Relation.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Relation.defaultLineColor == arg1.entity.lineColor
ded.model.Relation.defaultLineColor == arg2.entity.lineColor
arg0.start.arrowStyle == arg1.arrowStyle
arg0.end.arrowStyle == arg2.arrowStyle
ded.model.Entity.defaultFillColor == arg1.entity.fillColor
ded.model.Entity.defaultFillColor == arg2.entity.fillColor
ded.model.Entity.defaultNameAlign == arg1.entity.nameAlign
ded.model.Entity.defaultNameAlign == arg2.entity.nameAlign
ded.model.Entity.defaultImageFillStyle == arg1.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == arg2.entity.imageFillStyle
arg1.entity.fillColor == arg2.entity.fillColor
arg1.entity.lineColor == arg1.entity.textColor
arg1.entity.lineColor == arg2.entity.lineColor
arg1.entity.nameAlign == arg2.entity.nameAlign
arg1.entity.shapeFlags.getClass().getName() == arg2.entity.shapeFlags.getClass().getName()
arg1.entity.anchorName == arg1.entity.imageFileName
arg1.entity.anchorName == arg2.entity.anchorName
arg1.entity.imageFillStyle == arg2.entity.imageFillStyle
arg2.entity.lineColor == arg2.entity.textColor
arg2.entity.anchorName == arg2.entity.imageFileName
ded.model.Relation.defaultRoutingAlgorithm has only one value
ded.model.RoutingAlgorithm.RA_DIRECT has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT has only one value
ded.model.Relation.defaultRoutingAlgorithm.description has only one value
ded.model.Relation.defaultRoutingAlgorithm.description.toString == "Horizontal First Manhattan"
ded.model.RoutingAlgorithm.$VALUES has only one value
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == ded.model.RoutingAlgorithm[].class
ded.model.RoutingAlgorithm.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() == [ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm]
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() elements == ded.model.RoutingAlgorithm.class
ded.model.RoutingAlgorithm.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].description.toString == [Direct, Horizontal First Manhattan, Vertical First Manhattan]
ded.model.RoutingAlgorithm.$VALUES[].description.toString elements one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
ded.model.Relation.defaultLineColor has only one value
ded.model.Relation.defaultLineColor.toString == "Black"
ded.model.Relation.defaultTextColor.toString == "Black"
arg0.start.inheritance == null
ded.model.RelationEndpoint.$assertionsDisabled == false
arg0.controlPts[].getClass().getName() elements == java.awt.Point.class
arg0.controlPts[].getClass().getName() one of { [], [java.awt.Point, java.awt.Point] }
arg0.routingAlg.description.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
arg0.label.toString one of { "", "r1" }
arg0.lineWidth == null
arg0.lineColor.toString == "Black"
arg0.textColor.toString == "Black"
arg0.dashStructure[] == []
arg0.dashStructure[].getClass().getName() == []
ded.model.Relation.$assertionsDisabled == false
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg1.entity.fillColor has only one value
arg1.entity.fillColor.toString == "Gray"
arg1.entity.lineColor has only one value
arg1.entity.lineColor.toString == "Black"
arg1.entity.textColor.toString == "Black"
arg1.entity.name.toString one of { "e1", "e2" }
arg1.entity.nameAlign has only one value
arg1.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg1.entity.shapeParams == null
arg1.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg1.entity.anchorName has only one value
arg1.entity.anchorName.toString == ""
arg1.entity.imageFileName.toString == ""
arg1.entity.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg1.inheritance == null
ded.model.Inheritance.$assertionsDisabled == false
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
arg1.arrowStyle.description.toString one of { "Double angle", "None" }
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
arg2.entity.loc has only one value
arg2.entity.size has only one value
arg2.entity.shape has only one value
arg2.entity.fillColor has only one value
arg2.entity.fillColor.toString == "Gray"
arg2.entity.lineColor has only one value
arg2.entity.lineColor.toString == "Black"
arg2.entity.textColor.toString == "Black"
arg2.entity.name has only one value
arg2.entity.name.toString == "e2"
arg2.entity.nameAlign has only one value
arg2.entity.attributes has only one value
arg2.entity.attributes.toString == "funny\"characters\\in'this,string!"
arg2.entity.shapeParams == null
arg2.entity.shapeFlags has only one value
arg2.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg2.entity.anchorName has only one value
arg2.entity.anchorName.toString == ""
arg2.entity.imageFileName.toString == ""
arg2.entity.imageFillStyle has only one value
arg2.inheritance.parent has only one value
arg2.inheritance.open == true
arg2.inheritance.pt has only one value
arg2.arrowStyle.description.toString one of { "Filled triangle", "None" }
size(ded.model.RoutingAlgorithm.$VALUES[]) == 3
size(arg0.controlPts[]) one of { 0, 2 }
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.Relation.Relation(ded.model.Relation, ded.model.RelationEndpoint, ded.model.RelationEndpoint):::EXIT
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.Relation.defaultRoutingAlgorithm)
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ)
ded.model.RoutingAlgorithm.RA_DIRECT == orig(ded.model.RoutingAlgorithm.RA_DIRECT)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT)
ded.model.RoutingAlgorithm.$VALUES == orig(ded.model.RoutingAlgorithm.$VALUES)
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == orig(ded.model.RoutingAlgorithm.$VALUES.getClass().getName())
ded.model.RoutingAlgorithm.$VALUES[] == orig(ded.model.RoutingAlgorithm.$VALUES[])
ded.model.RoutingAlgorithm.$VALUES[].description == orig(ded.model.RoutingAlgorithm.$VALUES[].description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.Relation.defaultRoutingAlgorithm.description)
ded.model.Relation.defaultRoutingAlgorithm.description.toString == orig(ded.model.Relation.defaultRoutingAlgorithm.description.toString)
ded.model.Relation.defaultLineColor == arg0.lineColor
ded.model.Relation.defaultLineColor == arg0.textColor
ded.model.Relation.defaultLineColor == arg1.entity.lineColor
ded.model.Relation.defaultLineColor == arg2.entity.lineColor
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(arg0.lineColor)
ded.model.Relation.defaultLineColor == orig(arg0.textColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Relation.defaultLineColor.toString == orig(ded.model.Relation.defaultLineColor.toString)
ded.model.Relation.defaultTextColor.toString == orig(ded.model.Relation.defaultTextColor.toString)
this.start == orig(arg1)
this.start.entity == arg1.entity
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == arg1.entity.fillColor
ded.model.Entity.defaultFillColor == arg2.entity.fillColor
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == arg1.entity.nameAlign
ded.model.Entity.defaultNameAlign == arg2.entity.nameAlign
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == arg1.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == arg2.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
this.start.entity.loc == arg1.entity.loc
this.start.entity.size == arg1.entity.size
this.start.entity.shape == arg1.entity.shape
this.start.entity.fillColor == arg1.entity.fillColor
this.start.entity.lineColor == arg1.entity.lineColor
this.start.entity.textColor == arg1.entity.lineColor
this.start.entity.name == arg1.entity.name
this.start.entity.nameAlign == arg1.entity.nameAlign
this.start.entity.attributes == arg1.entity.attributes
this.start.entity.shapeFlags == arg1.entity.shapeFlags
this.start.entity.shapeFlags.getClass().getName() == arg1.entity.shapeFlags.getClass().getName()
this.start.entity.anchorName == arg1.entity.anchorName
this.start.entity.imageFileName == arg1.entity.anchorName
this.start.entity.imageFillStyle == arg1.entity.imageFillStyle
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.start.pt == arg1.pt
this.start.arrowStyle == arg1.arrowStyle
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
this.start.arrowStyle.description == arg1.arrowStyle.description
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
this.end == orig(arg2)
this.end.entity == arg2.entity
this.end.entity.loc == arg2.entity.loc
this.end.entity.size == arg2.entity.size
this.end.entity.shape == arg2.entity.shape
this.end.entity.fillColor == arg2.entity.fillColor
this.end.entity.lineColor == arg2.entity.lineColor
this.end.entity.textColor == arg2.entity.lineColor
this.end.entity.name == arg2.entity.name
this.end.entity.nameAlign == arg2.entity.nameAlign
this.end.entity.attributes == arg2.entity.attributes
this.end.entity.shapeFlags == arg2.entity.shapeFlags
this.end.entity.shapeFlags.getClass().getName() == arg2.entity.shapeFlags.getClass().getName()
this.end.entity.anchorName == arg2.entity.anchorName
this.end.entity.imageFileName == arg2.entity.anchorName
this.end.entity.imageFillStyle == arg2.entity.imageFillStyle
this.end.inheritance == arg2.inheritance
this.end.inheritance.parent == arg2.inheritance.parent
this.end.inheritance.open == arg2.inheritance.open
this.end.inheritance.pt == arg2.inheritance.pt
this.end.pt == arg2.pt
this.end.arrowStyle == arg2.arrowStyle
this.end.arrowStyle.description == arg2.arrowStyle.description
this.routingAlg == arg0.routingAlg
this.routingAlg == orig(arg0.routingAlg)
this.routingAlg.description == arg0.routingAlg.description
this.routingAlg.description == orig(arg0.routingAlg.description)
this.label == arg0.label
this.label == orig(arg0.label)
ded.model.Relation.$assertionsDisabled == orig(ded.model.Relation.$assertionsDisabled)
arg0.start == orig(arg0.start)
arg0.start.entity == orig(arg0.start.entity)
arg0.start.inheritance == orig(arg0.start.inheritance)
arg0.start.pt == orig(arg0.start.pt)
arg0.start.arrowStyle == arg1.arrowStyle
arg0.end == orig(arg0.end)
arg0.end.entity == orig(arg0.end.entity)
arg0.end.inheritance == orig(arg0.end.inheritance)
arg0.end.pt == orig(arg0.end.pt)
arg0.end.arrowStyle == arg2.arrowStyle
arg0.controlPts == orig(arg0.controlPts)
arg0.controlPts[] == orig(arg0.controlPts[])
arg0.routingAlg.description.toString == orig(arg0.routingAlg.description.toString)
arg0.label.toString == orig(arg0.label.toString)
arg0.lineWidth == orig(arg0.lineWidth)
arg0.lineColor.toString == orig(arg0.lineColor.toString)
arg0.textColor.toString == orig(arg0.textColor.toString)
arg0.dashStructure == orig(arg0.dashStructure)
arg0.dashStructure[] == orig(arg0.dashStructure[])
arg1.entity == orig(arg1.entity)
arg1.entity.loc == orig(arg1.entity.loc)
arg1.entity.size == orig(arg1.entity.size)
arg1.entity.shape == orig(arg1.entity.shape)
arg1.entity.fillColor == arg2.entity.fillColor
arg1.entity.fillColor == orig(arg1.entity.fillColor)
arg1.entity.fillColor.toString == orig(arg1.entity.fillColor.toString)
arg1.entity.lineColor == arg1.entity.textColor
arg1.entity.lineColor == arg2.entity.lineColor
arg1.entity.lineColor == orig(arg1.entity.lineColor)
arg1.entity.lineColor == orig(arg1.entity.textColor)
arg1.entity.lineColor.toString == orig(arg1.entity.lineColor.toString)
arg1.entity.textColor.toString == orig(arg1.entity.textColor.toString)
arg1.entity.name == orig(arg1.entity.name)
arg1.entity.name.toString == orig(arg1.entity.name.toString)
arg1.entity.nameAlign == arg2.entity.nameAlign
arg1.entity.nameAlign == orig(arg1.entity.nameAlign)
arg1.entity.attributes == orig(arg1.entity.attributes)
arg1.entity.attributes.toString == orig(arg1.entity.attributes.toString)
arg1.entity.shapeParams == orig(arg1.entity.shapeParams)
arg1.entity.shapeFlags == orig(arg1.entity.shapeFlags)
arg1.entity.shapeFlags.getClass().getName() == arg2.entity.shapeFlags.getClass().getName()
arg1.entity.shapeFlags.getClass().getName() == orig(arg1.entity.shapeFlags.getClass().getName())
arg1.entity.anchorName == arg1.entity.imageFileName
arg1.entity.anchorName == arg2.entity.anchorName
arg1.entity.anchorName == orig(arg1.entity.anchorName)
arg1.entity.anchorName == orig(arg1.entity.imageFileName)
arg1.entity.anchorName.toString == orig(arg1.entity.anchorName.toString)
arg1.entity.imageFileName.toString == orig(arg1.entity.imageFileName.toString)
arg1.entity.imageFillStyle == arg2.entity.imageFillStyle
arg1.entity.imageFillStyle == orig(arg1.entity.imageFillStyle)
arg1.inheritance == orig(arg1.inheritance)
arg1.pt == orig(arg1.pt)
arg1.arrowStyle == orig(arg0.start.arrowStyle)
arg1.arrowStyle == orig(arg1.arrowStyle)
arg1.arrowStyle.description == orig(arg1.arrowStyle.description)
arg1.arrowStyle.description.toString == orig(arg1.arrowStyle.description.toString)
arg2.entity == orig(arg2.entity)
arg2.entity.loc == orig(arg2.entity.loc)
arg2.entity.size == orig(arg2.entity.size)
arg2.entity.shape == orig(arg2.entity.shape)
arg2.entity.fillColor == orig(arg2.entity.fillColor)
arg2.entity.fillColor.toString == orig(arg2.entity.fillColor.toString)
arg2.entity.lineColor == arg2.entity.textColor
arg2.entity.lineColor == orig(arg2.entity.lineColor)
arg2.entity.lineColor == orig(arg2.entity.textColor)
arg2.entity.lineColor.toString == orig(arg2.entity.lineColor.toString)
arg2.entity.textColor.toString == orig(arg2.entity.textColor.toString)
arg2.entity.name == orig(arg2.entity.name)
arg2.entity.name.toString == orig(arg2.entity.name.toString)
arg2.entity.nameAlign == orig(arg2.entity.nameAlign)
arg2.entity.attributes == orig(arg2.entity.attributes)
arg2.entity.attributes.toString == orig(arg2.entity.attributes.toString)
arg2.entity.shapeParams == orig(arg2.entity.shapeParams)
arg2.entity.shapeFlags == orig(arg2.entity.shapeFlags)
arg2.entity.shapeFlags.getClass().getName() == orig(arg2.entity.shapeFlags.getClass().getName())
arg2.entity.anchorName == arg2.entity.imageFileName
arg2.entity.anchorName == orig(arg2.entity.anchorName)
arg2.entity.anchorName == orig(arg2.entity.imageFileName)
arg2.entity.anchorName.toString == orig(arg2.entity.anchorName.toString)
arg2.entity.imageFileName.toString == orig(arg2.entity.imageFileName.toString)
arg2.entity.imageFillStyle == orig(arg2.entity.imageFillStyle)
arg2.inheritance == orig(arg2.inheritance)
arg2.inheritance.parent == orig(arg2.inheritance.parent)
arg2.inheritance.open == orig(arg2.inheritance.open)
arg2.inheritance.pt == orig(arg2.inheritance.pt)
arg2.pt == orig(arg2.pt)
arg2.arrowStyle == orig(arg0.end.arrowStyle)
arg2.arrowStyle == orig(arg2.arrowStyle)
arg2.arrowStyle.description == orig(arg2.arrowStyle.description)
arg2.arrowStyle.description.toString == orig(arg2.arrowStyle.description.toString)
arg0.start.inheritance == null
arg0.controlPts[].getClass().getName() elements == java.awt.Point.class
arg0.controlPts[].getClass().getName() one of { [], [java.awt.Point, java.awt.Point] }
arg0.routingAlg.description.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
arg0.label.toString one of { "", "r1" }
arg0.lineWidth == null
arg0.lineColor.toString == "Black"
arg0.textColor.toString == "Black"
arg0.dashStructure[] == []
arg0.dashStructure[].getClass().getName() == []
arg1.entity.fillColor has only one value
arg1.entity.fillColor.toString == "Gray"
arg1.entity.lineColor has only one value
arg1.entity.lineColor.toString == "Black"
arg1.entity.textColor.toString == "Black"
arg1.entity.name.toString one of { "e1", "e2" }
arg1.entity.nameAlign has only one value
arg1.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg1.entity.shapeParams == null
arg1.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg1.entity.anchorName has only one value
arg1.entity.anchorName.toString == ""
arg1.entity.imageFileName.toString == ""
arg1.entity.imageFillStyle has only one value
arg1.inheritance == null
arg1.arrowStyle.description.toString one of { "Double angle", "None" }
arg2.entity.loc has only one value
arg2.entity.size has only one value
arg2.entity.shape has only one value
arg2.entity.fillColor has only one value
arg2.entity.fillColor.toString == "Gray"
arg2.entity.lineColor has only one value
arg2.entity.lineColor.toString == "Black"
arg2.entity.textColor.toString == "Black"
arg2.entity.name has only one value
arg2.entity.name.toString == "e2"
arg2.entity.nameAlign has only one value
arg2.entity.attributes has only one value
arg2.entity.attributes.toString == "funny\"characters\\in'this,string!"
arg2.entity.shapeParams == null
arg2.entity.shapeFlags has only one value
arg2.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg2.entity.anchorName has only one value
arg2.entity.anchorName.toString == ""
arg2.entity.imageFileName.toString == ""
arg2.entity.imageFillStyle has only one value
arg2.inheritance.parent has only one value
arg2.inheritance.open == true
arg2.inheritance.pt has only one value
arg2.arrowStyle.description.toString one of { "Filled triangle", "None" }
size(arg0.controlPts[]) one of { 0, 2 }
===========================================================================
ded.model.Relation.Relation(ded.model.RelationEndpoint, ded.model.RelationEndpoint):::ENTER
ded.model.Entity.defaultFillColor == arg0.entity.fillColor
ded.model.Entity.defaultFillColor == arg1.entity.fillColor
ded.model.Entity.defaultLineColor == ded.model.Entity.defaultTextColor
ded.model.Entity.defaultLineColor == arg0.entity.lineColor
ded.model.Entity.defaultLineColor == arg1.entity.lineColor
ded.model.Entity.defaultNameAlign == arg0.entity.nameAlign
ded.model.Entity.defaultNameAlign == arg1.entity.nameAlign
ded.model.Entity.defaultImageFillStyle == arg0.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == arg1.entity.imageFillStyle
arg0.entity.fillColor == arg1.entity.fillColor
arg0.entity.lineColor == arg0.entity.textColor
arg0.entity.lineColor == arg1.entity.lineColor
arg0.entity.nameAlign == arg1.entity.nameAlign
arg0.entity.shapeFlags.getClass().getName() == arg1.entity.shapeFlags.getClass().getName()
arg0.entity.anchorName == arg0.entity.imageFileName
arg0.entity.anchorName == arg1.entity.anchorName
arg0.entity.imageFillStyle == arg1.entity.imageFillStyle
arg0.arrowStyle == ded.model.ArrowStyle.AS_NONE
ded.model.ArrowStyle.AS_NONE == arg1.arrowStyle
arg0.arrowStyle.description == arg1.arrowStyle.description
arg1.entity.lineColor == arg1.entity.textColor
arg1.entity.anchorName == arg1.entity.imageFileName
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.entity.fillColor has only one value
arg0.entity.fillColor.toString == "Gray"
arg0.entity.lineColor has only one value
arg0.entity.lineColor.toString == "Black"
arg0.entity.textColor.toString == "Black"
arg0.entity.name.toString one of { "e1", "e2" }
arg0.entity.nameAlign has only one value
arg0.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.entity.shapeParams == null
arg0.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.entity.anchorName has only one value
arg0.entity.anchorName.toString == ""
arg0.entity.imageFileName.toString == ""
arg0.entity.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.inheritance == null
ded.model.Inheritance.$assertionsDisabled == false
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
arg0.arrowStyle.description has only one value
arg0.arrowStyle.description.toString == "None"
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.RelationEndpoint.$assertionsDisabled == false
arg1.entity.loc has only one value
arg1.entity.size has only one value
arg1.entity.shape has only one value
arg1.entity.fillColor has only one value
arg1.entity.fillColor.toString == "Gray"
arg1.entity.lineColor has only one value
arg1.entity.lineColor.toString == "Black"
arg1.entity.textColor.toString == "Black"
arg1.entity.name has only one value
arg1.entity.name.toString == "e2"
arg1.entity.nameAlign has only one value
arg1.entity.attributes has only one value
arg1.entity.attributes.toString == "funny\"characters\\in'this,string!"
arg1.entity.shapeParams == null
arg1.entity.shapeFlags has only one value
arg1.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg1.entity.anchorName has only one value
arg1.entity.anchorName.toString == ""
arg1.entity.imageFileName.toString == ""
arg1.entity.imageFillStyle has only one value
arg1.inheritance.parent has only one value
arg1.inheritance.open == true
arg1.inheritance.pt has only one value
arg1.arrowStyle.description.toString == "None"
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.Relation.Relation(ded.model.RelationEndpoint, ded.model.RelationEndpoint):::EXIT
ded.model.Relation.defaultRoutingAlgorithm == this.routingAlg
ded.model.Relation.defaultLineColor == arg0.entity.lineColor
ded.model.Relation.defaultLineColor == arg1.entity.lineColor
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
this.start == orig(arg0)
this.start.entity == arg0.entity
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == arg0.entity.fillColor
ded.model.Entity.defaultFillColor == arg1.entity.fillColor
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == arg0.entity.nameAlign
ded.model.Entity.defaultNameAlign == arg1.entity.nameAlign
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == arg0.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == arg1.entity.imageFillStyle
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
this.start.entity.loc == arg0.entity.loc
this.start.entity.size == arg0.entity.size
this.start.entity.shape == arg0.entity.shape
this.start.entity.fillColor == arg0.entity.fillColor
this.start.entity.lineColor == arg0.entity.lineColor
this.start.entity.textColor == arg0.entity.lineColor
this.start.entity.name == arg0.entity.name
this.start.entity.nameAlign == arg0.entity.nameAlign
this.start.entity.attributes == arg0.entity.attributes
this.start.entity.shapeFlags == arg0.entity.shapeFlags
this.start.entity.shapeFlags.getClass().getName() == arg0.entity.shapeFlags.getClass().getName()
this.start.entity.anchorName == arg0.entity.anchorName
this.start.entity.imageFileName == arg0.entity.anchorName
this.start.entity.imageFillStyle == arg0.entity.imageFillStyle
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.start.pt == arg0.pt
this.start.arrowStyle == ded.model.ArrowStyle.AS_NONE
ded.model.ArrowStyle.AS_NONE == this.end.arrowStyle
ded.model.ArrowStyle.AS_NONE == arg0.arrowStyle
ded.model.ArrowStyle.AS_NONE == arg1.arrowStyle
ded.model.ArrowStyle.AS_NONE == orig(arg0.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_NONE == orig(arg1.arrowStyle)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
this.start.arrowStyle.description == arg0.arrowStyle.description
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
this.end == orig(arg1)
this.end.entity == arg1.entity
this.end.entity.loc == arg1.entity.loc
this.end.entity.size == arg1.entity.size
this.end.entity.shape == arg1.entity.shape
this.end.entity.fillColor == arg1.entity.fillColor
this.end.entity.lineColor == arg1.entity.lineColor
this.end.entity.textColor == arg1.entity.lineColor
this.end.entity.name == arg1.entity.name
this.end.entity.nameAlign == arg1.entity.nameAlign
this.end.entity.attributes == arg1.entity.attributes
this.end.entity.shapeFlags == arg1.entity.shapeFlags
this.end.entity.shapeFlags.getClass().getName() == arg1.entity.shapeFlags.getClass().getName()
this.end.entity.anchorName == arg1.entity.anchorName
this.end.entity.imageFileName == arg1.entity.anchorName
this.end.entity.imageFillStyle == arg1.entity.imageFillStyle
this.end.inheritance == arg1.inheritance
this.end.inheritance.parent == arg1.inheritance.parent
this.end.inheritance.open == arg1.inheritance.open
this.end.inheritance.pt == arg1.inheritance.pt
this.end.pt == arg1.pt
this.end.arrowStyle.description == arg0.arrowStyle.description
this.label == arg0.entity.anchorName
this.label == arg1.entity.anchorName
arg0.entity == orig(arg0.entity)
arg0.entity.loc == orig(arg0.entity.loc)
arg0.entity.size == orig(arg0.entity.size)
arg0.entity.shape == orig(arg0.entity.shape)
arg0.entity.fillColor == arg1.entity.fillColor
arg0.entity.fillColor == orig(arg0.entity.fillColor)
arg0.entity.fillColor.toString == orig(arg0.entity.fillColor.toString)
arg0.entity.lineColor == arg0.entity.textColor
arg0.entity.lineColor == arg1.entity.lineColor
arg0.entity.lineColor == orig(arg0.entity.lineColor)
arg0.entity.lineColor == orig(arg0.entity.textColor)
arg0.entity.lineColor.toString == orig(arg0.entity.lineColor.toString)
arg0.entity.textColor.toString == orig(arg0.entity.textColor.toString)
arg0.entity.name == orig(arg0.entity.name)
arg0.entity.name.toString == orig(arg0.entity.name.toString)
arg0.entity.nameAlign == arg1.entity.nameAlign
arg0.entity.nameAlign == orig(arg0.entity.nameAlign)
arg0.entity.attributes == orig(arg0.entity.attributes)
arg0.entity.attributes.toString == orig(arg0.entity.attributes.toString)
arg0.entity.shapeParams == orig(arg0.entity.shapeParams)
arg0.entity.shapeFlags == orig(arg0.entity.shapeFlags)
arg0.entity.shapeFlags.getClass().getName() == arg1.entity.shapeFlags.getClass().getName()
arg0.entity.shapeFlags.getClass().getName() == orig(arg0.entity.shapeFlags.getClass().getName())
arg0.entity.anchorName == arg0.entity.imageFileName
arg0.entity.anchorName == arg1.entity.anchorName
arg0.entity.anchorName == orig(arg0.entity.anchorName)
arg0.entity.anchorName == orig(arg0.entity.imageFileName)
arg0.entity.anchorName.toString == orig(arg0.entity.anchorName.toString)
arg0.entity.imageFileName.toString == orig(arg0.entity.imageFileName.toString)
arg0.entity.imageFillStyle == arg1.entity.imageFillStyle
arg0.entity.imageFillStyle == orig(arg0.entity.imageFillStyle)
arg0.inheritance == orig(arg0.inheritance)
arg0.pt == orig(arg0.pt)
arg0.arrowStyle.description == arg1.arrowStyle.description
arg0.arrowStyle.description == orig(arg0.arrowStyle.description)
arg0.arrowStyle.description == orig(arg1.arrowStyle.description)
arg0.arrowStyle.description.toString == orig(arg0.arrowStyle.description.toString)
arg1.entity == orig(arg1.entity)
arg1.entity.loc == orig(arg1.entity.loc)
arg1.entity.size == orig(arg1.entity.size)
arg1.entity.shape == orig(arg1.entity.shape)
arg1.entity.fillColor == orig(arg1.entity.fillColor)
arg1.entity.fillColor.toString == orig(arg1.entity.fillColor.toString)
arg1.entity.lineColor == arg1.entity.textColor
arg1.entity.lineColor == orig(arg1.entity.lineColor)
arg1.entity.lineColor == orig(arg1.entity.textColor)
arg1.entity.lineColor.toString == orig(arg1.entity.lineColor.toString)
arg1.entity.textColor.toString == orig(arg1.entity.textColor.toString)
arg1.entity.name == orig(arg1.entity.name)
arg1.entity.name.toString == orig(arg1.entity.name.toString)
arg1.entity.nameAlign == orig(arg1.entity.nameAlign)
arg1.entity.attributes == orig(arg1.entity.attributes)
arg1.entity.attributes.toString == orig(arg1.entity.attributes.toString)
arg1.entity.shapeParams == orig(arg1.entity.shapeParams)
arg1.entity.shapeFlags == orig(arg1.entity.shapeFlags)
arg1.entity.shapeFlags.getClass().getName() == orig(arg1.entity.shapeFlags.getClass().getName())
arg1.entity.anchorName == arg1.entity.imageFileName
arg1.entity.anchorName == orig(arg1.entity.anchorName)
arg1.entity.anchorName == orig(arg1.entity.imageFileName)
arg1.entity.anchorName.toString == orig(arg1.entity.anchorName.toString)
arg1.entity.imageFileName.toString == orig(arg1.entity.imageFileName.toString)
arg1.entity.imageFillStyle == orig(arg1.entity.imageFillStyle)
arg1.inheritance == orig(arg1.inheritance)
arg1.inheritance.parent == orig(arg1.inheritance.parent)
arg1.inheritance.open == orig(arg1.inheritance.open)
arg1.inheritance.pt == orig(arg1.inheritance.pt)
arg1.pt == orig(arg1.pt)
arg1.arrowStyle.description.toString == orig(arg1.arrowStyle.description.toString)
this.start.arrowStyle.description.toString == "None"
this.end.arrowStyle.description.toString == "None"
this.controlPts[] == []
this.controlPts[].getClass().getName() == []
this.routingAlg.description has only one value
this.routingAlg.description.toString == "Horizontal First Manhattan"
this.label has only one value
this.label.toString == ""
arg0.entity.fillColor has only one value
arg0.entity.fillColor.toString == "Gray"
arg0.entity.lineColor has only one value
arg0.entity.lineColor.toString == "Black"
arg0.entity.textColor.toString == "Black"
arg0.entity.name.toString one of { "e1", "e2" }
arg0.entity.nameAlign has only one value
arg0.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.entity.shapeParams == null
arg0.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.entity.anchorName has only one value
arg0.entity.anchorName.toString == ""
arg0.entity.imageFileName.toString == ""
arg0.entity.imageFillStyle has only one value
arg0.inheritance == null
arg0.arrowStyle.description has only one value
arg0.arrowStyle.description.toString == "None"
arg1.entity.loc has only one value
arg1.entity.size has only one value
arg1.entity.shape has only one value
arg1.entity.fillColor has only one value
arg1.entity.fillColor.toString == "Gray"
arg1.entity.lineColor has only one value
arg1.entity.lineColor.toString == "Black"
arg1.entity.textColor.toString == "Black"
arg1.entity.name has only one value
arg1.entity.name.toString == "e2"
arg1.entity.nameAlign has only one value
arg1.entity.attributes has only one value
arg1.entity.attributes.toString == "funny\"characters\\in'this,string!"
arg1.entity.shapeParams == null
arg1.entity.shapeFlags has only one value
arg1.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg1.entity.anchorName has only one value
arg1.entity.anchorName.toString == ""
arg1.entity.imageFileName.toString == ""
arg1.entity.imageFillStyle has only one value
arg1.inheritance.parent has only one value
arg1.inheritance.open == true
arg1.inheritance.pt has only one value
arg1.arrowStyle.description.toString == "None"
===========================================================================
ded.model.Relation.Relation(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, int):::ENTER
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg1[].getClass().getName() elements == ded.model.Entity.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [ded.model.Inheritance]
arg2[].getClass().getName() elements == ded.model.Inheritance.class
arg3 == 23
size(arg1[]) == 2
size(arg2[]) == 1
===========================================================================
ded.model.Relation.Relation(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, int):::EXIT
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
this.end.entity.loc has only one value
this.end.entity.size has only one value
this.end.entity.name has only one value
this.end.entity.attributes has only one value
this.end.entity.shapeFlags has only one value
this.end.inheritance.parent has only one value
this.end.inheritance.pt has only one value
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg1[].getClass().getName() elements == ded.model.Entity.class
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [ded.model.Inheritance]
arg2[].getClass().getName() elements == ded.model.Inheritance.class
===========================================================================
ded.model.Relation.equals(java.lang.Object):::ENTER
arg0.getClass().getName() == ded.model.Relation.class
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != arg0.getClass().getName()
ded.model.ArrowStyle.$VALUES.getClass().getName() != arg0.getClass().getName()
===========================================================================
ded.model.Relation.equals(java.lang.Object):::EXIT145
===========================================================================
ded.model.Relation.equals(java.lang.Object):::EXIT145;condition="return == true"
===========================================================================
ded.model.Relation.equals(java.lang.Object):::EXIT
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.Relation.defaultRoutingAlgorithm)
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ)
ded.model.RoutingAlgorithm.RA_DIRECT == orig(ded.model.RoutingAlgorithm.RA_DIRECT)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT)
ded.model.RoutingAlgorithm.RA_DIRECT.description == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description)
ded.model.RoutingAlgorithm.RA_DIRECT.description.toString == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description.toString)
ded.model.RoutingAlgorithm.$VALUES == orig(ded.model.RoutingAlgorithm.$VALUES)
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == orig(ded.model.RoutingAlgorithm.$VALUES.getClass().getName())
ded.model.RoutingAlgorithm.$VALUES[] == orig(ded.model.RoutingAlgorithm.$VALUES[])
ded.model.RoutingAlgorithm.$VALUES[].description == orig(ded.model.RoutingAlgorithm.$VALUES[].description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.Relation.defaultRoutingAlgorithm.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString)
ded.model.Relation.defaultRoutingAlgorithm.description.toString == orig(ded.model.Relation.defaultRoutingAlgorithm.description.toString)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(this.lineColor)
ded.model.Relation.defaultLineColor == orig(this.textColor)
ded.model.Relation.defaultLineColor.toString == orig(ded.model.Relation.defaultLineColor.toString)
ded.model.Relation.defaultTextColor.toString == orig(ded.model.Relation.defaultTextColor.toString)
this.start == orig(this.start)
this.start.entity == orig(this.start.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
this.start.entity.loc == orig(this.start.entity.loc)
this.start.entity.size == orig(this.start.entity.size)
this.start.entity.shape == orig(this.start.entity.shape)
this.start.entity.fillColor == orig(this.start.entity.fillColor)
this.start.entity.fillColor.toString == orig(this.start.entity.fillColor.toString)
this.start.entity.lineColor == orig(this.start.entity.lineColor)
this.start.entity.lineColor == orig(this.start.entity.textColor)
this.start.entity.lineColor.toString == orig(this.start.entity.lineColor.toString)
this.start.entity.textColor.toString == orig(this.start.entity.textColor.toString)
this.start.entity.name == orig(this.start.entity.name)
this.start.entity.name.toString == orig(this.start.entity.name.toString)
this.start.entity.nameAlign == orig(this.start.entity.nameAlign)
this.start.entity.attributes == orig(this.start.entity.attributes)
this.start.entity.attributes.toString == orig(this.start.entity.attributes.toString)
this.start.entity.shapeParams == orig(this.start.entity.shapeParams)
this.start.entity.shapeFlags == orig(this.start.entity.shapeFlags)
this.start.entity.shapeFlags.getClass().getName() == orig(this.start.entity.shapeFlags.getClass().getName())
this.start.entity.anchorName == orig(this.start.entity.anchorName)
this.start.entity.anchorName == orig(this.start.entity.imageFileName)
this.start.entity.anchorName.toString == orig(this.start.entity.anchorName.toString)
this.start.entity.imageFileName.toString == orig(this.start.entity.imageFileName.toString)
this.start.entity.imageFillStyle == orig(this.start.entity.imageFillStyle)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.start.inheritance == orig(this.start.inheritance)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.start.pt == orig(this.start.pt)
this.start.arrowStyle == orig(this.start.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
this.start.arrowStyle.description == orig(this.start.arrowStyle.description)
this.start.arrowStyle.description.toString == orig(this.start.arrowStyle.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
this.end == orig(this.end)
this.end.entity == orig(this.end.entity)
this.end.entity.loc == orig(this.end.entity.loc)
this.end.entity.size == orig(this.end.entity.size)
this.end.entity.shape == orig(this.end.entity.shape)
this.end.entity.fillColor == orig(this.end.entity.fillColor)
this.end.entity.fillColor.toString == orig(this.end.entity.fillColor.toString)
this.end.entity.lineColor == orig(this.end.entity.lineColor)
this.end.entity.lineColor == orig(this.end.entity.textColor)
this.end.entity.lineColor.toString == orig(this.end.entity.lineColor.toString)
this.end.entity.textColor.toString == orig(this.end.entity.textColor.toString)
this.end.entity.name == orig(this.end.entity.name)
this.end.entity.name.toString == orig(this.end.entity.name.toString)
this.end.entity.nameAlign == orig(this.end.entity.nameAlign)
this.end.entity.attributes == orig(this.end.entity.attributes)
this.end.entity.attributes.toString == orig(this.end.entity.attributes.toString)
this.end.entity.shapeParams == orig(this.end.entity.shapeParams)
this.end.entity.shapeFlags == orig(this.end.entity.shapeFlags)
this.end.entity.shapeFlags.getClass().getName() == orig(this.end.entity.shapeFlags.getClass().getName())
this.end.entity.anchorName == orig(this.end.entity.anchorName)
this.end.entity.anchorName == orig(this.end.entity.imageFileName)
this.end.entity.anchorName.toString == orig(this.end.entity.anchorName.toString)
this.end.entity.imageFileName.toString == orig(this.end.entity.imageFileName.toString)
this.end.entity.imageFillStyle == orig(this.end.entity.imageFillStyle)
this.end.inheritance == orig(this.end.inheritance)
this.end.inheritance.parent == orig(this.end.inheritance.parent)
this.end.inheritance.open == orig(this.end.inheritance.open)
this.end.inheritance.pt == orig(this.end.inheritance.pt)
this.end.pt == orig(this.end.pt)
this.end.arrowStyle == orig(this.end.arrowStyle)
this.end.arrowStyle.description == orig(this.end.arrowStyle.description)
this.end.arrowStyle.description.toString == orig(this.end.arrowStyle.description.toString)
this.controlPts == orig(this.controlPts)
this.controlPts[] == orig(this.controlPts[])
this.routingAlg == orig(this.routingAlg)
this.routingAlg.description == orig(this.routingAlg.description)
this.routingAlg.description.toString == orig(this.routingAlg.description.toString)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.lineWidth == orig(this.lineWidth)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.dashStructure == orig(this.dashStructure)
this.dashStructure[] == orig(this.dashStructure[])
ded.model.Relation.$assertionsDisabled == orig(ded.model.Relation.$assertionsDisabled)
return == true
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
ded.model.ArrowStyle.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
ded.model.Relation.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
ded.model.Relation.globalSelfCheck(ded.model.Diagram):::ENTER
ded.model.Diagram.defaultBackgroundColor == arg0.backgroundColor
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.drawFileName == true
arg0.backgroundColor.toString == "White"
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
ded.model.Diagram.$assertionsDisabled == false
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.Relation.globalSelfCheck(ded.model.Diagram):::EXIT
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.Relation.defaultRoutingAlgorithm)
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ)
ded.model.RoutingAlgorithm.RA_DIRECT == orig(ded.model.RoutingAlgorithm.RA_DIRECT)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT)
ded.model.RoutingAlgorithm.RA_DIRECT.description == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description)
ded.model.RoutingAlgorithm.RA_DIRECT.description.toString == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description.toString)
ded.model.RoutingAlgorithm.$VALUES == orig(ded.model.RoutingAlgorithm.$VALUES)
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == orig(ded.model.RoutingAlgorithm.$VALUES.getClass().getName())
ded.model.RoutingAlgorithm.$VALUES[] == orig(ded.model.RoutingAlgorithm.$VALUES[])
ded.model.RoutingAlgorithm.$VALUES[].description == orig(ded.model.RoutingAlgorithm.$VALUES[].description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.Relation.defaultRoutingAlgorithm.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString)
ded.model.Relation.defaultRoutingAlgorithm.description.toString == orig(ded.model.Relation.defaultRoutingAlgorithm.description.toString)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(this.lineColor)
ded.model.Relation.defaultLineColor == orig(this.textColor)
ded.model.Relation.defaultLineColor.toString == orig(ded.model.Relation.defaultLineColor.toString)
ded.model.Relation.defaultTextColor.toString == orig(ded.model.Relation.defaultTextColor.toString)
this.start == orig(this.start)
this.start.entity == orig(this.start.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
this.start.entity.loc == orig(this.start.entity.loc)
this.start.entity.size == orig(this.start.entity.size)
this.start.entity.shape == orig(this.start.entity.shape)
this.start.entity.fillColor == orig(this.start.entity.fillColor)
this.start.entity.fillColor.toString == orig(this.start.entity.fillColor.toString)
this.start.entity.lineColor == orig(this.start.entity.lineColor)
this.start.entity.lineColor == orig(this.start.entity.textColor)
this.start.entity.lineColor.toString == orig(this.start.entity.lineColor.toString)
this.start.entity.textColor.toString == orig(this.start.entity.textColor.toString)
this.start.entity.name == orig(this.start.entity.name)
this.start.entity.name.toString == orig(this.start.entity.name.toString)
this.start.entity.nameAlign == orig(this.start.entity.nameAlign)
this.start.entity.attributes == orig(this.start.entity.attributes)
this.start.entity.attributes.toString == orig(this.start.entity.attributes.toString)
this.start.entity.shapeParams == orig(this.start.entity.shapeParams)
this.start.entity.shapeFlags == orig(this.start.entity.shapeFlags)
this.start.entity.shapeFlags.getClass().getName() == orig(this.start.entity.shapeFlags.getClass().getName())
this.start.entity.anchorName == orig(this.start.entity.anchorName)
this.start.entity.anchorName == orig(this.start.entity.imageFileName)
this.start.entity.anchorName.toString == orig(this.start.entity.anchorName.toString)
this.start.entity.imageFileName.toString == orig(this.start.entity.imageFileName.toString)
this.start.entity.imageFillStyle == orig(this.start.entity.imageFillStyle)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.start.inheritance == orig(this.start.inheritance)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.start.pt == orig(this.start.pt)
this.start.arrowStyle == orig(this.start.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
this.start.arrowStyle.description == orig(this.start.arrowStyle.description)
this.start.arrowStyle.description.toString == orig(this.start.arrowStyle.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
this.end == orig(this.end)
this.end.entity == orig(this.end.entity)
this.end.entity.loc == orig(this.end.entity.loc)
this.end.entity.size == orig(this.end.entity.size)
this.end.entity.shape == orig(this.end.entity.shape)
this.end.entity.fillColor == orig(this.end.entity.fillColor)
this.end.entity.fillColor.toString == orig(this.end.entity.fillColor.toString)
this.end.entity.lineColor == orig(this.end.entity.lineColor)
this.end.entity.lineColor == orig(this.end.entity.textColor)
this.end.entity.lineColor.toString == orig(this.end.entity.lineColor.toString)
this.end.entity.textColor.toString == orig(this.end.entity.textColor.toString)
this.end.entity.name == orig(this.end.entity.name)
this.end.entity.name.toString == orig(this.end.entity.name.toString)
this.end.entity.nameAlign == orig(this.end.entity.nameAlign)
this.end.entity.attributes == orig(this.end.entity.attributes)
this.end.entity.attributes.toString == orig(this.end.entity.attributes.toString)
this.end.entity.shapeParams == orig(this.end.entity.shapeParams)
this.end.entity.shapeFlags == orig(this.end.entity.shapeFlags)
this.end.entity.shapeFlags.getClass().getName() == orig(this.end.entity.shapeFlags.getClass().getName())
this.end.entity.anchorName == orig(this.end.entity.anchorName)
this.end.entity.anchorName == orig(this.end.entity.imageFileName)
this.end.entity.anchorName.toString == orig(this.end.entity.anchorName.toString)
this.end.entity.imageFileName.toString == orig(this.end.entity.imageFileName.toString)
this.end.entity.imageFillStyle == orig(this.end.entity.imageFillStyle)
this.end.inheritance == orig(this.end.inheritance)
this.end.inheritance.parent == orig(this.end.inheritance.parent)
this.end.inheritance.open == orig(this.end.inheritance.open)
this.end.inheritance.pt == orig(this.end.inheritance.pt)
this.end.pt == orig(this.end.pt)
this.end.arrowStyle == orig(this.end.arrowStyle)
this.end.arrowStyle.description == orig(this.end.arrowStyle.description)
this.end.arrowStyle.description.toString == orig(this.end.arrowStyle.description.toString)
this.controlPts == orig(this.controlPts)
this.controlPts[] == orig(this.controlPts[])
this.routingAlg == orig(this.routingAlg)
this.routingAlg.description == orig(this.routingAlg.description)
this.routingAlg.description.toString == orig(this.routingAlg.description.toString)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.lineWidth == orig(this.lineWidth)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.dashStructure == orig(this.dashStructure)
this.dashStructure[] == orig(this.dashStructure[])
ded.model.Relation.$assertionsDisabled == orig(ded.model.Relation.$assertionsDisabled)
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == arg0.backgroundColor
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor == orig(arg0.backgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
arg0.windowSize == orig(arg0.windowSize)
arg0.drawFileName == orig(arg0.drawFileName)
arg0.backgroundColor.toString == orig(arg0.backgroundColor.toString)
arg0.entities == orig(arg0.entities)
arg0.entities[] == orig(arg0.entities[])
arg0.inheritances == orig(arg0.inheritances)
arg0.inheritances[] == orig(arg0.inheritances[])
arg0.relations == orig(arg0.relations)
arg0.relations[] == orig(arg0.relations[])
arg0.namedColors == orig(arg0.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.drawFileName == true
arg0.backgroundColor.toString == "White"
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
ded.model.Diagram.$assertionsDisabled == false
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.Relation.toJSON(java.util.HashMap, java.util.HashMap):::ENTER
===========================================================================
ded.model.Relation.toJSON(java.util.HashMap, java.util.HashMap):::EXIT
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.Relation.defaultRoutingAlgorithm)
ded.model.Relation.defaultRoutingAlgorithm == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ)
ded.model.RoutingAlgorithm.RA_DIRECT == orig(ded.model.RoutingAlgorithm.RA_DIRECT)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT)
ded.model.RoutingAlgorithm.RA_DIRECT.description == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description)
ded.model.RoutingAlgorithm.RA_DIRECT.description.toString == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description.toString)
ded.model.RoutingAlgorithm.$VALUES == orig(ded.model.RoutingAlgorithm.$VALUES)
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == orig(ded.model.RoutingAlgorithm.$VALUES.getClass().getName())
ded.model.RoutingAlgorithm.$VALUES[] == orig(ded.model.RoutingAlgorithm.$VALUES[])
ded.model.RoutingAlgorithm.$VALUES[].description == orig(ded.model.RoutingAlgorithm.$VALUES[].description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.Relation.defaultRoutingAlgorithm.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString)
ded.model.Relation.defaultRoutingAlgorithm.description.toString == orig(ded.model.Relation.defaultRoutingAlgorithm.description.toString)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Relation.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Relation.defaultLineColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Relation.defaultLineColor == orig(this.lineColor)
ded.model.Relation.defaultLineColor == orig(this.textColor)
ded.model.Relation.defaultLineColor.toString == orig(ded.model.Relation.defaultLineColor.toString)
ded.model.Relation.defaultTextColor.toString == orig(ded.model.Relation.defaultTextColor.toString)
this.start == orig(this.start)
this.start.entity == orig(this.start.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
this.start.entity.loc == orig(this.start.entity.loc)
this.start.entity.size == orig(this.start.entity.size)
this.start.entity.shape == orig(this.start.entity.shape)
this.start.entity.fillColor == orig(this.start.entity.fillColor)
this.start.entity.fillColor.toString == orig(this.start.entity.fillColor.toString)
this.start.entity.lineColor == orig(this.start.entity.lineColor)
this.start.entity.lineColor == orig(this.start.entity.textColor)
this.start.entity.lineColor.toString == orig(this.start.entity.lineColor.toString)
this.start.entity.textColor.toString == orig(this.start.entity.textColor.toString)
this.start.entity.name == orig(this.start.entity.name)
this.start.entity.name.toString == orig(this.start.entity.name.toString)
this.start.entity.nameAlign == orig(this.start.entity.nameAlign)
this.start.entity.attributes == orig(this.start.entity.attributes)
this.start.entity.attributes.toString == orig(this.start.entity.attributes.toString)
this.start.entity.shapeParams == orig(this.start.entity.shapeParams)
this.start.entity.shapeFlags == orig(this.start.entity.shapeFlags)
this.start.entity.shapeFlags.getClass().getName() == orig(this.start.entity.shapeFlags.getClass().getName())
this.start.entity.anchorName == orig(this.start.entity.anchorName)
this.start.entity.anchorName == orig(this.start.entity.imageFileName)
this.start.entity.anchorName.toString == orig(this.start.entity.anchorName.toString)
this.start.entity.imageFileName.toString == orig(this.start.entity.imageFileName.toString)
this.start.entity.imageFillStyle == orig(this.start.entity.imageFillStyle)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.start.inheritance == orig(this.start.inheritance)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.start.pt == orig(this.start.pt)
this.start.arrowStyle == orig(this.start.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
this.start.arrowStyle.description == orig(this.start.arrowStyle.description)
this.start.arrowStyle.description.toString == orig(this.start.arrowStyle.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
this.end == orig(this.end)
this.end.entity == orig(this.end.entity)
this.end.entity.loc == orig(this.end.entity.loc)
this.end.entity.size == orig(this.end.entity.size)
this.end.entity.shape == orig(this.end.entity.shape)
this.end.entity.fillColor == orig(this.end.entity.fillColor)
this.end.entity.fillColor.toString == orig(this.end.entity.fillColor.toString)
this.end.entity.lineColor == orig(this.end.entity.lineColor)
this.end.entity.lineColor == orig(this.end.entity.textColor)
this.end.entity.lineColor.toString == orig(this.end.entity.lineColor.toString)
this.end.entity.textColor.toString == orig(this.end.entity.textColor.toString)
this.end.entity.name == orig(this.end.entity.name)
this.end.entity.name.toString == orig(this.end.entity.name.toString)
this.end.entity.nameAlign == orig(this.end.entity.nameAlign)
this.end.entity.attributes == orig(this.end.entity.attributes)
this.end.entity.attributes.toString == orig(this.end.entity.attributes.toString)
this.end.entity.shapeParams == orig(this.end.entity.shapeParams)
this.end.entity.shapeFlags == orig(this.end.entity.shapeFlags)
this.end.entity.shapeFlags.getClass().getName() == orig(this.end.entity.shapeFlags.getClass().getName())
this.end.entity.anchorName == orig(this.end.entity.anchorName)
this.end.entity.anchorName == orig(this.end.entity.imageFileName)
this.end.entity.anchorName.toString == orig(this.end.entity.anchorName.toString)
this.end.entity.imageFileName.toString == orig(this.end.entity.imageFileName.toString)
this.end.entity.imageFillStyle == orig(this.end.entity.imageFillStyle)
this.end.inheritance == orig(this.end.inheritance)
this.end.inheritance.parent == orig(this.end.inheritance.parent)
this.end.inheritance.open == orig(this.end.inheritance.open)
this.end.inheritance.pt == orig(this.end.inheritance.pt)
this.end.pt == orig(this.end.pt)
this.end.arrowStyle == orig(this.end.arrowStyle)
this.end.arrowStyle.description == orig(this.end.arrowStyle.description)
this.end.arrowStyle.description.toString == orig(this.end.arrowStyle.description.toString)
this.controlPts == orig(this.controlPts)
this.controlPts[] == orig(this.controlPts[])
this.routingAlg == orig(this.routingAlg)
this.routingAlg.description == orig(this.routingAlg.description)
this.routingAlg.description.toString == orig(this.routingAlg.description.toString)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.lineWidth == orig(this.lineWidth)
this.lineColor.toString == orig(this.lineColor.toString)
this.textColor.toString == orig(this.textColor.toString)
this.dashStructure == orig(this.dashStructure)
this.dashStructure[] == orig(this.dashStructure[])
ded.model.Relation.$assertionsDisabled == orig(ded.model.Relation.$assertionsDisabled)
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != return.map.getClass().getName()
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
ded.model.ArrowStyle.$VALUES.getClass().getName() != return.map.getClass().getName()
ded.model.ArrowStyle.$VALUES.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
return.map.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
===========================================================================
ded.model.RelationEndpoint:::CLASS
ded.model.RelationEndpoint.$assertionsDisabled == false
===========================================================================
ded.model.RelationEndpoint:::OBJECT
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultShape != null
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_NO_SHAPE != null
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_RECTANGLE != null
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_ELLIPSE != null
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CUBOID != null
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_CYLINDER != null
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_WINDOW != null
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_SCROLLBAR != null
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_PUSHBUTTON != null
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_TEXT_EDIT != null
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_DROPDOWN != null
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_COMBO_BOX != null
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX != null
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_RADIO_BUTTON != null
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName != null
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES != null
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[] elements != null
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName elements != null
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor != null
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor != null
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor != null
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultNameAlign != null
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_LEFT != null
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_CENTER != null
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.TextAlign.TA_RIGHT != null
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName != null
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES != null
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[] elements != null
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName elements != null
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.Entity.defaultImageFillStyle != null
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT != null
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_STRETCH != null
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_TILE != null
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE != null
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.ImageFillStyle.IFS_CENTER != null
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description != null
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES != null
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[] elements != null
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description elements != null
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
this.entity.loc != null
this.entity.size != null
this.entity.shape != null
this.entity.shape.displayName != null
this.entity.shape.displayName.toString one of { "Ellipse", "No shape" }
this.entity.shape.numParams == 0
this.entity.fillColor has only one value
this.entity.fillColor != null
this.entity.fillColor.toString == "Gray"
this.entity.lineColor has only one value
this.entity.lineColor != null
this.entity.lineColor.toString == "Black"
this.entity.textColor has only one value
this.entity.textColor != null
this.entity.textColor.toString == "Black"
this.entity.name != null
this.entity.name.toString one of { "e1", "e2" }
this.entity.nameAlign has only one value
this.entity.nameAlign != null
this.entity.nameAlign.displayName has only one value
this.entity.nameAlign.displayName != null
this.entity.nameAlign.displayName.toString == "Center"
this.entity.attributes != null
this.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
this.entity.shapeParams == null
this.entity.shapeFlags != null
this.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
this.entity.anchorName has only one value
this.entity.anchorName != null
this.entity.anchorName.toString == ""
this.entity.imageFileName has only one value
this.entity.imageFileName != null
this.entity.imageFileName.toString == ""
this.entity.imageFillStyle has only one value
this.entity.imageFillStyle != null
this.entity.imageFillStyle.description has only one value
this.entity.imageFillStyle.description != null
this.entity.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
this.inheritance.parent != null
this.inheritance.parent.loc != null
this.inheritance.parent.size != null
this.inheritance.parent.shape has only one value
this.inheritance.parent.shape != null
this.inheritance.parent.fillColor has only one value
this.inheritance.parent.fillColor != null
this.inheritance.parent.fillColor.toString == "Gray"
this.inheritance.parent.lineColor has only one value
this.inheritance.parent.lineColor != null
this.inheritance.parent.lineColor.toString == "Black"
this.inheritance.parent.textColor has only one value
this.inheritance.parent.textColor != null
this.inheritance.parent.textColor.toString == "Black"
this.inheritance.parent.name != null
this.inheritance.parent.name.toString == "e1"
this.inheritance.parent.nameAlign has only one value
this.inheritance.parent.nameAlign != null
this.inheritance.parent.attributes != null
this.inheritance.parent.attributes.toString == "attr1\nattr2\nattr3"
this.inheritance.parent.shapeParams == null
this.inheritance.parent.shapeFlags != null
this.inheritance.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
this.inheritance.parent.anchorName has only one value
this.inheritance.parent.anchorName != null
this.inheritance.parent.anchorName.toString == ""
this.inheritance.parent.imageFileName has only one value
this.inheritance.parent.imageFileName != null
this.inheritance.parent.imageFileName.toString == ""
this.inheritance.parent.imageFillStyle has only one value
this.inheritance.parent.imageFillStyle != null
this.inheritance.open == true
this.inheritance.pt != null
ded.model.Inheritance.$assertionsDisabled == false
this.arrowStyle != null
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_NONE != null
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE != null
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE != null
ded.model.ArrowStyle.AS_NONE.description has only one value
ded.model.ArrowStyle.AS_NONE.description != null
ded.model.ArrowStyle.AS_NONE.description.toString == "None"
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES != null
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[] elements != null
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description elements != null
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description != null
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == "Filled triangle"
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description != null
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == "Double angle"
this.arrowStyle.description != null
this.arrowStyle.description.toString one of { "Double angle", "Filled triangle", "None" }
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(ded.model.Entity):::ENTER
ded.model.Entity.defaultShape has only one value
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.Entity.defaultShape.displayName has only one value
ded.model.Entity.defaultShape.displayName.toString == "Rectangle"
ded.model.Entity.defaultShape.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.TextAlign.TA_LEFT has only one value
ded.model.TextAlign.TA_CENTER has only one value
ded.model.TextAlign.TA_RIGHT has only one value
ded.model.Entity.defaultNameAlign.displayName has only one value
ded.model.Entity.defaultNameAlign.displayName.toString == "Center"
ded.model.TextAlign.$VALUES has only one value
ded.model.TextAlign.$VALUES.getClass().getName() == ded.model.TextAlign[].class
ded.model.TextAlign.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].getClass().getName() == [ded.model.TextAlign, ded.model.TextAlign, ded.model.TextAlign]
ded.model.TextAlign.$VALUES[].getClass().getName() elements == ded.model.TextAlign.class
ded.model.TextAlign.$VALUES[].displayName contains no nulls and has only one value, of length 3
ded.model.TextAlign.$VALUES[].displayName.toString == [Left, Center, Right]
ded.model.TextAlign.$VALUES[].displayName.toString elements one of { "Center", "Left", "Right" }
ded.model.Entity.defaultImageFillStyle has only one value
ded.model.ImageFillStyle.IFS_UPPER_LEFT has only one value
ded.model.ImageFillStyle.IFS_STRETCH has only one value
ded.model.ImageFillStyle.IFS_TILE has only one value
ded.model.ImageFillStyle.IFS_LOCK_SIZE has only one value
ded.model.ImageFillStyle.IFS_CENTER has only one value
ded.model.Entity.defaultImageFillStyle.description has only one value
ded.model.Entity.defaultImageFillStyle.description.toString == "One copy in upper left"
ded.model.ImageFillStyle.$VALUES has only one value
ded.model.ImageFillStyle.$VALUES.getClass().getName() == ded.model.ImageFillStyle[].class
ded.model.ImageFillStyle.$VALUES[] contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].getClass().getName() == [ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle, ded.model.ImageFillStyle]
ded.model.ImageFillStyle.$VALUES[].getClass().getName() elements == ded.model.ImageFillStyle.class
ded.model.ImageFillStyle.$VALUES[].description contains no nulls and has only one value, of length 5
ded.model.ImageFillStyle.$VALUES[].description.toString == [One copy in upper left, Stretch image to fill space, Tile image to fill space, Lock entity size to match image, One copy centered horiz and vert]
arg0.shape.displayName.toString one of { "Ellipse", "No shape" }
arg0.shape.numParams == 0
arg0.fillColor has only one value
arg0.fillColor.toString == "Gray"
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.name.toString one of { "e1", "e2" }
arg0.nameAlign has only one value
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shapeParams == null
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName has only one value
arg0.imageFileName.toString == ""
arg0.imageFillStyle has only one value
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
ded.model.Entity.$assertionsDisabled == false
size(ded.model.EntityShape.$VALUES[]) == 13
size(ded.model.TextAlign.$VALUES[]) == 3
size(ded.model.ImageFillStyle.$VALUES[]) == 5
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(ded.model.Entity):::EXIT
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
arg0.loc == orig(arg0.loc)
arg0.size == orig(arg0.size)
arg0.shape == orig(arg0.shape)
arg0.shape.displayName == orig(arg0.shape.displayName)
arg0.shape.displayName.toString == orig(arg0.shape.displayName.toString)
arg0.shape.numParams == orig(arg0.shape.numParams)
arg0.fillColor == orig(arg0.fillColor)
arg0.fillColor.toString == orig(arg0.fillColor.toString)
arg0.lineColor == orig(arg0.lineColor)
arg0.lineColor.toString == orig(arg0.lineColor.toString)
arg0.textColor == orig(arg0.textColor)
arg0.textColor.toString == orig(arg0.textColor.toString)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.nameAlign == orig(arg0.nameAlign)
arg0.nameAlign.displayName == orig(arg0.nameAlign.displayName)
arg0.nameAlign.displayName.toString == orig(arg0.nameAlign.displayName.toString)
arg0.attributes == orig(arg0.attributes)
arg0.attributes.toString == orig(arg0.attributes.toString)
arg0.shapeParams == orig(arg0.shapeParams)
arg0.shapeFlags == orig(arg0.shapeFlags)
arg0.shapeFlags.getClass().getName() == orig(arg0.shapeFlags.getClass().getName())
arg0.anchorName == orig(arg0.anchorName)
arg0.anchorName.toString == orig(arg0.anchorName.toString)
arg0.imageFileName == orig(arg0.imageFileName)
arg0.imageFileName.toString == orig(arg0.imageFileName.toString)
arg0.imageFillStyle == orig(arg0.imageFillStyle)
arg0.imageFillStyle.description == orig(arg0.imageFillStyle.description)
arg0.imageFillStyle.description.toString == orig(arg0.imageFillStyle.description.toString)
this.inheritance == null
this.pt == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
arg0.shape.displayName.toString one of { "Ellipse", "No shape" }
arg0.shape.numParams == 0
arg0.fillColor has only one value
arg0.fillColor.toString == "Gray"
arg0.lineColor has only one value
arg0.lineColor.toString == "Black"
arg0.textColor has only one value
arg0.textColor.toString == "Black"
arg0.name.toString one of { "e1", "e2" }
arg0.nameAlign has only one value
arg0.nameAlign.displayName has only one value
arg0.nameAlign.displayName.toString == "Center"
arg0.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" }
arg0.shapeParams == null
arg0.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.anchorName has only one value
arg0.anchorName.toString == ""
arg0.imageFileName has only one value
arg0.imageFileName.toString == ""
arg0.imageFillStyle has only one value
arg0.imageFillStyle.description has only one value
arg0.imageFillStyle.description.toString == "One copy in upper left"
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(ded.model.Inheritance):::ENTER
ded.model.Entity.defaultShape has only one value
ded.model.Entity.defaultFillColor has only one value
ded.model.Entity.defaultFillColor.toString == "Gray"
ded.model.Entity.defaultLineColor has only one value
ded.model.Entity.defaultLineColor.toString == "Black"
ded.model.Entity.defaultTextColor has only one value
ded.model.Entity.defaultTextColor.toString == "Black"
ded.model.Entity.defaultNameAlign has only one value
ded.model.Entity.defaultImageFillStyle has only one value
arg0.parent.shape has only one value
arg0.parent.fillColor has only one value
arg0.parent.fillColor.toString == "Gray"
arg0.parent.lineColor has only one value
arg0.parent.lineColor.toString == "Black"
arg0.parent.textColor has only one value
arg0.parent.textColor.toString == "Black"
arg0.parent.name has only one value
arg0.parent.name.toString == "e1"
arg0.parent.nameAlign has only one value
arg0.parent.attributes has only one value
arg0.parent.attributes.toString == "attr1\nattr2\nattr3"
arg0.parent.shapeParams == null
arg0.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.parent.anchorName has only one value
arg0.parent.anchorName.toString == ""
arg0.parent.imageFileName has only one value
arg0.parent.imageFileName.toString == ""
arg0.parent.imageFillStyle has only one value
ded.model.Entity.$assertionsDisabled == false
arg0.open == true
ded.model.Inheritance.$assertionsDisabled == false
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(ded.model.Inheritance):::EXIT
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
arg0.parent == orig(arg0.parent)
arg0.parent.loc == orig(arg0.parent.loc)
arg0.parent.size == orig(arg0.parent.size)
arg0.parent.shape == orig(arg0.parent.shape)
arg0.parent.fillColor == orig(arg0.parent.fillColor)
arg0.parent.fillColor.toString == orig(arg0.parent.fillColor.toString)
arg0.parent.lineColor == orig(arg0.parent.lineColor)
arg0.parent.lineColor.toString == orig(arg0.parent.lineColor.toString)
arg0.parent.textColor == orig(arg0.parent.textColor)
arg0.parent.textColor.toString == orig(arg0.parent.textColor.toString)
arg0.parent.name == orig(arg0.parent.name)
arg0.parent.name.toString == orig(arg0.parent.name.toString)
arg0.parent.nameAlign == orig(arg0.parent.nameAlign)
arg0.parent.attributes == orig(arg0.parent.attributes)
arg0.parent.attributes.toString == orig(arg0.parent.attributes.toString)
arg0.parent.shapeParams == orig(arg0.parent.shapeParams)
arg0.parent.shapeFlags == orig(arg0.parent.shapeFlags)
arg0.parent.shapeFlags.getClass().getName() == orig(arg0.parent.shapeFlags.getClass().getName())
arg0.parent.anchorName == orig(arg0.parent.anchorName)
arg0.parent.anchorName.toString == orig(arg0.parent.anchorName.toString)
arg0.parent.imageFileName == orig(arg0.parent.imageFileName)
arg0.parent.imageFileName.toString == orig(arg0.parent.imageFileName.toString)
arg0.parent.imageFillStyle == orig(arg0.parent.imageFillStyle)
arg0.open == orig(arg0.open)
arg0.pt == orig(arg0.pt)
this.entity == null
this.inheritance.parent.name has only one value
this.inheritance.parent.attributes has only one value
this.pt == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
arg0.parent.shape has only one value
arg0.parent.fillColor has only one value
arg0.parent.fillColor.toString == "Gray"
arg0.parent.lineColor has only one value
arg0.parent.lineColor.toString == "Black"
arg0.parent.textColor has only one value
arg0.parent.textColor.toString == "Black"
arg0.parent.name has only one value
arg0.parent.name.toString == "e1"
arg0.parent.nameAlign has only one value
arg0.parent.attributes has only one value
arg0.parent.attributes.toString == "attr1\nattr2\nattr3"
arg0.parent.shapeParams == null
arg0.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class
arg0.parent.anchorName has only one value
arg0.parent.anchorName.toString == ""
arg0.parent.imageFileName has only one value
arg0.parent.imageFileName.toString == ""
arg0.parent.imageFillStyle has only one value
arg0.open == true
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(java.awt.Point):::ENTER
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(java.awt.Point):::EXIT
this.entity == null
this.inheritance == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, ded.model.ArrowStyle, int):::ENTER
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg1[].getClass().getName() elements == ded.model.Entity.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [ded.model.Inheritance]
arg2[].getClass().getName() elements == ded.model.Inheritance.class
ded.model.ArrowStyle.AS_NONE has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE has only one value
ded.model.ArrowStyle.AS_NONE.description has only one value
ded.model.ArrowStyle.AS_NONE.description.toString == "None"
ded.model.ArrowStyle.$VALUES has only one value
ded.model.ArrowStyle.$VALUES.getClass().getName() == ded.model.ArrowStyle[].class
ded.model.ArrowStyle.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].getClass().getName() == [ded.model.ArrowStyle, ded.model.ArrowStyle, ded.model.ArrowStyle]
ded.model.ArrowStyle.$VALUES[].getClass().getName() elements == ded.model.ArrowStyle.class
ded.model.ArrowStyle.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.ArrowStyle.$VALUES[].description.toString == [None, Filled triangle, Double angle]
ded.model.ArrowStyle.$VALUES[].description.toString elements one of { "Double angle", "Filled triangle", "None" }
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description has only one value
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == "Filled triangle"
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description has only one value
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == "Double angle"
arg3.description.toString one of { "Filled triangle", "None" }
arg4 == 23
size(arg1[]) == 2
size(arg2[]) == 1
size(ded.model.ArrowStyle.$VALUES[]) == 3
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, ded.model.ArrowStyle, int):::EXIT258
this.inheritance == null
this.pt == null
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, ded.model.ArrowStyle, int):::EXIT264
this.entity == null
this.inheritance has only one value
this.pt == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
arg0.map has only one value
arg3.description has only one value
arg3.description.toString == "Filled triangle"
orig(arg0) has only one value
orig(arg3) has only one value
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, ded.model.ArrowStyle, int):::EXIT268
this.entity == null
this.inheritance == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
===========================================================================
ded.model.RelationEndpoint.RelationEndpoint(org.json.JSONObject, java.util.ArrayList, java.util.ArrayList, ded.model.ArrowStyle, int):::EXIT
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3.description == orig(arg3.description)
arg3.description.toString == orig(arg3.description.toString)
this.inheritance.parent has only one value
this.inheritance.parent.loc has only one value
this.inheritance.parent.size has only one value
this.inheritance.parent.name has only one value
this.inheritance.parent.attributes has only one value
this.inheritance.parent.shapeFlags has only one value
this.inheritance.pt has only one value
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg1[].getClass().getName() elements == ded.model.Entity.class
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [ded.model.Inheritance]
arg2[].getClass().getName() elements == ded.model.Inheritance.class
arg3.description.toString one of { "Filled triangle", "None" }
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == ded.model.RelationEndpoint.class
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT180
this.inheritance == null
this.pt == null
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT180;condition="return == true"
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT183
this.entity == null
this.pt == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT183;condition="return == true"
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT186
this.entity == null
this.inheritance == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT186;condition="return == true"
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT
this.entity == orig(this.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.entity.loc == orig(this.entity.loc)
this.entity.size == orig(this.entity.size)
this.entity.shape == orig(this.entity.shape)
this.entity.shape.displayName == orig(this.entity.shape.displayName)
this.entity.shape.displayName.toString == orig(this.entity.shape.displayName.toString)
this.entity.shape.numParams == orig(this.entity.shape.numParams)
this.entity.fillColor == orig(this.entity.fillColor)
this.entity.fillColor.toString == orig(this.entity.fillColor.toString)
this.entity.lineColor == orig(this.entity.lineColor)
this.entity.lineColor.toString == orig(this.entity.lineColor.toString)
this.entity.textColor == orig(this.entity.textColor)
this.entity.textColor.toString == orig(this.entity.textColor.toString)
this.entity.name == orig(this.entity.name)
this.entity.name.toString == orig(this.entity.name.toString)
this.entity.nameAlign == orig(this.entity.nameAlign)
this.entity.nameAlign.displayName == orig(this.entity.nameAlign.displayName)
this.entity.nameAlign.displayName.toString == orig(this.entity.nameAlign.displayName.toString)
this.entity.attributes == orig(this.entity.attributes)
this.entity.attributes.toString == orig(this.entity.attributes.toString)
this.entity.shapeParams == orig(this.entity.shapeParams)
this.entity.shapeFlags == orig(this.entity.shapeFlags)
this.entity.shapeFlags.getClass().getName() == orig(this.entity.shapeFlags.getClass().getName())
this.entity.anchorName == orig(this.entity.anchorName)
this.entity.anchorName.toString == orig(this.entity.anchorName.toString)
this.entity.imageFileName == orig(this.entity.imageFileName)
this.entity.imageFileName.toString == orig(this.entity.imageFileName.toString)
this.entity.imageFillStyle == orig(this.entity.imageFillStyle)
this.entity.imageFillStyle.description == orig(this.entity.imageFillStyle.description)
this.entity.imageFillStyle.description.toString == orig(this.entity.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.inheritance == orig(this.inheritance)
this.inheritance.parent == orig(this.inheritance.parent)
this.inheritance.parent.loc == orig(this.inheritance.parent.loc)
this.inheritance.parent.size == orig(this.inheritance.parent.size)
this.inheritance.parent.shape == orig(this.inheritance.parent.shape)
this.inheritance.parent.fillColor == orig(this.inheritance.parent.fillColor)
this.inheritance.parent.fillColor.toString == orig(this.inheritance.parent.fillColor.toString)
this.inheritance.parent.lineColor == orig(this.inheritance.parent.lineColor)
this.inheritance.parent.lineColor.toString == orig(this.inheritance.parent.lineColor.toString)
this.inheritance.parent.textColor == orig(this.inheritance.parent.textColor)
this.inheritance.parent.textColor.toString == orig(this.inheritance.parent.textColor.toString)
this.inheritance.parent.name == orig(this.inheritance.parent.name)
this.inheritance.parent.name.toString == orig(this.inheritance.parent.name.toString)
this.inheritance.parent.nameAlign == orig(this.inheritance.parent.nameAlign)
this.inheritance.parent.attributes == orig(this.inheritance.parent.attributes)
this.inheritance.parent.attributes.toString == orig(this.inheritance.parent.attributes.toString)
this.inheritance.parent.shapeParams == orig(this.inheritance.parent.shapeParams)
this.inheritance.parent.shapeFlags == orig(this.inheritance.parent.shapeFlags)
this.inheritance.parent.shapeFlags.getClass().getName() == orig(this.inheritance.parent.shapeFlags.getClass().getName())
this.inheritance.parent.anchorName == orig(this.inheritance.parent.anchorName)
this.inheritance.parent.anchorName.toString == orig(this.inheritance.parent.anchorName.toString)
this.inheritance.parent.imageFileName == orig(this.inheritance.parent.imageFileName)
this.inheritance.parent.imageFileName.toString == orig(this.inheritance.parent.imageFileName.toString)
this.inheritance.parent.imageFillStyle == orig(this.inheritance.parent.imageFillStyle)
this.inheritance.open == orig(this.inheritance.open)
this.inheritance.pt == orig(this.inheritance.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.pt == orig(this.pt)
this.arrowStyle == orig(this.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
this.arrowStyle.description == orig(this.arrowStyle.description)
this.arrowStyle.description.toString == orig(this.arrowStyle.description.toString)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
return == true
===========================================================================
ded.model.RelationEndpoint.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
ded.model.RelationEndpoint.globalSelfCheck(ded.model.Diagram):::ENTER
arg0 != null
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType != null
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor != null
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.windowSize != null
arg0.drawFileName == true
arg0.backgroundColor has only one value
arg0.backgroundColor != null
arg0.backgroundColor.toString == "White"
arg0.entities != null
arg0.entities[] elements != null
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances != null
arg0.inheritances[] elements != null
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations != null
arg0.relations[] elements != null
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
arg0.namedColors != null
ded.model.Diagram.$assertionsDisabled == false
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.RelationEndpoint.globalSelfCheck(ded.model.Diagram):::EXIT
this.entity == orig(this.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.entity.loc == orig(this.entity.loc)
this.entity.size == orig(this.entity.size)
this.entity.shape == orig(this.entity.shape)
this.entity.shape.displayName == orig(this.entity.shape.displayName)
this.entity.shape.displayName.toString == orig(this.entity.shape.displayName.toString)
this.entity.shape.numParams == orig(this.entity.shape.numParams)
this.entity.fillColor == orig(this.entity.fillColor)
this.entity.fillColor.toString == orig(this.entity.fillColor.toString)
this.entity.lineColor == orig(this.entity.lineColor)
this.entity.lineColor.toString == orig(this.entity.lineColor.toString)
this.entity.textColor == orig(this.entity.textColor)
this.entity.textColor.toString == orig(this.entity.textColor.toString)
this.entity.name == orig(this.entity.name)
this.entity.name.toString == orig(this.entity.name.toString)
this.entity.nameAlign == orig(this.entity.nameAlign)
this.entity.nameAlign.displayName == orig(this.entity.nameAlign.displayName)
this.entity.nameAlign.displayName.toString == orig(this.entity.nameAlign.displayName.toString)
this.entity.attributes == orig(this.entity.attributes)
this.entity.attributes.toString == orig(this.entity.attributes.toString)
this.entity.shapeParams == orig(this.entity.shapeParams)
this.entity.shapeFlags == orig(this.entity.shapeFlags)
this.entity.shapeFlags.getClass().getName() == orig(this.entity.shapeFlags.getClass().getName())
this.entity.anchorName == orig(this.entity.anchorName)
this.entity.anchorName.toString == orig(this.entity.anchorName.toString)
this.entity.imageFileName == orig(this.entity.imageFileName)
this.entity.imageFileName.toString == orig(this.entity.imageFileName.toString)
this.entity.imageFillStyle == orig(this.entity.imageFillStyle)
this.entity.imageFillStyle.description == orig(this.entity.imageFillStyle.description)
this.entity.imageFillStyle.description.toString == orig(this.entity.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.inheritance == orig(this.inheritance)
this.inheritance.parent == orig(this.inheritance.parent)
this.inheritance.parent.loc == orig(this.inheritance.parent.loc)
this.inheritance.parent.size == orig(this.inheritance.parent.size)
this.inheritance.parent.shape == orig(this.inheritance.parent.shape)
this.inheritance.parent.fillColor == orig(this.inheritance.parent.fillColor)
this.inheritance.parent.fillColor.toString == orig(this.inheritance.parent.fillColor.toString)
this.inheritance.parent.lineColor == orig(this.inheritance.parent.lineColor)
this.inheritance.parent.lineColor.toString == orig(this.inheritance.parent.lineColor.toString)
this.inheritance.parent.textColor == orig(this.inheritance.parent.textColor)
this.inheritance.parent.textColor.toString == orig(this.inheritance.parent.textColor.toString)
this.inheritance.parent.name == orig(this.inheritance.parent.name)
this.inheritance.parent.name.toString == orig(this.inheritance.parent.name.toString)
this.inheritance.parent.nameAlign == orig(this.inheritance.parent.nameAlign)
this.inheritance.parent.attributes == orig(this.inheritance.parent.attributes)
this.inheritance.parent.attributes.toString == orig(this.inheritance.parent.attributes.toString)
this.inheritance.parent.shapeParams == orig(this.inheritance.parent.shapeParams)
this.inheritance.parent.shapeFlags == orig(this.inheritance.parent.shapeFlags)
this.inheritance.parent.shapeFlags.getClass().getName() == orig(this.inheritance.parent.shapeFlags.getClass().getName())
this.inheritance.parent.anchorName == orig(this.inheritance.parent.anchorName)
this.inheritance.parent.anchorName.toString == orig(this.inheritance.parent.anchorName.toString)
this.inheritance.parent.imageFileName == orig(this.inheritance.parent.imageFileName)
this.inheritance.parent.imageFileName.toString == orig(this.inheritance.parent.imageFileName.toString)
this.inheritance.parent.imageFillStyle == orig(this.inheritance.parent.imageFillStyle)
this.inheritance.open == orig(this.inheritance.open)
this.inheritance.pt == orig(this.inheritance.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.pt == orig(this.pt)
this.arrowStyle == orig(this.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
this.arrowStyle.description == orig(this.arrowStyle.description)
this.arrowStyle.description.toString == orig(this.arrowStyle.description.toString)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
ded.model.Diagram.jsonType == orig(ded.model.Diagram.jsonType)
ded.model.Diagram.jsonType.toString == orig(ded.model.Diagram.jsonType.toString)
ded.model.Diagram.defaultBackgroundColor == orig(ded.model.Diagram.defaultBackgroundColor)
ded.model.Diagram.defaultBackgroundColor.toString == orig(ded.model.Diagram.defaultBackgroundColor.toString)
arg0.windowSize == orig(arg0.windowSize)
arg0.drawFileName == orig(arg0.drawFileName)
arg0.backgroundColor == orig(arg0.backgroundColor)
arg0.backgroundColor.toString == orig(arg0.backgroundColor.toString)
arg0.entities == orig(arg0.entities)
arg0.entities[] == orig(arg0.entities[])
arg0.inheritances == orig(arg0.inheritances)
arg0.inheritances[] == orig(arg0.inheritances[])
arg0.relations == orig(arg0.relations)
arg0.relations[] == orig(arg0.relations[])
arg0.namedColors == orig(arg0.namedColors)
ded.model.Diagram.$assertionsDisabled == orig(ded.model.Diagram.$assertionsDisabled)
ded.model.Diagram.jsonType has only one value
ded.model.Diagram.jsonType != null
ded.model.Diagram.jsonType.toString == "Diagram Editor Diagram"
ded.model.Diagram.defaultBackgroundColor has only one value
ded.model.Diagram.defaultBackgroundColor != null
ded.model.Diagram.defaultBackgroundColor.toString == "White"
arg0.windowSize != null
arg0.drawFileName == true
arg0.backgroundColor has only one value
arg0.backgroundColor != null
arg0.backgroundColor.toString == "White"
arg0.entities != null
arg0.entities[] elements != null
arg0.entities[].getClass().getName() == [ded.model.Entity, ded.model.Entity]
arg0.entities[].getClass().getName() elements == ded.model.Entity.class
arg0.inheritances != null
arg0.inheritances[] elements != null
arg0.inheritances[].getClass().getName() == [ded.model.Inheritance]
arg0.inheritances[].getClass().getName() elements == ded.model.Inheritance.class
arg0.relations != null
arg0.relations[] elements != null
arg0.relations[].getClass().getName() == [ded.model.Relation, ded.model.Relation, ded.model.Relation]
arg0.relations[].getClass().getName() elements == ded.model.Relation.class
arg0.namedColors != null
ded.model.Diagram.$assertionsDisabled == false
size(arg0.entities[]) == 2
size(arg0.inheritances[]) == 1
size(arg0.relations[]) == 3
===========================================================================
ded.model.RelationEndpoint.isEntity():::ENTER
===========================================================================
ded.model.RelationEndpoint.isEntity():::EXIT
this.entity == orig(this.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.entity.loc == orig(this.entity.loc)
this.entity.size == orig(this.entity.size)
this.entity.shape == orig(this.entity.shape)
this.entity.shape.displayName == orig(this.entity.shape.displayName)
this.entity.shape.displayName.toString == orig(this.entity.shape.displayName.toString)
this.entity.shape.numParams == orig(this.entity.shape.numParams)
this.entity.fillColor == orig(this.entity.fillColor)
this.entity.fillColor.toString == orig(this.entity.fillColor.toString)
this.entity.lineColor == orig(this.entity.lineColor)
this.entity.lineColor.toString == orig(this.entity.lineColor.toString)
this.entity.textColor == orig(this.entity.textColor)
this.entity.textColor.toString == orig(this.entity.textColor.toString)
this.entity.name == orig(this.entity.name)
this.entity.name.toString == orig(this.entity.name.toString)
this.entity.nameAlign == orig(this.entity.nameAlign)
this.entity.nameAlign.displayName == orig(this.entity.nameAlign.displayName)
this.entity.nameAlign.displayName.toString == orig(this.entity.nameAlign.displayName.toString)
this.entity.attributes == orig(this.entity.attributes)
this.entity.attributes.toString == orig(this.entity.attributes.toString)
this.entity.shapeParams == orig(this.entity.shapeParams)
this.entity.shapeFlags == orig(this.entity.shapeFlags)
this.entity.shapeFlags.getClass().getName() == orig(this.entity.shapeFlags.getClass().getName())
this.entity.anchorName == orig(this.entity.anchorName)
this.entity.anchorName.toString == orig(this.entity.anchorName.toString)
this.entity.imageFileName == orig(this.entity.imageFileName)
this.entity.imageFileName.toString == orig(this.entity.imageFileName.toString)
this.entity.imageFillStyle == orig(this.entity.imageFillStyle)
this.entity.imageFillStyle.description == orig(this.entity.imageFillStyle.description)
this.entity.imageFillStyle.description.toString == orig(this.entity.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.inheritance == orig(this.inheritance)
this.inheritance.parent == orig(this.inheritance.parent)
this.inheritance.parent.loc == orig(this.inheritance.parent.loc)
this.inheritance.parent.size == orig(this.inheritance.parent.size)
this.inheritance.parent.shape == orig(this.inheritance.parent.shape)
this.inheritance.parent.fillColor == orig(this.inheritance.parent.fillColor)
this.inheritance.parent.fillColor.toString == orig(this.inheritance.parent.fillColor.toString)
this.inheritance.parent.lineColor == orig(this.inheritance.parent.lineColor)
this.inheritance.parent.lineColor.toString == orig(this.inheritance.parent.lineColor.toString)
this.inheritance.parent.textColor == orig(this.inheritance.parent.textColor)
this.inheritance.parent.textColor.toString == orig(this.inheritance.parent.textColor.toString)
this.inheritance.parent.name == orig(this.inheritance.parent.name)
this.inheritance.parent.name.toString == orig(this.inheritance.parent.name.toString)
this.inheritance.parent.nameAlign == orig(this.inheritance.parent.nameAlign)
this.inheritance.parent.attributes == orig(this.inheritance.parent.attributes)
this.inheritance.parent.attributes.toString == orig(this.inheritance.parent.attributes.toString)
this.inheritance.parent.shapeParams == orig(this.inheritance.parent.shapeParams)
this.inheritance.parent.shapeFlags == orig(this.inheritance.parent.shapeFlags)
this.inheritance.parent.shapeFlags.getClass().getName() == orig(this.inheritance.parent.shapeFlags.getClass().getName())
this.inheritance.parent.anchorName == orig(this.inheritance.parent.anchorName)
this.inheritance.parent.anchorName.toString == orig(this.inheritance.parent.anchorName.toString)
this.inheritance.parent.imageFileName == orig(this.inheritance.parent.imageFileName)
this.inheritance.parent.imageFileName.toString == orig(this.inheritance.parent.imageFileName.toString)
this.inheritance.parent.imageFillStyle == orig(this.inheritance.parent.imageFillStyle)
this.inheritance.open == orig(this.inheritance.open)
this.inheritance.pt == orig(this.inheritance.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.pt == orig(this.pt)
this.arrowStyle == orig(this.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
this.arrowStyle.description == orig(this.arrowStyle.description)
this.arrowStyle.description.toString == orig(this.arrowStyle.description.toString)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
(this.entity != null)  <==>  (return == true)
(this.entity != null)  ==>  (this.arrowStyle.description.toString one of { "Double angle", "Filled triangle", "None" })
(this.entity != null)  ==>  (this.entity.anchorName != null)
(this.entity != null)  ==>  (this.entity.anchorName has only one value)
(this.entity != null)  ==>  (this.entity.anchorName.toString == "")
(this.entity != null)  ==>  (this.entity.attributes != null)
(this.entity != null)  ==>  (this.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" })
(this.entity != null)  ==>  (this.entity.fillColor != null)
(this.entity != null)  ==>  (this.entity.fillColor has only one value)
(this.entity != null)  ==>  (this.entity.fillColor.toString == "Gray")
(this.entity != null)  ==>  (this.entity.imageFileName != null)
(this.entity != null)  ==>  (this.entity.imageFileName has only one value)
(this.entity != null)  ==>  (this.entity.imageFileName.toString == "")
(this.entity != null)  ==>  (this.entity.imageFillStyle != null)
(this.entity != null)  ==>  (this.entity.imageFillStyle has only one value)
(this.entity != null)  ==>  (this.entity.imageFillStyle.description != null)
(this.entity != null)  ==>  (this.entity.imageFillStyle.description has only one value)
(this.entity != null)  ==>  (this.entity.imageFillStyle.description.toString == "One copy in upper left")
(this.entity != null)  ==>  (this.entity.lineColor != null)
(this.entity != null)  ==>  (this.entity.lineColor has only one value)
(this.entity != null)  ==>  (this.entity.lineColor.toString == "Black")
(this.entity != null)  ==>  (this.entity.loc != null)
(this.entity != null)  ==>  (this.entity.name != null)
(this.entity != null)  ==>  (this.entity.name.toString one of { "e1", "e2" })
(this.entity != null)  ==>  (this.entity.nameAlign != null)
(this.entity != null)  ==>  (this.entity.nameAlign has only one value)
(this.entity != null)  ==>  (this.entity.nameAlign.displayName != null)
(this.entity != null)  ==>  (this.entity.nameAlign.displayName has only one value)
(this.entity != null)  ==>  (this.entity.nameAlign.displayName.toString == "Center")
(this.entity != null)  ==>  (this.entity.shape != null)
(this.entity != null)  ==>  (this.entity.shape.displayName != null)
(this.entity != null)  ==>  (this.entity.shape.displayName.toString one of { "Ellipse", "No shape" })
(this.entity != null)  ==>  (this.entity.shapeFlags != null)
(this.entity != null)  ==>  (this.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class)
(this.entity != null)  ==>  (this.entity.shapeParams == null)
(this.entity != null)  ==>  (this.entity.size != null)
(this.entity != null)  ==>  (this.entity.textColor != null)
(this.entity != null)  ==>  (this.entity.textColor has only one value)
(this.entity != null)  ==>  (this.entity.textColor.toString == "Black")
(this.entity != null)  ==>  (this.inheritance == null)
(this.entity != null)  ==>  (this.pt == null)
(this.entity == null)  <==>  (return == false)
(this.entity == null)  ==>  (this.arrowStyle has only one value)
(this.entity == null)  ==>  (this.arrowStyle.description has only one value)
(this.entity == null)  ==>  (this.arrowStyle.description.toString == "None")
(this.entity == null)  ==>  (this.inheritance.parent.anchorName has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.anchorName.toString == "")
(this.entity == null)  ==>  (this.inheritance.parent.attributes.toString == "attr1\nattr2\nattr3")
(this.entity == null)  ==>  (this.inheritance.parent.fillColor has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.fillColor.toString == "Gray")
(this.entity == null)  ==>  (this.inheritance.parent.imageFileName has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.imageFileName.toString == "")
(this.entity == null)  ==>  (this.inheritance.parent.imageFillStyle has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.lineColor has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.lineColor.toString == "Black")
(this.entity == null)  ==>  (this.inheritance.parent.name.toString == "e1")
(this.entity == null)  ==>  (this.inheritance.parent.nameAlign has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.shape has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class)
(this.entity == null)  ==>  (this.inheritance.parent.shapeParams == null)
(this.entity == null)  ==>  (this.inheritance.parent.textColor has only one value)
(this.entity == null)  ==>  (this.inheritance.parent.textColor.toString == "Black")
===========================================================================
ded.model.RelationEndpoint.isEntity():::EXIT;condition="return == true"
this.entity != null
this.inheritance == null
this.pt == null
return == true
===========================================================================
ded.model.RelationEndpoint.isEntity():::EXIT;condition="not(return == true)"
this.entity == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
return == false
===========================================================================
ded.model.RelationEndpoint.isInheritance():::ENTER
===========================================================================
ded.model.RelationEndpoint.isInheritance():::EXIT
this.entity == orig(this.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.entity.loc == orig(this.entity.loc)
this.entity.size == orig(this.entity.size)
this.entity.shape == orig(this.entity.shape)
this.entity.shape.displayName == orig(this.entity.shape.displayName)
this.entity.shape.displayName.toString == orig(this.entity.shape.displayName.toString)
this.entity.shape.numParams == orig(this.entity.shape.numParams)
this.entity.fillColor == orig(this.entity.fillColor)
this.entity.fillColor.toString == orig(this.entity.fillColor.toString)
this.entity.lineColor == orig(this.entity.lineColor)
this.entity.lineColor.toString == orig(this.entity.lineColor.toString)
this.entity.textColor == orig(this.entity.textColor)
this.entity.textColor.toString == orig(this.entity.textColor.toString)
this.entity.name == orig(this.entity.name)
this.entity.name.toString == orig(this.entity.name.toString)
this.entity.nameAlign == orig(this.entity.nameAlign)
this.entity.nameAlign.displayName == orig(this.entity.nameAlign.displayName)
this.entity.nameAlign.displayName.toString == orig(this.entity.nameAlign.displayName.toString)
this.entity.attributes == orig(this.entity.attributes)
this.entity.attributes.toString == orig(this.entity.attributes.toString)
this.entity.shapeParams == orig(this.entity.shapeParams)
this.entity.shapeFlags == orig(this.entity.shapeFlags)
this.entity.shapeFlags.getClass().getName() == orig(this.entity.shapeFlags.getClass().getName())
this.entity.anchorName == orig(this.entity.anchorName)
this.entity.anchorName.toString == orig(this.entity.anchorName.toString)
this.entity.imageFileName == orig(this.entity.imageFileName)
this.entity.imageFileName.toString == orig(this.entity.imageFileName.toString)
this.entity.imageFillStyle == orig(this.entity.imageFillStyle)
this.entity.imageFillStyle.description == orig(this.entity.imageFillStyle.description)
this.entity.imageFillStyle.description.toString == orig(this.entity.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.inheritance == orig(this.inheritance)
this.inheritance.parent == orig(this.inheritance.parent)
this.inheritance.parent.loc == orig(this.inheritance.parent.loc)
this.inheritance.parent.size == orig(this.inheritance.parent.size)
this.inheritance.parent.shape == orig(this.inheritance.parent.shape)
this.inheritance.parent.fillColor == orig(this.inheritance.parent.fillColor)
this.inheritance.parent.fillColor.toString == orig(this.inheritance.parent.fillColor.toString)
this.inheritance.parent.lineColor == orig(this.inheritance.parent.lineColor)
this.inheritance.parent.lineColor.toString == orig(this.inheritance.parent.lineColor.toString)
this.inheritance.parent.textColor == orig(this.inheritance.parent.textColor)
this.inheritance.parent.textColor.toString == orig(this.inheritance.parent.textColor.toString)
this.inheritance.parent.name == orig(this.inheritance.parent.name)
this.inheritance.parent.name.toString == orig(this.inheritance.parent.name.toString)
this.inheritance.parent.nameAlign == orig(this.inheritance.parent.nameAlign)
this.inheritance.parent.attributes == orig(this.inheritance.parent.attributes)
this.inheritance.parent.attributes.toString == orig(this.inheritance.parent.attributes.toString)
this.inheritance.parent.shapeParams == orig(this.inheritance.parent.shapeParams)
this.inheritance.parent.shapeFlags == orig(this.inheritance.parent.shapeFlags)
this.inheritance.parent.shapeFlags.getClass().getName() == orig(this.inheritance.parent.shapeFlags.getClass().getName())
this.inheritance.parent.anchorName == orig(this.inheritance.parent.anchorName)
this.inheritance.parent.anchorName.toString == orig(this.inheritance.parent.anchorName.toString)
this.inheritance.parent.imageFileName == orig(this.inheritance.parent.imageFileName)
this.inheritance.parent.imageFileName.toString == orig(this.inheritance.parent.imageFileName.toString)
this.inheritance.parent.imageFillStyle == orig(this.inheritance.parent.imageFillStyle)
this.inheritance.open == orig(this.inheritance.open)
this.inheritance.pt == orig(this.inheritance.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.pt == orig(this.pt)
this.arrowStyle == orig(this.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
this.arrowStyle.description == orig(this.arrowStyle.description)
this.arrowStyle.description.toString == orig(this.arrowStyle.description.toString)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
(this.inheritance == null)  <==>  (return == false)
(this.inheritance == null)  ==>  (this.arrowStyle.description.toString one of { "Double angle", "Filled triangle", "None" })
(this.inheritance == null)  ==>  (this.entity.anchorName has only one value)
(this.inheritance == null)  ==>  (this.entity.anchorName.toString == "")
(this.inheritance == null)  ==>  (this.entity.attributes.toString one of { "attr1\nattr2\nattr3", "funny\"characters\\in'this,string!" })
(this.inheritance == null)  ==>  (this.entity.fillColor has only one value)
(this.inheritance == null)  ==>  (this.entity.fillColor.toString == "Gray")
(this.inheritance == null)  ==>  (this.entity.imageFileName has only one value)
(this.inheritance == null)  ==>  (this.entity.imageFileName.toString == "")
(this.inheritance == null)  ==>  (this.entity.imageFillStyle has only one value)
(this.inheritance == null)  ==>  (this.entity.imageFillStyle.description has only one value)
(this.inheritance == null)  ==>  (this.entity.imageFillStyle.description.toString == "One copy in upper left")
(this.inheritance == null)  ==>  (this.entity.lineColor has only one value)
(this.inheritance == null)  ==>  (this.entity.lineColor.toString == "Black")
(this.inheritance == null)  ==>  (this.entity.name.toString one of { "e1", "e2" })
(this.inheritance == null)  ==>  (this.entity.nameAlign has only one value)
(this.inheritance == null)  ==>  (this.entity.nameAlign.displayName has only one value)
(this.inheritance == null)  ==>  (this.entity.nameAlign.displayName.toString == "Center")
(this.inheritance == null)  ==>  (this.entity.shape.displayName.toString one of { "Ellipse", "No shape" })
(this.inheritance == null)  ==>  (this.entity.shapeFlags.getClass().getName() == java.util.RegularEnumSet.class)
(this.inheritance == null)  ==>  (this.entity.shapeParams == null)
(this.inheritance == null)  ==>  (this.entity.textColor has only one value)
(this.inheritance == null)  ==>  (this.entity.textColor.toString == "Black")
===========================================================================
ded.model.RelationEndpoint.isInheritance():::EXIT;condition="return == true"
this.entity == null
this.pt == null
this.arrowStyle has only one value
this.arrowStyle.description has only one value
this.arrowStyle.description.toString == "None"
return == true
===========================================================================
ded.model.RelationEndpoint.isInheritance():::EXIT;condition="not(return == true)"
this.inheritance == null
return == false
===========================================================================
ded.model.RelationEndpoint.toJSON(java.util.HashMap, java.util.HashMap, ded.model.ArrowStyle):::ENTER
arg0 != null
arg1 != null
arg2 != null
arg2.description != null
arg2.description.toString one of { "Filled triangle", "None" }
===========================================================================
ded.model.RelationEndpoint.toJSON(java.util.HashMap, java.util.HashMap, ded.model.ArrowStyle):::EXIT
this.entity == orig(this.entity)
ded.model.Entity.defaultShape == orig(ded.model.Entity.defaultShape)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.Entity.defaultShape.displayName == orig(ded.model.Entity.defaultShape.displayName)
ded.model.Entity.defaultShape.displayName.toString == orig(ded.model.Entity.defaultShape.displayName.toString)
ded.model.Entity.defaultShape.numParams == orig(ded.model.Entity.defaultShape.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.Entity.defaultFillColor == orig(ded.model.Entity.defaultFillColor)
ded.model.Entity.defaultFillColor.toString == orig(ded.model.Entity.defaultFillColor.toString)
ded.model.Entity.defaultLineColor == orig(ded.model.Entity.defaultLineColor)
ded.model.Entity.defaultLineColor.toString == orig(ded.model.Entity.defaultLineColor.toString)
ded.model.Entity.defaultTextColor == orig(ded.model.Entity.defaultTextColor)
ded.model.Entity.defaultTextColor.toString == orig(ded.model.Entity.defaultTextColor.toString)
ded.model.Entity.defaultNameAlign == orig(ded.model.Entity.defaultNameAlign)
ded.model.TextAlign.TA_LEFT == orig(ded.model.TextAlign.TA_LEFT)
ded.model.TextAlign.TA_CENTER == orig(ded.model.TextAlign.TA_CENTER)
ded.model.TextAlign.TA_RIGHT == orig(ded.model.TextAlign.TA_RIGHT)
ded.model.Entity.defaultNameAlign.displayName == orig(ded.model.Entity.defaultNameAlign.displayName)
ded.model.Entity.defaultNameAlign.displayName.toString == orig(ded.model.Entity.defaultNameAlign.displayName.toString)
ded.model.TextAlign.$VALUES == orig(ded.model.TextAlign.$VALUES)
ded.model.TextAlign.$VALUES.getClass().getName() == orig(ded.model.TextAlign.$VALUES.getClass().getName())
ded.model.TextAlign.$VALUES[] == orig(ded.model.TextAlign.$VALUES[])
ded.model.TextAlign.$VALUES[].displayName == orig(ded.model.TextAlign.$VALUES[].displayName)
ded.model.Entity.defaultImageFillStyle == orig(ded.model.Entity.defaultImageFillStyle)
ded.model.ImageFillStyle.IFS_UPPER_LEFT == orig(ded.model.ImageFillStyle.IFS_UPPER_LEFT)
ded.model.ImageFillStyle.IFS_STRETCH == orig(ded.model.ImageFillStyle.IFS_STRETCH)
ded.model.ImageFillStyle.IFS_TILE == orig(ded.model.ImageFillStyle.IFS_TILE)
ded.model.ImageFillStyle.IFS_LOCK_SIZE == orig(ded.model.ImageFillStyle.IFS_LOCK_SIZE)
ded.model.ImageFillStyle.IFS_CENTER == orig(ded.model.ImageFillStyle.IFS_CENTER)
ded.model.Entity.defaultImageFillStyle.description == orig(ded.model.Entity.defaultImageFillStyle.description)
ded.model.Entity.defaultImageFillStyle.description.toString == orig(ded.model.Entity.defaultImageFillStyle.description.toString)
ded.model.ImageFillStyle.$VALUES == orig(ded.model.ImageFillStyle.$VALUES)
ded.model.ImageFillStyle.$VALUES.getClass().getName() == orig(ded.model.ImageFillStyle.$VALUES.getClass().getName())
ded.model.ImageFillStyle.$VALUES[] == orig(ded.model.ImageFillStyle.$VALUES[])
ded.model.ImageFillStyle.$VALUES[].description == orig(ded.model.ImageFillStyle.$VALUES[].description)
this.entity.loc == orig(this.entity.loc)
this.entity.size == orig(this.entity.size)
this.entity.shape == orig(this.entity.shape)
this.entity.shape.displayName == orig(this.entity.shape.displayName)
this.entity.shape.displayName.toString == orig(this.entity.shape.displayName.toString)
this.entity.shape.numParams == orig(this.entity.shape.numParams)
this.entity.fillColor == orig(this.entity.fillColor)
this.entity.fillColor.toString == orig(this.entity.fillColor.toString)
this.entity.lineColor == orig(this.entity.lineColor)
this.entity.lineColor.toString == orig(this.entity.lineColor.toString)
this.entity.textColor == orig(this.entity.textColor)
this.entity.textColor.toString == orig(this.entity.textColor.toString)
this.entity.name == orig(this.entity.name)
this.entity.name.toString == orig(this.entity.name.toString)
this.entity.nameAlign == orig(this.entity.nameAlign)
this.entity.nameAlign.displayName == orig(this.entity.nameAlign.displayName)
this.entity.nameAlign.displayName.toString == orig(this.entity.nameAlign.displayName.toString)
this.entity.attributes == orig(this.entity.attributes)
this.entity.attributes.toString == orig(this.entity.attributes.toString)
this.entity.shapeParams == orig(this.entity.shapeParams)
this.entity.shapeFlags == orig(this.entity.shapeFlags)
this.entity.shapeFlags.getClass().getName() == orig(this.entity.shapeFlags.getClass().getName())
this.entity.anchorName == orig(this.entity.anchorName)
this.entity.anchorName.toString == orig(this.entity.anchorName.toString)
this.entity.imageFileName == orig(this.entity.imageFileName)
this.entity.imageFileName.toString == orig(this.entity.imageFileName.toString)
this.entity.imageFillStyle == orig(this.entity.imageFillStyle)
this.entity.imageFillStyle.description == orig(this.entity.imageFillStyle.description)
this.entity.imageFillStyle.description.toString == orig(this.entity.imageFillStyle.description.toString)
ded.model.Entity.$assertionsDisabled == orig(ded.model.Entity.$assertionsDisabled)
this.inheritance == orig(this.inheritance)
this.inheritance.parent == orig(this.inheritance.parent)
this.inheritance.parent.loc == orig(this.inheritance.parent.loc)
this.inheritance.parent.size == orig(this.inheritance.parent.size)
this.inheritance.parent.shape == orig(this.inheritance.parent.shape)
this.inheritance.parent.fillColor == orig(this.inheritance.parent.fillColor)
this.inheritance.parent.fillColor.toString == orig(this.inheritance.parent.fillColor.toString)
this.inheritance.parent.lineColor == orig(this.inheritance.parent.lineColor)
this.inheritance.parent.lineColor.toString == orig(this.inheritance.parent.lineColor.toString)
this.inheritance.parent.textColor == orig(this.inheritance.parent.textColor)
this.inheritance.parent.textColor.toString == orig(this.inheritance.parent.textColor.toString)
this.inheritance.parent.name == orig(this.inheritance.parent.name)
this.inheritance.parent.name.toString == orig(this.inheritance.parent.name.toString)
this.inheritance.parent.nameAlign == orig(this.inheritance.parent.nameAlign)
this.inheritance.parent.attributes == orig(this.inheritance.parent.attributes)
this.inheritance.parent.attributes.toString == orig(this.inheritance.parent.attributes.toString)
this.inheritance.parent.shapeParams == orig(this.inheritance.parent.shapeParams)
this.inheritance.parent.shapeFlags == orig(this.inheritance.parent.shapeFlags)
this.inheritance.parent.shapeFlags.getClass().getName() == orig(this.inheritance.parent.shapeFlags.getClass().getName())
this.inheritance.parent.anchorName == orig(this.inheritance.parent.anchorName)
this.inheritance.parent.anchorName.toString == orig(this.inheritance.parent.anchorName.toString)
this.inheritance.parent.imageFileName == orig(this.inheritance.parent.imageFileName)
this.inheritance.parent.imageFileName.toString == orig(this.inheritance.parent.imageFileName.toString)
this.inheritance.parent.imageFillStyle == orig(this.inheritance.parent.imageFillStyle)
this.inheritance.open == orig(this.inheritance.open)
this.inheritance.pt == orig(this.inheritance.pt)
ded.model.Inheritance.$assertionsDisabled == orig(ded.model.Inheritance.$assertionsDisabled)
this.pt == orig(this.pt)
this.arrowStyle == orig(this.arrowStyle)
ded.model.ArrowStyle.AS_NONE == orig(ded.model.ArrowStyle.AS_NONE)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE)
ded.model.ArrowStyle.AS_NONE.description == orig(ded.model.ArrowStyle.AS_NONE.description)
ded.model.ArrowStyle.AS_NONE.description.toString == orig(ded.model.ArrowStyle.AS_NONE.description.toString)
ded.model.ArrowStyle.$VALUES == orig(ded.model.ArrowStyle.$VALUES)
ded.model.ArrowStyle.$VALUES.getClass().getName() == orig(ded.model.ArrowStyle.$VALUES.getClass().getName())
ded.model.ArrowStyle.$VALUES[] == orig(ded.model.ArrowStyle.$VALUES[])
ded.model.ArrowStyle.$VALUES[].description == orig(ded.model.ArrowStyle.$VALUES[].description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description)
ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString == orig(ded.model.ArrowStyle.AS_FILLED_TRIANGLE.description.toString)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description)
ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString == orig(ded.model.ArrowStyle.AS_DOUBLE_ANGLE.description.toString)
this.arrowStyle.description == orig(this.arrowStyle.description)
this.arrowStyle.description.toString == orig(this.arrowStyle.description.toString)
ded.model.RelationEndpoint.$assertionsDisabled == orig(ded.model.RelationEndpoint.$assertionsDisabled)
arg2.description == orig(arg2.description)
arg2.description.toString == orig(arg2.description.toString)
arg2.description != null
arg2.description.toString one of { "Filled triangle", "None" }
return != null
return.map != null
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL != null
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
ded.model.RoutingAlgorithm:::CLASS
ded.model.RoutingAlgorithm.RA_DIRECT has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT has only one value
ded.model.RoutingAlgorithm.RA_DIRECT.description has only one value
ded.model.RoutingAlgorithm.RA_DIRECT.description.toString == "Direct"
ded.model.RoutingAlgorithm.$VALUES has only one value
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == ded.model.RoutingAlgorithm[].class
ded.model.RoutingAlgorithm.$VALUES[] contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() == [ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm, ded.model.RoutingAlgorithm]
ded.model.RoutingAlgorithm.$VALUES[].getClass().getName() elements == ded.model.RoutingAlgorithm.class
ded.model.RoutingAlgorithm.$VALUES[].description contains no nulls and has only one value, of length 3
ded.model.RoutingAlgorithm.$VALUES[].description.toString == [Direct, Horizontal First Manhattan, Vertical First Manhattan]
ded.model.RoutingAlgorithm.$VALUES[].description.toString elements one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString == "Horizontal First Manhattan"
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description has only one value
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString == "Vertical First Manhattan"
size(ded.model.RoutingAlgorithm.$VALUES[]) == 3
===========================================================================
ded.model.RoutingAlgorithm:::OBJECT
this.description.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
===========================================================================
ded.model.RoutingAlgorithm.RoutingAlgorithm(java.lang.String, int, java.lang.String):::ENTER
arg0.toString one of { "RA_DIRECT", "RA_MANHATTAN_HORIZ", "RA_MANHATTAN_VERT" }
arg1 one of { 0, 1, 2 }
arg2.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
===========================================================================
ded.model.RoutingAlgorithm.RoutingAlgorithm(java.lang.String, int, java.lang.String):::EXIT
this.description == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "RA_DIRECT", "RA_MANHATTAN_HORIZ", "RA_MANHATTAN_VERT" }
arg2.toString one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
===========================================================================
ded.model.RoutingAlgorithm.values():::ENTER
===========================================================================
ded.model.RoutingAlgorithm.values():::EXIT
ded.model.RoutingAlgorithm.RA_DIRECT == orig(ded.model.RoutingAlgorithm.RA_DIRECT)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT)
ded.model.RoutingAlgorithm.RA_DIRECT.description == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description)
ded.model.RoutingAlgorithm.RA_DIRECT.description.toString == orig(ded.model.RoutingAlgorithm.RA_DIRECT.description.toString)
ded.model.RoutingAlgorithm.$VALUES == orig(ded.model.RoutingAlgorithm.$VALUES)
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == return.getClass().getName()
ded.model.RoutingAlgorithm.$VALUES.getClass().getName() == orig(ded.model.RoutingAlgorithm.$VALUES.getClass().getName())
ded.model.RoutingAlgorithm.$VALUES[] == orig(ded.model.RoutingAlgorithm.$VALUES[])
ded.model.RoutingAlgorithm.$VALUES[].description == orig(ded.model.RoutingAlgorithm.$VALUES[].description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_HORIZ.description.toString)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description)
ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString == orig(ded.model.RoutingAlgorithm.RA_MANHATTAN_VERT.description.toString)
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].description contains no nulls and has only one value, of length 3
return[].description.toString == [Direct, Horizontal First Manhattan, Vertical First Manhattan]
return[].description.toString elements one of { "Direct", "Horizontal First Manhattan", "Vertical First Manhattan" }
size(return[]) == 3
===========================================================================
ded.model.SerializationTests:::CLASS
ded.model.SerializationTests.$assertionsDisabled == false
===========================================================================
ded.model.SerializationTests:::OBJECT
this has only one value
===========================================================================
ded.model.SerializationTests.SerializationTests():::EXIT
===========================================================================
ded.model.SerializationTests.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
ded.model.SerializationTests.main(java.lang.String[]):::EXIT
ded.model.SerializationTests.$assertionsDisabled == orig(ded.model.SerializationTests.$assertionsDisabled)
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
ded.model.SerializationTests.test1():::ENTER
===========================================================================
ded.model.SerializationTests.test1():::EXIT
ded.model.SerializationTests.$assertionsDisabled == orig(ded.model.SerializationTests.$assertionsDisabled)
===========================================================================
ded.model.ShapeFlag:::CLASS
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE has only one value
ded.model.ShapeFlag.SF_HAS_MAXIMIZE != null
ded.model.ShapeFlag.SF_HAS_MINIMIZE has only one value
ded.model.ShapeFlag.SF_HAS_MINIMIZE != null
ded.model.ShapeFlag.SF_HAS_CLOSE has only one value
ded.model.ShapeFlag.SF_HAS_CLOSE != null
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS has only one value
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS != null
ded.model.ShapeFlag.SF_CHECKED has only one value
ded.model.ShapeFlag.SF_CHECKED != null
ded.model.ShapeFlag.SF_TRI_STATE has only one value
ded.model.ShapeFlag.SF_TRI_STATE != null
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName has only one value
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName != null
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString == "Has maximize button"
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault == true
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes has only one value
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes != null
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.EntityShape[].class
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] elements has only one value
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] elements != null
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].getClass().getName() == [ded.model.EntityShape]
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName elements has only one value
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName elements != null
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName.toString == [Window]
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName.toString elements == "Window"
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams == [2]
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams elements == 2
ded.model.ShapeFlag.$VALUES has only one value
ded.model.ShapeFlag.$VALUES != null
ded.model.ShapeFlag.$VALUES.getClass().getName() == ded.model.ShapeFlag[].class
ded.model.ShapeFlag.$VALUES[] contains no nulls and has only one value, of length 6
ded.model.ShapeFlag.$VALUES[] elements != null
ded.model.ShapeFlag.$VALUES[].getClass().getName() == [ded.model.ShapeFlag, ded.model.ShapeFlag, ded.model.ShapeFlag, ded.model.ShapeFlag, ded.model.ShapeFlag, ded.model.ShapeFlag]
ded.model.ShapeFlag.$VALUES[].getClass().getName() elements == ded.model.ShapeFlag.class
ded.model.ShapeFlag.$VALUES[].displayName contains no nulls and has only one value, of length 6
ded.model.ShapeFlag.$VALUES[].displayName elements != null
ded.model.ShapeFlag.$VALUES[].displayName.toString == [Has maximize button, Has a minimize button, Has a close button, Has a window operations menu, Checked, Tri-state]
ded.model.ShapeFlag.$VALUES[].isDefault == [1, 1, 1, 1, 0, 0]
ded.model.ShapeFlag.$VALUES[].shapes contains no nulls and has only one value, of length 6
ded.model.ShapeFlag.$VALUES[].shapes elements != null
ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName() == [ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[]]
ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName() elements == ded.model.EntityShape[].class
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName has only one value
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName != null
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString == "Has a minimize button"
ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault == true
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes has only one value
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes != null
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] elements has only one value
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] elements != null
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].getClass().getName() == [ded.model.EntityShape]
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName elements has only one value
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName elements != null
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName.toString == [Window]
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName.toString elements == "Window"
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams == [2]
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams elements == 2
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName has only one value
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName != null
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString == "Has a close button"
ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault == true
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes has only one value
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes != null
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] elements has only one value
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] elements != null
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].getClass().getName() == [ded.model.EntityShape]
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName elements has only one value
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName elements != null
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName.toString == [Window]
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName.toString elements == "Window"
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams == [2]
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams elements == 2
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName has only one value
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName != null
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString == "Has a window operations menu"
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault == true
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes has only one value
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes != null
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] elements has only one value
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] elements != null
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].getClass().getName() == [ded.model.EntityShape]
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName contains no nulls and has only one value, of length 1
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName elements has only one value
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName elements != null
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName.toString == [Window]
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName.toString elements == "Window"
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams == [2]
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams elements == 2
ded.model.ShapeFlag.SF_CHECKED.displayName has only one value
ded.model.ShapeFlag.SF_CHECKED.displayName != null
ded.model.ShapeFlag.SF_CHECKED.displayName.toString == "Checked"
ded.model.ShapeFlag.SF_CHECKED.isDefault == false
ded.model.ShapeFlag.SF_CHECKED.shapes has only one value
ded.model.ShapeFlag.SF_CHECKED.shapes != null
ded.model.ShapeFlag.SF_CHECKED.shapes[] contains no nulls and has only one value, of length 2
ded.model.ShapeFlag.SF_CHECKED.shapes[] elements != null
ded.model.ShapeFlag.SF_CHECKED.shapes[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape]
ded.model.ShapeFlag.SF_CHECKED.shapes[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName contains no nulls and has only one value, of length 2
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName elements != null
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName.toString == [Check box, Radio button]
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName.toString elements one of { "Check box", "Radio button" }
ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams == [0, 0]
ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams elements == 0
ded.model.ShapeFlag.SF_TRI_STATE.displayName has only one value
ded.model.ShapeFlag.SF_TRI_STATE.displayName != null
ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString == "Tri-state"
ded.model.ShapeFlag.SF_TRI_STATE.isDefault == false
ded.model.ShapeFlag.SF_TRI_STATE.shapes has only one value
ded.model.ShapeFlag.SF_TRI_STATE.shapes != null
ded.model.ShapeFlag.SF_TRI_STATE.shapes[] contains no nulls and has only one value, of length 2
ded.model.ShapeFlag.SF_TRI_STATE.shapes[] elements != null
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape]
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName contains no nulls and has only one value, of length 2
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName elements != null
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName.toString == [Check box, Radio button]
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName.toString elements one of { "Check box", "Radio button" }
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams == [0, 0]
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams elements == 0
size(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[]) == 1
size(ded.model.ShapeFlag.$VALUES[]) == 6
size(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[]) == 1
size(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[]) == 1
size(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[]) == 1
size(ded.model.ShapeFlag.SF_CHECKED.shapes[]) == 2
size(ded.model.ShapeFlag.SF_TRI_STATE.shapes[]) == 2
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() != ded.model.ShapeFlag.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() in ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName()
===========================================================================
ded.model.ShapeFlag:::OBJECT
this.shapes.getClass().getName() == ded.model.EntityShape[].class
this.shapes[].getClass().getName() elements == ded.model.EntityShape.class
this.shapes[].getClass().getName() one of { [ded.model.EntityShape], [ded.model.EntityShape, ded.model.EntityShape] }
this.shapes[].displayName.toString elements one of { "Check box", "Radio button", "Window" }
this.shapes[].displayName.toString one of { [Check box, Radio button], [Window] }
this.shapes[].numParams elements one of { 0, 2 }
this.shapes[].numParams one of { [0, 0], [2] }
this.shapes[].numParams elements are equal
size(this.shapes[]) one of { 1, 2 }
===========================================================================
ded.model.ShapeFlag.ShapeFlag(java.lang.String, int, java.lang.String, boolean, ded.model.EntityShape[]):::ENTER
arg4.getClass().getName() == ded.model.EntityShape[].class
arg4[].displayName.toString elements one of { "Check box", "Radio button", "Window" }
arg4[].displayName.toString one of { [Check box, Radio button], [Window] }
arg4[].numParams elements one of { 0, 2 }
arg4[].numParams one of { [0, 0], [2] }
arg4[].numParams elements are equal
size(arg4[]) one of { 1, 2 }
===========================================================================
ded.model.ShapeFlag.ShapeFlag(java.lang.String, int, java.lang.String, boolean, ded.model.EntityShape[]):::EXIT
this.displayName == orig(arg2)
this.isDefault == orig(arg3)
this.shapes == orig(arg4)
this.shapes.getClass().getName() == orig(arg4.getClass().getName())
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg4[] == orig(arg4[])
arg4[].displayName == orig(arg4[].displayName)
arg4[].numParams == orig(arg4[].numParams)
arg4[].displayName.toString elements one of { "Check box", "Radio button", "Window" }
arg4[].displayName.toString one of { [Check box, Radio button], [Window] }
arg4[].numParams elements one of { 0, 2 }
arg4[].numParams one of { [0, 0], [2] }
arg4[].numParams elements are equal
===========================================================================
ded.model.ShapeFlag.allFlags():::ENTER
===========================================================================
ded.model.ShapeFlag.allFlags():::EXIT
ded.model.ShapeFlag.SF_HAS_MAXIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE)
ded.model.ShapeFlag.SF_HAS_MINIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE)
ded.model.ShapeFlag.SF_HAS_CLOSE == orig(ded.model.ShapeFlag.SF_HAS_CLOSE)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS)
ded.model.ShapeFlag.SF_CHECKED == orig(ded.model.ShapeFlag.SF_CHECKED)
ded.model.ShapeFlag.SF_TRI_STATE == orig(ded.model.ShapeFlag.SF_TRI_STATE)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams)
ded.model.ShapeFlag.$VALUES == orig(ded.model.ShapeFlag.$VALUES)
ded.model.ShapeFlag.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.$VALUES.getClass().getName())
ded.model.ShapeFlag.$VALUES[] == orig(ded.model.ShapeFlag.$VALUES[])
ded.model.ShapeFlag.$VALUES[].displayName == orig(ded.model.ShapeFlag.$VALUES[].displayName)
ded.model.ShapeFlag.$VALUES[].isDefault == orig(ded.model.ShapeFlag.$VALUES[].isDefault)
ded.model.ShapeFlag.$VALUES[].shapes == orig(ded.model.ShapeFlag.$VALUES[].shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[])
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[])
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams)
ded.model.ShapeFlag.SF_CHECKED.displayName == orig(ded.model.ShapeFlag.SF_CHECKED.displayName)
ded.model.ShapeFlag.SF_CHECKED.displayName.toString == orig(ded.model.ShapeFlag.SF_CHECKED.displayName.toString)
ded.model.ShapeFlag.SF_CHECKED.isDefault == orig(ded.model.ShapeFlag.SF_CHECKED.isDefault)
ded.model.ShapeFlag.SF_CHECKED.shapes == orig(ded.model.ShapeFlag.SF_CHECKED.shapes)
ded.model.ShapeFlag.SF_CHECKED.shapes[] == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[])
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName)
ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams)
ded.model.ShapeFlag.SF_TRI_STATE.displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName)
ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString)
ded.model.ShapeFlag.SF_TRI_STATE.isDefault == orig(ded.model.ShapeFlag.SF_TRI_STATE.isDefault)
ded.model.ShapeFlag.SF_TRI_STATE.shapes == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes)
ded.model.ShapeFlag.SF_TRI_STATE.shapes[] == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[])
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName)
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams)
return.getClass().getName() == java.util.RegularEnumSet.class
===========================================================================
ded.model.ShapeFlag.allFlagsForShape(ded.model.EntityShape):::ENTER
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
arg0 == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == "No shape"
ded.model.EntityShape.ES_NO_SHAPE.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.EntityShape.ES_RECTANGLE.displayName has only one value
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == "Rectangle"
ded.model.EntityShape.ES_RECTANGLE.numParams == 0
ded.model.EntityShape.ES_ELLIPSE.displayName has only one value
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == "Ellipse"
ded.model.EntityShape.ES_ELLIPSE.numParams == 0
ded.model.EntityShape.ES_CUBOID.displayName has only one value
ded.model.EntityShape.ES_CUBOID.displayName.toString == "Cuboid"
ded.model.EntityShape.ES_CUBOID.numParams == 2
ded.model.EntityShape.ES_CYLINDER.displayName has only one value
ded.model.EntityShape.ES_CYLINDER.displayName.toString == "Cylinder"
ded.model.EntityShape.ES_CYLINDER.numParams == 0
ded.model.EntityShape.ES_WINDOW.displayName has only one value
ded.model.EntityShape.ES_WINDOW.displayName.toString == "Window"
ded.model.EntityShape.ES_WINDOW.numParams == 2
ded.model.EntityShape.ES_SCROLLBAR.displayName has only one value
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == "Scroll bar"
ded.model.EntityShape.ES_SCROLLBAR.numParams == 2
ded.model.EntityShape.ES_PUSHBUTTON.displayName has only one value
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == "Push button"
ded.model.EntityShape.ES_PUSHBUTTON.numParams == 0
ded.model.EntityShape.ES_TEXT_EDIT.displayName has only one value
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == "Text edit"
ded.model.EntityShape.ES_TEXT_EDIT.numParams == 0
ded.model.EntityShape.ES_DROPDOWN.displayName has only one value
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == "Dropdown"
ded.model.EntityShape.ES_DROPDOWN.numParams == 0
ded.model.EntityShape.ES_COMBO_BOX.displayName has only one value
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == "Combo box"
ded.model.EntityShape.ES_COMBO_BOX.numParams == 0
ded.model.EntityShape.ES_CHECK_BOX.displayName has only one value
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == "Check box"
ded.model.EntityShape.ES_CHECK_BOX.numParams == 0
ded.model.EntityShape.ES_RADIO_BUTTON.displayName has only one value
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == "Radio button"
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == 0
arg0.displayName has only one value
arg0.displayName.toString == "Rectangle"
arg0.numParams == 0
size(ded.model.EntityShape.$VALUES[]) == 13
ded.model.EntityShape.$VALUES.getClass().getName() in ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName()
===========================================================================
ded.model.ShapeFlag.allFlagsForShape(ded.model.EntityShape):::EXIT
ded.model.ShapeFlag.SF_HAS_MAXIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE)
ded.model.ShapeFlag.SF_HAS_MINIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE)
ded.model.ShapeFlag.SF_HAS_CLOSE == orig(ded.model.ShapeFlag.SF_HAS_CLOSE)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS)
ded.model.ShapeFlag.SF_CHECKED == orig(ded.model.ShapeFlag.SF_CHECKED)
ded.model.ShapeFlag.SF_TRI_STATE == orig(ded.model.ShapeFlag.SF_TRI_STATE)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams)
ded.model.ShapeFlag.$VALUES == orig(ded.model.ShapeFlag.$VALUES)
ded.model.ShapeFlag.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.$VALUES.getClass().getName())
ded.model.ShapeFlag.$VALUES[] == orig(ded.model.ShapeFlag.$VALUES[])
ded.model.ShapeFlag.$VALUES[].displayName == orig(ded.model.ShapeFlag.$VALUES[].displayName)
ded.model.ShapeFlag.$VALUES[].isDefault == orig(ded.model.ShapeFlag.$VALUES[].isDefault)
ded.model.ShapeFlag.$VALUES[].shapes == orig(ded.model.ShapeFlag.$VALUES[].shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[])
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[])
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams)
ded.model.ShapeFlag.SF_CHECKED.displayName == orig(ded.model.ShapeFlag.SF_CHECKED.displayName)
ded.model.ShapeFlag.SF_CHECKED.displayName.toString == orig(ded.model.ShapeFlag.SF_CHECKED.displayName.toString)
ded.model.ShapeFlag.SF_CHECKED.isDefault == orig(ded.model.ShapeFlag.SF_CHECKED.isDefault)
ded.model.ShapeFlag.SF_CHECKED.shapes == orig(ded.model.ShapeFlag.SF_CHECKED.shapes)
ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_CHECKED.shapes[] == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[])
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName)
ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams)
ded.model.ShapeFlag.SF_TRI_STATE.displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName)
ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString)
ded.model.ShapeFlag.SF_TRI_STATE.isDefault == orig(ded.model.ShapeFlag.SF_TRI_STATE.isDefault)
ded.model.ShapeFlag.SF_TRI_STATE.shapes == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes)
ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_TRI_STATE.shapes[] == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[])
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName)
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(arg0)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
arg0.displayName == orig(arg0.displayName)
arg0.displayName.toString == orig(arg0.displayName.toString)
arg0.numParams == orig(arg0.numParams)
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == "No shape"
ded.model.EntityShape.ES_NO_SHAPE.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.EntityShape.ES_RECTANGLE.displayName has only one value
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == "Rectangle"
ded.model.EntityShape.ES_RECTANGLE.numParams == 0
ded.model.EntityShape.ES_ELLIPSE.displayName has only one value
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == "Ellipse"
ded.model.EntityShape.ES_ELLIPSE.numParams == 0
ded.model.EntityShape.ES_CUBOID.displayName has only one value
ded.model.EntityShape.ES_CUBOID.displayName.toString == "Cuboid"
ded.model.EntityShape.ES_CUBOID.numParams == 2
ded.model.EntityShape.ES_CYLINDER.displayName has only one value
ded.model.EntityShape.ES_CYLINDER.displayName.toString == "Cylinder"
ded.model.EntityShape.ES_CYLINDER.numParams == 0
ded.model.EntityShape.ES_WINDOW.displayName has only one value
ded.model.EntityShape.ES_WINDOW.displayName.toString == "Window"
ded.model.EntityShape.ES_WINDOW.numParams == 2
ded.model.EntityShape.ES_SCROLLBAR.displayName has only one value
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == "Scroll bar"
ded.model.EntityShape.ES_SCROLLBAR.numParams == 2
ded.model.EntityShape.ES_PUSHBUTTON.displayName has only one value
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == "Push button"
ded.model.EntityShape.ES_PUSHBUTTON.numParams == 0
ded.model.EntityShape.ES_TEXT_EDIT.displayName has only one value
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == "Text edit"
ded.model.EntityShape.ES_TEXT_EDIT.numParams == 0
ded.model.EntityShape.ES_DROPDOWN.displayName has only one value
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == "Dropdown"
ded.model.EntityShape.ES_DROPDOWN.numParams == 0
ded.model.EntityShape.ES_COMBO_BOX.displayName has only one value
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == "Combo box"
ded.model.EntityShape.ES_COMBO_BOX.numParams == 0
ded.model.EntityShape.ES_CHECK_BOX.displayName has only one value
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == "Check box"
ded.model.EntityShape.ES_CHECK_BOX.numParams == 0
ded.model.EntityShape.ES_RADIO_BUTTON.displayName has only one value
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == "Radio button"
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == 0
arg0.displayName has only one value
arg0.displayName.toString == "Rectangle"
arg0.numParams == 0
return.getClass().getName() == java.util.RegularEnumSet.class
size(ded.model.EntityShape.$VALUES[]) == 13
ded.model.EntityShape.$VALUES.getClass().getName() in ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName()
===========================================================================
ded.model.ShapeFlag.defaultFlagsForShape(ded.model.EntityShape):::ENTER
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
arg0 == ded.model.EntityShape.ES_RECTANGLE
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == "No shape"
ded.model.EntityShape.ES_NO_SHAPE.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.EntityShape.ES_RECTANGLE.displayName has only one value
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == "Rectangle"
ded.model.EntityShape.ES_RECTANGLE.numParams == 0
ded.model.EntityShape.ES_ELLIPSE.displayName has only one value
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == "Ellipse"
ded.model.EntityShape.ES_ELLIPSE.numParams == 0
ded.model.EntityShape.ES_CUBOID.displayName has only one value
ded.model.EntityShape.ES_CUBOID.displayName.toString == "Cuboid"
ded.model.EntityShape.ES_CUBOID.numParams == 2
ded.model.EntityShape.ES_CYLINDER.displayName has only one value
ded.model.EntityShape.ES_CYLINDER.displayName.toString == "Cylinder"
ded.model.EntityShape.ES_CYLINDER.numParams == 0
ded.model.EntityShape.ES_WINDOW.displayName has only one value
ded.model.EntityShape.ES_WINDOW.displayName.toString == "Window"
ded.model.EntityShape.ES_WINDOW.numParams == 2
ded.model.EntityShape.ES_SCROLLBAR.displayName has only one value
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == "Scroll bar"
ded.model.EntityShape.ES_SCROLLBAR.numParams == 2
ded.model.EntityShape.ES_PUSHBUTTON.displayName has only one value
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == "Push button"
ded.model.EntityShape.ES_PUSHBUTTON.numParams == 0
ded.model.EntityShape.ES_TEXT_EDIT.displayName has only one value
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == "Text edit"
ded.model.EntityShape.ES_TEXT_EDIT.numParams == 0
ded.model.EntityShape.ES_DROPDOWN.displayName has only one value
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == "Dropdown"
ded.model.EntityShape.ES_DROPDOWN.numParams == 0
ded.model.EntityShape.ES_COMBO_BOX.displayName has only one value
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == "Combo box"
ded.model.EntityShape.ES_COMBO_BOX.numParams == 0
ded.model.EntityShape.ES_CHECK_BOX.displayName has only one value
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == "Check box"
ded.model.EntityShape.ES_CHECK_BOX.numParams == 0
ded.model.EntityShape.ES_RADIO_BUTTON.displayName has only one value
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == "Radio button"
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == 0
arg0.displayName has only one value
arg0.displayName.toString == "Rectangle"
arg0.numParams == 0
size(ded.model.EntityShape.$VALUES[]) == 13
ded.model.EntityShape.$VALUES.getClass().getName() in ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName()
===========================================================================
ded.model.ShapeFlag.defaultFlagsForShape(ded.model.EntityShape):::EXIT
ded.model.ShapeFlag.SF_HAS_MAXIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE)
ded.model.ShapeFlag.SF_HAS_MINIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE)
ded.model.ShapeFlag.SF_HAS_CLOSE == orig(ded.model.ShapeFlag.SF_HAS_CLOSE)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS)
ded.model.ShapeFlag.SF_CHECKED == orig(ded.model.ShapeFlag.SF_CHECKED)
ded.model.ShapeFlag.SF_TRI_STATE == orig(ded.model.ShapeFlag.SF_TRI_STATE)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams)
ded.model.ShapeFlag.$VALUES == orig(ded.model.ShapeFlag.$VALUES)
ded.model.ShapeFlag.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.$VALUES.getClass().getName())
ded.model.ShapeFlag.$VALUES[] == orig(ded.model.ShapeFlag.$VALUES[])
ded.model.ShapeFlag.$VALUES[].displayName == orig(ded.model.ShapeFlag.$VALUES[].displayName)
ded.model.ShapeFlag.$VALUES[].isDefault == orig(ded.model.ShapeFlag.$VALUES[].isDefault)
ded.model.ShapeFlag.$VALUES[].shapes == orig(ded.model.ShapeFlag.$VALUES[].shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[])
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[])
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams)
ded.model.ShapeFlag.SF_CHECKED.displayName == orig(ded.model.ShapeFlag.SF_CHECKED.displayName)
ded.model.ShapeFlag.SF_CHECKED.displayName.toString == orig(ded.model.ShapeFlag.SF_CHECKED.displayName.toString)
ded.model.ShapeFlag.SF_CHECKED.isDefault == orig(ded.model.ShapeFlag.SF_CHECKED.isDefault)
ded.model.ShapeFlag.SF_CHECKED.shapes == orig(ded.model.ShapeFlag.SF_CHECKED.shapes)
ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_CHECKED.shapes[] == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[])
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName)
ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams)
ded.model.ShapeFlag.SF_TRI_STATE.displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName)
ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString)
ded.model.ShapeFlag.SF_TRI_STATE.isDefault == orig(ded.model.ShapeFlag.SF_TRI_STATE.isDefault)
ded.model.ShapeFlag.SF_TRI_STATE.shapes == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes)
ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName() == ded.model.EntityShape.$VALUES.getClass().getName()
ded.model.ShapeFlag.SF_TRI_STATE.shapes[] == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[])
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName)
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams)
ded.model.EntityShape.ES_NO_SHAPE == orig(ded.model.EntityShape.ES_NO_SHAPE)
ded.model.EntityShape.ES_RECTANGLE == orig(arg0)
ded.model.EntityShape.ES_RECTANGLE == orig(ded.model.EntityShape.ES_RECTANGLE)
ded.model.EntityShape.ES_ELLIPSE == orig(ded.model.EntityShape.ES_ELLIPSE)
ded.model.EntityShape.ES_CUBOID == orig(ded.model.EntityShape.ES_CUBOID)
ded.model.EntityShape.ES_CYLINDER == orig(ded.model.EntityShape.ES_CYLINDER)
ded.model.EntityShape.ES_WINDOW == orig(ded.model.EntityShape.ES_WINDOW)
ded.model.EntityShape.ES_SCROLLBAR == orig(ded.model.EntityShape.ES_SCROLLBAR)
ded.model.EntityShape.ES_PUSHBUTTON == orig(ded.model.EntityShape.ES_PUSHBUTTON)
ded.model.EntityShape.ES_TEXT_EDIT == orig(ded.model.EntityShape.ES_TEXT_EDIT)
ded.model.EntityShape.ES_DROPDOWN == orig(ded.model.EntityShape.ES_DROPDOWN)
ded.model.EntityShape.ES_COMBO_BOX == orig(ded.model.EntityShape.ES_COMBO_BOX)
ded.model.EntityShape.ES_CHECK_BOX == orig(ded.model.EntityShape.ES_CHECK_BOX)
ded.model.EntityShape.ES_RADIO_BUTTON == orig(ded.model.EntityShape.ES_RADIO_BUTTON)
ded.model.EntityShape.ES_NO_SHAPE.displayName == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName)
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == orig(ded.model.EntityShape.ES_NO_SHAPE.displayName.toString)
ded.model.EntityShape.ES_NO_SHAPE.numParams == orig(ded.model.EntityShape.ES_NO_SHAPE.numParams)
ded.model.EntityShape.$VALUES == orig(ded.model.EntityShape.$VALUES)
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName())
ded.model.EntityShape.$VALUES.getClass().getName() == orig(ded.model.EntityShape.$VALUES.getClass().getName())
ded.model.EntityShape.$VALUES[] == orig(ded.model.EntityShape.$VALUES[])
ded.model.EntityShape.$VALUES[].displayName == orig(ded.model.EntityShape.$VALUES[].displayName)
ded.model.EntityShape.$VALUES[].numParams == orig(ded.model.EntityShape.$VALUES[].numParams)
ded.model.EntityShape.ES_RECTANGLE.displayName == orig(ded.model.EntityShape.ES_RECTANGLE.displayName)
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == orig(ded.model.EntityShape.ES_RECTANGLE.displayName.toString)
ded.model.EntityShape.ES_RECTANGLE.numParams == orig(ded.model.EntityShape.ES_RECTANGLE.numParams)
ded.model.EntityShape.ES_ELLIPSE.displayName == orig(ded.model.EntityShape.ES_ELLIPSE.displayName)
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == orig(ded.model.EntityShape.ES_ELLIPSE.displayName.toString)
ded.model.EntityShape.ES_ELLIPSE.numParams == orig(ded.model.EntityShape.ES_ELLIPSE.numParams)
ded.model.EntityShape.ES_CUBOID.displayName == orig(ded.model.EntityShape.ES_CUBOID.displayName)
ded.model.EntityShape.ES_CUBOID.displayName.toString == orig(ded.model.EntityShape.ES_CUBOID.displayName.toString)
ded.model.EntityShape.ES_CUBOID.numParams == orig(ded.model.EntityShape.ES_CUBOID.numParams)
ded.model.EntityShape.ES_CYLINDER.displayName == orig(ded.model.EntityShape.ES_CYLINDER.displayName)
ded.model.EntityShape.ES_CYLINDER.displayName.toString == orig(ded.model.EntityShape.ES_CYLINDER.displayName.toString)
ded.model.EntityShape.ES_CYLINDER.numParams == orig(ded.model.EntityShape.ES_CYLINDER.numParams)
ded.model.EntityShape.ES_WINDOW.displayName == orig(ded.model.EntityShape.ES_WINDOW.displayName)
ded.model.EntityShape.ES_WINDOW.displayName.toString == orig(ded.model.EntityShape.ES_WINDOW.displayName.toString)
ded.model.EntityShape.ES_WINDOW.numParams == orig(ded.model.EntityShape.ES_WINDOW.numParams)
ded.model.EntityShape.ES_SCROLLBAR.displayName == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName)
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == orig(ded.model.EntityShape.ES_SCROLLBAR.displayName.toString)
ded.model.EntityShape.ES_SCROLLBAR.numParams == orig(ded.model.EntityShape.ES_SCROLLBAR.numParams)
ded.model.EntityShape.ES_PUSHBUTTON.displayName == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName)
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == orig(ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString)
ded.model.EntityShape.ES_PUSHBUTTON.numParams == orig(ded.model.EntityShape.ES_PUSHBUTTON.numParams)
ded.model.EntityShape.ES_TEXT_EDIT.displayName == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName)
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == orig(ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString)
ded.model.EntityShape.ES_TEXT_EDIT.numParams == orig(ded.model.EntityShape.ES_TEXT_EDIT.numParams)
ded.model.EntityShape.ES_DROPDOWN.displayName == orig(ded.model.EntityShape.ES_DROPDOWN.displayName)
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == orig(ded.model.EntityShape.ES_DROPDOWN.displayName.toString)
ded.model.EntityShape.ES_DROPDOWN.numParams == orig(ded.model.EntityShape.ES_DROPDOWN.numParams)
ded.model.EntityShape.ES_COMBO_BOX.displayName == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName)
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == orig(ded.model.EntityShape.ES_COMBO_BOX.displayName.toString)
ded.model.EntityShape.ES_COMBO_BOX.numParams == orig(ded.model.EntityShape.ES_COMBO_BOX.numParams)
ded.model.EntityShape.ES_CHECK_BOX.displayName == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName)
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == orig(ded.model.EntityShape.ES_CHECK_BOX.displayName.toString)
ded.model.EntityShape.ES_CHECK_BOX.numParams == orig(ded.model.EntityShape.ES_CHECK_BOX.numParams)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName)
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == orig(ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString)
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == orig(ded.model.EntityShape.ES_RADIO_BUTTON.numParams)
arg0.displayName == orig(arg0.displayName)
arg0.displayName.toString == orig(arg0.displayName.toString)
arg0.numParams == orig(arg0.numParams)
ded.model.EntityShape.ES_NO_SHAPE has only one value
ded.model.EntityShape.ES_RECTANGLE has only one value
ded.model.EntityShape.ES_ELLIPSE has only one value
ded.model.EntityShape.ES_CUBOID has only one value
ded.model.EntityShape.ES_CYLINDER has only one value
ded.model.EntityShape.ES_WINDOW has only one value
ded.model.EntityShape.ES_SCROLLBAR has only one value
ded.model.EntityShape.ES_PUSHBUTTON has only one value
ded.model.EntityShape.ES_TEXT_EDIT has only one value
ded.model.EntityShape.ES_DROPDOWN has only one value
ded.model.EntityShape.ES_COMBO_BOX has only one value
ded.model.EntityShape.ES_CHECK_BOX has only one value
ded.model.EntityShape.ES_RADIO_BUTTON has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName has only one value
ded.model.EntityShape.ES_NO_SHAPE.displayName.toString == "No shape"
ded.model.EntityShape.ES_NO_SHAPE.numParams == 0
ded.model.EntityShape.$VALUES has only one value
ded.model.EntityShape.$VALUES.getClass().getName() == ded.model.EntityShape[].class
ded.model.EntityShape.$VALUES[] contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].getClass().getName() == [ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape, ded.model.EntityShape]
ded.model.EntityShape.$VALUES[].getClass().getName() elements == ded.model.EntityShape.class
ded.model.EntityShape.$VALUES[].displayName contains no nulls and has only one value, of length 13
ded.model.EntityShape.$VALUES[].displayName.toString == [No shape, Rectangle, Ellipse, Cuboid, Cylinder, Window, Scroll bar, Push button, Text edit, Dropdown, Combo box, Check box, Radio button]
ded.model.EntityShape.$VALUES[].numParams == [0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0]
ded.model.EntityShape.$VALUES[].numParams elements one of { 0, 2 }
ded.model.EntityShape.ES_RECTANGLE.displayName has only one value
ded.model.EntityShape.ES_RECTANGLE.displayName.toString == "Rectangle"
ded.model.EntityShape.ES_RECTANGLE.numParams == 0
ded.model.EntityShape.ES_ELLIPSE.displayName has only one value
ded.model.EntityShape.ES_ELLIPSE.displayName.toString == "Ellipse"
ded.model.EntityShape.ES_ELLIPSE.numParams == 0
ded.model.EntityShape.ES_CUBOID.displayName has only one value
ded.model.EntityShape.ES_CUBOID.displayName.toString == "Cuboid"
ded.model.EntityShape.ES_CUBOID.numParams == 2
ded.model.EntityShape.ES_CYLINDER.displayName has only one value
ded.model.EntityShape.ES_CYLINDER.displayName.toString == "Cylinder"
ded.model.EntityShape.ES_CYLINDER.numParams == 0
ded.model.EntityShape.ES_WINDOW.displayName has only one value
ded.model.EntityShape.ES_WINDOW.displayName.toString == "Window"
ded.model.EntityShape.ES_WINDOW.numParams == 2
ded.model.EntityShape.ES_SCROLLBAR.displayName has only one value
ded.model.EntityShape.ES_SCROLLBAR.displayName.toString == "Scroll bar"
ded.model.EntityShape.ES_SCROLLBAR.numParams == 2
ded.model.EntityShape.ES_PUSHBUTTON.displayName has only one value
ded.model.EntityShape.ES_PUSHBUTTON.displayName.toString == "Push button"
ded.model.EntityShape.ES_PUSHBUTTON.numParams == 0
ded.model.EntityShape.ES_TEXT_EDIT.displayName has only one value
ded.model.EntityShape.ES_TEXT_EDIT.displayName.toString == "Text edit"
ded.model.EntityShape.ES_TEXT_EDIT.numParams == 0
ded.model.EntityShape.ES_DROPDOWN.displayName has only one value
ded.model.EntityShape.ES_DROPDOWN.displayName.toString == "Dropdown"
ded.model.EntityShape.ES_DROPDOWN.numParams == 0
ded.model.EntityShape.ES_COMBO_BOX.displayName has only one value
ded.model.EntityShape.ES_COMBO_BOX.displayName.toString == "Combo box"
ded.model.EntityShape.ES_COMBO_BOX.numParams == 0
ded.model.EntityShape.ES_CHECK_BOX.displayName has only one value
ded.model.EntityShape.ES_CHECK_BOX.displayName.toString == "Check box"
ded.model.EntityShape.ES_CHECK_BOX.numParams == 0
ded.model.EntityShape.ES_RADIO_BUTTON.displayName has only one value
ded.model.EntityShape.ES_RADIO_BUTTON.displayName.toString == "Radio button"
ded.model.EntityShape.ES_RADIO_BUTTON.numParams == 0
arg0.displayName has only one value
arg0.displayName.toString == "Rectangle"
arg0.numParams == 0
return.getClass().getName() == java.util.RegularEnumSet.class
size(ded.model.EntityShape.$VALUES[]) == 13
ded.model.EntityShape.$VALUES.getClass().getName() in ded.model.ShapeFlag.$VALUES[].shapes.getClass().getName()
===========================================================================
ded.model.ShapeFlag.values():::ENTER
===========================================================================
ded.model.ShapeFlag.values():::EXIT
ded.model.ShapeFlag.SF_HAS_MAXIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE)
ded.model.ShapeFlag.SF_HAS_MINIMIZE == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE)
ded.model.ShapeFlag.SF_HAS_CLOSE == orig(ded.model.ShapeFlag.SF_HAS_CLOSE)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS)
ded.model.ShapeFlag.SF_CHECKED == orig(ded.model.ShapeFlag.SF_CHECKED)
ded.model.ShapeFlag.SF_TRI_STATE == orig(ded.model.ShapeFlag.SF_TRI_STATE)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_CHECKED.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes.getClass().getName())
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes[].numParams)
ded.model.ShapeFlag.$VALUES == orig(ded.model.ShapeFlag.$VALUES)
ded.model.ShapeFlag.$VALUES.getClass().getName() == return.getClass().getName()
ded.model.ShapeFlag.$VALUES.getClass().getName() == orig(ded.model.ShapeFlag.$VALUES.getClass().getName())
ded.model.ShapeFlag.$VALUES[] == orig(ded.model.ShapeFlag.$VALUES[])
ded.model.ShapeFlag.$VALUES[].displayName == orig(ded.model.ShapeFlag.$VALUES[].displayName)
ded.model.ShapeFlag.$VALUES[].isDefault == orig(ded.model.ShapeFlag.$VALUES[].isDefault)
ded.model.ShapeFlag.$VALUES[].shapes == orig(ded.model.ShapeFlag.$VALUES[].shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.isDefault)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[])
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_MINIMIZE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.displayName.toString)
ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.isDefault)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[])
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_CLOSE.shapes[].numParams)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.displayName.toString)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.isDefault)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[] == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[])
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].displayName)
ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams == orig(ded.model.ShapeFlag.SF_HAS_WINDOW_OPS.shapes[].numParams)
ded.model.ShapeFlag.SF_CHECKED.displayName == orig(ded.model.ShapeFlag.SF_CHECKED.displayName)
ded.model.ShapeFlag.SF_CHECKED.displayName.toString == orig(ded.model.ShapeFlag.SF_CHECKED.displayName.toString)
ded.model.ShapeFlag.SF_CHECKED.isDefault == orig(ded.model.ShapeFlag.SF_CHECKED.isDefault)
ded.model.ShapeFlag.SF_CHECKED.shapes == orig(ded.model.ShapeFlag.SF_CHECKED.shapes)
ded.model.ShapeFlag.SF_CHECKED.shapes[] == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[])
ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].displayName)
ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams == orig(ded.model.ShapeFlag.SF_CHECKED.shapes[].numParams)
ded.model.ShapeFlag.SF_TRI_STATE.displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName)
ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString == orig(ded.model.ShapeFlag.SF_TRI_STATE.displayName.toString)
ded.model.ShapeFlag.SF_TRI_STATE.isDefault == orig(ded.model.ShapeFlag.SF_TRI_STATE.isDefault)
ded.model.ShapeFlag.SF_TRI_STATE.shapes == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes)
ded.model.ShapeFlag.SF_TRI_STATE.shapes[] == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[])
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].displayName)
ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams == orig(ded.model.ShapeFlag.SF_TRI_STATE.shapes[].numParams)
return has only one value
return[] contains no nulls and has only one value, of length 6
return[].displayName contains no nulls and has only one value, of length 6
return[].displayName.toString == [Has maximize button, Has a minimize button, Has a close button, Has a window operations menu, Checked, Tri-state]
return[].isDefault == [1, 1, 1, 1, 0, 0]
return[].shapes contains no nulls and has only one value, of length 6
return[].shapes.getClass().getName() == [ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[], ded.model.EntityShape[]]
return[].shapes.getClass().getName() elements == ded.model.EntityShape[].class
size(return[]) == 6
ded.model.ShapeFlag.SF_HAS_MAXIMIZE.shapes.getClass().getName() in return[].shapes.getClass().getName()
===========================================================================
ded.model.TextAlign:::OBJECT
this.displayName.toString one of { "Center", "Left", "Right" }
===========================================================================
ded.model.TextAlign.TextAlign(java.lang.String, int, java.lang.String):::ENTER
arg0.toString one of { "TA_CENTER", "TA_LEFT", "TA_RIGHT" }
arg1 one of { 0, 1, 2 }
arg2.toString one of { "Center", "Left", "Right" }
===========================================================================
ded.model.TextAlign.TextAlign(java.lang.String, int, java.lang.String):::EXIT
this.displayName == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "TA_CENTER", "TA_LEFT", "TA_RIGHT" }
arg2.toString one of { "Center", "Left", "Right" }
===========================================================================
org.json.JSONArray:::OBJECT
this.myArrayList != null
this.myArrayList[] elements != null
this.myArrayList[].getClass().getName() elements == org.json.JSONObject.class
===========================================================================
org.json.JSONArray.JSONArray():::EXIT
this.myArrayList[] == []
this.myArrayList[].getClass().getName() == []
===========================================================================
org.json.JSONArray.JSONArray(org.json.JSONTokener):::ENTER
arg0 has only one value
arg0.eof == false
arg0.previous == 91
arg0.reader has only one value
arg0.reader.getClass().getName() == java.io.StringReader.class
arg0.usePrevious == true
===========================================================================
org.json.JSONArray.JSONArray(org.json.JSONTokener):::EXIT127
===========================================================================
org.json.JSONArray.JSONArray(org.json.JSONTokener):::EXIT
arg0.eof == orig(arg0.eof)
arg0.reader == orig(arg0.reader)
arg0.reader.getClass().getName() == orig(arg0.reader.getClass().getName())
arg0.character one of { 3, 4, 7 }
arg0.eof == false
arg0.previous == 93
arg0.reader has only one value
arg0.reader.getClass().getName() == java.io.StringReader.class
arg0.usePrevious == false
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.get(int):::ENTER
arg0 one of { 0, 1, 2 }
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.get(int):::EXIT
this.myArrayList == orig(this.myArrayList)
this.myArrayList[] == orig(this.myArrayList[])
return.getClass().getName() == org.json.JSONObject.class
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.getJSONObject(int):::ENTER
arg0 one of { 0, 1, 2 }
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.getJSONObject(int):::EXIT
this.myArrayList == orig(this.myArrayList)
this.myArrayList[] == orig(this.myArrayList[])
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.length():::ENTER
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.length():::EXIT
this.myArrayList == orig(this.myArrayList)
this.myArrayList[] == orig(this.myArrayList[])
return one of { 1, 2, 3 }
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.opt(int):::ENTER
arg0 one of { 0, 1, 2 }
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.opt(int):::EXIT
this.myArrayList == orig(this.myArrayList)
this.myArrayList[] == orig(this.myArrayList[])
return.getClass().getName() == org.json.JSONObject.class
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.put(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == org.json.JSONObject.class
size(this.myArrayList[]) one of { 0, 1, 2 }
===========================================================================
org.json.JSONArray.put(java.lang.Object):::EXIT
this.myArrayList == orig(this.myArrayList)
size(this.myArrayList[])-1 == orig(size(this.myArrayList[]))
return != null
return.myArrayList != null
return.myArrayList[] elements != null
return.myArrayList[].getClass().getName() elements == org.json.JSONObject.class
size(this.myArrayList[]) one of { 1, 2, 3 }
size(return.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.write(java.io.Writer, int, int):::ENTER
arg0 != null
arg0.getClass().getName() == java.io.StringWriter.class
arg1 == 2
arg2 one of { 2, 6 }
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONArray.write(java.io.Writer, int, int):::EXIT
this.myArrayList == orig(this.myArrayList)
this.myArrayList[] == orig(this.myArrayList[])
return != null
return.getClass().getName() == java.io.StringWriter.class
size(this.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONObject$Null:::OBJECT
this has only one value
===========================================================================
org.json.JSONObject$Null.Null():::EXIT
===========================================================================
org.json.JSONObject$Null.equals(java.lang.Object):::ENTER
arg0.getClass().getName() == java.lang.String.class
===========================================================================
org.json.JSONObject$Null.equals(java.lang.Object):::EXIT
(return == false)  ==>  (orig(arg0.getClass().getName()) == java.lang.String.class)
(return == true)  <==>  (orig(arg0) == null)
===========================================================================
org.json.JSONObject$Null.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
orig(arg0) == null
===========================================================================
org.json.JSONObject$Null.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.json.JSONObject:::CLASS
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL != null
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
org.json.JSONObject:::OBJECT
this.map != null
this.map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.json.JSONObject.JSONObject():::EXIT
===========================================================================
org.json.JSONObject.JSONObject(org.json.JSONTokener):::ENTER
arg0 has only one value
arg0 != null
arg0.eof == false
arg0.previous one of { 0, 123 }
arg0.reader has only one value
arg0.reader != null
arg0.reader.getClass().getName() == java.io.StringReader.class
===========================================================================
org.json.JSONObject.JSONObject(org.json.JSONTokener):::EXIT227
===========================================================================
org.json.JSONObject.JSONObject(org.json.JSONTokener):::EXIT
arg0.eof == orig(arg0.eof)
arg0.reader == orig(arg0.reader)
arg0.reader.getClass().getName() == orig(arg0.reader.getClass().getName())
arg0.eof == false
arg0.previous == 125
arg0.reader has only one value
arg0.reader != null
arg0.reader.getClass().getName() == java.io.StringReader.class
arg0.usePrevious == false
arg0.index > orig(arg0.index)
arg0.line >= orig(arg0.line)
arg0.previous > orig(arg0.previous)
===========================================================================
org.json.JSONObject.get(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.get(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
===========================================================================
org.json.JSONObject.getBoolean(java.lang.String):::ENTER
arg0.toString one of { "drawFileName", "open" }
===========================================================================
org.json.JSONObject.getBoolean(java.lang.String):::EXIT485
===========================================================================
org.json.JSONObject.getBoolean(java.lang.String):::EXIT485;condition="return == true"
===========================================================================
org.json.JSONObject.getBoolean(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
arg0.toString one of { "drawFileName", "open" }
return == true
===========================================================================
org.json.JSONObject.getBoolean(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.json.JSONObject.getJSONArray(java.lang.String):::ENTER
this has only one value
this.map has only one value
arg0.toString one of { "entities", "inheritances", "relations" }
===========================================================================
org.json.JSONObject.getJSONArray(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
this.map has only one value
arg0.toString one of { "entities", "inheritances", "relations" }
return.myArrayList[].getClass().getName() elements == org.json.JSONObject.class
size(return.myArrayList[]) one of { 1, 2, 3 }
===========================================================================
org.json.JSONObject.getJSONObject(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.getJSONObject(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
return.map != null
return.map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.json.JSONObject.getLong(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.getLong(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return >= 0
===========================================================================
org.json.JSONObject.getString(java.lang.String):::ENTER
===========================================================================
org.json.JSONObject.getString(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
===========================================================================
org.json.JSONObject.has(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.has(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
===========================================================================
org.json.JSONObject.has(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.json.JSONObject.has(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.json.JSONObject.indent(java.io.Writer, int):::ENTER
arg0 != null
arg0.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.json.JSONObject.indent(java.io.Writer, int):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
===========================================================================
org.json.JSONObject.keySet():::ENTER
===========================================================================
org.json.JSONObject.keySet():::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return != null
return.getClass().getName() == java.util.HashMap$KeySet.class
===========================================================================
org.json.JSONObject.keys():::ENTER
===========================================================================
org.json.JSONObject.keys():::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return != null
return.getClass().getName() == java.util.HashMap$KeyIterator.class
===========================================================================
org.json.JSONObject.length():::ENTER
===========================================================================
org.json.JSONObject.length():::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
===========================================================================
org.json.JSONObject.numberToString(java.lang.Number):::ENTER
arg0 != null
arg0.getClass().getName() == java.lang.Integer.class
===========================================================================
org.json.JSONObject.numberToString(java.lang.Number):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return != null
===========================================================================
org.json.JSONObject.opt(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.opt(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
===========================================================================
org.json.JSONObject.optJSONArray(java.lang.String):::ENTER
===========================================================================
org.json.JSONObject.optJSONArray(java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return.myArrayList has only one value
return.myArrayList[] contains no nulls and has only one value, of length 2
return.myArrayList[].getClass().getName() == [org.json.JSONObject, org.json.JSONObject]
return.myArrayList[].getClass().getName() elements == org.json.JSONObject.class
size(return.myArrayList[]) == 2
===========================================================================
org.json.JSONObject.optString(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
org.json.JSONObject.optString(java.lang.String, java.lang.String):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
return != null
===========================================================================
org.json.JSONObject.put(java.lang.String, boolean):::ENTER
arg0.toString one of { "drawFileName", "open" }
arg1 == true
===========================================================================
org.json.JSONObject.put(java.lang.String, boolean):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
arg0.toString one of { "drawFileName", "open" }
return.map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.json.JSONObject.put(java.lang.String, int):::ENTER
arg0 != null
arg1 >= 0
===========================================================================
org.json.JSONObject.put(java.lang.String, int):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
return.map != null
return.map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.json.JSONObject.put(java.lang.String, java.lang.Object):::ENTER
arg0 != null
arg1 != null
===========================================================================
org.json.JSONObject.put(java.lang.String, java.lang.Object):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
return.map != null
return.map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.json.JSONObject.putOnce(java.lang.String, java.lang.Object):::ENTER
arg0 != null
arg1 != null
===========================================================================
org.json.JSONObject.putOnce(java.lang.String, java.lang.Object):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
return.map != null
return.map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.json.JSONObject.quote(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.quote(java.lang.String):::EXIT1194
===========================================================================
org.json.JSONObject.quote(java.lang.String):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
===========================================================================
org.json.JSONObject.quote(java.lang.String, java.io.Writer):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.json.JSONObject.quote(java.lang.String, java.io.Writer):::EXIT1258
===========================================================================
org.json.JSONObject.quote(java.lang.String, java.io.Writer):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
return.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.json.JSONObject.sortedKeyArray():::ENTER
===========================================================================
org.json.JSONObject.sortedKeyArray():::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return != null
return.getClass().getName() == java.lang.String[].class
return[] elements != null
===========================================================================
org.json.JSONObject.stringToValue(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.stringToValue(java.lang.String):::EXIT1283
arg0.toString == "true"
return has only one value
return.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.json.JSONObject.stringToValue(java.lang.String):::EXIT1312
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.json.JSONObject.stringToValue(java.lang.String):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.toString == orig(arg0.toString)
return != null
===========================================================================
org.json.JSONObject.testValidity(java.lang.Object):::ENTER
arg0 != null
===========================================================================
org.json.JSONObject.testValidity(java.lang.Object):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
===========================================================================
org.json.JSONObject.toString(int):::ENTER
arg0 == 2
===========================================================================
org.json.JSONObject.toString(int):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return.toString == "{\n  \"drawFileName\": true,\n  \"entities\": [\n    {\n      \"attributes\": \"attr1\\nattr2\\nattr3\",\n      \"loc\": {\n        \"x\": 5,\n        \"y\": 10\n      },\n      \"name\": \"e1\",\n      \"shape\": \"ES_ELLIPSE\",\n      \"size\": {\n        \"h\": 40,\n        \"w\": 30\n      }\n    },\n    {\n      \"attributes\": \"funny\\\"characters\\\\in'this,string!\",\n      \"loc\": {\n        \"x\": 15,\n        \"y\": 20\n      },\n      \"name\": \"e2\",\n      \"shape\": \"ES_NO_SHAPE\",\n      \"size\": {\n        \"h\": 140,\n        \"w\": 130\n      }\n    }\n  ],\n  \"inheritances\": [{\n    \"open\": true,\n    \"parentRef\": 0,\n    \"pt\": {\n      \"x\": 31,\n      \"y\": 32\n    }\n  }],\n  \"relations\": [\n    {\n      \"controlPts\": [\n        {\n          \"x\": 71,\n          \"y\": 72\n        },\n        {\n          \"x\": 73,\n          \"y\": 74\n        }\n      ],\n      \"end\": {\"entityRef\": 1},\n      \"label\": \"r1\",\n      \"routingAlg\": \"RA_DIRECT\",\n      \"start\": {\n        \"arrowStyle\": \"AS_DOUBLE_ANGLE\",\n        \"entityRef\": 0\n      }\n    },\n    {\n      \"end\": {\n        \"arrowStyle\": \"AS_NONE\",\n        \"pt\": {\n          \"x\": 83,\n          \"y\": 84\n        }\n      },\n      \"start\": {\"pt\": {\n        \"x\": 81,\n        \"y\": 82\n      }}\n    },\n    {\n      \"end\": {\n        \"arrowStyle\": \"AS_NONE\",\n        \"inheritanceRef\": 0\n      },\n      \"routingAlg\": \"RA_MANHATTAN_VERT\",\n      \"start\": {\"entityRef\": 1}\n    }\n  ],\n  \"type\": \"Diagram Editor Diagram\",\n  \"version\": 23,\n  \"windowSize\": {\n    \"h\": 2000,\n    \"w\": 1000\n  }\n}"
===========================================================================
org.json.JSONObject.write(java.io.Writer, int, int):::ENTER
arg0 != null
arg0.getClass().getName() == java.io.StringWriter.class
arg1 == 2
===========================================================================
org.json.JSONObject.write(java.io.Writer, int, int):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return != null
return.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.json.JSONObject.writeValue(java.io.Writer, java.lang.Object, int, int):::ENTER
arg0 != null
arg0.getClass().getName() == java.io.StringWriter.class
arg1 != null
arg2 == 2
===========================================================================
org.json.JSONObject.writeValue(java.io.Writer, java.lang.Object, int, int):::EXIT
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
return != null
return.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.json.JSONTokener:::OBJECT
this has only one value
this.character >= -1
this.eof == false
this.index >= 0
this.reader has only one value
this.reader != null
this.reader.getClass().getName() == java.io.StringReader.class
===========================================================================
org.json.JSONTokener.JSONTokener(java.io.Reader):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.io.StringReader.class
===========================================================================
org.json.JSONTokener.JSONTokener(java.io.Reader):::EXIT
this.character == 1
this.index == 0
this.line == 1
this.previous == 0
this.usePrevious == false
===========================================================================
org.json.JSONTokener.JSONTokener(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "{\n  \"drawFileName\": true,\n  \"entities\": [\n    {\n      \"attributes\": \"attr1\\nattr2\\nattr3\",\n      \"loc\": {\n        \"x\": 5,\n        \"y\": 10\n      },\n      \"name\": \"e1\",\n      \"shape\": \"ES_ELLIPSE\",\n      \"size\": {\n        \"h\": 40,\n        \"w\": 30\n      }\n    },\n    {\n      \"attributes\": \"funny\\\"characters\\\\in'this,string!\",\n      \"loc\": {\n        \"x\": 15,\n        \"y\": 20\n      },\n      \"name\": \"e2\",\n      \"shape\": \"ES_NO_SHAPE\",\n      \"size\": {\n        \"h\": 140,\n        \"w\": 130\n      }\n    }\n  ],\n  \"inheritances\": [{\n    \"open\": true,\n    \"parentRef\": 0,\n    \"pt\": {\n      \"x\": 31,\n      \"y\": 32\n    }\n  }],\n  \"relations\": [\n    {\n      \"controlPts\": [\n        {\n          \"x\": 71,\n          \"y\": 72\n        },\n        {\n          \"x\": 73,\n          \"y\": 74\n        }\n      ],\n      \"end\": {\"entityRef\": 1},\n      \"label\": \"r1\",\n      \"routingAlg\": \"RA_DIRECT\",\n      \"start\": {\n        \"arrowStyle\": \"AS_DOUBLE_ANGLE\",\n        \"entityRef\": 0\n      }\n    },\n    {\n      \"end\": {\n        \"arrowStyle\": \"AS_NONE\",\n        \"pt\": {\n          \"x\": 83,\n          \"y\": 84\n        }\n      },\n      \"start\": {\"pt\": {\n        \"x\": 81,\n        \"y\": 82\n      }}\n    },\n    {\n      \"end\": {\n        \"arrowStyle\": \"AS_NONE\",\n        \"inheritanceRef\": 0\n      },\n      \"routingAlg\": \"RA_MANHATTAN_VERT\",\n      \"start\": {\"entityRef\": 1}\n    }\n  ],\n  \"type\": \"Diagram Editor Diagram\",\n  \"version\": 23,\n  \"windowSize\": {\n    \"h\": 2000,\n    \"w\": 1000\n  }\n}"
===========================================================================
org.json.JSONTokener.JSONTokener(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.character == 1
this.index == 0
this.line == 1
this.previous == 0
this.usePrevious == false
arg0.toString == "{\n  \"drawFileName\": true,\n  \"entities\": [\n    {\n      \"attributes\": \"attr1\\nattr2\\nattr3\",\n      \"loc\": {\n        \"x\": 5,\n        \"y\": 10\n      },\n      \"name\": \"e1\",\n      \"shape\": \"ES_ELLIPSE\",\n      \"size\": {\n        \"h\": 40,\n        \"w\": 30\n      }\n    },\n    {\n      \"attributes\": \"funny\\\"characters\\\\in'this,string!\",\n      \"loc\": {\n        \"x\": 15,\n        \"y\": 20\n      },\n      \"name\": \"e2\",\n      \"shape\": \"ES_NO_SHAPE\",\n      \"size\": {\n        \"h\": 140,\n        \"w\": 130\n      }\n    }\n  ],\n  \"inheritances\": [{\n    \"open\": true,\n    \"parentRef\": 0,\n    \"pt\": {\n      \"x\": 31,\n      \"y\": 32\n    }\n  }],\n  \"relations\": [\n    {\n      \"controlPts\": [\n        {\n          \"x\": 71,\n          \"y\": 72\n        },\n        {\n          \"x\": 73,\n          \"y\": 74\n        }\n      ],\n      \"end\": {\"entityRef\": 1},\n      \"label\": \"r1\",\n      \"routingAlg\": \"RA_DIRECT\",\n      \"start\": {\n        \"arrowStyle\": \"AS_DOUBLE_ANGLE\",\n        \"entityRef\": 0\n      }\n    },\n    {\n      \"end\": {\n        \"arrowStyle\": \"AS_NONE\",\n        \"pt\": {\n          \"x\": 83,\n          \"y\": 84\n        }\n      },\n      \"start\": {\"pt\": {\n        \"x\": 81,\n        \"y\": 82\n      }}\n    },\n    {\n      \"end\": {\n        \"arrowStyle\": \"AS_NONE\",\n        \"inheritanceRef\": 0\n      },\n      \"routingAlg\": \"RA_MANHATTAN_VERT\",\n      \"start\": {\"entityRef\": 1}\n    }\n  ],\n  \"type\": \"Diagram Editor Diagram\",\n  \"version\": 23,\n  \"windowSize\": {\n    \"h\": 2000,\n    \"w\": 1000\n  }\n}"
===========================================================================
org.json.JSONTokener.back():::ENTER
this.character >= 0
this.usePrevious == false
===========================================================================
org.json.JSONTokener.back():::EXIT
this.eof == orig(this.eof)
this.line == orig(this.line)
this.previous == orig(this.previous)
this.reader == orig(this.reader)
this.reader.getClass().getName() == orig(this.reader.getClass().getName())
this.character != 0
this.usePrevious == true
this.character - orig(this.character) + 1 == 0
this.index - orig(this.index) + 1 == 0
===========================================================================
org.json.JSONTokener.next():::ENTER
===========================================================================
org.json.JSONTokener.next():::EXIT
this.eof == orig(this.eof)
this.reader == orig(this.reader)
this.reader.getClass().getName() == orig(this.reader.getClass().getName())
this.character >= 0
this.usePrevious == false
this.character != orig(this.character)
this.index - orig(this.index) - 1 == 0
this.line >= orig(this.line)
===========================================================================
org.json.JSONTokener.nextClean():::ENTER
this.character != 0
===========================================================================
org.json.JSONTokener.nextClean():::EXIT
this.eof == orig(this.eof)
this.reader == orig(this.reader)
this.reader.getClass().getName() == orig(this.reader.getClass().getName())
this.usePrevious == false
this.character != orig(this.character)
this.index > orig(this.index)
this.line >= orig(this.line)
===========================================================================
org.json.JSONTokener.nextString(char):::ENTER
this.previous == 34
this.usePrevious == false
arg0 == 34
===========================================================================
org.json.JSONTokener.nextString(char):::EXIT
this.eof == orig(this.eof)
this.line == orig(this.line)
this.previous == orig(this.previous)
this.reader == orig(this.reader)
this.reader.getClass().getName() == orig(this.reader.getClass().getName())
this.usePrevious == orig(this.usePrevious)
this.previous == 34
this.usePrevious == false
return != null
this.character > orig(this.character)
this.index > orig(this.index)
===========================================================================
org.json.JSONTokener.nextValue():::ENTER
this.previous one of { 34, 58, 123 }
===========================================================================
org.json.JSONTokener.nextValue():::EXIT360
this.line == orig(this.line)
this.previous == 34
this.usePrevious == false
return.getClass().getName() == java.lang.String.class
orig(this.previous) one of { 34, 58 }
this.character > orig(this.character)
this.previous <= orig(this.previous)
===========================================================================
org.json.JSONTokener.nextValue():::EXIT363
this.previous == 125
this.usePrevious == false
return.getClass().getName() == org.json.JSONObject.class
orig(this.previous) one of { 58, 123 }
this.previous > orig(this.previous)
===========================================================================
org.json.JSONTokener.nextValue():::EXIT366
this.usePrevious == orig(this.usePrevious)
this.character one of { 3, 4, 7 }
this.previous == 93
this.usePrevious == false
return.getClass().getName() == org.json.JSONArray.class
orig(this.previous) == 58
===========================================================================
org.json.JSONTokener.nextValue():::EXIT389
this.previous one of { 10, 44, 125 }
this.usePrevious == true
orig(this.previous) == 58
orig(this.usePrevious) == false
this.previous != orig(this.previous)
===========================================================================
org.json.JSONTokener.nextValue():::EXIT
this.eof == orig(this.eof)
this.reader == orig(this.reader)
this.reader.getClass().getName() == orig(this.reader.getClass().getName())
return != null
this.character != orig(this.character)
this.index > orig(this.index)
this.line >= orig(this.line)
===========================================================================
util.Util.copyArray(int[]):::ENTER
arg0 == null
===========================================================================
util.Util.copyArray(int[]):::EXIT105
===========================================================================
util.Util.copyArray(int[]):::EXIT
return == null
===========================================================================
util.Util.nullableEquals(java.lang.Object, java.lang.Object):::ENTER
arg0 == null
arg1 == null
===========================================================================
util.Util.nullableEquals(java.lang.Object, java.lang.Object):::EXIT60
===========================================================================
util.Util.nullableEquals(java.lang.Object, java.lang.Object):::EXIT60;condition="return == true"
===========================================================================
util.Util.nullableEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
util.Util.nullableEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
util.awt.AWTJSONUtil:::CLASS
util.awt.AWTJSONUtil.$assertionsDisabled == false
===========================================================================
util.awt.AWTJSONUtil.dimensionFromJSON(org.json.JSONObject):::ENTER
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
util.awt.AWTJSONUtil.dimensionFromJSON(org.json.JSONObject):::EXIT
util.awt.AWTJSONUtil.$assertionsDisabled == orig(util.awt.AWTJSONUtil.$assertionsDisabled)
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
===========================================================================
util.awt.AWTJSONUtil.dimensionToJSON(java.awt.Dimension):::ENTER
===========================================================================
util.awt.AWTJSONUtil.dimensionToJSON(java.awt.Dimension):::EXIT
util.awt.AWTJSONUtil.$assertionsDisabled == orig(util.awt.AWTJSONUtil.$assertionsDisabled)
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
return.map.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
===========================================================================
util.awt.AWTJSONUtil.pointFromJSON(org.json.JSONObject):::ENTER
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg0.map.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
===========================================================================
util.awt.AWTJSONUtil.pointFromJSON(org.json.JSONObject):::EXIT
util.awt.AWTJSONUtil.$assertionsDisabled == orig(util.awt.AWTJSONUtil.$assertionsDisabled)
arg0.map == orig(arg0.map)
arg0.map.getClass().getName() == orig(arg0.map.getClass().getName())
org.json.JSONObject.NULL == orig(org.json.JSONObject.NULL)
org.json.JSONObject.NULL.getClass().getName() == orig(org.json.JSONObject.NULL.getClass().getName())
arg0.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
arg0.map.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
===========================================================================
util.awt.AWTJSONUtil.pointToJSON(java.awt.Point):::ENTER
arg0 != null
===========================================================================
util.awt.AWTJSONUtil.pointToJSON(java.awt.Point):::EXIT
util.awt.AWTJSONUtil.$assertionsDisabled == orig(util.awt.AWTJSONUtil.$assertionsDisabled)
return != null
return.map != null
return.map.getClass().getName() == java.util.HashMap.class
org.json.JSONObject.NULL has only one value
org.json.JSONObject.NULL != null
org.json.JSONObject.NULL.getClass().getName() == org.json.JSONObject$Null.class
return.map.getClass().getName() != org.json.JSONObject.NULL.getClass().getName()
Exiting Daikon.
