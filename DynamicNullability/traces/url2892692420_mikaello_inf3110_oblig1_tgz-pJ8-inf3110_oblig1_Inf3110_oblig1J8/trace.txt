Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 5 times.  Unmatched entries are ignored!
Unterminated calls:
  inf3110_oblig1.Inf3110_oblig1.main(java.lang.String[]) : 1 invocation
  inf3110_oblig1.Inf3110_oblig1.testingCode4() : 1 invocation
  util.Program.addStmt(interfaces.Handler) : 1 invocation
  util.Robot.addStmt(interfaces.Handler) : 1 invocation
  statements.Stop.interpret() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
expressions.BooleanExp:::OBJECT
this.e1 != null
this.e1.result == null
this.e2 != null
this.e2.result != null
this.e2.result.number one of { 0, 3 }
this.booleanValue has only one value
this.booleanValue != null
expressions.Booleans.greaterThan has only one value
expressions.Booleans.greaterThan != null
expressions.Booleans.lessThan has only one value
expressions.Booleans.lessThan != null
expressions.Booleans.equal has only one value
expressions.Booleans.equal != null
expressions.Booleans.greaterThan.symbol has only one value
expressions.Booleans.greaterThan.symbol != null
expressions.Booleans.greaterThan.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES != null
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[] elements != null
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol elements != null
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
expressions.Booleans.lessThan.symbol has only one value
expressions.Booleans.lessThan.symbol != null
expressions.Booleans.lessThan.symbol.toString == "<"
expressions.Booleans.equal.symbol has only one value
expressions.Booleans.equal.symbol != null
expressions.Booleans.equal.symbol.toString == "="
this.booleanValue.symbol has only one value
this.booleanValue.symbol != null
this.booleanValue.symbol.toString == ">"
size(expressions.Booleans.$VALUES[]) == 3
===========================================================================
expressions.BooleanExp.BooleanExp(expressions.Exp, expressions.Booleans, expressions.Exp):::ENTER
arg1 == expressions.Booleans.greaterThan
arg0.result == null
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
expressions.Booleans.greaterThan.symbol has only one value
expressions.Booleans.greaterThan.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
expressions.Booleans.lessThan.symbol has only one value
expressions.Booleans.lessThan.symbol.toString == "<"
expressions.Booleans.equal.symbol has only one value
expressions.Booleans.equal.symbol.toString == "="
arg1.symbol has only one value
arg1.symbol.toString == ">"
arg2.result.number one of { 0, 3 }
size(expressions.Booleans.$VALUES[]) == 3
===========================================================================
expressions.BooleanExp.BooleanExp(expressions.Exp, expressions.Booleans, expressions.Exp):::EXIT
this.e1 == orig(arg0)
this.e2 == orig(arg2)
this.e2.result == arg2.result
this.e2.result.number == arg2.result.number
this.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == orig(arg1)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
this.booleanValue.symbol == arg1.symbol
arg0.result == orig(arg0.result)
arg1.symbol == orig(arg1.symbol)
arg1.symbol.toString == orig(arg1.symbol.toString)
arg2.result == orig(arg2.result)
arg2.result.number == orig(arg2.result.number)
this.result has only one value
arg0.result == null
arg1.symbol has only one value
arg1.symbol.toString == ">"
arg2.result.number one of { 0, 3 }
===========================================================================
expressions.BooleanExp.checkGreater(expressions.Exp, expressions.Exp):::ENTER
this.e1 == arg0
this.e2 == arg1
this.e2.result == arg1.result
this.e2.result.number == arg1.result.number
this.booleanValue == expressions.Booleans.greaterThan
arg0.result == null
===========================================================================
expressions.BooleanExp.checkGreater(expressions.Exp, expressions.Exp):::EXIT
this.e1 == orig(this.e1)
this.e1 == orig(arg0)
this.e1.result == orig(this.e1.result)
this.e2 == orig(this.e2)
this.e2 == orig(arg1)
this.e2.result == arg1.result
this.e2.result.number == arg1.result.number
this.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == orig(this.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
this.booleanValue.symbol == orig(this.booleanValue.symbol)
this.booleanValue.symbol.toString == orig(this.booleanValue.symbol.toString)
this.result == orig(this.result)
arg0.result == orig(arg0.result)
arg1.result == orig(this.e2.result)
arg1.result == orig(arg1.result)
arg1.result.number == orig(this.e2.result.number)
arg1.result.number == orig(arg1.result.number)
(return == false)  ==>  (arg1.result has only one value)
(return == false)  ==>  (arg1.result.number == 0)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.e1 has only one value)
(return == false)  ==>  (this.e2 has only one value)
(return == false)  ==>  (this.result has only one value)
(return == true)  ==>  (arg1.result.number one of { 0, 3 })
arg0.result == null
arg1.result.number one of { 0, 3 }
===========================================================================
expressions.BooleanExp.checkGreater(expressions.Exp, expressions.Exp):::EXIT;condition="return == true"
return == true
===========================================================================
expressions.BooleanExp.checkGreater(expressions.Exp, expressions.Exp):::EXIT;condition="not(return == true)"
this.e1 has only one value
this.e2 has only one value
this.result has only one value
arg1.result has only one value
arg1.result.number == 0
return == false
orig(this) has only one value
===========================================================================
expressions.BooleanExp.getBooleanResult():::ENTER
this.booleanValue == expressions.Booleans.greaterThan
===========================================================================
expressions.BooleanExp.getBooleanResult():::EXIT
this.e1 == orig(this.e1)
this.e1.result == orig(this.e1.result)
this.e2 == orig(this.e2)
this.e2.result == orig(this.e2.result)
this.e2.result.number == orig(this.e2.result.number)
this.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == orig(this.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
this.booleanValue.symbol == orig(this.booleanValue.symbol)
this.booleanValue.symbol.toString == orig(this.booleanValue.symbol.toString)
this.result == orig(this.result)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.e1 has only one value)
(return == false)  ==>  (this.e2 has only one value)
(return == false)  ==>  (this.e2.result has only one value)
(return == false)  ==>  (this.e2.result.number == 0)
(return == true)  ==>  (this.e2.result.number one of { 0, 3 })
===========================================================================
expressions.BooleanExp.getBooleanResult():::EXIT;condition="return == true"
this.result has only one value
return == true
===========================================================================
expressions.BooleanExp.getBooleanResult():::EXIT;condition="not(return == true)"
this.e1 has only one value
this.e2 has only one value
this.e2.result has only one value
this.e2.result.number == 0
this.result has only one value
return == false
orig(this) has only one value
===========================================================================
expressions.BooleanExp.interpret():::ENTER
this.booleanValue == expressions.Booleans.greaterThan
===========================================================================
expressions.BooleanExp.interpret():::EXIT
this.e1 == orig(this.e1)
this.e1.result == orig(this.e1.result)
this.e2 == orig(this.e2)
this.e2.result == orig(this.e2.result)
this.e2.result.number == orig(this.e2.result.number)
this.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == orig(this.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
this.booleanValue.symbol == orig(this.booleanValue.symbol)
this.booleanValue.symbol.toString == orig(this.booleanValue.symbol.toString)
===========================================================================
expressions.BooleanExp.toString():::ENTER
this.result has only one value
===========================================================================
expressions.BooleanExp.toString():::EXIT
this.e1 == orig(this.e1)
this.e1.result == orig(this.e1.result)
this.e2 == orig(this.e2)
this.e2.result == orig(this.e2.result)
this.e2.result.number == orig(this.e2.result.number)
this.booleanValue == orig(this.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
this.booleanValue.symbol == orig(this.booleanValue.symbol)
this.booleanValue.symbol.toString == orig(this.booleanValue.symbol.toString)
this.result == orig(this.result)
this.result has only one value
return.toString one of { "i > 3", "j > 0" }
===========================================================================
expressions.Booleans:::CLASS
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
expressions.Booleans.greaterThan.symbol has only one value
expressions.Booleans.greaterThan.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
expressions.Booleans.lessThan.symbol has only one value
expressions.Booleans.lessThan.symbol.toString == "<"
expressions.Booleans.equal.symbol has only one value
expressions.Booleans.equal.symbol.toString == "="
size(expressions.Booleans.$VALUES[]) == 3
===========================================================================
expressions.Booleans:::OBJECT
this.symbol.toString one of { "<", "=", ">" }
===========================================================================
expressions.Booleans.Booleans(java.lang.String, int, java.lang.String):::ENTER
arg0.toString one of { "equal", "greaterThan", "lessThan" }
arg1 one of { 0, 1, 2 }
arg2.toString one of { "<", "=", ">" }
===========================================================================
expressions.Booleans.Booleans(java.lang.String, int, java.lang.String):::EXIT
this.symbol == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "equal", "greaterThan", "lessThan" }
arg2.toString one of { "<", "=", ">" }
===========================================================================
expressions.Booleans.toString():::ENTER
this has only one value
this.symbol has only one value
this.symbol.toString == ">"
===========================================================================
expressions.Booleans.toString():::EXIT
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
this.symbol == orig(this.symbol)
this.symbol.toString == orig(this.symbol.toString)
this.symbol has only one value
this.symbol.toString == ">"
return has only one value
return.toString == ">"
===========================================================================
expressions.Booleans.values():::ENTER
===========================================================================
expressions.Booleans.values():::EXIT
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
expressions.Booleans.greaterThan.symbol == orig(expressions.Booleans.greaterThan.symbol)
expressions.Booleans.greaterThan.symbol.toString == orig(expressions.Booleans.greaterThan.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == return.getClass().getName()
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
expressions.Booleans.lessThan.symbol == orig(expressions.Booleans.lessThan.symbol)
expressions.Booleans.lessThan.symbol.toString == orig(expressions.Booleans.lessThan.symbol.toString)
expressions.Booleans.equal.symbol == orig(expressions.Booleans.equal.symbol)
expressions.Booleans.equal.symbol.toString == orig(expressions.Booleans.equal.symbol.toString)
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].symbol contains no nulls and has only one value, of length 3
return[].symbol.toString == [>, <, =]
return[].symbol.toString elements one of { "<", "=", ">" }
size(return[]) == 3
expressions.Booleans.greaterThan in return[]
expressions.Booleans.lessThan in return[]
expressions.Booleans.equal in return[]
===========================================================================
expressions.Exp:::OBJECT
this.result.number >= 0
===========================================================================
expressions.Exp.Exp():::EXIT
this.result == null
===========================================================================
expressions.Exp.Exp(expressions.Numbers):::ENTER
arg0 != null
===========================================================================
expressions.Exp.Exp(expressions.Numbers):::EXIT
this.result == orig(arg0)
this.result.number == arg0.number
arg0.number == orig(arg0.number)
this.result != null
===========================================================================
expressions.Exp.getNumberResult():::ENTER
this.result != null
===========================================================================
expressions.Exp.getNumberResult():::EXIT
this.result == return
this.result.number == return.number
return == orig(this.result)
return.number == orig(this.result.number)
return != null
return.number >= 0
===========================================================================
expressions.Exp.toString():::ENTER
this.result != null
===========================================================================
expressions.Exp.toString():::EXIT
this.result == orig(this.result)
this.result.number == orig(this.result.number)
this.result != null
return != null
===========================================================================
expressions.Identifier:::OBJECT
this.name != null
this.name.toString one of { "i", "j" }
this.result == null
===========================================================================
expressions.Identifier.Identifier(expressions.Identifier):::ENTER
arg0.name.toString one of { "i", "j" }
arg0.result == null
===========================================================================
expressions.Identifier.Identifier(expressions.Identifier):::EXIT
this.name == arg0.name
this.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.result == orig(arg0.result)
arg0.name.toString one of { "i", "j" }
arg0.result == null
===========================================================================
expressions.Identifier.Identifier(java.lang.String):::ENTER
arg0.toString one of { "i", "j" }
===========================================================================
expressions.Identifier.Identifier(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "i", "j" }
===========================================================================
expressions.Identifier.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == expressions.Identifier.class
===========================================================================
expressions.Identifier.equals(java.lang.Object):::EXIT50
===========================================================================
expressions.Identifier.equals(java.lang.Object):::EXIT50;condition="return == true"
===========================================================================
expressions.Identifier.equals(java.lang.Object):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.result == orig(this.result)
return == true
===========================================================================
expressions.Identifier.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
expressions.Identifier.getNumberResult():::ENTER
===========================================================================
expressions.Identifier.getNumberResult():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.result == orig(this.result)
return != null
===========================================================================
expressions.Identifier.hashCode():::ENTER
===========================================================================
expressions.Identifier.hashCode():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.result == orig(this.result)
return one of { 224, 225 }
===========================================================================
expressions.Identifier.toString():::ENTER
===========================================================================
expressions.Identifier.toString():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.result == orig(this.result)
return != null
return.toString one of { "i", "j" }
===========================================================================
expressions.Numbers:::OBJECT
===========================================================================
expressions.Numbers.Numbers(expressions.Numbers):::ENTER
arg0 != null
===========================================================================
expressions.Numbers.Numbers(expressions.Numbers):::EXIT
this.number == arg0.number
this.number == orig(arg0.number)
===========================================================================
expressions.Numbers.Numbers(int):::ENTER
===========================================================================
expressions.Numbers.Numbers(int):::EXIT
this.number == orig(arg0)
===========================================================================
expressions.Numbers.hashCode():::ENTER
this.number >= 1
===========================================================================
expressions.Numbers.hashCode():::EXIT
this.number == orig(this.number)
this.number >= 1
===========================================================================
expressions.Numbers.isPositive():::ENTER
===========================================================================
expressions.Numbers.isPositive():::EXIT
this.number == orig(this.number)
return == true
===========================================================================
expressions.Numbers.isPositive():::EXIT;condition="return == true"
===========================================================================
expressions.Numbers.toString():::ENTER
===========================================================================
expressions.Numbers.toString():::EXIT
this.number == orig(this.number)
return != null
===========================================================================
expressions.Operand:::CLASS
expressions.Operand.plus has only one value
expressions.Operand.plus != null
expressions.Operand.minus has only one value
expressions.Operand.minus != null
expressions.Operand.times has only one value
expressions.Operand.times != null
expressions.Operand.plus.symbol has only one value
expressions.Operand.plus.symbol != null
expressions.Operand.plus.symbol.toString == "+"
expressions.Operand.$VALUES has only one value
expressions.Operand.$VALUES != null
expressions.Operand.$VALUES.getClass().getName() == expressions.Operand[].class
expressions.Operand.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Operand.$VALUES[] elements != null
expressions.Operand.$VALUES[].getClass().getName() == [expressions.Operand, expressions.Operand, expressions.Operand]
expressions.Operand.$VALUES[].getClass().getName() elements == expressions.Operand.class
expressions.Operand.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Operand.$VALUES[].symbol elements != null
expressions.Operand.$VALUES[].symbol.toString == [+, -, *]
expressions.Operand.$VALUES[].symbol.toString elements one of { "*", "+", "-" }
expressions.Operand.minus.symbol has only one value
expressions.Operand.minus.symbol != null
expressions.Operand.minus.symbol.toString == "-"
expressions.Operand.times.symbol has only one value
expressions.Operand.times.symbol != null
expressions.Operand.times.symbol.toString == "*"
size(expressions.Operand.$VALUES[]) == 3
===========================================================================
expressions.Operand:::OBJECT
this.symbol != null
this.symbol.toString one of { "*", "+", "-" }
===========================================================================
expressions.Operand.Operand(java.lang.String, int, java.lang.String):::ENTER
arg0.toString one of { "minus", "plus", "times" }
arg1 one of { 0, 1, 2 }
arg2.toString one of { "*", "+", "-" }
===========================================================================
expressions.Operand.Operand(java.lang.String, int, java.lang.String):::EXIT
this.symbol == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "minus", "plus", "times" }
arg2.toString one of { "*", "+", "-" }
===========================================================================
expressions.Operand.toString():::ENTER
===========================================================================
expressions.Operand.toString():::EXIT
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.symbol == orig(this.symbol)
this.symbol.toString == orig(this.symbol.toString)
return != null
return.toString one of { "*", "+", "-" }
===========================================================================
expressions.Operand.values():::ENTER
===========================================================================
expressions.Operand.values():::EXIT
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == return.getClass().getName()
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].symbol contains no nulls and has only one value, of length 3
return[].symbol.toString == [+, -, *]
return[].symbol.toString elements one of { "*", "+", "-" }
size(return[]) == 3
expressions.Operand.plus in return[]
expressions.Operand.minus in return[]
expressions.Operand.times in return[]
===========================================================================
expressions.PlusExp:::OBJECT
this.e1 != null
this.e2 != null
this.e2.result.number one of { 1, 5, 9 }
this.operand != null
expressions.Operand.plus has only one value
expressions.Operand.plus != null
expressions.Operand.minus has only one value
expressions.Operand.minus != null
expressions.Operand.times has only one value
expressions.Operand.times != null
expressions.Operand.plus.symbol has only one value
expressions.Operand.plus.symbol != null
expressions.Operand.plus.symbol.toString == "+"
expressions.Operand.$VALUES has only one value
expressions.Operand.$VALUES != null
expressions.Operand.$VALUES.getClass().getName() == expressions.Operand[].class
expressions.Operand.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Operand.$VALUES[] elements != null
expressions.Operand.$VALUES[].getClass().getName() == [expressions.Operand, expressions.Operand, expressions.Operand]
expressions.Operand.$VALUES[].getClass().getName() elements == expressions.Operand.class
expressions.Operand.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Operand.$VALUES[].symbol elements != null
expressions.Operand.$VALUES[].symbol.toString == [+, -, *]
expressions.Operand.$VALUES[].symbol.toString elements one of { "*", "+", "-" }
expressions.Operand.minus.symbol has only one value
expressions.Operand.minus.symbol != null
expressions.Operand.minus.symbol.toString == "-"
expressions.Operand.times.symbol has only one value
expressions.Operand.times.symbol != null
expressions.Operand.times.symbol.toString == "*"
this.operand.symbol != null
this.operand.symbol.toString one of { "*", "+", "-" }
size(expressions.Operand.$VALUES[]) == 3
===========================================================================
expressions.PlusExp.PlusExp(expressions.Exp, expressions.Operand, expressions.Exp):::ENTER
expressions.Operand.plus has only one value
expressions.Operand.minus has only one value
expressions.Operand.times has only one value
expressions.Operand.plus.symbol has only one value
expressions.Operand.plus.symbol.toString == "+"
expressions.Operand.$VALUES has only one value
expressions.Operand.$VALUES.getClass().getName() == expressions.Operand[].class
expressions.Operand.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Operand.$VALUES[].getClass().getName() == [expressions.Operand, expressions.Operand, expressions.Operand]
expressions.Operand.$VALUES[].getClass().getName() elements == expressions.Operand.class
expressions.Operand.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Operand.$VALUES[].symbol.toString == [+, -, *]
expressions.Operand.$VALUES[].symbol.toString elements one of { "*", "+", "-" }
expressions.Operand.minus.symbol has only one value
expressions.Operand.minus.symbol.toString == "-"
expressions.Operand.times.symbol has only one value
expressions.Operand.times.symbol.toString == "*"
arg1.symbol.toString one of { "*", "+", "-" }
arg2.result.number one of { 1, 5, 9 }
size(expressions.Operand.$VALUES[]) == 3
===========================================================================
expressions.PlusExp.PlusExp(expressions.Exp, expressions.Operand, expressions.Exp):::EXIT
this.e1 == orig(arg0)
this.e1.result == arg0.result
this.e1.result.number == arg0.result.number
this.e2 == orig(arg2)
this.e2.result == arg2.result
this.e2.result.number == arg2.result.number
this.operand == orig(arg1)
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.operand.symbol == arg1.symbol
arg0.result == orig(arg0.result)
arg0.result.number == orig(arg0.result.number)
arg1.symbol == orig(arg1.symbol)
arg1.symbol.toString == orig(arg1.symbol.toString)
arg2.result == orig(arg2.result)
arg2.result.number == orig(arg2.result.number)
arg1.symbol.toString one of { "*", "+", "-" }
arg2.result.number one of { 1, 5, 9 }
===========================================================================
expressions.PlusExp.add(expressions.Exp, expressions.Exp):::ENTER
this.e1 == arg0
this.e1.result == arg0.result
this.e1.result.number == arg0.result.number
this.e2 == arg1
this.e2.result == arg1.result
this.e2.result.number == arg1.result.number
this.operand == expressions.Operand.plus
this.e1.result.number one of { 10, 19 }
this.e2.result.number one of { 5, 9 }
this.operand.symbol has only one value
this.operand.symbol.toString == "+"
this.result == null
===========================================================================
expressions.PlusExp.add(expressions.Exp, expressions.Exp):::EXIT
this.e1 == orig(this.e1)
this.e1 == orig(arg0)
this.e1.result == arg0.result
this.e1.result.number == arg0.result.number
this.e2 == orig(this.e2)
this.e2 == orig(arg1)
this.e2.result == arg1.result
this.e2.result.number == arg1.result.number
this.operand == expressions.Operand.plus
expressions.Operand.plus == orig(this.operand)
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.operand.symbol == orig(this.operand.symbol)
this.operand.symbol.toString == orig(this.operand.symbol.toString)
this.result == orig(this.result)
arg0.result == orig(this.e1.result)
arg0.result == orig(arg0.result)
arg0.result.number == orig(this.e1.result.number)
arg0.result.number == orig(arg0.result.number)
arg1.result == orig(this.e2.result)
arg1.result == orig(arg1.result)
arg1.result.number == orig(this.e2.result.number)
arg1.result.number == orig(arg1.result.number)
this.operand.symbol has only one value
this.operand.symbol.toString == "+"
this.result == null
arg0.result.number one of { 10, 19 }
arg1.result.number one of { 5, 9 }
return.number one of { 19, 24 }
===========================================================================
expressions.PlusExp.interpret():::ENTER
this.result.number one of { 1, 2 }
===========================================================================
expressions.PlusExp.interpret():::EXIT
this.e1 == orig(this.e1)
this.e1.result == orig(this.e1.result)
this.e1.result.number == orig(this.e1.result.number)
this.e2 == orig(this.e2)
this.e2.result == orig(this.e2.result)
this.e2.result.number == orig(this.e2.result.number)
this.operand == orig(this.operand)
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.operand.symbol == orig(this.operand.symbol)
this.operand.symbol.toString == orig(this.operand.symbol.toString)
===========================================================================
expressions.PlusExp.multiply(expressions.Exp, expressions.Exp):::ENTER
this.e1 == arg0
this.e1.result == arg0.result
this.e1.result.number == arg0.result.number
this.e2 == arg1
this.operand == expressions.Operand.times
this.e1.result.number one of { 2, 3 }
this.e2.result == null
this.operand.symbol has only one value
this.operand.symbol.toString == "*"
this.result == null
arg1.result == null
===========================================================================
expressions.PlusExp.multiply(expressions.Exp, expressions.Exp):::EXIT
this.e1 == orig(this.e1)
this.e1 == orig(arg0)
this.e1.result == arg0.result
this.e1.result.number == arg0.result.number
this.e2 == orig(this.e2)
this.e2 == orig(arg1)
this.e2.result == orig(this.e2.result)
this.operand == expressions.Operand.times
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(this.operand)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.operand.symbol == orig(this.operand.symbol)
this.operand.symbol.toString == orig(this.operand.symbol.toString)
this.result == orig(this.result)
arg0.result == orig(this.e1.result)
arg0.result == orig(arg0.result)
arg0.result.number == orig(this.e1.result.number)
arg0.result.number == orig(arg0.result.number)
arg1.result == orig(arg1.result)
this.e2.result == null
this.operand.symbol has only one value
this.operand.symbol.toString == "*"
this.result == null
arg0.result.number one of { 2, 3 }
arg1.result == null
return.number one of { 9, 10, 15 }
===========================================================================
expressions.PlusExp.subtract(expressions.Exp, expressions.Exp):::ENTER
this.e1 == arg0
this.e2 == arg1
this.e2.result == arg1.result
this.e2.result.number == arg1.result.number
this.operand == expressions.Operand.minus
this has only one value
this.e1 has only one value
this.e1.result == null
this.e2 has only one value
this.e2.result has only one value
this.e2.result.number == 1
this.operand.symbol has only one value
this.operand.symbol.toString == "-"
this.result.number one of { 1, 2 }
arg0.result == null
===========================================================================
expressions.PlusExp.subtract(expressions.Exp, expressions.Exp):::EXIT
this.e1 == orig(this.e1)
this.e1 == orig(arg0)
this.e1.result == orig(this.e1.result)
this.e2 == orig(this.e2)
this.e2 == orig(arg1)
this.e2.result == arg1.result
this.e2.result.number == arg1.result.number
this.operand == expressions.Operand.minus
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(this.operand)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.operand.symbol == orig(this.operand.symbol)
this.operand.symbol.toString == orig(this.operand.symbol.toString)
this.result == orig(this.result)
this.result.number == orig(this.result.number)
arg0.result == orig(arg0.result)
arg1.result == orig(this.e2.result)
arg1.result == orig(arg1.result)
arg1.result.number == orig(this.e2.result.number)
arg1.result.number == orig(arg1.result.number)
this.e1 has only one value
this.e1.result == null
this.e2 has only one value
this.operand.symbol has only one value
this.operand.symbol.toString == "-"
this.result.number one of { 1, 2 }
arg0.result == null
arg1.result has only one value
arg1.result.number == 1
return.number one of { 0, 1, 2 }
===========================================================================
expressions.PlusExp.toString():::ENTER
this.result != null
===========================================================================
expressions.PlusExp.toString():::EXIT76
this.e1.result.number one of { 2, 3 }
this.e2.result == null
this.operand has only one value
this.operand.symbol has only one value
this.operand.symbol.toString == "*"
this.result.number one of { 9, 10, 15 }
return.toString one of { "2*i", "3*i", "3*j" }
===========================================================================
expressions.PlusExp.toString():::EXIT78
this.e1.result.number one of { 10, 19 }
this.operand.symbol.toString one of { "+", "-" }
this.result.number one of { 2, 19, 24 }
return.toString one of { "2*i + 3*j", "2*i + 3*j + 5", "j - 1" }
===========================================================================
expressions.PlusExp.toString():::EXIT
this.e1 == orig(this.e1)
this.e1.result == orig(this.e1.result)
this.e1.result.number == orig(this.e1.result.number)
this.e2 == orig(this.e2)
this.e2.result == orig(this.e2.result)
this.e2.result.number == orig(this.e2.result.number)
this.operand == orig(this.operand)
expressions.Operand.plus == orig(expressions.Operand.plus)
expressions.Operand.minus == orig(expressions.Operand.minus)
expressions.Operand.times == orig(expressions.Operand.times)
expressions.Operand.plus.symbol == orig(expressions.Operand.plus.symbol)
expressions.Operand.plus.symbol.toString == orig(expressions.Operand.plus.symbol.toString)
expressions.Operand.$VALUES == orig(expressions.Operand.$VALUES)
expressions.Operand.$VALUES.getClass().getName() == orig(expressions.Operand.$VALUES.getClass().getName())
expressions.Operand.$VALUES[] == orig(expressions.Operand.$VALUES[])
expressions.Operand.$VALUES[].symbol == orig(expressions.Operand.$VALUES[].symbol)
expressions.Operand.minus.symbol == orig(expressions.Operand.minus.symbol)
expressions.Operand.minus.symbol.toString == orig(expressions.Operand.minus.symbol.toString)
expressions.Operand.times.symbol == orig(expressions.Operand.times.symbol)
expressions.Operand.times.symbol.toString == orig(expressions.Operand.times.symbol.toString)
this.operand.symbol == orig(this.operand.symbol)
this.operand.symbol.toString == orig(this.operand.symbol.toString)
this.result == orig(this.result)
this.result.number == orig(this.result.number)
(this.e1.result.number one of { 10, 19 })  <==>  (return.toString one of { "2*i + 3*j", "2*i + 3*j + 5", "j - 1" })
(this.e1.result.number one of { 10, 19 })  <==>  (this.operand.symbol.toString one of { "+", "-" })
(this.e1.result.number one of { 10, 19 })  <==>  (this.result.number one of { 2, 19, 24 })
(this.e1.result.number one of { 10, 19 })  ==>  (this.e2.result.number one of { 1, 5, 9 })
(this.e1.result.number one of { 2, 3 })  <==>  (return.toString one of { "2*i", "3*i", "3*j" })
(this.e1.result.number one of { 2, 3 })  <==>  (this.e2.result == null)
(this.e1.result.number one of { 2, 3 })  <==>  (this.operand.symbol.toString == "*")
(this.e1.result.number one of { 2, 3 })  <==>  (this.result.number one of { 9, 10, 15 })
(this.e1.result.number one of { 2, 3 })  ==>  (this.operand has only one value)
(this.e1.result.number one of { 2, 3 })  ==>  (this.operand.symbol has only one value)
this.result != null
return != null
===========================================================================
log.Log:::CLASS
log.Log.logName has only one value
log.Log.logName != null
log.Log.logName.toString == "prettyPrint"
log.Log.sb has only one value
log.Log.sb != null
===========================================================================
log.Log.printLog():::ENTER
===========================================================================
log.Log.printLog():::EXIT
log.Log.logName == orig(log.Log.logName)
log.Log.logName.toString == orig(log.Log.logName.toString)
log.Log.sb == orig(log.Log.sb)
===========================================================================
log.Log.writeLogLine(java.lang.String):::ENTER
arg0 != null
===========================================================================
log.Log.writeLogLine(java.lang.String):::EXIT
log.Log.logName == orig(log.Log.logName)
log.Log.logName.toString == orig(log.Log.logName.toString)
log.Log.sb == orig(log.Log.sb)
arg0.toString == orig(arg0.toString)
===========================================================================
statements.Assignment:::OBJECT
this has only one value
this.ident has only one value
this.ident.name has only one value
this.ident.name.toString == "j"
this.ident.result == null
this.e has only one value
this.e.result.number one of { 0, 1, 2 }
===========================================================================
statements.Assignment.Assignment(expressions.Identifier, expressions.Exp):::ENTER
arg0 has only one value
arg0.name has only one value
arg0.name.toString == "j"
arg0.result == null
arg1 has only one value
arg1.result has only one value
arg1.result.number == 2
===========================================================================
statements.Assignment.Assignment(expressions.Identifier, expressions.Exp):::EXIT
this.ident == orig(arg0)
this.ident.name == arg0.name
this.e == orig(arg1)
this.e.result == arg1.result
this.e.result.number == arg1.result.number
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.result == orig(arg0.result)
arg1.result == orig(arg1.result)
arg1.result.number == orig(arg1.result.number)
arg0.name has only one value
arg0.name.toString == "j"
arg0.result == null
arg1.result has only one value
arg1.result.number == 2
===========================================================================
statements.Assignment.interpret():::ENTER
this.e.result.number one of { 1, 2 }
===========================================================================
statements.Assignment.interpret():::EXIT
this.ident == orig(this.ident)
this.ident.name == orig(this.ident.name)
this.ident.name.toString == orig(this.ident.name.toString)
this.ident.result == orig(this.ident.result)
this.e == orig(this.e)
===========================================================================
statements.Assignment.toString():::ENTER
this.e.result has only one value
this.e.result.number == 2
===========================================================================
statements.Assignment.toString():::EXIT
this.ident == orig(this.ident)
this.ident.name == orig(this.ident.name)
this.ident.name.toString == orig(this.ident.name.toString)
this.ident.result == orig(this.ident.result)
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
this.e.result has only one value
this.e.result.number == 2
return has only one value
return.toString == "j = j - 1"
===========================================================================
statements.Backward:::CLASS
statements.Move.penPositions has only one value
===========================================================================
statements.Backward:::OBJECT
this.e.result.number one of { 14, 24 }
this.curPos.dir has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "-x"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
this.curPos.xCord has only one value
this.curPos.xCord.number == 4
this.curPos.yCord has only one value
this.curPos.yCord.number == 21
this.lastMovedDistance.number == 24
size(util.Direction.$VALUES[]) == 5
===========================================================================
statements.Backward.Backward(expressions.Exp):::ENTER
arg0.result.number one of { 14, 24 }
===========================================================================
statements.Backward.Backward(expressions.Exp):::EXIT
this.e == orig(arg0)
this.e.result == arg0.result
this.e.result.number == arg0.result.number
arg0.result == orig(arg0.result)
arg0.result.number == orig(arg0.result.number)
this.curPos == null
this.lastMovedDistance == null
arg0.result.number one of { 14, 24 }
===========================================================================
statements.Backward.interpret():::ENTER
this has only one value
this.e has only one value
this.e.result has only one value
this.e.result.number == 24
this.curPos == null
this.lastMovedDistance == null
===========================================================================
statements.Backward.interpret():::EXIT
this.e == orig(this.e)
this.e.result == this.lastMovedDistance
this.e.result.number == this.lastMovedDistance.number
this.curPos.dir == util.Direction.minusX
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.e.result)
this.lastMovedDistance.number == orig(this.e.result.number)
this.e has only one value
this.curPos has only one value
this.lastMovedDistance has only one value
===========================================================================
statements.Backward.toString():::ENTER
===========================================================================
statements.Backward.toString():::EXIT
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
return.toString one of { "backward(14)", "backward(2*i + 3*j + 5)" }
===========================================================================
statements.Forward:::CLASS
statements.Move.penPositions has only one value
statements.Move.penPositions != null
===========================================================================
statements.Forward:::OBJECT
this.e != null
this.e.result != null
this.e.result.number one of { 14, 15 }
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
this.curPos.dir.symbol.toString one of { "-x", "y" }
this.curPos.dir.representation.toString one of { "<", "^" }
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
this.curPos.xCord.number one of { 23, 26 }
this.curPos.yCord.number one of { 6, 19 }
this.lastMovedDistance.number one of { 14, 15 }
size(util.Direction.$VALUES[]) == 5
===========================================================================
statements.Forward.Forward(expressions.Exp):::ENTER
arg0.result.number one of { 14, 15 }
===========================================================================
statements.Forward.Forward(expressions.Exp):::EXIT
this.e == orig(arg0)
this.e.result == arg0.result
this.e.result.number == arg0.result.number
arg0.result == orig(arg0.result)
arg0.result.number == orig(arg0.result.number)
this.curPos == null
this.lastMovedDistance == null
arg0.result.number one of { 14, 15 }
===========================================================================
statements.Forward.interpret():::ENTER
this.curPos == null
this.lastMovedDistance == null
===========================================================================
statements.Forward.interpret():::EXIT
this.e == orig(this.e)
this.e.result == this.lastMovedDistance
this.e.result.number == this.lastMovedDistance.number
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.e.result)
this.lastMovedDistance.number == orig(this.e.result.number)
===========================================================================
statements.Forward.toString():::ENTER
===========================================================================
statements.Forward.toString():::EXIT
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
return.toString one of { "forward(14)", "forward(3*i)" }
===========================================================================
statements.IfThenElse:::OBJECT
this has only one value
this.boolE has only one value
this.boolE.e1 has only one value
this.boolE.e1.result == null
this.boolE.e2 has only one value
this.boolE.e2.result has only one value
this.boolE.booleanValue has only one value
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
this.boolE.booleanValue.symbol has only one value
this.boolE.booleanValue.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
this.boolE.result has only one value
this.ifStmtList has only one value
this.ifStmtList.getClass().getName() == statements.Stmt[].class
this.ifStmtList[] contains no nulls and has only one value, of length 1
this.ifStmtList[] elements has only one value
this.ifStmtList[].getClass().getName() == [statements.Forward]
this.ifStmtList[].getClass().getName() elements == statements.Forward.class
this.elseStmtList.getClass().getName() == statements.Stmt[].class
this.elseStmtList[] contains no nulls and has only one value, of length 1
this.elseStmtList[] elements has only one value
this.elseStmtList[].getClass().getName() == [statements.Backward]
this.elseStmtList[].getClass().getName() elements == statements.Backward.class
size(expressions.Booleans.$VALUES[]) == 3
size(this.ifStmtList[]) == 1
size(this.elseStmtList[]) == 1
===========================================================================
statements.IfThenElse.IfThenElse(expressions.BooleanExp, statements.Stmt[]):::ENTER
arg0.booleanValue == expressions.Booleans.greaterThan
arg0 has only one value
arg0.e1 has only one value
arg0.e1.result == null
arg0.e2 has only one value
arg0.e2.result has only one value
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
arg0.booleanValue.symbol has only one value
arg0.booleanValue.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
arg0.result has only one value
arg1 has only one value
arg1.getClass().getName() == statements.Stmt[].class
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
size(expressions.Booleans.$VALUES[]) == 3
size(arg1[]) == 1
===========================================================================
statements.IfThenElse.IfThenElse(expressions.BooleanExp, statements.Stmt[]):::EXIT
this.boolE == orig(arg0)
this.boolE.e1 == arg0.e1
this.boolE.e2 == arg0.e2
this.boolE.e2.result == arg0.e2.result
this.boolE.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == arg0.booleanValue
expressions.Booleans.greaterThan == orig(arg0.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == arg0.booleanValue.symbol
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.boolE.result == arg0.result
this.ifStmtList == orig(arg1)
this.ifStmtList.getClass().getName() == orig(arg1.getClass().getName())
arg0.e1 == orig(arg0.e1)
arg0.e1.result == orig(arg0.e1.result)
arg0.e2 == orig(arg0.e2)
arg0.e2.result == orig(arg0.e2.result)
arg0.booleanValue.symbol == orig(arg0.booleanValue.symbol)
arg0.booleanValue.symbol.toString == orig(arg0.booleanValue.symbol.toString)
arg0.result == orig(arg0.result)
arg1[] == orig(arg1[])
this.elseStmtList == null
arg0.e1 has only one value
arg0.e1.result == null
arg0.e2 has only one value
arg0.e2.result has only one value
arg0.booleanValue.symbol has only one value
arg0.booleanValue.symbol.toString == ">"
arg0.result has only one value
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
===========================================================================
statements.IfThenElse.IfThenElse(expressions.BooleanExp, statements.Stmt[], statements.Stmt[]):::ENTER
arg0.booleanValue == expressions.Booleans.greaterThan
arg1.getClass().getName() == arg2.getClass().getName()
arg0 has only one value
arg0.e1 has only one value
arg0.e1.result == null
arg0.e2 has only one value
arg0.e2.result has only one value
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
arg0.booleanValue.symbol has only one value
arg0.booleanValue.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
arg0.result has only one value
arg1 has only one value
arg1.getClass().getName() == statements.Stmt[].class
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
size(expressions.Booleans.$VALUES[]) == 3
size(arg1[]) == 1
size(arg2[]) == 1
===========================================================================
statements.IfThenElse.IfThenElse(expressions.BooleanExp, statements.Stmt[], statements.Stmt[]):::EXIT
this.boolE == orig(arg0)
this.boolE.e1 == arg0.e1
this.boolE.e2 == arg0.e2
this.boolE.e2.result == arg0.e2.result
this.boolE.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == arg0.booleanValue
expressions.Booleans.greaterThan == orig(arg0.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == arg0.booleanValue.symbol
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.boolE.result == arg0.result
this.ifStmtList == orig(arg1)
this.ifStmtList.getClass().getName() == this.elseStmtList.getClass().getName()
this.ifStmtList.getClass().getName() == orig(arg1.getClass().getName())
this.ifStmtList.getClass().getName() == orig(arg2.getClass().getName())
this.elseStmtList == orig(arg2)
arg0.e1 == orig(arg0.e1)
arg0.e1.result == orig(arg0.e1.result)
arg0.e2 == orig(arg0.e2)
arg0.e2.result == orig(arg0.e2.result)
arg0.booleanValue.symbol == orig(arg0.booleanValue.symbol)
arg0.booleanValue.symbol.toString == orig(arg0.booleanValue.symbol.toString)
arg0.result == orig(arg0.result)
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
this.elseStmtList has only one value
arg0.e1 has only one value
arg0.e1.result == null
arg0.e2 has only one value
arg0.e2.result has only one value
arg0.booleanValue.symbol has only one value
arg0.booleanValue.symbol.toString == ">"
arg0.result has only one value
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
===========================================================================
statements.IfThenElse.interpret():::ENTER
this.boolE.booleanValue == expressions.Booleans.greaterThan
this.ifStmtList.getClass().getName() == this.elseStmtList.getClass().getName()
this.elseStmtList has only one value
===========================================================================
statements.IfThenElse.interpret():::EXIT
this.boolE == orig(this.boolE)
this.boolE.e1 == orig(this.boolE.e1)
this.boolE.e1.result == orig(this.boolE.e1.result)
this.boolE.e2 == orig(this.boolE.e2)
this.boolE.e2.result == orig(this.boolE.e2.result)
this.boolE.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == orig(this.boolE.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == orig(this.boolE.booleanValue.symbol)
this.boolE.booleanValue.symbol.toString == orig(this.boolE.booleanValue.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.boolE.result == orig(this.boolE.result)
this.ifStmtList == orig(this.ifStmtList)
this.ifStmtList.getClass().getName() == this.elseStmtList.getClass().getName()
this.ifStmtList.getClass().getName() == orig(this.ifStmtList.getClass().getName())
this.ifStmtList.getClass().getName() == orig(this.elseStmtList.getClass().getName())
this.ifStmtList[] == orig(this.ifStmtList[])
this.elseStmtList == orig(this.elseStmtList)
this.elseStmtList[] == orig(this.elseStmtList[])
this.elseStmtList has only one value
===========================================================================
statements.IfThenElse.toString():::ENTER
this.elseStmtList has only one value
===========================================================================
statements.IfThenElse.toString():::EXIT
this.boolE == orig(this.boolE)
this.boolE.e1 == orig(this.boolE.e1)
this.boolE.e1.result == orig(this.boolE.e1.result)
this.boolE.e2 == orig(this.boolE.e2)
this.boolE.e2.result == orig(this.boolE.e2.result)
this.boolE.booleanValue == orig(this.boolE.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == orig(this.boolE.booleanValue.symbol)
this.boolE.booleanValue.symbol.toString == orig(this.boolE.booleanValue.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.boolE.result == orig(this.boolE.result)
this.ifStmtList == orig(this.ifStmtList)
this.ifStmtList.getClass().getName() == orig(this.ifStmtList.getClass().getName())
this.ifStmtList[] == orig(this.ifStmtList[])
this.elseStmtList == orig(this.elseStmtList)
this.elseStmtList.getClass().getName() == orig(this.elseStmtList.getClass().getName())
this.elseStmtList[] == orig(this.elseStmtList[])
this.elseStmtList has only one value
return has only one value
return.toString == "if (i > 3) {\n\tforward(14)\n} else {\n\tbackward(14)\n}"
===========================================================================
statements.Left:::CLASS
statements.Move.penPositions has only one value
===========================================================================
statements.Left:::OBJECT
this has only one value
this.e has only one value
this.e.result has only one value
this.e.result.number == 4
this.curPos.dir has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "y"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == "^"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
this.curPos.xCord has only one value
this.curPos.xCord.number == 8
this.curPos.yCord has only one value
this.curPos.yCord.number == 21
this.lastMovedDistance.number == 4
size(util.Direction.$VALUES[]) == 5
===========================================================================
statements.Left.Left(expressions.Exp):::ENTER
arg0 has only one value
arg0.result has only one value
arg0.result.number == 4
===========================================================================
statements.Left.Left(expressions.Exp):::EXIT
this.e == orig(arg0)
this.e.result == arg0.result
this.e.result.number == arg0.result.number
arg0.result == orig(arg0.result)
arg0.result.number == orig(arg0.result.number)
this.curPos == null
this.lastMovedDistance == null
arg0.result has only one value
arg0.result.number == 4
===========================================================================
statements.Left.interpret():::ENTER
this.curPos == null
this.lastMovedDistance == null
===========================================================================
statements.Left.interpret():::EXIT
this.e == orig(this.e)
this.e.result == this.lastMovedDistance
this.e.result.number == this.lastMovedDistance.number
this.curPos.dir == util.Direction.y
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.e.result)
this.lastMovedDistance.number == orig(this.e.result.number)
this.curPos has only one value
this.lastMovedDistance has only one value
===========================================================================
statements.Left.toString():::ENTER
===========================================================================
statements.Left.toString():::EXIT
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
return.toString == "left(4)"
===========================================================================
statements.Move:::CLASS
statements.Move.penPositions has only one value
statements.Move.penPositions != null
===========================================================================
statements.Move:::OBJECT
this.curPos.dir != null
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
this.curPos.dir.symbol != null
this.curPos.dir.representation != null
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
this.curPos.xCord != null
this.curPos.yCord != null
this.lastMovedDistance.number >= 1
size(util.Direction.$VALUES[]) == 5
this.getClass().getName() != util.Direction.$VALUES.getClass().getName()
this.curPos.xCord.number != this.curPos.yCord.number
this.curPos.xCord.number != this.lastMovedDistance.number
this.curPos.yCord.number != this.lastMovedDistance.number
===========================================================================
statements.Move.Move():::EXIT
this.curPos == null
this.lastMovedDistance == null
===========================================================================
statements.Move.clearPenPositions():::ENTER
===========================================================================
statements.Move.clearPenPositions():::EXIT
statements.Move.penPositions == orig(statements.Move.penPositions)
===========================================================================
statements.Move.fillPositions(util.Position):::ENTER
this.curPos.dir.symbol.toString one of { "-x", "y" }
this.curPos.dir.representation.toString one of { "<", "^" }
this.curPos.xCord.number == 8
this.curPos.yCord.number one of { 6, 21 }
this.lastMovedDistance.number one of { 4, 15 }
arg0.dir.symbol.toString one of { "-x", "y" }
arg0.dir.representation.toString one of { "<", "^" }
arg0.xCord.number one of { 4, 8 }
arg0.yCord.number == 21
===========================================================================
statements.Move.fillPositions(util.Position):::EXIT
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
arg0.dir == orig(arg0.dir)
arg0.dir.symbol == orig(arg0.dir.symbol)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation == orig(arg0.dir.representation)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.xCord.number == orig(arg0.xCord.number)
arg0.yCord == orig(arg0.yCord)
arg0.yCord.number == orig(arg0.yCord.number)
this.curPos.dir.symbol.toString one of { "-x", "y" }
this.curPos.dir.representation.toString one of { "<", "^" }
this.curPos.xCord.number == 8
this.curPos.yCord.number one of { 6, 21 }
this.lastMovedDistance.number one of { 4, 15 }
arg0.dir.symbol.toString one of { "-x", "y" }
arg0.dir.representation.toString one of { "<", "^" }
arg0.xCord.number one of { 4, 8 }
arg0.yCord.number == 21
===========================================================================
statements.Move.updateGrid(util.Position):::ENTER
this.curPos.xCord.number != arg0.yCord.number
this.curPos.yCord.number != arg0.xCord.number
this.lastMovedDistance.number != arg0.yCord.number
arg0.xCord.number != arg0.yCord.number
===========================================================================
statements.Move.updateGrid(util.Position):::EXIT
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
arg0.dir == orig(arg0.dir)
arg0.dir.symbol == orig(arg0.dir.symbol)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation == orig(arg0.dir.representation)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.xCord.number == orig(arg0.xCord.number)
arg0.yCord == orig(arg0.yCord)
arg0.yCord.number == orig(arg0.yCord.number)
util.Direction.$VALUES.getClass().getName() != orig(this.getClass().getName())
this.curPos.xCord.number != arg0.yCord.number
this.curPos.yCord.number != arg0.xCord.number
this.lastMovedDistance.number != arg0.yCord.number
arg0.xCord.number != arg0.yCord.number
===========================================================================
statements.Move.updateRobot(util.Position):::ENTER
this.curPos.xCord.number != arg0.yCord.number
this.curPos.yCord.number != arg0.xCord.number
this.lastMovedDistance.number != arg0.yCord.number
arg0.xCord.number != arg0.yCord.number
===========================================================================
statements.Move.updateRobot(util.Position):::EXIT
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
arg0.dir == orig(arg0.dir)
arg0.dir.symbol == orig(arg0.dir.symbol)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation == orig(arg0.dir.representation)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.xCord.number == orig(arg0.xCord.number)
arg0.yCord == orig(arg0.yCord)
arg0.yCord.number == orig(arg0.yCord.number)
util.Direction.$VALUES.getClass().getName() != orig(this.getClass().getName())
this.curPos.xCord.number != arg0.yCord.number
this.curPos.yCord.number != arg0.xCord.number
this.lastMovedDistance.number != arg0.yCord.number
arg0.xCord.number != arg0.yCord.number
===========================================================================
statements.Pen:::OBJECT
===========================================================================
statements.Pen.Pen():::EXIT
===========================================================================
statements.PenDown:::OBJECT
this has only one value
===========================================================================
statements.PenDown.PenDown():::EXIT
===========================================================================
statements.PenDown.interpret():::ENTER
===========================================================================
statements.PenDown.interpret():::EXIT
===========================================================================
statements.PenDown.toString():::ENTER
===========================================================================
statements.PenDown.toString():::EXIT
return has only one value
return.toString == "down"
===========================================================================
statements.PenUp:::OBJECT
this has only one value
===========================================================================
statements.PenUp.PenUp():::EXIT
===========================================================================
statements.PenUp.interpret():::ENTER
===========================================================================
statements.PenUp.interpret():::EXIT
===========================================================================
statements.PenUp.toString():::ENTER
===========================================================================
statements.PenUp.toString():::EXIT
return has only one value
return.toString == "up"
===========================================================================
statements.Right:::CLASS
statements.Move.penPositions has only one value
statements.Move.penPositions != null
===========================================================================
statements.Right:::OBJECT
this.e != null
this.e.result.number == 15
this.curPos.dir != null
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
this.curPos.dir.symbol != null
this.curPos.dir.symbol.toString one of { "-x", "-y", "x" }
this.curPos.dir.representation != null
this.curPos.dir.representation.toString one of { "<", ">", "v" }
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
this.curPos.xCord != null
this.curPos.xCord.number one of { 8, 26, 28 }
this.curPos.yCord != null
this.curPos.yCord.number one of { 6, 18, 21 }
this.lastMovedDistance.number >= 1
size(util.Direction.$VALUES[]) == 5
===========================================================================
statements.Right.Right(expressions.Exp):::ENTER
arg0.result.number == 15
===========================================================================
statements.Right.Right(expressions.Exp):::EXIT
this.e == orig(arg0)
this.e.result == arg0.result
this.e.result.number == arg0.result.number
arg0.result == orig(arg0.result)
arg0.result.number == orig(arg0.result.number)
this.curPos == null
this.lastMovedDistance == null
arg0.result.number == 15
===========================================================================
statements.Right.interpret():::ENTER
this.curPos.dir.symbol.toString one of { "-y", "x" }
this.curPos.dir.representation.toString one of { ">", "v" }
this.curPos.xCord.number == 28
this.curPos.yCord.number one of { 18, 21 }
this.lastMovedDistance.number one of { 2, 3 }
===========================================================================
statements.Right.interpret():::EXIT
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == this.lastMovedDistance.number
this.e.result.number == orig(this.e.result.number)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
statements.Move.penPositions == orig(statements.Move.penPositions)
===========================================================================
statements.Right.toString():::ENTER
===========================================================================
statements.Right.toString():::EXIT
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
statements.Move.penPositions == orig(statements.Move.penPositions)
this.lastMovedDistance == orig(this.lastMovedDistance)
this.lastMovedDistance.number == orig(this.lastMovedDistance.number)
return.toString one of { "right(15)", "right(j)" }
===========================================================================
statements.Size:::OBJECT
this.x_bound_global != null
this.x_bound_global.number one of { 0, 64 }
this.y_bound_global != null
this.y_bound_global.number one of { 0, 64 }
===========================================================================
statements.Size.Size(expressions.Numbers, expressions.Numbers):::ENTER
arg0.number == arg1.number
arg0.number one of { 0, 64 }
===========================================================================
statements.Size.Size(expressions.Numbers, expressions.Numbers):::EXIT
this.x_bound_global == orig(arg0)
this.x_bound_global.number == arg0.number
this.y_bound_global == orig(arg1)
this.y_bound_global.number == arg0.number
arg0.number == arg1.number
arg0.number == orig(arg0.number)
arg0.number == orig(arg1.number)
arg0.number one of { 0, 64 }
===========================================================================
statements.Size.getXBound():::ENTER
this.x_bound_global.number == this.y_bound_global.number
this has only one value
this.x_bound_global has only one value
this.x_bound_global.number == 64
this.y_bound_global has only one value
===========================================================================
statements.Size.getXBound():::EXIT
this.x_bound_global == orig(this.x_bound_global)
this.x_bound_global.number == return
this.y_bound_global == orig(this.y_bound_global)
this.y_bound_global.number == return
return == orig(this.x_bound_global.number)
return == orig(this.y_bound_global.number)
this.x_bound_global has only one value
this.y_bound_global has only one value
return == 64
===========================================================================
statements.Size.getYBound():::ENTER
this.x_bound_global.number == this.y_bound_global.number
this has only one value
this.x_bound_global has only one value
this.x_bound_global.number == 64
this.y_bound_global has only one value
===========================================================================
statements.Size.getYBound():::EXIT
this.x_bound_global == orig(this.x_bound_global)
this.x_bound_global.number == return
this.y_bound_global == orig(this.y_bound_global)
this.y_bound_global.number == return
return == orig(this.x_bound_global.number)
return == orig(this.y_bound_global.number)
this.x_bound_global has only one value
this.y_bound_global has only one value
return == 64
===========================================================================
statements.Size.isBiggerThanOrEqual(expressions.Numbers, expressions.Numbers):::ENTER
this.x_bound_global.number == this.y_bound_global.number
this has only one value
this.x_bound_global has only one value
this.x_bound_global.number == 64
this.y_bound_global has only one value
arg0 != null
arg1 != null
this.x_bound_global.number > arg0.number
this.x_bound_global.number > arg1.number
arg0.number != arg1.number
===========================================================================
statements.Size.isBiggerThanOrEqual(expressions.Numbers, expressions.Numbers):::EXIT
this.x_bound_global == orig(this.x_bound_global)
this.x_bound_global.number == this.y_bound_global.number
this.x_bound_global.number == orig(this.x_bound_global.number)
this.x_bound_global.number == orig(this.y_bound_global.number)
this.y_bound_global == orig(this.y_bound_global)
arg0.number == orig(arg0.number)
arg1.number == orig(arg1.number)
this.x_bound_global has only one value
this.x_bound_global.number == 64
this.y_bound_global has only one value
return == true
this.x_bound_global.number > arg0.number
this.x_bound_global.number > arg1.number
arg0.number != arg1.number
===========================================================================
statements.Size.isBiggerThanOrEqual(expressions.Numbers, expressions.Numbers):::EXIT;condition="return == true"
===========================================================================
statements.Size.toString():::ENTER
this has only one value
this.x_bound_global has only one value
this.x_bound_global.number == 64
this.y_bound_global has only one value
this.y_bound_global.number == 64
===========================================================================
statements.Size.toString():::EXIT
this.x_bound_global == orig(this.x_bound_global)
this.x_bound_global.number == orig(this.x_bound_global.number)
this.y_bound_global == orig(this.y_bound_global)
this.y_bound_global.number == orig(this.y_bound_global.number)
this.x_bound_global has only one value
this.x_bound_global.number == 64
this.y_bound_global has only one value
this.y_bound_global.number == 64
return has only one value
return.toString == "size(64 * 64)"
===========================================================================
statements.Start:::OBJECT
this has only one value
this.x has only one value
this.x.result has only one value
this.x.result.number == 23
this.y has only one value
this.y.result has only one value
this.y.result.number == 6
this.dir has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation has only one value
util.Direction.standby.representation.toString == "."
this.dir.symbol has only one value
this.dir.symbol.toString == "-x"
this.dir.representation has only one value
this.dir.representation.toString == "<"
size(util.Direction.$VALUES[]) == 5
===========================================================================
statements.Start.Start(expressions.Exp, expressions.Exp, util.Direction):::ENTER
arg2 == util.Direction.minusX
util.Direction.standby.symbol == util.Direction.standby.representation
arg0 has only one value
arg0.result has only one value
arg0.result.number == 23
arg1 has only one value
arg1.result has only one value
arg1.result.number == 6
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation.toString == "."
arg2.symbol has only one value
arg2.symbol.toString == "-x"
arg2.representation has only one value
arg2.representation.toString == "<"
size(util.Direction.$VALUES[]) == 5
===========================================================================
statements.Start.Start(expressions.Exp, expressions.Exp, util.Direction):::EXIT
this.x == orig(arg0)
this.x.result == arg0.result
this.x.result.number == arg0.result.number
this.y == orig(arg1)
this.y.result == arg1.result
this.y.result.number == arg1.result.number
this.dir == util.Direction.minusX
util.Direction.minusX == orig(arg2)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == arg2.symbol
this.dir.representation == arg2.representation
arg0.result == orig(arg0.result)
arg0.result.number == orig(arg0.result.number)
arg1.result == orig(arg1.result)
arg1.result.number == orig(arg1.result.number)
arg2.symbol == orig(arg2.symbol)
arg2.symbol.toString == orig(arg2.symbol.toString)
arg2.representation == orig(arg2.representation)
arg2.representation.toString == orig(arg2.representation.toString)
arg0.result has only one value
arg0.result.number == 23
arg1.result has only one value
arg1.result.number == 6
arg2.symbol has only one value
arg2.symbol.toString == "-x"
arg2.representation has only one value
arg2.representation.toString == "<"
===========================================================================
statements.Start.interpret():::ENTER
this.dir == util.Direction.minusX
util.Direction.standby.symbol == util.Direction.standby.representation
===========================================================================
statements.Start.interpret():::EXIT
this.x == orig(this.x)
this.x.result == orig(this.x.result)
this.x.result.number == orig(this.x.result.number)
this.y == orig(this.y)
this.y.result == orig(this.y.result)
this.y.result.number == orig(this.y.result.number)
this.dir == util.Direction.minusX
util.Direction.minusX == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
===========================================================================
statements.Start.toString():::ENTER
===========================================================================
statements.Start.toString():::EXIT
this.x == orig(this.x)
this.x.result == orig(this.x.result)
this.x.result.number == orig(this.x.result.number)
this.y == orig(this.y)
this.y.result == orig(this.y.result)
this.y.result.number == orig(this.y.result.number)
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation == orig(util.Direction.standby.representation)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
return has only one value
return.toString == "start(23, 6, -x)"
===========================================================================
statements.Stmt:::OBJECT
===========================================================================
statements.Stmt.Stmt():::EXIT
===========================================================================
statements.Stop:::OBJECT
this has only one value
===========================================================================
statements.Stop.Stop():::EXIT
===========================================================================
statements.Stop.toString():::ENTER
===========================================================================
statements.Stop.toString():::EXIT
return has only one value
return.toString == "stop"
===========================================================================
statements.VarDecl:::OBJECT
this.ident != null
this.ident.name != null
this.ident.name.toString one of { "i", "j" }
this.ident.result == null
this.e != null
this.e.result != null
this.e.result.number >= 0
===========================================================================
statements.VarDecl.VarDecl(expressions.Identifier, expressions.Exp):::ENTER
arg0.name.toString one of { "i", "j" }
arg0.result == null
arg1.result.number one of { 3, 5 }
===========================================================================
statements.VarDecl.VarDecl(expressions.Identifier, expressions.Exp):::EXIT
this.ident == orig(arg0)
this.ident.name == arg0.name
this.e == orig(arg1)
this.e.result == arg1.result
this.e.result.number == arg1.result.number
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.result == orig(arg0.result)
arg1.result == orig(arg1.result)
arg1.result.number == orig(arg1.result.number)
arg0.name.toString one of { "i", "j" }
arg0.result == null
arg1.result.number one of { 3, 5 }
===========================================================================
statements.VarDecl.assignNewExp(expressions.Exp):::ENTER
this has only one value
this.ident has only one value
this.ident.name has only one value
this.ident.name.toString == "j"
this.e.result.number one of { 1, 2, 3 }
arg0 has only one value
arg0.result.number one of { 1, 2 }
===========================================================================
statements.VarDecl.assignNewExp(expressions.Exp):::EXIT
this.ident == orig(this.ident)
this.ident.name == orig(this.ident.name)
this.ident.name.toString == orig(this.ident.name.toString)
this.ident.result == orig(this.ident.result)
this.e.result == arg0.result
this.e.result.number == arg0.result.number
this.ident has only one value
this.ident.name has only one value
this.ident.name.toString == "j"
arg0.result.number one of { 0, 1, 2 }
===========================================================================
statements.VarDecl.getIdentifier():::ENTER
this.e.result.number one of { 3, 5 }
===========================================================================
statements.VarDecl.getIdentifier():::EXIT
this.ident == orig(this.ident)
this.ident.name == return.name
this.ident.name.toString == orig(this.ident.name.toString)
this.ident.result == orig(this.ident.result)
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
return.name == orig(this.ident.name)
this.e.result.number one of { 3, 5 }
return.name.toString one of { "i", "j" }
return.result == null
===========================================================================
statements.VarDecl.getResult():::ENTER
===========================================================================
statements.VarDecl.getResult():::EXIT
this.ident == orig(this.ident)
this.ident.name == orig(this.ident.name)
this.ident.name.toString == orig(this.ident.name.toString)
this.ident.result == orig(this.ident.result)
this.e == orig(this.e)
this.e.result == return
this.e.result.number == return.number
return == orig(this.e.result)
return.number == orig(this.e.result.number)
return != null
===========================================================================
statements.VarDecl.toString():::ENTER
this.e.result.number one of { 3, 5 }
===========================================================================
statements.VarDecl.toString():::EXIT
this.ident == orig(this.ident)
this.ident.name == orig(this.ident.name)
this.ident.name.toString == orig(this.ident.name.toString)
this.ident.result == orig(this.ident.result)
this.e == orig(this.e)
this.e.result == orig(this.e.result)
this.e.result.number == orig(this.e.result.number)
this.e.result.number one of { 3, 5 }
return.toString one of { "var i = 5", "var j = 3" }
===========================================================================
statements.While:::OBJECT
this has only one value
this.boolE has only one value
this.boolE.e1 has only one value
this.boolE.e1.result == null
this.boolE.e2 has only one value
this.boolE.e2.result has only one value
this.boolE.booleanValue has only one value
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
this.boolE.booleanValue.symbol has only one value
this.boolE.booleanValue.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
this.stmtList has only one value
this.stmtList.getClass().getName() == statements.Stmt[].class
this.stmtList[] contains no nulls and has only one value, of length 2
this.stmtList[].getClass().getName() == [statements.Right, statements.Assignment]
size(expressions.Booleans.$VALUES[]) == 3
size(this.stmtList[]) == 2
===========================================================================
statements.While.While(expressions.BooleanExp, statements.Stmt[]):::ENTER
arg0.booleanValue == expressions.Booleans.greaterThan
arg0 has only one value
arg0.e1 has only one value
arg0.e1.result == null
arg0.e2 has only one value
arg0.e2.result has only one value
expressions.Booleans.greaterThan has only one value
expressions.Booleans.lessThan has only one value
expressions.Booleans.equal has only one value
arg0.booleanValue.symbol has only one value
arg0.booleanValue.symbol.toString == ">"
expressions.Booleans.$VALUES has only one value
expressions.Booleans.$VALUES.getClass().getName() == expressions.Booleans[].class
expressions.Booleans.$VALUES[] contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].getClass().getName() == [expressions.Booleans, expressions.Booleans, expressions.Booleans]
expressions.Booleans.$VALUES[].getClass().getName() elements == expressions.Booleans.class
expressions.Booleans.$VALUES[].symbol contains no nulls and has only one value, of length 3
expressions.Booleans.$VALUES[].symbol.toString == [>, <, =]
expressions.Booleans.$VALUES[].symbol.toString elements one of { "<", "=", ">" }
arg0.result has only one value
arg1 has only one value
arg1.getClass().getName() == statements.Stmt[].class
arg1[] contains no nulls and has only one value, of length 2
size(expressions.Booleans.$VALUES[]) == 3
size(arg1[]) == 2
===========================================================================
statements.While.While(expressions.BooleanExp, statements.Stmt[]):::EXIT
this.boolE == orig(arg0)
this.boolE.e1 == arg0.e1
this.boolE.e2 == arg0.e2
this.boolE.e2.result == arg0.e2.result
this.boolE.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == arg0.booleanValue
expressions.Booleans.greaterThan == orig(arg0.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == arg0.booleanValue.symbol
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.boolE.result == arg0.result
this.stmtList == orig(arg1)
this.stmtList.getClass().getName() == orig(arg1.getClass().getName())
arg0.e1 == orig(arg0.e1)
arg0.e1.result == orig(arg0.e1.result)
arg0.e2 == orig(arg0.e2)
arg0.e2.result == orig(arg0.e2.result)
arg0.booleanValue.symbol == orig(arg0.booleanValue.symbol)
arg0.booleanValue.symbol.toString == orig(arg0.booleanValue.symbol.toString)
arg0.result == orig(arg0.result)
arg1[] == orig(arg1[])
arg0.e1 has only one value
arg0.e1.result == null
arg0.e2 has only one value
arg0.e2.result has only one value
arg0.booleanValue.symbol has only one value
arg0.booleanValue.symbol.toString == ">"
arg0.result has only one value
arg1[] contains no nulls and has only one value, of length 2
===========================================================================
statements.While.interpret():::ENTER
this.boolE.booleanValue == expressions.Booleans.greaterThan
this.boolE.result has only one value
===========================================================================
statements.While.interpret():::EXIT
this.boolE == orig(this.boolE)
this.boolE.e1 == orig(this.boolE.e1)
this.boolE.e1.result == orig(this.boolE.e1.result)
this.boolE.e2 == orig(this.boolE.e2)
this.boolE.e2.result == orig(this.boolE.e2.result)
this.boolE.booleanValue == expressions.Booleans.greaterThan
expressions.Booleans.greaterThan == orig(this.boolE.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == orig(this.boolE.booleanValue.symbol)
this.boolE.booleanValue.symbol.toString == orig(this.boolE.booleanValue.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.stmtList == orig(this.stmtList)
this.stmtList.getClass().getName() == orig(this.stmtList.getClass().getName())
this.stmtList[] == orig(this.stmtList[])
this.boolE.result has only one value
===========================================================================
statements.While.toString():::ENTER
this.boolE.result has only one value
===========================================================================
statements.While.toString():::EXIT
this.boolE == orig(this.boolE)
this.boolE.e1 == orig(this.boolE.e1)
this.boolE.e1.result == orig(this.boolE.e1.result)
this.boolE.e2 == orig(this.boolE.e2)
this.boolE.e2.result == orig(this.boolE.e2.result)
this.boolE.booleanValue == orig(this.boolE.booleanValue)
expressions.Booleans.greaterThan == orig(expressions.Booleans.greaterThan)
expressions.Booleans.lessThan == orig(expressions.Booleans.lessThan)
expressions.Booleans.equal == orig(expressions.Booleans.equal)
this.boolE.booleanValue.symbol == orig(this.boolE.booleanValue.symbol)
this.boolE.booleanValue.symbol.toString == orig(this.boolE.booleanValue.symbol.toString)
expressions.Booleans.$VALUES == orig(expressions.Booleans.$VALUES)
expressions.Booleans.$VALUES.getClass().getName() == orig(expressions.Booleans.$VALUES.getClass().getName())
expressions.Booleans.$VALUES[] == orig(expressions.Booleans.$VALUES[])
expressions.Booleans.$VALUES[].symbol == orig(expressions.Booleans.$VALUES[].symbol)
this.boolE.result == orig(this.boolE.result)
this.stmtList == orig(this.stmtList)
this.stmtList.getClass().getName() == orig(this.stmtList.getClass().getName())
this.stmtList[] == orig(this.stmtList[])
this.boolE.result has only one value
return has only one value
return.toString == "while (j > 0) {\n\tright(j)\n\tj = j - 1\n}"
===========================================================================
util.Direction:::CLASS
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol != null
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation != null
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol != null
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation != null
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol != null
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation != null
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol != null
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation != null
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol != null
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation has only one value
util.Direction.standby.representation != null
util.Direction.standby.representation.toString == "."
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Direction:::OBJECT
this.symbol != null
this.representation != null
===========================================================================
util.Direction.Direction(java.lang.String, int, java.lang.String, java.lang.String):::ENTER
===========================================================================
util.Direction.Direction(java.lang.String, int, java.lang.String, java.lang.String):::EXIT
this.symbol == orig(arg2)
this.representation == orig(arg3)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg3.toString == orig(arg3.toString)
===========================================================================
util.Direction.getSymbol():::ENTER
===========================================================================
util.Direction.getSymbol():::EXIT
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation == orig(util.Direction.standby.representation)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.symbol == orig(this.symbol)
this.symbol.toString == orig(this.symbol.toString)
this.representation == orig(this.representation)
this.representation.toString == orig(this.representation.toString)
===========================================================================
util.Direction.toString():::ENTER
===========================================================================
util.Direction.toString():::EXIT
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation == orig(util.Direction.standby.representation)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.symbol == orig(this.symbol)
this.symbol.toString == orig(this.symbol.toString)
this.representation == orig(this.representation)
this.representation.toString == orig(this.representation.toString)
return != null
===========================================================================
util.Direction.values():::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
===========================================================================
util.Direction.values():::EXIT
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == return.getClass().getName()
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
return[] contains no nulls and has only one value, of length 5
return[].symbol contains no nulls and has only one value, of length 5
return[].symbol.toString == [-x, x, -y, y, .]
return[].representation contains no nulls and has only one value, of length 5
return[].representation.toString == [<, >, v, ^, .]
size(return[]) == 5
util.Direction.minusX in return[]
util.Direction.x in return[]
util.Direction.minusY in return[]
util.Direction.y in return[]
util.Direction.standby in return[]
===========================================================================
util.Grid:::OBJECT
this.sizeGlobal.x_bound_global.number == this.sizeGlobal.y_bound_global.number
this.sizeGlobal != null
this.sizeGlobal.x_bound_global != null
this.sizeGlobal.x_bound_global.number one of { 0, 64 }
this.sizeGlobal.y_bound_global != null
===========================================================================
util.Grid.Grid():::EXIT
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 0
this.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Grid.Grid(statements.Size):::ENTER
arg0.x_bound_global.number == arg0.y_bound_global.number
arg0 has only one value
arg0.x_bound_global has only one value
arg0.x_bound_global.number == 64
arg0.y_bound_global has only one value
===========================================================================
util.Grid.Grid(statements.Size):::EXIT
this.sizeGlobal == orig(arg0)
this.sizeGlobal.x_bound_global == arg0.x_bound_global
this.sizeGlobal.x_bound_global.number == arg0.x_bound_global.number
this.sizeGlobal.y_bound_global == arg0.y_bound_global
this.sizeGlobal.y_bound_global.number == arg0.x_bound_global.number
arg0.x_bound_global == orig(arg0.x_bound_global)
arg0.x_bound_global.number == arg0.y_bound_global.number
arg0.x_bound_global.number == orig(arg0.x_bound_global.number)
arg0.x_bound_global.number == orig(arg0.y_bound_global.number)
arg0.y_bound_global == orig(arg0.y_bound_global)
this.sizeGlobal has only one value
arg0.x_bound_global has only one value
arg0.x_bound_global.number == 64
arg0.y_bound_global has only one value
===========================================================================
util.Grid.interpret():::ENTER
this has only one value
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Grid.interpret():::EXIT
this.sizeGlobal == orig(this.sizeGlobal)
this.sizeGlobal.x_bound_global == orig(this.sizeGlobal.x_bound_global)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.x_bound_global.number)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.y_bound_global.number)
this.sizeGlobal.y_bound_global == orig(this.sizeGlobal.y_bound_global)
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Grid.isInsideGrid(expressions.Numbers, expressions.Numbers):::ENTER
this has only one value
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
arg0 != null
arg1 != null
this.sizeGlobal.x_bound_global.number > arg0.number
this.sizeGlobal.x_bound_global.number > arg1.number
arg0.number != arg1.number
===========================================================================
util.Grid.isInsideGrid(expressions.Numbers, expressions.Numbers):::EXIT
this.sizeGlobal == orig(this.sizeGlobal)
this.sizeGlobal.x_bound_global == orig(this.sizeGlobal.x_bound_global)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.x_bound_global.number)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.y_bound_global.number)
this.sizeGlobal.y_bound_global == orig(this.sizeGlobal.y_bound_global)
arg0.number == orig(arg0.number)
arg1.number == orig(arg1.number)
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
return == true
this.sizeGlobal.x_bound_global.number > arg0.number
this.sizeGlobal.x_bound_global.number > arg1.number
arg0.number != arg1.number
===========================================================================
util.Grid.isInsideGrid(expressions.Numbers, expressions.Numbers):::EXIT;condition="return == true"
===========================================================================
util.Grid.printGrid(expressions.Numbers, expressions.Numbers, util.Direction):::ENTER
arg2 == util.Direction.minusX
util.Direction.standby.symbol == util.Direction.standby.representation
this has only one value
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
arg0 has only one value
arg0.number == 23
arg1 has only one value
arg1.number == 6
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation.toString == "."
arg2.symbol has only one value
arg2.symbol.toString == "-x"
arg2.representation has only one value
arg2.representation.toString == "<"
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Grid.printGrid(expressions.Numbers, expressions.Numbers, util.Direction):::EXIT
this.sizeGlobal == orig(this.sizeGlobal)
this.sizeGlobal.x_bound_global == orig(this.sizeGlobal.x_bound_global)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.x_bound_global.number)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.y_bound_global.number)
this.sizeGlobal.y_bound_global == orig(this.sizeGlobal.y_bound_global)
arg0.number == orig(arg0.number)
arg1.number == orig(arg1.number)
util.Direction.minusX == orig(arg2)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
arg2.symbol == orig(arg2.symbol)
arg2.symbol.toString == orig(arg2.symbol.toString)
arg2.representation == orig(arg2.representation)
arg2.representation.toString == orig(arg2.representation.toString)
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
arg0.number == 23
arg1.number == 6
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation.toString == "."
arg2.symbol has only one value
arg2.symbol.toString == "-x"
arg2.representation has only one value
arg2.representation.toString == "<"
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Grid.printGrid(java.util.HashMap, util.Position):::ENTER
this has only one value
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
size(util.Direction.$VALUES[]) == 5
this.sizeGlobal.x_bound_global.number > arg1.xCord.number
this.sizeGlobal.x_bound_global.number > arg1.yCord.number
arg1.xCord.number != arg1.yCord.number
===========================================================================
util.Grid.printGrid(java.util.HashMap, util.Position):::EXIT
this.sizeGlobal == orig(this.sizeGlobal)
this.sizeGlobal.x_bound_global == orig(this.sizeGlobal.x_bound_global)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.x_bound_global.number)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.y_bound_global.number)
this.sizeGlobal.y_bound_global == orig(this.sizeGlobal.y_bound_global)
arg1.dir == orig(arg1.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
arg1.dir.symbol == orig(arg1.dir.symbol)
arg1.dir.symbol.toString == orig(arg1.dir.symbol.toString)
arg1.dir.representation == orig(arg1.dir.representation)
arg1.dir.representation.toString == orig(arg1.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
arg1.xCord == orig(arg1.xCord)
arg1.xCord.number == orig(arg1.xCord.number)
arg1.yCord == orig(arg1.yCord)
arg1.yCord.number == orig(arg1.yCord.number)
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
size(util.Direction.$VALUES[]) == 5
this.sizeGlobal.x_bound_global.number > arg1.xCord.number
this.sizeGlobal.x_bound_global.number > arg1.yCord.number
arg1.xCord.number != arg1.yCord.number
===========================================================================
util.Grid.printGrid(util.Position):::ENTER
arg0.dir == util.Direction.minusX
this has only one value
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
arg0 has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
arg0.dir.symbol has only one value
arg0.dir.symbol.toString == "-x"
arg0.dir.representation has only one value
arg0.dir.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
arg0.xCord has only one value
arg0.xCord.number == 23
arg0.yCord has only one value
arg0.yCord.number == 6
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Grid.printGrid(util.Position):::EXIT
this.sizeGlobal == orig(this.sizeGlobal)
this.sizeGlobal.x_bound_global == orig(this.sizeGlobal.x_bound_global)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.x_bound_global.number)
this.sizeGlobal.x_bound_global.number == orig(this.sizeGlobal.y_bound_global.number)
this.sizeGlobal.y_bound_global == orig(this.sizeGlobal.y_bound_global)
arg0.dir == util.Direction.minusX
util.Direction.minusX == orig(arg0.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
arg0.dir.symbol == orig(arg0.dir.symbol)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation == orig(arg0.dir.representation)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
arg0.xCord == orig(arg0.xCord)
arg0.xCord.number == orig(arg0.xCord.number)
arg0.yCord == orig(arg0.yCord)
arg0.yCord.number == orig(arg0.yCord.number)
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 64
this.sizeGlobal.y_bound_global has only one value
util.Direction.minusX has only one value
util.Direction.x has only one value
util.Direction.minusY has only one value
util.Direction.y has only one value
util.Direction.standby has only one value
arg0.dir.symbol has only one value
arg0.dir.symbol.toString == "-x"
arg0.dir.representation has only one value
arg0.dir.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
arg0.xCord has only one value
arg0.xCord.number == 23
arg0.yCord has only one value
arg0.yCord.number == 6
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Grid.setSizeGlobal(statements.Size):::ENTER
arg0.x_bound_global.number == arg0.y_bound_global.number
this has only one value
this.sizeGlobal has only one value
this.sizeGlobal.x_bound_global has only one value
this.sizeGlobal.x_bound_global.number == 0
this.sizeGlobal.y_bound_global has only one value
arg0 has only one value
arg0.x_bound_global has only one value
arg0.x_bound_global.number == 64
arg0.y_bound_global has only one value
===========================================================================
util.Grid.setSizeGlobal(statements.Size):::EXIT
this.sizeGlobal == orig(arg0)
this.sizeGlobal.x_bound_global == arg0.x_bound_global
this.sizeGlobal.x_bound_global.number == arg0.x_bound_global.number
this.sizeGlobal.y_bound_global == arg0.y_bound_global
this.sizeGlobal.y_bound_global.number == arg0.x_bound_global.number
arg0.x_bound_global == orig(arg0.x_bound_global)
arg0.x_bound_global.number == arg0.y_bound_global.number
arg0.x_bound_global.number == orig(arg0.x_bound_global.number)
arg0.x_bound_global.number == orig(arg0.y_bound_global.number)
arg0.y_bound_global == orig(arg0.y_bound_global)
this.sizeGlobal has only one value
arg0.x_bound_global has only one value
arg0.x_bound_global.number == 64
arg0.y_bound_global has only one value
===========================================================================
util.Position:::OBJECT
this.dir != null
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol != null
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation != null
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol != null
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation != null
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol != null
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation != null
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol != null
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation != null
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol != null
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation has only one value
util.Direction.standby.representation != null
util.Direction.standby.representation.toString == "."
this.dir.symbol != null
this.dir.representation != null
this.xCord != null
this.xCord.number >= 1
this.yCord != null
this.yCord.number >= 1
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Position.Position():::EXIT
this.dir == util.Direction.x
util.Direction.standby.symbol == util.Direction.standby.representation
this.xCord.number == this.yCord.number
this.dir.symbol has only one value
this.dir.symbol.toString == "x"
this.dir.representation has only one value
this.dir.representation.toString == ">"
this.xCord.number == 1
===========================================================================
util.Position.Position(expressions.Numbers, expressions.Numbers):::ENTER
arg0 != null
arg0.number >= 1
arg1 != null
arg1.number >= 1
===========================================================================
util.Position.Position(expressions.Numbers, expressions.Numbers):::EXIT
this.dir == util.Direction.standby
util.Direction.standby.symbol == util.Direction.standby.representation
this.dir.symbol == this.dir.representation
this.xCord == orig(arg0)
this.xCord.number == arg0.number
this.yCord == orig(arg1)
this.yCord.number == arg1.number
arg0.number == orig(arg0.number)
arg1.number == orig(arg1.number)
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
arg0.number >= 1
arg1.number >= 1
===========================================================================
util.Position.Position(expressions.Numbers, expressions.Numbers, util.Direction):::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
arg0 != null
arg0.number >= 1
arg1 != null
arg1.number >= 1
arg2 != null
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol != null
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation != null
util.Direction.minusX.representation.toString == "<"
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
util.Direction.x.symbol has only one value
util.Direction.x.symbol != null
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation != null
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol != null
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation != null
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol != null
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation != null
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol != null
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation.toString == "."
arg2.symbol != null
arg2.symbol.toString one of { "-x", "." }
arg2.representation != null
arg2.representation.toString one of { ".", "<" }
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Position.Position(expressions.Numbers, expressions.Numbers, util.Direction):::EXIT
this.dir == orig(arg2)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == arg2.symbol
this.dir.representation == arg2.representation
this.xCord == orig(arg0)
this.xCord.number == arg0.number
this.yCord == orig(arg1)
this.yCord.number == arg1.number
arg0.number == orig(arg0.number)
arg1.number == orig(arg1.number)
arg2.symbol == orig(arg2.symbol)
arg2.symbol.toString == orig(arg2.symbol.toString)
arg2.representation == orig(arg2.representation)
arg2.representation.toString == orig(arg2.representation.toString)
this.dir.symbol.toString one of { "-x", "." }
this.dir.representation.toString one of { ".", "<" }
arg0.number >= 1
arg1.number >= 1
arg2.symbol != null
arg2.symbol.toString one of { "-x", "." }
arg2.representation != null
arg2.representation.toString one of { ".", "<" }
===========================================================================
util.Position.Position(util.Position):::ENTER
arg0 != null
arg0.dir != null
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
arg0.dir.symbol != null
arg0.dir.representation != null
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
arg0.xCord != null
arg0.yCord != null
size(util.Direction.$VALUES[]) == 5
arg0.xCord.number != arg0.yCord.number
===========================================================================
util.Position.Position(util.Position):::EXIT
this.dir == arg0.dir
this.dir == orig(arg0.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.standby.symbol == util.Direction.standby.representation
this.dir.symbol == arg0.dir.symbol
this.dir.symbol == orig(arg0.dir.symbol)
this.dir.representation == arg0.dir.representation
this.dir.representation == orig(arg0.dir.representation)
this.xCord.number == arg0.xCord.number
this.xCord.number == orig(arg0.xCord.number)
this.yCord.number == arg0.yCord.number
this.yCord.number == orig(arg0.yCord.number)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.yCord == orig(arg0.yCord)
arg0.xCord != null
arg0.yCord != null
this.xCord.number != this.yCord.number
===========================================================================
util.Position.compareTo(util.Position):::ENTER
this.dir == util.Direction.standby
util.Direction.standby == arg0.dir
util.Direction.standby.symbol == util.Direction.standby.representation
this.dir.symbol == this.dir.representation
this.dir.symbol == arg0.dir.symbol
this.dir.symbol == arg0.dir.representation
this.xCord.number == arg0.xCord.number
this.yCord.number == arg0.yCord.number
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
arg0 != null
arg0.dir.symbol.toString == "."
arg0.dir.representation.toString == "."
arg0.xCord != null
arg0.yCord != null
===========================================================================
util.Position.compareTo(util.Position):::EXIT105
===========================================================================
util.Position.compareTo(util.Position):::EXIT
this.dir == util.Direction.standby
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == arg0.dir
util.Direction.standby == orig(this.dir)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.standby == orig(arg0.dir)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == this.dir.representation
this.dir.symbol == arg0.dir.symbol
this.dir.symbol == arg0.dir.representation
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol == orig(this.dir.representation)
this.dir.symbol == orig(arg0.dir.symbol)
this.dir.symbol == orig(arg0.dir.representation)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == arg0.xCord.number
this.xCord.number == orig(this.xCord.number)
this.xCord.number == orig(arg0.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == arg0.yCord.number
this.yCord.number == orig(this.yCord.number)
this.yCord.number == orig(arg0.yCord.number)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.yCord == orig(arg0.yCord)
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
arg0.dir.symbol.toString == "."
arg0.dir.representation.toString == "."
arg0.xCord != null
arg0.yCord != null
return == 0
===========================================================================
util.Position.equals(java.lang.Object):::ENTER
this.dir == util.Direction.standby
util.Direction.standby.symbol == util.Direction.standby.representation
this.dir.symbol == this.dir.representation
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
arg0 != null
arg0.getClass().getName() == util.Position.class
util.Direction.$VALUES.getClass().getName() != arg0.getClass().getName()
===========================================================================
util.Position.equals(java.lang.Object):::EXIT118
===========================================================================
util.Position.equals(java.lang.Object):::EXIT118;condition="return == true"
===========================================================================
util.Position.equals(java.lang.Object):::EXIT
this.dir == util.Direction.standby
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(this.dir)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == this.dir.representation
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol == orig(this.dir.representation)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
return == true
util.Direction.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
util.Position.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
util.Position.equals(util.Position):::ENTER
this.dir == util.Direction.standby
util.Direction.standby == arg0.dir
util.Direction.standby.symbol == util.Direction.standby.representation
this.dir.symbol == this.dir.representation
this.dir.symbol == arg0.dir.symbol
this.dir.symbol == arg0.dir.representation
this.xCord.number == arg0.xCord.number
this.yCord.number == arg0.yCord.number
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
arg0 != null
arg0.dir.symbol.toString == "."
arg0.dir.representation.toString == "."
arg0.xCord != null
arg0.yCord != null
===========================================================================
util.Position.equals(util.Position):::EXIT147
===========================================================================
util.Position.equals(util.Position):::EXIT147;condition="return == true"
===========================================================================
util.Position.equals(util.Position):::EXIT
this.dir == util.Direction.standby
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == arg0.dir
util.Direction.standby == orig(this.dir)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.standby == orig(arg0.dir)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == this.dir.representation
this.dir.symbol == arg0.dir.symbol
this.dir.symbol == arg0.dir.representation
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol == orig(this.dir.representation)
this.dir.symbol == orig(arg0.dir.symbol)
this.dir.symbol == orig(arg0.dir.representation)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == arg0.xCord.number
this.xCord.number == orig(this.xCord.number)
this.xCord.number == orig(arg0.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == arg0.yCord.number
this.yCord.number == orig(this.yCord.number)
this.yCord.number == orig(arg0.yCord.number)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.yCord == orig(arg0.yCord)
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
arg0.dir.symbol.toString == "."
arg0.dir.representation.toString == "."
arg0.xCord != null
arg0.yCord != null
return == true
===========================================================================
util.Position.equals(util.Position):::EXIT;condition="return == true"
===========================================================================
util.Position.getDirection():::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
this.xCord.number != this.yCord.number
===========================================================================
util.Position.getDirection():::EXIT
this.dir == return
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == return.symbol
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == return.representation
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
return == orig(this.dir)
return.symbol == orig(this.dir.symbol)
return.representation == orig(this.dir.representation)
return != null
return.symbol != null
return.representation != null
this.xCord.number != this.yCord.number
===========================================================================
util.Position.getXCord():::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
this.xCord.number != this.yCord.number
===========================================================================
util.Position.getXCord():::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == return
this.xCord.number == return.number
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
return == orig(this.xCord)
return.number == orig(this.xCord.number)
return != null
this.yCord.number != return.number
===========================================================================
util.Position.getYCord():::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
===========================================================================
util.Position.getYCord():::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == return
this.yCord.number == return.number
return == orig(this.yCord)
return.number == orig(this.yCord.number)
return != null
===========================================================================
util.Position.hashCode():::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
this.dir.symbol == this.dir.representation
this.dir has only one value
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
===========================================================================
util.Position.hashCode():::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == this.dir.representation
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol == orig(this.dir.representation)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
this.dir has only one value
this.dir.symbol has only one value
this.dir.symbol.toString == "."
this.dir.representation.toString == "."
===========================================================================
util.Position.setCoordinates(expressions.Numbers, expressions.Numbers):::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
arg0 != null
arg1 != null
this.yCord.number != arg0.number
arg0.number != arg1.number
===========================================================================
util.Position.setCoordinates(expressions.Numbers, expressions.Numbers):::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(arg0)
this.xCord.number == arg0.number
this.yCord == orig(arg1)
this.yCord.number == arg1.number
arg0.number == orig(arg0.number)
arg1.number == orig(arg1.number)
arg0.number != arg1.number
arg0.number != orig(this.yCord.number)
===========================================================================
util.Position.setDirection(util.Direction):::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
arg0 != null
arg0.symbol != null
arg0.representation != null
===========================================================================
util.Position.setDirection(util.Direction):::EXIT
this.dir == orig(arg0)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == arg0.symbol
this.dir.representation == arg0.representation
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
arg0.symbol == orig(arg0.symbol)
arg0.symbol.toString == orig(arg0.symbol.toString)
arg0.representation == orig(arg0.representation)
arg0.representation.toString == orig(arg0.representation.toString)
arg0.symbol != null
arg0.representation != null
===========================================================================
util.Position.setXCord(expressions.Numbers):::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
arg0 != null
this.yCord.number != arg0.number
===========================================================================
util.Position.setXCord(expressions.Numbers):::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(arg0)
this.xCord.number == arg0.number
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
arg0.number == orig(arg0.number)
this.yCord.number != arg0.number
===========================================================================
util.Position.setYCord(expressions.Numbers):::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
arg0 != null
this.xCord.number != this.yCord.number
this.xCord.number != arg0.number
===========================================================================
util.Position.setYCord(expressions.Numbers):::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == orig(arg0)
this.yCord.number == arg0.number
arg0.number == orig(arg0.number)
this.xCord.number != arg0.number
this.xCord.number != orig(this.yCord.number)
===========================================================================
util.Position.toString():::ENTER
===========================================================================
util.Position.toString():::EXIT
this.dir == orig(this.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation == orig(util.Direction.standby.representation)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
this.dir.symbol == orig(this.dir.symbol)
this.dir.symbol.toString == orig(this.dir.symbol.toString)
this.dir.representation == orig(this.dir.representation)
this.dir.representation.toString == orig(this.dir.representation.toString)
this.xCord == orig(this.xCord)
this.xCord.number == orig(this.xCord.number)
this.yCord == orig(this.yCord)
this.yCord.number == orig(this.yCord.number)
===========================================================================
util.Program:::CLASS
util.Program.gridGlobal != null
util.Program.gridGlobal.sizeGlobal != null
util.Program.gridGlobal.sizeGlobal.x_bound_global != null
util.Program.gridGlobal.sizeGlobal.y_bound_global != null
util.Program.robotGlobal != null
util.Program.robotGlobal.varDecls != null
util.Program.robotGlobal.curPos != null
util.Program.robotGlobal.curPos.dir != null
util.Program.robotGlobal.curPos.xCord != null
util.Program.robotGlobal.curPos.yCord != null
util.Program.prettyPrint has only one value
util.Program.prettyPrint != null
util.Program.STARS has only one value
util.Program.STARS != null
util.Program.STARS.toString == "**********************************************"
util.Program.printGrid == true
util.Program.printPrettyPrint == true
===========================================================================
util.Program:::OBJECT
this has only one value
===========================================================================
util.Program.Program(java.lang.String, boolean, boolean):::ENTER
arg0 has only one value
arg0.toString == "Example with if-then-else"
arg1 == true
arg2 == true
===========================================================================
util.Program.Program(java.lang.String, boolean, boolean):::EXIT
util.Program.printGrid == orig(arg1)
util.Program.printPrettyPrint == orig(arg2)
arg0.toString == orig(arg0.toString)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.toString == "Example with if-then-else"
===========================================================================
util.Program.addGrid(util.Grid):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0 has only one value
arg0.sizeGlobal has only one value
arg0.sizeGlobal.x_bound_global has only one value
arg0.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Program.addGrid(util.Grid):::EXIT
util.Program.gridGlobal == orig(arg0)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Program.robotGlobal.curPos.xCord == orig(util.Program.robotGlobal.curPos.xCord)
util.Program.robotGlobal.curPos.yCord == orig(util.Program.robotGlobal.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
arg0.sizeGlobal == orig(arg0.sizeGlobal)
arg0.sizeGlobal.x_bound_global == orig(arg0.sizeGlobal.x_bound_global)
arg0.sizeGlobal.y_bound_global == orig(arg0.sizeGlobal.y_bound_global)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.sizeGlobal has only one value
arg0.sizeGlobal.x_bound_global has only one value
arg0.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Program.addRobot(util.Robot):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0 has only one value
arg0.varDecls has only one value
arg0.curPos has only one value
arg0.curPos.dir has only one value
arg0.curPos.xCord has only one value
arg0.curPos.yCord has only one value
===========================================================================
util.Program.addRobot(util.Robot):::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(arg0)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
arg0.varDecls == orig(arg0.varDecls)
arg0.curPos == orig(arg0.curPos)
arg0.curPos.dir == orig(arg0.curPos.dir)
arg0.curPos.xCord == orig(arg0.curPos.xCord)
arg0.curPos.yCord == orig(arg0.curPos.yCord)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.varDecls has only one value
arg0.curPos has only one value
arg0.curPos.dir has only one value
arg0.curPos.xCord has only one value
arg0.curPos.yCord has only one value
===========================================================================
util.Program.addStmt(interfaces.Handler):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
===========================================================================
util.Program.addStmt(interfaces.Handler):::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
===========================================================================
util.Program.addVarDecl(statements.VarDecl):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.ident.name.toString one of { "i", "j" }
arg0.ident.result == null
===========================================================================
util.Program.addVarDecl(statements.VarDecl):::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Program.robotGlobal.curPos.xCord == orig(util.Program.robotGlobal.curPos.xCord)
util.Program.robotGlobal.curPos.yCord == orig(util.Program.robotGlobal.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
arg0.ident == orig(arg0.ident)
arg0.ident.name == orig(arg0.ident.name)
arg0.ident.name.toString == orig(arg0.ident.name.toString)
arg0.ident.result == orig(arg0.ident.result)
arg0.e == orig(arg0.e)
arg0.e.result == orig(arg0.e.result)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.ident.name.toString one of { "i", "j" }
arg0.ident.result == null
===========================================================================
util.Program.makePrettyPrint(java.lang.String):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0 has only one value
arg0.toString == "Example with if-then-else"
===========================================================================
util.Program.makePrettyPrint(java.lang.String):::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Program.robotGlobal.curPos.xCord == orig(util.Program.robotGlobal.curPos.xCord)
util.Program.robotGlobal.curPos.yCord == orig(util.Program.robotGlobal.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
arg0.toString == orig(arg0.toString)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.toString == "Example with if-then-else"
===========================================================================
util.Program.printPrettyPrint():::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
===========================================================================
util.Program.printPrettyPrint():::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Program.robotGlobal.curPos.xCord == orig(util.Program.robotGlobal.curPos.xCord)
util.Program.robotGlobal.curPos.yCord == orig(util.Program.robotGlobal.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
===========================================================================
util.Program.printWelcome():::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
===========================================================================
util.Program.printWelcome():::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Program.robotGlobal.curPos.xCord == orig(util.Program.robotGlobal.curPos.xCord)
util.Program.robotGlobal.curPos.yCord == orig(util.Program.robotGlobal.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
===========================================================================
util.Program.setGridGlobal(util.Grid):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0 has only one value
arg0.sizeGlobal has only one value
arg0.sizeGlobal.x_bound_global has only one value
arg0.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Program.setGridGlobal(util.Grid):::EXIT
util.Program.gridGlobal == orig(arg0)
util.Program.robotGlobal == orig(util.Program.robotGlobal)
util.Program.robotGlobal.varDecls == orig(util.Program.robotGlobal.varDecls)
util.Program.robotGlobal.curPos == orig(util.Program.robotGlobal.curPos)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Program.robotGlobal.curPos.xCord == orig(util.Program.robotGlobal.curPos.xCord)
util.Program.robotGlobal.curPos.yCord == orig(util.Program.robotGlobal.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
arg0.sizeGlobal == orig(arg0.sizeGlobal)
arg0.sizeGlobal.x_bound_global == orig(arg0.sizeGlobal.x_bound_global)
arg0.sizeGlobal.y_bound_global == orig(arg0.sizeGlobal.y_bound_global)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.sizeGlobal has only one value
arg0.sizeGlobal.x_bound_global has only one value
arg0.sizeGlobal.y_bound_global has only one value
===========================================================================
util.Program.setRobotGlobal(util.Robot):::ENTER
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0 has only one value
arg0.varDecls has only one value
arg0.curPos has only one value
arg0.curPos.dir has only one value
arg0.curPos.xCord has only one value
arg0.curPos.yCord has only one value
===========================================================================
util.Program.setRobotGlobal(util.Robot):::EXIT
util.Program.gridGlobal == orig(util.Program.gridGlobal)
util.Program.gridGlobal.sizeGlobal == orig(util.Program.gridGlobal.sizeGlobal)
util.Program.gridGlobal.sizeGlobal.x_bound_global == orig(util.Program.gridGlobal.sizeGlobal.x_bound_global)
util.Program.gridGlobal.sizeGlobal.y_bound_global == orig(util.Program.gridGlobal.sizeGlobal.y_bound_global)
util.Program.robotGlobal == orig(arg0)
util.Program.robotGlobal.curPos.dir == orig(util.Program.robotGlobal.curPos.dir)
util.Robot.penDown == orig(util.Robot.penDown)
util.Program.prettyPrint == orig(util.Program.prettyPrint)
util.Program.STARS == orig(util.Program.STARS)
util.Program.STARS.toString == orig(util.Program.STARS.toString)
util.Program.printGrid == orig(util.Program.printGrid)
util.Program.printPrettyPrint == orig(util.Program.printPrettyPrint)
arg0.varDecls == orig(arg0.varDecls)
arg0.curPos == orig(arg0.curPos)
arg0.curPos.dir == orig(arg0.curPos.dir)
arg0.curPos.xCord == orig(arg0.curPos.xCord)
arg0.curPos.yCord == orig(arg0.curPos.yCord)
util.Program.gridGlobal has only one value
util.Program.gridGlobal.sizeGlobal has only one value
util.Program.gridGlobal.sizeGlobal.x_bound_global has only one value
util.Program.gridGlobal.sizeGlobal.y_bound_global has only one value
util.Program.robotGlobal has only one value
util.Program.robotGlobal.varDecls has only one value
util.Program.robotGlobal.curPos has only one value
util.Program.robotGlobal.curPos.dir has only one value
util.Program.robotGlobal.curPos.xCord has only one value
util.Program.robotGlobal.curPos.yCord has only one value
util.Robot.penDown == false
arg0.varDecls has only one value
arg0.curPos has only one value
arg0.curPos.dir has only one value
arg0.curPos.xCord has only one value
arg0.curPos.yCord has only one value
===========================================================================
util.Robot:::CLASS
===========================================================================
util.Robot:::OBJECT
this.varDecls != null
this.curPos != null
this.curPos.dir != null
util.Direction.minusX has only one value
util.Direction.minusX != null
util.Direction.x has only one value
util.Direction.x != null
util.Direction.minusY has only one value
util.Direction.minusY != null
util.Direction.y has only one value
util.Direction.y != null
util.Direction.standby has only one value
util.Direction.standby != null
this.curPos.dir.symbol != null
this.curPos.dir.representation != null
util.Direction.$VALUES has only one value
util.Direction.$VALUES != null
util.Direction.$VALUES.getClass().getName() == util.Direction[].class
util.Direction.$VALUES[] contains no nulls and has only one value, of length 5
util.Direction.$VALUES[] elements != null
util.Direction.$VALUES[].getClass().getName() == [util.Direction, util.Direction, util.Direction, util.Direction, util.Direction]
util.Direction.$VALUES[].getClass().getName() elements == util.Direction.class
util.Direction.$VALUES[].symbol contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].symbol elements != null
util.Direction.$VALUES[].symbol.toString == [-x, x, -y, y, .]
util.Direction.$VALUES[].representation contains no nulls and has only one value, of length 5
util.Direction.$VALUES[].representation elements != null
util.Direction.$VALUES[].representation.toString == [<, >, v, ^, .]
this.curPos.xCord != null
this.curPos.yCord != null
size(util.Direction.$VALUES[]) == 5
===========================================================================
util.Robot.Robot():::EXIT
this.curPos.dir == util.Direction.x
this.curPos.xCord.number == this.curPos.yCord.number
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "x"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == ">"
this.curPos.xCord.number == 1
util.Robot.penDown == false
===========================================================================
util.Robot.addStmt(interfaces.Handler):::ENTER
this has only one value
this.varDecls has only one value
this.curPos has only one value
this.curPos.dir.symbol.toString one of { "-x", "x", "y" }
this.curPos.dir.representation.toString one of { "<", ">", "^" }
util.Direction.$VALUES.getClass().getName() != arg0.getClass().getName()
===========================================================================
util.Robot.addStmt(interfaces.Handler):::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.varDecls has only one value
this.curPos has only one value
this.curPos.dir.symbol.toString one of { "-x", "x", "y" }
this.curPos.dir.representation.toString one of { "<", ">", "^" }
util.Direction.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.curPos.xCord.number != this.curPos.yCord.number
this.curPos.xCord.number != orig(this.curPos.yCord.number)
this.curPos.yCord.number != orig(this.curPos.xCord.number)
===========================================================================
util.Robot.addVarDecl(statements.VarDecl):::ENTER
this.curPos.dir == util.Direction.x
this.curPos.xCord.number == this.curPos.yCord.number
this has only one value
this.varDecls has only one value
this.curPos has only one value
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "x"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == ">"
this.curPos.xCord has only one value
this.curPos.xCord.number == 1
this.curPos.yCord has only one value
util.Robot.penDown == false
arg0.ident.name.toString one of { "i", "j" }
arg0.ident.result == null
===========================================================================
util.Robot.addVarDecl(statements.VarDecl):::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
this.curPos.dir == util.Direction.x
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(this.curPos.dir)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == this.curPos.yCord.number
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.xCord.number == orig(this.curPos.yCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
arg0.ident == orig(arg0.ident)
arg0.ident.name == orig(arg0.ident.name)
arg0.ident.name.toString == orig(arg0.ident.name.toString)
arg0.ident.result == orig(arg0.ident.result)
arg0.e == orig(arg0.e)
arg0.e.result == orig(arg0.e.result)
this.varDecls has only one value
this.curPos has only one value
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "x"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == ">"
this.curPos.xCord has only one value
this.curPos.xCord.number == 1
this.curPos.yCord has only one value
util.Robot.penDown == false
arg0.ident.name.toString one of { "i", "j" }
arg0.ident.result == null
===========================================================================
util.Robot.getPos():::ENTER
this has only one value
this.varDecls has only one value
this.curPos has only one value
this.curPos.xCord.number != this.curPos.yCord.number
===========================================================================
util.Robot.getPos():::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
this.curPos.dir == return.dir
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == return.dir.symbol
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == return.dir.representation
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == return.xCord.number
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == return.yCord.number
util.Robot.penDown == orig(util.Robot.penDown)
return.dir == orig(this.curPos.dir)
return.dir.symbol == orig(this.curPos.dir.symbol)
return.dir.representation == orig(this.curPos.dir.representation)
return.xCord.number == orig(this.curPos.xCord.number)
return.yCord.number == orig(this.curPos.yCord.number)
this.varDecls has only one value
this.curPos has only one value
return.xCord.number != return.yCord.number
===========================================================================
util.Robot.getVarDecl(expressions.Identifier):::ENTER
this has only one value
this.varDecls has only one value
this.curPos has only one value
util.Robot.penDown == false
arg0 != null
arg0.name != null
arg0.name.toString one of { "i", "j" }
arg0.result == null
this.curPos.xCord.number != this.curPos.yCord.number
===========================================================================
util.Robot.getVarDecl(expressions.Identifier):::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
this.curPos.dir == orig(this.curPos.dir)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
this.curPos.yCord.number == orig(this.curPos.yCord.number)
util.Robot.penDown == orig(util.Robot.penDown)
arg0.name == return.ident.name
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.result == orig(arg0.result)
this.varDecls has only one value
this.curPos has only one value
util.Robot.penDown == false
arg0.name != null
arg0.name.toString one of { "i", "j" }
arg0.result == null
return != null
return.ident != null
return.ident.name.toString one of { "i", "j" }
return.ident.result == null
return.e != null
return.e.result != null
this.curPos.xCord.number != this.curPos.yCord.number
===========================================================================
util.Robot.interpret():::ENTER
this.curPos.dir == util.Direction.x
this.curPos.xCord.number == this.curPos.yCord.number
this has only one value
this.varDecls has only one value
this.curPos has only one value
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "x"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == ">"
this.curPos.xCord has only one value
this.curPos.xCord.number == 1
this.curPos.yCord has only one value
util.Robot.penDown == false
===========================================================================
util.Robot.interpret():::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
this.curPos.dir == util.Direction.x
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(this.curPos.dir)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == orig(this.curPos.dir.symbol)
this.curPos.dir.symbol.toString == orig(this.curPos.dir.symbol.toString)
this.curPos.dir.representation == orig(this.curPos.dir.representation)
this.curPos.dir.representation.toString == orig(this.curPos.dir.representation.toString)
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(this.curPos.xCord)
this.curPos.xCord.number == this.curPos.yCord.number
this.curPos.xCord.number == orig(this.curPos.xCord.number)
this.curPos.xCord.number == orig(this.curPos.yCord.number)
this.curPos.yCord == orig(this.curPos.yCord)
util.Robot.penDown == orig(util.Robot.penDown)
this.varDecls has only one value
this.curPos has only one value
this.curPos.dir.symbol has only one value
this.curPos.dir.symbol.toString == "x"
this.curPos.dir.representation has only one value
this.curPos.dir.representation.toString == ">"
this.curPos.xCord has only one value
this.curPos.xCord.number == 1
this.curPos.yCord has only one value
util.Robot.penDown == false
===========================================================================
util.Robot.setPos(util.Direction, expressions.Numbers, expressions.Numbers):::ENTER
util.Direction.standby.symbol == util.Direction.standby.representation
this has only one value
this.varDecls has only one value
this.curPos has only one value
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation.toString == "<"
util.Direction.x.symbol has only one value
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation.toString == "."
this.curPos.xCord.number != arg2.number
this.curPos.yCord.number != arg1.number
arg1.number != arg2.number
===========================================================================
util.Robot.setPos(util.Direction, expressions.Numbers, expressions.Numbers):::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
this.curPos.dir == orig(arg0)
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == arg0.symbol
this.curPos.dir.representation == arg0.representation
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord == orig(arg1)
this.curPos.xCord.number == arg1.number
this.curPos.yCord == orig(arg2)
this.curPos.yCord.number == arg2.number
util.Robot.penDown == orig(util.Robot.penDown)
util.Direction.minusX.symbol == orig(util.Direction.minusX.symbol)
util.Direction.minusX.symbol.toString == orig(util.Direction.minusX.symbol.toString)
util.Direction.minusX.representation == orig(util.Direction.minusX.representation)
util.Direction.minusX.representation.toString == orig(util.Direction.minusX.representation.toString)
util.Direction.x.symbol == orig(util.Direction.x.symbol)
util.Direction.x.symbol.toString == orig(util.Direction.x.symbol.toString)
util.Direction.x.representation == orig(util.Direction.x.representation)
util.Direction.x.representation.toString == orig(util.Direction.x.representation.toString)
util.Direction.minusY.symbol == orig(util.Direction.minusY.symbol)
util.Direction.minusY.symbol.toString == orig(util.Direction.minusY.symbol.toString)
util.Direction.minusY.representation == orig(util.Direction.minusY.representation)
util.Direction.minusY.representation.toString == orig(util.Direction.minusY.representation.toString)
util.Direction.y.symbol == orig(util.Direction.y.symbol)
util.Direction.y.symbol.toString == orig(util.Direction.y.symbol.toString)
util.Direction.y.representation == orig(util.Direction.y.representation)
util.Direction.y.representation.toString == orig(util.Direction.y.representation.toString)
util.Direction.standby.symbol == util.Direction.standby.representation
util.Direction.standby.symbol == orig(util.Direction.standby.symbol)
util.Direction.standby.symbol == orig(util.Direction.standby.representation)
util.Direction.standby.symbol.toString == orig(util.Direction.standby.symbol.toString)
util.Direction.standby.representation.toString == orig(util.Direction.standby.representation.toString)
arg0.symbol == orig(arg0.symbol)
arg0.symbol.toString == orig(arg0.symbol.toString)
arg0.representation == orig(arg0.representation)
arg0.representation.toString == orig(arg0.representation.toString)
arg1.number == orig(arg1.number)
arg2.number == orig(arg2.number)
this.varDecls has only one value
this.curPos has only one value
util.Direction.minusX.symbol has only one value
util.Direction.minusX.symbol.toString == "-x"
util.Direction.minusX.representation has only one value
util.Direction.minusX.representation.toString == "<"
util.Direction.x.symbol has only one value
util.Direction.x.symbol.toString == "x"
util.Direction.x.representation has only one value
util.Direction.x.representation.toString == ">"
util.Direction.minusY.symbol has only one value
util.Direction.minusY.symbol.toString == "-y"
util.Direction.minusY.representation has only one value
util.Direction.minusY.representation.toString == "v"
util.Direction.y.symbol has only one value
util.Direction.y.symbol.toString == "y"
util.Direction.y.representation has only one value
util.Direction.y.representation.toString == "^"
util.Direction.standby.symbol has only one value
util.Direction.standby.symbol.toString == "."
util.Direction.standby.representation.toString == "."
arg1.number != arg2.number
arg1.number != orig(this.curPos.yCord.number)
arg2.number != orig(this.curPos.xCord.number)
===========================================================================
util.Robot.setPos(util.Position):::ENTER
this has only one value
this.varDecls has only one value
this.curPos has only one value
this.curPos.xCord.number != this.curPos.yCord.number
this.curPos.xCord.number != arg0.yCord.number
this.curPos.yCord.number != arg0.xCord.number
arg0.xCord.number != arg0.yCord.number
===========================================================================
util.Robot.setPos(util.Position):::EXIT
this.varDecls == orig(this.varDecls)
this.curPos == orig(this.curPos)
this.curPos.dir == arg0.dir
util.Direction.minusX == orig(util.Direction.minusX)
util.Direction.x == orig(util.Direction.x)
util.Direction.minusY == orig(util.Direction.minusY)
util.Direction.y == orig(util.Direction.y)
util.Direction.standby == orig(util.Direction.standby)
this.curPos.dir.symbol == arg0.dir.symbol
this.curPos.dir.representation == arg0.dir.representation
util.Direction.$VALUES == orig(util.Direction.$VALUES)
util.Direction.$VALUES.getClass().getName() == orig(util.Direction.$VALUES.getClass().getName())
util.Direction.$VALUES[] == orig(util.Direction.$VALUES[])
util.Direction.$VALUES[].symbol == orig(util.Direction.$VALUES[].symbol)
util.Direction.$VALUES[].representation == orig(util.Direction.$VALUES[].representation)
this.curPos.xCord.number == arg0.xCord.number
this.curPos.yCord.number == arg0.yCord.number
util.Robot.penDown == orig(util.Robot.penDown)
arg0.dir == orig(arg0.dir)
arg0.dir.symbol == orig(arg0.dir.symbol)
arg0.dir.symbol.toString == orig(arg0.dir.symbol.toString)
arg0.dir.representation == orig(arg0.dir.representation)
arg0.dir.representation.toString == orig(arg0.dir.representation.toString)
arg0.xCord == orig(arg0.xCord)
arg0.xCord.number == orig(arg0.xCord.number)
arg0.yCord == orig(arg0.yCord)
arg0.yCord.number == orig(arg0.yCord.number)
this.varDecls has only one value
this.curPos has only one value
arg0.xCord.number != arg0.yCord.number
arg0.xCord.number != orig(this.curPos.yCord.number)
arg0.yCord.number != orig(this.curPos.xCord.number)
Exiting Daikon.
