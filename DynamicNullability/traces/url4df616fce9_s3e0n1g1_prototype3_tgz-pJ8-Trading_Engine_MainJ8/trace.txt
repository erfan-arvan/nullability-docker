Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 13 times.  Unmatched entries are ignored!
Unterminated calls:
  Trading_Engine.Main.main(java.lang.String[]) : 1 invocation
  org.junit.internal.runners.statements.InvokeMethod.evaluate() : 2 invocations
  org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]) : 2 invocations
  org.junit.internal.runners.model.ReflectiveCallable.run() : 2 invocations
  org.junit.runners.model.FrameworkMethod$1.runReflectiveCall() : 2 invocations
  Test.myDatabaseTest.testInsertSmallData() : 1 invocation
  org.junit.internal.runners.statements.FailOnTimeout.evaluate() : 1 invocation
  Test.myDatabaseTest.testInsertLargeData() : 1 invocation
  gui.Mainmenu.Mainmenu(Trading_Engine.myDatabase, org.junit.runner.Result) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

missing variables in newEnterExitRel:
  parent = org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException):::ENTER
  child = org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@1ac17b24
parent varinfos missing from parent_to_child_map:
   this.fNotifier.fListeners[org.junit.internal.AssumptionViolatedException.serialVersionUID]
   this.fNotifier.fListeners[org.junit.internal.AssumptionViolatedException.serialVersionUID-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.internal.AssumptionViolatedException.serialVersionUID]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.internal.AssumptionViolatedException.serialVersionUID-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.internal.AssumptionViolatedException.serialVersionUID]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.internal.AssumptionViolatedException.serialVersionUID-1]
   this.fDescription.fChildren[org.junit.internal.AssumptionViolatedException.serialVersionUID]
   this.fDescription.fChildren[org.junit.internal.AssumptionViolatedException.serialVersionUID-1]
   this.fDescription.fAnnotations[org.junit.internal.AssumptionViolatedException.serialVersionUID]
   this.fDescription.fAnnotations[org.junit.internal.AssumptionViolatedException.serialVersionUID-1]
rel.parent_to_child_map:
    this => orig(this)
    this.fNotifier => orig(this.fNotifier)
    this.fNotifier.fListeners => orig(this.fNotifier.fListeners)
    this.fNotifier.fListeners[..] => orig(this.fNotifier.fListeners[..])
    this.fNotifier.fListeners[..].getClass().getName() => orig(this.fNotifier.fListeners[..].getClass().getName())
    this.fNotifier.fListeners.getClass().getName() => orig(this.fNotifier.fListeners.getClass().getName())
    this.fNotifier.fPleaseStop => orig(this.fNotifier.fPleaseStop)
    this.fDescription => orig(this.fDescription)
    org.junit.runner.Description.EMPTY => orig(org.junit.runner.Description.EMPTY)
    org.junit.runner.Description.TEST_MECHANISM => orig(org.junit.runner.Description.TEST_MECHANISM)
    org.junit.runner.Description.EMPTY.fChildren => orig(org.junit.runner.Description.EMPTY.fChildren)
    org.junit.runner.Description.EMPTY.fChildren[..] => orig(org.junit.runner.Description.EMPTY.fChildren[..])
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    org.junit.runner.Description.EMPTY.fDisplayName => orig(org.junit.runner.Description.EMPTY.fDisplayName)
    org.junit.runner.Description.EMPTY.fDisplayName.toString => orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    org.junit.runner.Description.EMPTY.fAnnotations => orig(org.junit.runner.Description.EMPTY.fAnnotations)
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    org.junit.runner.Description.EMPTY.fAnnotations[..] => orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fChildren => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    this.fDescription.fChildren => orig(this.fDescription.fChildren)
    this.fDescription.fChildren[..] => orig(this.fDescription.fChildren[..])
    this.fDescription.fChildren[..].getClass().getName() => orig(this.fDescription.fChildren[..].getClass().getName())
    this.fDescription.fDisplayName => orig(this.fDescription.fDisplayName)
    this.fDescription.fDisplayName.toString => orig(this.fDescription.fDisplayName.toString)
    this.fDescription.fAnnotations => orig(this.fDescription.fAnnotations)
    this.fDescription.fAnnotations.getClass().getName() => orig(this.fDescription.fAnnotations.getClass().getName())
    this.fDescription.fAnnotations[..] => orig(this.fDescription.fAnnotations[..])
    this.fDescription.fAnnotations[..].getClass().getName() => orig(this.fDescription.fAnnotations[..].getClass().getName())
    e => orig(e)
    org.junit.internal.AssumptionViolatedException.serialVersionUID => org.junit.internal.AssumptionViolatedException.serialVersionUID
    e.fValue => orig(e.fValue)
    e.fValue.getClass().getName() => orig(e.fValue.getClass().getName())
    e.fMatcher => orig(e.fMatcher)
    e.fMatcher.getClass().getName() => orig(e.fMatcher.getClass().getName())
    size(this.fNotifier.fListeners[..]) => orig(size(this.fNotifier.fListeners[..]))
    size(this.fNotifier.fListeners[..])-1 => orig(size(this.fNotifier.fListeners[..]))-1
    size(org.junit.runner.Description.EMPTY.fChildren[..]) => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..]) => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    size(this.fDescription.fChildren[..]) => orig(size(this.fDescription.fChildren[..]))
    size(this.fDescription.fChildren[..])-1 => orig(size(this.fDescription.fChildren[..]))-1
    size(this.fDescription.fAnnotations[..]) => orig(size(this.fDescription.fAnnotations[..]))
    size(this.fDescription.fAnnotations[..])-1 => orig(size(this.fDescription.fAnnotations[..]))-1
child.var_infos:
    this
    this.fNotifier
    this.fNotifier.fListeners
    this.fNotifier.fListeners[..]
    this.fNotifier.fListeners[..].getClass().getName()
    this.fNotifier.fListeners.getClass().getName()
    this.fNotifier.fPleaseStop
    this.fDescription
    org.junit.runner.Description.EMPTY
    org.junit.runner.Description.TEST_MECHANISM
    org.junit.runner.Description.EMPTY.fChildren
    org.junit.runner.Description.EMPTY.fChildren[..]
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName()
    org.junit.runner.Description.EMPTY.fDisplayName
    org.junit.runner.Description.EMPTY.fDisplayName.toString
    org.junit.runner.Description.EMPTY.fAnnotations
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
    org.junit.runner.Description.EMPTY.fAnnotations[..]
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fChildren
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..]
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName()
    this.fDescription.fChildren
    this.fDescription.fChildren[..]
    this.fDescription.fChildren[..].getClass().getName()
    this.fDescription.fDisplayName
    this.fDescription.fDisplayName.toString
    this.fDescription.fAnnotations
    this.fDescription.fAnnotations.getClass().getName()
    this.fDescription.fAnnotations[..]
    this.fDescription.fAnnotations[..].getClass().getName()
    e
    org.junit.internal.AssumptionViolatedException.serialVersionUID
    e.fValue
    e.fValue.getClass().getName()
    e.fMatcher
    e.fMatcher.getClass().getName()
    orig(this)
    orig(this.fNotifier)
    orig(this.fNotifier.fListeners)
    orig(this.fNotifier.fListeners[..])
    orig(this.fNotifier.fListeners[..].getClass().getName())
    orig(this.fNotifier.fListeners.getClass().getName())
    orig(this.fNotifier.fPleaseStop)
    orig(this.fDescription)
    orig(org.junit.runner.Description.EMPTY)
    orig(org.junit.runner.Description.TEST_MECHANISM)
    orig(org.junit.runner.Description.EMPTY.fChildren)
    orig(org.junit.runner.Description.EMPTY.fChildren[..])
    orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fDisplayName)
    orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    orig(org.junit.runner.Description.EMPTY.fAnnotations)
    orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    orig(this.fDescription.fChildren)
    orig(this.fDescription.fChildren[..])
    orig(this.fDescription.fChildren[..].getClass().getName())
    orig(this.fDescription.fDisplayName)
    orig(this.fDescription.fDisplayName.toString)
    orig(this.fDescription.fAnnotations)
    orig(this.fDescription.fAnnotations.getClass().getName())
    orig(this.fDescription.fAnnotations[..])
    orig(this.fDescription.fAnnotations[..].getClass().getName())
    orig(e)
    orig(e.fValue)
    orig(e.fValue.getClass().getName())
    orig(e.fMatcher)
    orig(e.fMatcher.getClass().getName())
    size(this.fNotifier.fListeners[..])
    size(this.fNotifier.fListeners[..])-1
    size(org.junit.runner.Description.EMPTY.fChildren[..])
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1
    size(this.fDescription.fChildren[..])
    size(this.fDescription.fChildren[..])-1
    size(this.fDescription.fAnnotations[..])
    size(this.fDescription.fAnnotations[..])-1
    orig(size(this.fNotifier.fListeners[..]))
    orig(size(this.fNotifier.fListeners[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    orig(size(this.fDescription.fChildren[..]))
    orig(size(this.fDescription.fChildren[..]))-1
    orig(size(this.fDescription.fAnnotations[..]))
    orig(size(this.fDescription.fAnnotations[..]))-1
End of diagnostics for newEnterExitRel(org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException):::ENTER, org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
  child = org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@2abe27f7
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
rel.parent_to_child_map:
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER, org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.testAssumptionFailure(org.junit.runner.notification.Failure):::ENTER
  child = org.junit.runner.Result$Listener.testAssumptionFailure(org.junit.runner.notification.Failure):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@5cf0e072
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fRunTime]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fRunTime-1]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fRunTime]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fStartTime]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fStartTime-1]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fStartTime]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    failure => orig(failure)
    failure.fDescription => orig(failure.fDescription)
    org.junit.runner.Description.EMPTY => orig(org.junit.runner.Description.EMPTY)
    org.junit.runner.Description.TEST_MECHANISM => orig(org.junit.runner.Description.TEST_MECHANISM)
    failure.fDescription.fChildren => orig(failure.fDescription.fChildren)
    failure.fDescription.fChildren[..] => orig(failure.fDescription.fChildren[..])
    failure.fDescription.fChildren[..].getClass().getName() => orig(failure.fDescription.fChildren[..].getClass().getName())
    failure.fDescription.fDisplayName => orig(failure.fDescription.fDisplayName)
    failure.fDescription.fDisplayName.toString => orig(failure.fDescription.fDisplayName.toString)
    failure.fDescription.fAnnotations => orig(failure.fDescription.fAnnotations)
    failure.fDescription.fAnnotations.getClass().getName() => orig(failure.fDescription.fAnnotations.getClass().getName())
    failure.fDescription.fAnnotations[..] => orig(failure.fDescription.fAnnotations[..])
    failure.fDescription.fAnnotations[..].getClass().getName() => orig(failure.fDescription.fAnnotations[..].getClass().getName())
    failure.fThrownException => orig(failure.fThrownException)
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    size(failure.fDescription.fChildren[..]) => orig(size(failure.fDescription.fChildren[..]))
    size(failure.fDescription.fChildren[..])-1 => orig(size(failure.fDescription.fChildren[..]))-1
    size(failure.fDescription.fAnnotations[..]) => orig(size(failure.fDescription.fAnnotations[..]))
    size(failure.fDescription.fAnnotations[..])-1 => orig(size(failure.fDescription.fAnnotations[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    failure
    failure.fDescription
    org.junit.runner.Description.EMPTY
    org.junit.runner.Description.TEST_MECHANISM
    failure.fDescription.fChildren
    failure.fDescription.fChildren[..]
    failure.fDescription.fChildren[..].getClass().getName()
    failure.fDescription.fDisplayName
    failure.fDescription.fDisplayName.toString
    failure.fDescription.fAnnotations
    failure.fDescription.fAnnotations.getClass().getName()
    failure.fDescription.fAnnotations[..]
    failure.fDescription.fAnnotations[..].getClass().getName()
    failure.fThrownException
    orig(this)
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    orig(failure)
    orig(failure.fDescription)
    orig(org.junit.runner.Description.EMPTY)
    orig(org.junit.runner.Description.TEST_MECHANISM)
    orig(failure.fDescription.fChildren)
    orig(failure.fDescription.fChildren[..])
    orig(failure.fDescription.fChildren[..].getClass().getName())
    orig(failure.fDescription.fDisplayName)
    orig(failure.fDescription.fDisplayName.toString)
    orig(failure.fDescription.fAnnotations)
    orig(failure.fDescription.fAnnotations.getClass().getName())
    orig(failure.fDescription.fAnnotations[..])
    orig(failure.fDescription.fAnnotations[..].getClass().getName())
    orig(failure.fThrownException)
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    size(failure.fDescription.fChildren[..])
    size(failure.fDescription.fChildren[..])-1
    size(failure.fDescription.fAnnotations[..])
    size(failure.fDescription.fAnnotations[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    orig(size(failure.fDescription.fChildren[..]))
    orig(size(failure.fDescription.fChildren[..]))-1
    orig(size(failure.fDescription.fAnnotations[..]))
    orig(size(failure.fDescription.fAnnotations[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.testAssumptionFailure(org.junit.runner.notification.Failure):::ENTER, org.junit.runner.Result$Listener.testAssumptionFailure(org.junit.runner.notification.Failure):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::ENTER
  child = org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@269777ed
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fRunTime]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fRunTime-1]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fRunTime]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fStartTime]
   failure.fDescription.fChildren[org.junit.runner.Result.this.fStartTime-1]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fStartTime]
   failure.fDescription.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    failure => orig(failure)
    failure.fDescription => orig(failure.fDescription)
    org.junit.runner.Description.EMPTY => orig(org.junit.runner.Description.EMPTY)
    org.junit.runner.Description.TEST_MECHANISM => orig(org.junit.runner.Description.TEST_MECHANISM)
    failure.fDescription.fChildren => orig(failure.fDescription.fChildren)
    failure.fDescription.fChildren[..] => orig(failure.fDescription.fChildren[..])
    failure.fDescription.fChildren[..].getClass().getName() => orig(failure.fDescription.fChildren[..].getClass().getName())
    failure.fDescription.fDisplayName => orig(failure.fDescription.fDisplayName)
    failure.fDescription.fDisplayName.toString => orig(failure.fDescription.fDisplayName.toString)
    failure.fDescription.fAnnotations => orig(failure.fDescription.fAnnotations)
    failure.fDescription.fAnnotations.getClass().getName() => orig(failure.fDescription.fAnnotations.getClass().getName())
    failure.fDescription.fAnnotations[..] => orig(failure.fDescription.fAnnotations[..])
    failure.fDescription.fAnnotations[..].getClass().getName() => orig(failure.fDescription.fAnnotations[..].getClass().getName())
    failure.fThrownException => orig(failure.fThrownException)
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    size(failure.fDescription.fChildren[..]) => orig(size(failure.fDescription.fChildren[..]))
    size(failure.fDescription.fChildren[..])-1 => orig(size(failure.fDescription.fChildren[..]))-1
    size(failure.fDescription.fAnnotations[..]) => orig(size(failure.fDescription.fAnnotations[..]))
    size(failure.fDescription.fAnnotations[..])-1 => orig(size(failure.fDescription.fAnnotations[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    failure
    failure.fDescription
    org.junit.runner.Description.EMPTY
    org.junit.runner.Description.TEST_MECHANISM
    failure.fDescription.fChildren
    failure.fDescription.fChildren[..]
    failure.fDescription.fChildren[..].getClass().getName()
    failure.fDescription.fDisplayName
    failure.fDescription.fDisplayName.toString
    failure.fDescription.fAnnotations
    failure.fDescription.fAnnotations.getClass().getName()
    failure.fDescription.fAnnotations[..]
    failure.fDescription.fAnnotations[..].getClass().getName()
    failure.fThrownException
    orig(this)
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    orig(failure)
    orig(failure.fDescription)
    orig(org.junit.runner.Description.EMPTY)
    orig(org.junit.runner.Description.TEST_MECHANISM)
    orig(failure.fDescription.fChildren)
    orig(failure.fDescription.fChildren[..])
    orig(failure.fDescription.fChildren[..].getClass().getName())
    orig(failure.fDescription.fDisplayName)
    orig(failure.fDescription.fDisplayName.toString)
    orig(failure.fDescription.fAnnotations)
    orig(failure.fDescription.fAnnotations.getClass().getName())
    orig(failure.fDescription.fAnnotations[..])
    orig(failure.fDescription.fAnnotations[..].getClass().getName())
    orig(failure.fThrownException)
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    size(failure.fDescription.fChildren[..])
    size(failure.fDescription.fChildren[..])-1
    size(failure.fDescription.fAnnotations[..])
    size(failure.fDescription.fAnnotations[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    orig(size(failure.fDescription.fChildren[..]))
    orig(size(failure.fDescription.fChildren[..]))-1
    orig(size(failure.fDescription.fAnnotations[..]))
    orig(size(failure.fDescription.fAnnotations[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::ENTER, org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
  child = org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@576a3075
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   description.fChildren[org.junit.runner.Result.this.fRunTime]
   description.fChildren[org.junit.runner.Result.this.fRunTime-1]
   description.fAnnotations[org.junit.runner.Result.this.fRunTime]
   description.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
   description.fChildren[org.junit.runner.Result.this.fStartTime]
   description.fChildren[org.junit.runner.Result.this.fStartTime-1]
   description.fAnnotations[org.junit.runner.Result.this.fStartTime]
   description.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    description => orig(description)
    org.junit.runner.Description.EMPTY => orig(org.junit.runner.Description.EMPTY)
    org.junit.runner.Description.TEST_MECHANISM => orig(org.junit.runner.Description.TEST_MECHANISM)
    org.junit.runner.Description.EMPTY.fChildren => orig(org.junit.runner.Description.EMPTY.fChildren)
    org.junit.runner.Description.EMPTY.fChildren[..] => orig(org.junit.runner.Description.EMPTY.fChildren[..])
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    org.junit.runner.Description.EMPTY.fDisplayName => orig(org.junit.runner.Description.EMPTY.fDisplayName)
    org.junit.runner.Description.EMPTY.fDisplayName.toString => orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    org.junit.runner.Description.EMPTY.fAnnotations => orig(org.junit.runner.Description.EMPTY.fAnnotations)
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    org.junit.runner.Description.EMPTY.fAnnotations[..] => orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fChildren => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    description.fChildren => orig(description.fChildren)
    description.fChildren[..] => orig(description.fChildren[..])
    description.fChildren[..].getClass().getName() => orig(description.fChildren[..].getClass().getName())
    description.fDisplayName => orig(description.fDisplayName)
    description.fDisplayName.toString => orig(description.fDisplayName.toString)
    description.fAnnotations => orig(description.fAnnotations)
    description.fAnnotations.getClass().getName() => orig(description.fAnnotations.getClass().getName())
    description.fAnnotations[..] => orig(description.fAnnotations[..])
    description.fAnnotations[..].getClass().getName() => orig(description.fAnnotations[..].getClass().getName())
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    size(org.junit.runner.Description.EMPTY.fChildren[..]) => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..]) => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    size(description.fChildren[..]) => orig(size(description.fChildren[..]))
    size(description.fChildren[..])-1 => orig(size(description.fChildren[..]))-1
    size(description.fAnnotations[..]) => orig(size(description.fAnnotations[..]))
    size(description.fAnnotations[..])-1 => orig(size(description.fAnnotations[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    description
    org.junit.runner.Description.EMPTY
    org.junit.runner.Description.TEST_MECHANISM
    org.junit.runner.Description.EMPTY.fChildren
    org.junit.runner.Description.EMPTY.fChildren[..]
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName()
    org.junit.runner.Description.EMPTY.fDisplayName
    org.junit.runner.Description.EMPTY.fDisplayName.toString
    org.junit.runner.Description.EMPTY.fAnnotations
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
    org.junit.runner.Description.EMPTY.fAnnotations[..]
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fChildren
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..]
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName()
    description.fChildren
    description.fChildren[..]
    description.fChildren[..].getClass().getName()
    description.fDisplayName
    description.fDisplayName.toString
    description.fAnnotations
    description.fAnnotations.getClass().getName()
    description.fAnnotations[..]
    description.fAnnotations[..].getClass().getName()
    orig(this)
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    orig(description)
    orig(org.junit.runner.Description.EMPTY)
    orig(org.junit.runner.Description.TEST_MECHANISM)
    orig(org.junit.runner.Description.EMPTY.fChildren)
    orig(org.junit.runner.Description.EMPTY.fChildren[..])
    orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fDisplayName)
    orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    orig(org.junit.runner.Description.EMPTY.fAnnotations)
    orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    orig(description.fChildren)
    orig(description.fChildren[..])
    orig(description.fChildren[..].getClass().getName())
    orig(description.fDisplayName)
    orig(description.fDisplayName.toString)
    orig(description.fAnnotations)
    orig(description.fAnnotations.getClass().getName())
    orig(description.fAnnotations[..])
    orig(description.fAnnotations[..].getClass().getName())
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    size(org.junit.runner.Description.EMPTY.fChildren[..])
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1
    size(description.fChildren[..])
    size(description.fChildren[..])-1
    size(description.fAnnotations[..])
    size(description.fAnnotations[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    orig(size(description.fChildren[..]))
    orig(size(description.fChildren[..]))-1
    orig(size(description.fAnnotations[..]))
    orig(size(description.fAnnotations[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER, org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description):::ENTER
  child = org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@24746537
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   description.fChildren[org.junit.runner.Result.this.fRunTime]
   description.fChildren[org.junit.runner.Result.this.fRunTime-1]
   description.fAnnotations[org.junit.runner.Result.this.fRunTime]
   description.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
   description.fChildren[org.junit.runner.Result.this.fStartTime]
   description.fChildren[org.junit.runner.Result.this.fStartTime-1]
   description.fAnnotations[org.junit.runner.Result.this.fStartTime]
   description.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    description => orig(description)
    org.junit.runner.Description.EMPTY => orig(org.junit.runner.Description.EMPTY)
    org.junit.runner.Description.TEST_MECHANISM => orig(org.junit.runner.Description.TEST_MECHANISM)
    org.junit.runner.Description.EMPTY.fChildren => orig(org.junit.runner.Description.EMPTY.fChildren)
    org.junit.runner.Description.EMPTY.fChildren[..] => orig(org.junit.runner.Description.EMPTY.fChildren[..])
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    org.junit.runner.Description.EMPTY.fDisplayName => orig(org.junit.runner.Description.EMPTY.fDisplayName)
    org.junit.runner.Description.EMPTY.fDisplayName.toString => orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    org.junit.runner.Description.EMPTY.fAnnotations => orig(org.junit.runner.Description.EMPTY.fAnnotations)
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    org.junit.runner.Description.EMPTY.fAnnotations[..] => orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fChildren => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    description.fChildren => orig(description.fChildren)
    description.fChildren[..] => orig(description.fChildren[..])
    description.fChildren[..].getClass().getName() => orig(description.fChildren[..].getClass().getName())
    description.fDisplayName => orig(description.fDisplayName)
    description.fDisplayName.toString => orig(description.fDisplayName.toString)
    description.fAnnotations => orig(description.fAnnotations)
    description.fAnnotations.getClass().getName() => orig(description.fAnnotations.getClass().getName())
    description.fAnnotations[..] => orig(description.fAnnotations[..])
    description.fAnnotations[..].getClass().getName() => orig(description.fAnnotations[..].getClass().getName())
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    size(org.junit.runner.Description.EMPTY.fChildren[..]) => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..]) => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    size(description.fChildren[..]) => orig(size(description.fChildren[..]))
    size(description.fChildren[..])-1 => orig(size(description.fChildren[..]))-1
    size(description.fAnnotations[..]) => orig(size(description.fAnnotations[..]))
    size(description.fAnnotations[..])-1 => orig(size(description.fAnnotations[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    description
    org.junit.runner.Description.EMPTY
    org.junit.runner.Description.TEST_MECHANISM
    org.junit.runner.Description.EMPTY.fChildren
    org.junit.runner.Description.EMPTY.fChildren[..]
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName()
    org.junit.runner.Description.EMPTY.fDisplayName
    org.junit.runner.Description.EMPTY.fDisplayName.toString
    org.junit.runner.Description.EMPTY.fAnnotations
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
    org.junit.runner.Description.EMPTY.fAnnotations[..]
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fChildren
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..]
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName()
    description.fChildren
    description.fChildren[..]
    description.fChildren[..].getClass().getName()
    description.fDisplayName
    description.fDisplayName.toString
    description.fAnnotations
    description.fAnnotations.getClass().getName()
    description.fAnnotations[..]
    description.fAnnotations[..].getClass().getName()
    orig(this)
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    orig(description)
    orig(org.junit.runner.Description.EMPTY)
    orig(org.junit.runner.Description.TEST_MECHANISM)
    orig(org.junit.runner.Description.EMPTY.fChildren)
    orig(org.junit.runner.Description.EMPTY.fChildren[..])
    orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fDisplayName)
    orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    orig(org.junit.runner.Description.EMPTY.fAnnotations)
    orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    orig(description.fChildren)
    orig(description.fChildren[..])
    orig(description.fChildren[..].getClass().getName())
    orig(description.fDisplayName)
    orig(description.fDisplayName.toString)
    orig(description.fAnnotations)
    orig(description.fAnnotations.getClass().getName())
    orig(description.fAnnotations[..])
    orig(description.fAnnotations[..].getClass().getName())
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    size(org.junit.runner.Description.EMPTY.fChildren[..])
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1
    size(description.fChildren[..])
    size(description.fChildren[..])-1
    size(description.fAnnotations[..])
    size(description.fAnnotations[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    orig(size(description.fChildren[..]))
    orig(size(description.fChildren[..]))-1
    orig(size(description.fAnnotations[..]))
    orig(size(description.fAnnotations[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description):::ENTER, org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
  child = org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@56ca2379
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Result.this.fFailures[result.fRunTime]
   org.junit.runner.Result.this.fFailures[result.fRunTime-1]
   org.junit.runner.Result.this.fFailures[result.fStartTime]
   org.junit.runner.Result.this.fFailures[result.fStartTime-1]
   result.fFailures[org.junit.runner.Result.this.fRunTime]
   result.fFailures[org.junit.runner.Result.this.fRunTime-1]
   result.fFailures[org.junit.runner.Result.this.fStartTime]
   result.fFailures[org.junit.runner.Result.this.fStartTime-1]
   result.fFailures[result.fRunTime]
   result.fFailures[result.fRunTime-1]
   result.fFailures[result.fStartTime]
   result.fFailures[result.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    result => orig(result)
    result.fCount => orig(result.fCount)
    result.fIgnoreCount => orig(result.fIgnoreCount)
    result.fFailures => orig(result.fFailures)
    result.fFailures[..] => orig(result.fFailures[..])
    result.fFailures[..].getClass().getName() => orig(result.fFailures[..].getClass().getName())
    result.fFailures.getClass().getName() => orig(result.fFailures.getClass().getName())
    result.fRunTime => orig(result.fRunTime)
    result.fStartTime => orig(result.fStartTime)
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    size(result.fFailures[..]) => orig(size(result.fFailures[..]))
    size(result.fFailures[..])-1 => orig(size(result.fFailures[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    result
    result.fCount
    result.fIgnoreCount
    result.fFailures
    result.fFailures[..]
    result.fFailures[..].getClass().getName()
    result.fFailures.getClass().getName()
    result.fRunTime
    result.fStartTime
    orig(this)
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    orig(result)
    orig(result.fCount)
    orig(result.fIgnoreCount)
    orig(result.fFailures)
    orig(result.fFailures[..])
    orig(result.fFailures[..].getClass().getName())
    orig(result.fFailures.getClass().getName())
    orig(result.fRunTime)
    orig(result.fStartTime)
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    size(result.fFailures[..])
    size(result.fFailures[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    orig(size(result.fFailures[..]))
    orig(size(result.fFailures[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER, org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
  child = org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@33e7f738
parent varinfos missing from parent_to_child_map:
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Result.this.fFailures[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fRunTime]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   description.fChildren[org.junit.runner.Result.this.fRunTime]
   description.fChildren[org.junit.runner.Result.this.fRunTime-1]
   description.fAnnotations[org.junit.runner.Result.this.fRunTime]
   description.fAnnotations[org.junit.runner.Result.this.fRunTime-1]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.EMPTY.fChildren[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.EMPTY.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.TEST_MECHANISM.fChildren[org.junit.runner.Result.this.fStartTime-1]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fStartTime]
   org.junit.runner.Description.TEST_MECHANISM.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
   description.fChildren[org.junit.runner.Result.this.fStartTime]
   description.fChildren[org.junit.runner.Result.this.fStartTime-1]
   description.fAnnotations[org.junit.runner.Result.this.fStartTime]
   description.fAnnotations[org.junit.runner.Result.this.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    org.junit.runner.Result.this => orig(org.junit.runner.Result.this)
    org.junit.runner.Result.this.fCount => orig(org.junit.runner.Result.this.fCount)
    org.junit.runner.Result.this.fIgnoreCount => orig(org.junit.runner.Result.this.fIgnoreCount)
    org.junit.runner.Result.this.fFailures => orig(org.junit.runner.Result.this.fFailures)
    org.junit.runner.Result.this.fFailures[..] => orig(org.junit.runner.Result.this.fFailures[..])
    org.junit.runner.Result.this.fFailures[..].getClass().getName() => orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    org.junit.runner.Result.this.fFailures.getClass().getName() => orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    org.junit.runner.Result.this.fRunTime => orig(org.junit.runner.Result.this.fRunTime)
    org.junit.runner.Result.this.fStartTime => orig(org.junit.runner.Result.this.fStartTime)
    description => orig(description)
    org.junit.runner.Description.EMPTY => orig(org.junit.runner.Description.EMPTY)
    org.junit.runner.Description.TEST_MECHANISM => orig(org.junit.runner.Description.TEST_MECHANISM)
    org.junit.runner.Description.EMPTY.fChildren => orig(org.junit.runner.Description.EMPTY.fChildren)
    org.junit.runner.Description.EMPTY.fChildren[..] => orig(org.junit.runner.Description.EMPTY.fChildren[..])
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    org.junit.runner.Description.EMPTY.fDisplayName => orig(org.junit.runner.Description.EMPTY.fDisplayName)
    org.junit.runner.Description.EMPTY.fDisplayName.toString => orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    org.junit.runner.Description.EMPTY.fAnnotations => orig(org.junit.runner.Description.EMPTY.fAnnotations)
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    org.junit.runner.Description.EMPTY.fAnnotations[..] => orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fChildren => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString => orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..] => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName() => orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    description.fChildren => orig(description.fChildren)
    description.fChildren[..] => orig(description.fChildren[..])
    description.fChildren[..].getClass().getName() => orig(description.fChildren[..].getClass().getName())
    description.fDisplayName => orig(description.fDisplayName)
    description.fDisplayName.toString => orig(description.fDisplayName.toString)
    description.fAnnotations => orig(description.fAnnotations)
    description.fAnnotations.getClass().getName() => orig(description.fAnnotations.getClass().getName())
    description.fAnnotations[..] => orig(description.fAnnotations[..])
    description.fAnnotations[..].getClass().getName() => orig(description.fAnnotations[..].getClass().getName())
    size(org.junit.runner.Result.this.fFailures[..]) => orig(size(org.junit.runner.Result.this.fFailures[..]))
    size(org.junit.runner.Result.this.fFailures[..])-1 => orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    size(org.junit.runner.Description.EMPTY.fChildren[..]) => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..]) => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]) => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1 => orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    size(description.fChildren[..]) => orig(size(description.fChildren[..]))
    size(description.fChildren[..])-1 => orig(size(description.fChildren[..]))-1
    size(description.fAnnotations[..]) => orig(size(description.fAnnotations[..]))
    size(description.fAnnotations[..])-1 => orig(size(description.fAnnotations[..]))-1
child.var_infos:
    this
    org.junit.runner.Result.this
    org.junit.runner.Result.this.fCount
    org.junit.runner.Result.this.fIgnoreCount
    org.junit.runner.Result.this.fFailures
    org.junit.runner.Result.this.fFailures[..]
    org.junit.runner.Result.this.fFailures[..].getClass().getName()
    org.junit.runner.Result.this.fFailures.getClass().getName()
    org.junit.runner.Result.this.fRunTime
    org.junit.runner.Result.this.fStartTime
    description
    org.junit.runner.Description.EMPTY
    org.junit.runner.Description.TEST_MECHANISM
    org.junit.runner.Description.EMPTY.fChildren
    org.junit.runner.Description.EMPTY.fChildren[..]
    org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName()
    org.junit.runner.Description.EMPTY.fDisplayName
    org.junit.runner.Description.EMPTY.fDisplayName.toString
    org.junit.runner.Description.EMPTY.fAnnotations
    org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
    org.junit.runner.Description.EMPTY.fAnnotations[..]
    org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fChildren
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..]
    org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName
    org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]
    org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName()
    description.fChildren
    description.fChildren[..]
    description.fChildren[..].getClass().getName()
    description.fDisplayName
    description.fDisplayName.toString
    description.fAnnotations
    description.fAnnotations.getClass().getName()
    description.fAnnotations[..]
    description.fAnnotations[..].getClass().getName()
    orig(this)
    orig(org.junit.runner.Result.this)
    orig(org.junit.runner.Result.this.fCount)
    orig(org.junit.runner.Result.this.fIgnoreCount)
    orig(org.junit.runner.Result.this.fFailures)
    orig(org.junit.runner.Result.this.fFailures[..])
    orig(org.junit.runner.Result.this.fFailures[..].getClass().getName())
    orig(org.junit.runner.Result.this.fFailures.getClass().getName())
    orig(org.junit.runner.Result.this.fRunTime)
    orig(org.junit.runner.Result.this.fStartTime)
    orig(description)
    orig(org.junit.runner.Description.EMPTY)
    orig(org.junit.runner.Description.TEST_MECHANISM)
    orig(org.junit.runner.Description.EMPTY.fChildren)
    orig(org.junit.runner.Description.EMPTY.fChildren[..])
    orig(org.junit.runner.Description.EMPTY.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fDisplayName)
    orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
    orig(org.junit.runner.Description.EMPTY.fAnnotations)
    orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..])
    orig(org.junit.runner.Description.EMPTY.fAnnotations[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[..].getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
    orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..].getClass().getName())
    orig(description.fChildren)
    orig(description.fChildren[..])
    orig(description.fChildren[..].getClass().getName())
    orig(description.fDisplayName)
    orig(description.fDisplayName.toString)
    orig(description.fAnnotations)
    orig(description.fAnnotations.getClass().getName())
    orig(description.fAnnotations[..])
    orig(description.fAnnotations[..].getClass().getName())
    size(org.junit.runner.Result.this.fFailures[..])
    size(org.junit.runner.Result.this.fFailures[..])-1
    size(org.junit.runner.Description.EMPTY.fChildren[..])
    size(org.junit.runner.Description.EMPTY.fChildren[..])-1
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])
    size(org.junit.runner.Description.EMPTY.fAnnotations[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..])-1
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])
    size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..])-1
    size(description.fChildren[..])
    size(description.fChildren[..])-1
    size(description.fAnnotations[..])
    size(description.fAnnotations[..])-1
    orig(size(org.junit.runner.Result.this.fFailures[..]))
    orig(size(org.junit.runner.Result.this.fFailures[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))
    orig(size(org.junit.runner.Description.EMPTY.fChildren[..]))-1
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))
    orig(size(org.junit.runner.Description.EMPTY.fAnnotations[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fChildren[..]))-1
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))
    orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[..]))-1
    orig(size(description.fChildren[..]))
    orig(size(description.fChildren[..]))-1
    orig(size(description.fAnnotations[..]))
    orig(size(description.fAnnotations[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER, org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
  child = org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@7b386734
parent varinfos missing from parent_to_child_map:
   org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fRunTime]
   org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fRunTime-1]
   org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fStartTime]
   org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fStartTime-1]
   $hidden$2.fFailures[$hidden$2.fRunTime]
   $hidden$2.fFailures[$hidden$2.fRunTime-1]
   $hidden$2.fFailures[$hidden$2.fStartTime]
   $hidden$2.fFailures[$hidden$2.fStartTime-1]
rel.parent_to_child_map:
    org.junit.runner.notification.RunNotifier.this => orig(org.junit.runner.notification.RunNotifier.this)
    org.junit.runner.notification.RunNotifier.this.fListeners => orig(org.junit.runner.notification.RunNotifier.this.fListeners)
    org.junit.runner.notification.RunNotifier.this.fListeners[..] => orig(org.junit.runner.notification.RunNotifier.this.fListeners[..])
    org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName() => orig(org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName())
    org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() => orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
    org.junit.runner.notification.RunNotifier.this.fPleaseStop => orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
    $hidden$2 => orig($hidden$2)
    $hidden$2.fCount => orig($hidden$2.fCount)
    $hidden$2.fIgnoreCount => orig($hidden$2.fIgnoreCount)
    $hidden$2.fFailures => orig($hidden$2.fFailures)
    $hidden$2.fFailures[..] => orig($hidden$2.fFailures[..])
    $hidden$2.fFailures[..].getClass().getName() => orig($hidden$2.fFailures[..].getClass().getName())
    $hidden$2.fFailures.getClass().getName() => orig($hidden$2.fFailures.getClass().getName())
    $hidden$2.fRunTime => orig($hidden$2.fRunTime)
    $hidden$2.fStartTime => orig($hidden$2.fStartTime)
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..]) => orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..])-1 => orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))-1
    size($hidden$2.fFailures[..]) => orig(size($hidden$2.fFailures[..]))
    size($hidden$2.fFailures[..])-1 => orig(size($hidden$2.fFailures[..]))-1
child.var_infos:
    this
    this.val$result
    this.val$result.fCount
    this.val$result.fIgnoreCount
    this.val$result.fFailures
    this.val$result.fFailures[..]
    this.val$result.fFailures[..].getClass().getName()
    this.val$result.fFailures.getClass().getName()
    this.val$result.fRunTime
    this.val$result.fStartTime
    org.junit.runner.notification.RunNotifier.this
    org.junit.runner.notification.RunNotifier.this.fListeners
    org.junit.runner.notification.RunNotifier.this.fListeners[..]
    org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName()
    org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
    org.junit.runner.notification.RunNotifier.this.fPleaseStop
    $hidden$2
    $hidden$2.fCount
    $hidden$2.fIgnoreCount
    $hidden$2.fFailures
    $hidden$2.fFailures[..]
    $hidden$2.fFailures[..].getClass().getName()
    $hidden$2.fFailures.getClass().getName()
    $hidden$2.fRunTime
    $hidden$2.fStartTime
    orig(org.junit.runner.notification.RunNotifier.this)
    orig(org.junit.runner.notification.RunNotifier.this.fListeners)
    orig(org.junit.runner.notification.RunNotifier.this.fListeners[..])
    orig(org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName())
    orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
    orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
    orig($hidden$2)
    orig($hidden$2.fCount)
    orig($hidden$2.fIgnoreCount)
    orig($hidden$2.fFailures)
    orig($hidden$2.fFailures[..])
    orig($hidden$2.fFailures[..].getClass().getName())
    orig($hidden$2.fFailures.getClass().getName())
    orig($hidden$2.fRunTime)
    orig($hidden$2.fStartTime)
    size(this.val$result.fFailures[..])
    size(this.val$result.fFailures[..])-1
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..])
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..])-1
    size($hidden$2.fFailures[..])
    size($hidden$2.fFailures[..])-1
    orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))
    orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))-1
    orig(size($hidden$2.fFailures[..]))
    orig(size($hidden$2.fFailures[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER, org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT)
missing variables in newEnterExitRel:
  parent = org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
  child = org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@1d0a9efc
parent varinfos missing from parent_to_child_map:
   this.val$result.fFailures[this.val$result.fRunTime]
   this.val$result.fFailures[this.val$result.fRunTime-1]
   this.val$result.fFailures[this.val$result.fStartTime]
   this.val$result.fFailures[this.val$result.fStartTime-1]
   org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fRunTime]
   org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fRunTime-1]
   org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fStartTime]
   org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fStartTime-1]
rel.parent_to_child_map:
    this => orig(this)
    this.val$result => orig(this.val$result)
    this.val$result.fCount => orig(this.val$result.fCount)
    this.val$result.fIgnoreCount => orig(this.val$result.fIgnoreCount)
    this.val$result.fFailures => orig(this.val$result.fFailures)
    this.val$result.fFailures[..] => orig(this.val$result.fFailures[..])
    this.val$result.fFailures[..].getClass().getName() => orig(this.val$result.fFailures[..].getClass().getName())
    this.val$result.fFailures.getClass().getName() => orig(this.val$result.fFailures.getClass().getName())
    this.val$result.fRunTime => orig(this.val$result.fRunTime)
    this.val$result.fStartTime => orig(this.val$result.fStartTime)
    org.junit.runner.notification.RunNotifier.this => orig(org.junit.runner.notification.RunNotifier.this)
    org.junit.runner.notification.RunNotifier.this.fListeners => orig(org.junit.runner.notification.RunNotifier.this.fListeners)
    org.junit.runner.notification.RunNotifier.this.fListeners[..] => orig(org.junit.runner.notification.RunNotifier.this.fListeners[..])
    org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName() => orig(org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName())
    org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() => orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
    org.junit.runner.notification.RunNotifier.this.fPleaseStop => orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
    each => orig(each)
    size(this.val$result.fFailures[..]) => orig(size(this.val$result.fFailures[..]))
    size(this.val$result.fFailures[..])-1 => orig(size(this.val$result.fFailures[..]))-1
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..]) => orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..])-1 => orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))-1
child.var_infos:
    this
    this.val$result
    this.val$result.fCount
    this.val$result.fIgnoreCount
    this.val$result.fFailures
    this.val$result.fFailures[..]
    this.val$result.fFailures[..].getClass().getName()
    this.val$result.fFailures.getClass().getName()
    this.val$result.fRunTime
    this.val$result.fStartTime
    org.junit.runner.notification.RunNotifier.this
    org.junit.runner.notification.RunNotifier.this.fListeners
    org.junit.runner.notification.RunNotifier.this.fListeners[..]
    org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName()
    org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
    org.junit.runner.notification.RunNotifier.this.fPleaseStop
    each
    orig(this)
    orig(this.val$result)
    orig(this.val$result.fCount)
    orig(this.val$result.fIgnoreCount)
    orig(this.val$result.fFailures)
    orig(this.val$result.fFailures[..])
    orig(this.val$result.fFailures[..].getClass().getName())
    orig(this.val$result.fFailures.getClass().getName())
    orig(this.val$result.fRunTime)
    orig(this.val$result.fStartTime)
    orig(org.junit.runner.notification.RunNotifier.this)
    orig(org.junit.runner.notification.RunNotifier.this.fListeners)
    orig(org.junit.runner.notification.RunNotifier.this.fListeners[..])
    orig(org.junit.runner.notification.RunNotifier.this.fListeners[..].getClass().getName())
    orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
    orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
    orig(each)
    size(this.val$result.fFailures[..])
    size(this.val$result.fFailures[..])-1
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..])
    size(org.junit.runner.notification.RunNotifier.this.fListeners[..])-1
    orig(size(this.val$result.fFailures[..]))
    orig(size(this.val$result.fFailures[..]))-1
    orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))
    orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[..]))-1
End of diagnostics for newEnterExitRel(org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER, org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT)
===========================================================================
Deprecated.newMomentum:::CLASS
===========================================================================
Deprecated.newMomentum:::OBJECT
this.shareQuantity == 0
this.sellReceipt != null
this.sellReceipt[] elements has only one value
this.sellReceipt[] elements != null
this.sellReceipt[].getClass().getName() elements == java.lang.Integer.class
this.sellReceipt[].getClass().getName() one of { [], [java.lang.Integer] }
this.buyReceipt != null
this.buyReceipt[] == []
this.buyReceipt[].getClass().getName() == []
this.mode one of { -1, 1 }
this.mode != 0
this.tenArray != null
this.tenArray[] elements >= 0.0
this.recording == false
this.counting >= 0
size(this.sellReceipt[]) one of { 0, 1 }
size(this.tenArray[]) == 10
===========================================================================
Deprecated.newMomentum.addTrade(double):::ENTER
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
===========================================================================
Deprecated.newMomentum.addTrade(double):::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.recording == orig(this.recording)
size(this.tenArray[]) == orig(size(this.tenArray[]))
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.counting >= 1
this.counting != orig(this.counting)
===========================================================================
Deprecated.newMomentum.generateOrderSignal(Deprecated.orderObject, Deprecated.orderObject):::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 0.0, 1.3647399257763, 2.362270789999474 }
this.tenArray has only one value
this.tenArray[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.55, 1.7, 1.1, 1.2, 1.3, 1.3, 1.32, 1.34, 1.52, 0.0], [2.52, 2.55, 2.7, 2.1, 2.2, 2.3, 2.3, 2.32, 2.34, 0.0] }
this.counting one of { 0, 2, 3 }
this.lastAverage one of { 0.0, 1.317399257763, 2.29270789999474 }
arg0.qauntity one of { -1, 10 }
arg0.price one of { -1.0, 1.7 }
arg1 has only one value
arg1.qauntity == -1
arg1.price == -1.0
===========================================================================
Deprecated.newMomentum.generateOrderSignal(Deprecated.orderObject, Deprecated.orderObject):::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.lastAverage == orig(this.lastAverage)
arg0.qauntity == orig(arg0.qauntity)
arg0.price == orig(arg0.price)
arg1.qauntity == orig(arg1.qauntity)
arg1.price == orig(arg1.price)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 0.0, 1.3647399257763, 2.362270789999474 }
this.tenArray has only one value
this.tenArray[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.55, 1.7, 1.1, 1.2, 1.3, 1.3, 1.32, 1.34, 1.52, 0.0], [2.52, 2.55, 2.7, 2.1, 2.2, 2.3, 2.3, 2.32, 2.34, 0.0] }
this.counting one of { 0, 2, 3 }
this.lastAverage one of { 0.0, 1.317399257763, 2.29270789999474 }
arg0.qauntity one of { -1, 10 }
arg0.price one of { -1.0, 1.7 }
arg1.qauntity == -1
arg1.price == -1.0
return.type.toString one of { "buy", "nothing" }
return.quantity == -1
return.price one of { -1.0, -0.999 }
===========================================================================
Deprecated.newMomentum.getAverage():::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 2.133, 2.4163 }
this.mode == -1
this.tenArray has only one value
this.tenArray[] one of { [2.7, 2.1, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0], [2.7, 2.8, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
this.lastAverage one of { 0.0, 2.133 }
===========================================================================
Deprecated.newMomentum.getAverage():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.lastAverage == orig(this.lastAverage)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 2.133, 2.4163 }
this.mode == -1
this.tenArray has only one value
this.tenArray[] one of { [2.7, 2.1, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0], [2.7, 2.8, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
this.lastAverage one of { 0.0, 2.133 }
return one of { 2.133, 2.4163 }
===========================================================================
Deprecated.newMomentum.getBuyReceipt():::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
===========================================================================
Deprecated.newMomentum.getBuyReceipt():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.lastAverage == orig(this.lastAverage)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
return has only one value
return[] == []
return[].getClass().getName() == []
===========================================================================
Deprecated.newMomentum.getSellReceipt():::ENTER
this has only one value
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
===========================================================================
Deprecated.newMomentum.getSellReceipt():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.lastAverage == orig(this.lastAverage)
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
return has only one value
return[] elements has only one value
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [], [java.lang.Integer] }
size(return[]) one of { 0, 1 }
===========================================================================
Deprecated.newMomentum.getreceiptNumber(int):::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
arg0 == 1
===========================================================================
Deprecated.newMomentum.getreceiptNumber(int):::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.lastAverage == orig(this.lastAverage)
size(this.sellReceipt[])-1 == orig(size(this.sellReceipt[]))
this.sellReceipt has only one value
this.sellReceipt[] contains no nulls and has only one value, of length 1
this.sellReceipt[].getClass().getName() == [java.lang.Integer]
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
size(this.sellReceipt[]) == 1
===========================================================================
Deprecated.newMomentum.isShareQuantityZero():::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
===========================================================================
Deprecated.newMomentum.isShareQuantityZero():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.lastAverage == orig(this.lastAverage)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
return == true
===========================================================================
Deprecated.newMomentum.isShareQuantityZero():::EXIT;condition="return == true"
===========================================================================
Deprecated.newMomentum.newMomentum():::EXIT
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.average == 0.0
this.mode == -1
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.lastAverage == 0.0
===========================================================================
Deprecated.orderObject:::OBJECT
this.qauntity one of { -1, 10 }
this.price one of { -1.0, 1.7 }
===========================================================================
Deprecated.orderObject.getPrice():::ENTER
this.qauntity == -1
this.price == -1.0
===========================================================================
Deprecated.orderObject.getPrice():::EXIT
this.qauntity == orig(this.qauntity)
this.price == orig(this.price)
this.qauntity == -1
this.price == -1.0
return == -1.0
===========================================================================
Deprecated.orderObject.getQauntity():::ENTER
this has only one value
this.qauntity == -1
this.price == -1.0
===========================================================================
Deprecated.orderObject.getQauntity():::EXIT
this.qauntity == orig(this.qauntity)
this.price == orig(this.price)
this.qauntity == -1
this.price == -1.0
return == -1
===========================================================================
Deprecated.orderObject.orderObject(int, double):::ENTER
arg0 one of { -1, 10 }
arg1 one of { -1.0, 1.7 }
===========================================================================
Deprecated.orderObject.orderObject(int, double):::EXIT
===========================================================================
Deprecated.reverseMomentum:::CLASS
===========================================================================
Deprecated.reverseMomentum:::OBJECT
this.shareQuantity == 0
this.sellReceipt != null
this.sellReceipt[] elements has only one value
this.sellReceipt[] elements != null
this.sellReceipt[].getClass().getName() elements == java.lang.Integer.class
this.sellReceipt[].getClass().getName() one of { [], [java.lang.Integer] }
this.buyReceipt != null
this.buyReceipt[] == []
this.buyReceipt[].getClass().getName() == []
this.average one of { 0.0, 2.133, 2.4163 }
this.mode == -1
this.tenArray != null
this.tenArray[] elements >= 0.0
this.recording == false
this.counting >= 0
size(this.sellReceipt[]) one of { 0, 1 }
size(this.tenArray[]) == 10
===========================================================================
Deprecated.reverseMomentum.addTrade(double):::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 0.0, 2.133 }
this.tenArray has only one value
===========================================================================
Deprecated.reverseMomentum.addTrade(double):::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.recording == orig(this.recording)
size(this.tenArray[]) == orig(size(this.tenArray[]))
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.tenArray has only one value
this.average >= orig(this.average)
this.tenArray[] > orig(this.tenArray[]) (lexically)
this.tenArray[] >= orig(this.tenArray[]) (elementwise)
this.counting != orig(this.counting)
===========================================================================
Deprecated.reverseMomentum.getAverage():::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 2.133, 2.4163 }
this.tenArray has only one value
this.tenArray[] one of { [2.7, 2.1, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0], [2.7, 2.8, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
===========================================================================
Deprecated.reverseMomentum.getAverage():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average one of { 2.133, 2.4163 }
this.tenArray has only one value
this.tenArray[] one of { [2.7, 2.1, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0], [2.7, 2.8, 2.2, 2.3, 2.3, 2.32, 2.34, 2.52, 2.55, 0.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
return one of { 2.133, 2.4163 }
===========================================================================
Deprecated.reverseMomentum.getBuyReceipt():::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
===========================================================================
Deprecated.reverseMomentum.getBuyReceipt():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
return has only one value
return[] == []
return[].getClass().getName() == []
===========================================================================
Deprecated.reverseMomentum.getSellReceipt():::ENTER
this has only one value
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
===========================================================================
Deprecated.reverseMomentum.getSellReceipt():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
return has only one value
return[] elements has only one value
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [], [java.lang.Integer] }
size(return[]) one of { 0, 1 }
===========================================================================
Deprecated.reverseMomentum.getreceiptNumber(int):::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
arg0 == 1
===========================================================================
Deprecated.reverseMomentum.getreceiptNumber(int):::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
size(this.sellReceipt[])-1 == orig(size(this.sellReceipt[]))
this.sellReceipt has only one value
this.sellReceipt[] contains no nulls and has only one value, of length 1
this.sellReceipt[].getClass().getName() == [java.lang.Integer]
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
size(this.sellReceipt[]) == 1
===========================================================================
Deprecated.reverseMomentum.isShareQuantityZero():::ENTER
this has only one value
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
===========================================================================
Deprecated.reverseMomentum.isShareQuantityZero():::EXIT
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.sellReceipt has only one value
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt has only one value
this.average == 0.0
this.tenArray has only one value
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
return == true
===========================================================================
Deprecated.reverseMomentum.isShareQuantityZero():::EXIT;condition="return == true"
===========================================================================
Deprecated.reverseMomentum.reverseMomentum():::EXIT
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.average == 0.0
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
===========================================================================
Deprecated.signalObject:::OBJECT
this.type.toString one of { "buy", "nothing" }
this.quantity == -1
this.price one of { -1.0, -0.999 }
===========================================================================
Deprecated.signalObject.getType():::ENTER
===========================================================================
Deprecated.signalObject.getType():::EXIT
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.quantity == orig(this.quantity)
this.price == orig(this.price)
return.toString one of { "buy", "nothing" }
===========================================================================
Deprecated.signalObject.signalObject(int, double, java.lang.String):::ENTER
arg0 == -1
arg1 one of { -1.0, -0.999 }
arg2.toString one of { "buy", "nothing" }
===========================================================================
Deprecated.signalObject.signalObject(int, double, java.lang.String):::EXIT
arg2.toString == orig(arg2.toString)
arg2.toString one of { "buy", "nothing" }
===========================================================================
Selecting_Algothrim.CoupleReciept:::OBJECT
this.credit == 0.0
this.debit == 0.0
this.buyList[] elements has only one value
this.buyList[].getClass().getName() elements == java.lang.Long.class
this.buyList[].getClass().getName() one of { [], [java.lang.Long] }
this.sellList[] elements has only one value
this.sellList[].getClass().getName() elements == java.lang.Long.class
this.sellList[].getClass().getName() one of { [], [java.lang.Long] }
size(this.buyList[]) one of { 0, 1 }
size(this.sellList[]) one of { 0, 1 }
===========================================================================
Selecting_Algothrim.CoupleReciept.CoupleReciept():::EXIT
this.buyList[] == []
this.buyList[].getClass().getName() == []
this.sellList[] == []
this.sellList[].getClass().getName() == []
===========================================================================
Selecting_Algothrim.CoupleReciept.setBuyList(java.util.LinkedList):::ENTER
this.buyList[] == []
this.buyList[].getClass().getName() == []
this.sellList[] == []
this.sellList[].getClass().getName() == []
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [java.lang.Long]
arg0[].getClass().getName() elements == java.lang.Long.class
size(arg0[]) == 1
===========================================================================
Selecting_Algothrim.CoupleReciept.setBuyList(java.util.LinkedList):::EXIT
this.time == orig(this.time)
this.credit == orig(this.credit)
this.debit == orig(this.debit)
this.sellList == orig(this.sellList)
this.sellList[] == orig(this.sellList[])
arg0[] == orig(arg0[])
size(this.buyList[])-1 == orig(size(this.buyList[]))
this.buyList[] contains no nulls and has only one value, of length 1
this.buyList[].getClass().getName() == [java.lang.Long]
this.sellList[] == []
this.sellList[].getClass().getName() == []
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [java.lang.Long]
arg0[].getClass().getName() elements == java.lang.Long.class
size(this.buyList[]) == 1
===========================================================================
Selecting_Algothrim.CoupleReciept.setSellList(java.util.LinkedList):::ENTER
this has only one value
this.time has only one value
this.buyList has only one value
this.buyList[] contains no nulls and has only one value, of length 1
this.buyList[].getClass().getName() == [java.lang.Long]
this.sellList has only one value
this.sellList[] == []
this.sellList[].getClass().getName() == []
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [java.lang.Long]
arg0[].getClass().getName() elements == java.lang.Long.class
size(this.buyList[]) == 1
size(arg0[]) == 1
===========================================================================
Selecting_Algothrim.CoupleReciept.setSellList(java.util.LinkedList):::EXIT
this.time == orig(this.time)
this.credit == orig(this.credit)
this.debit == orig(this.debit)
this.buyList == orig(this.buyList)
this.buyList[] == orig(this.buyList[])
arg0[] == orig(arg0[])
size(this.sellList[])-1 == orig(size(this.sellList[]))
this.time has only one value
this.buyList has only one value
this.buyList[] contains no nulls and has only one value, of length 1
this.buyList[].getClass().getName() == [java.lang.Long]
this.sellList has only one value
this.sellList[] contains no nulls and has only one value, of length 1
this.sellList[].getClass().getName() == [java.lang.Long]
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [java.lang.Long]
arg0[].getClass().getName() elements == java.lang.Long.class
size(this.buyList[]) == 1
size(this.sellList[]) == 1
===========================================================================
Selecting_Algothrim.EvaluatorLec:::OBJECT
this has only one value
this.ListOfResultsFromTrade has only one value
this.ListOfResultsFromTrade[] contains no nulls and has only one value, of length 1
this.ListOfResultsFromTrade[] elements has only one value
this.ListOfResultsFromTrade[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
this.ListOfResultsFromTrade[].getClass().getName() elements == Selecting_Algothrim.resultObjectL.class
this.tradeList has only one value
this.tradeList[] contains no nulls and has only one value, of length 9
this.tradeList[].getClass().getName() == [Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData]
this.tradeList[].getClass().getName() elements == Trading_Engine.ResultData.class
this.listOfCoupleReciept has only one value
this.listOfCoupleReciept[] contains no nulls and has only one value, of length 2
this.listOfCoupleReciept[] elements has only one value
this.listOfCoupleReciept[].getClass().getName() == [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept]
this.listOfCoupleReciept[].getClass().getName() elements == Selecting_Algothrim.CoupleReciept.class
size(this.ListOfResultsFromTrade[]) == 1
size(this.tradeList[]) == 9
size(this.listOfCoupleReciept[]) == 2
===========================================================================
Selecting_Algothrim.EvaluatorLec.EvaluatorLec(Selecting_Algothrim.lecMS, java.util.LinkedList):::ENTER
arg0 has only one value
arg0.getClass().getName() == Selecting_Algothrim.lecMSMomentum.class
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 9
arg1[].getClass().getName() == [Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData]
arg1[].getClass().getName() elements == Trading_Engine.ResultData.class
size(arg1[]) == 9
===========================================================================
Selecting_Algothrim.EvaluatorLec.EvaluatorLec(Selecting_Algothrim.lecMS, java.util.LinkedList):::EXIT
arg1[] == orig(arg1[])
arg1[] contains no nulls and has only one value, of length 9
arg1[].getClass().getName() == [Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData, Trading_Engine.ResultData]
arg1[].getClass().getName() elements == Trading_Engine.ResultData.class
===========================================================================
Selecting_Algothrim.EvaluatorLec.run():::ENTER
===========================================================================
Selecting_Algothrim.EvaluatorLec.run():::EXIT
this.ListOfResultsFromTrade == orig(this.ListOfResultsFromTrade)
this.ListOfResultsFromTrade[] == orig(this.ListOfResultsFromTrade[])
this.tradeList == orig(this.tradeList)
this.tradeList[] == orig(this.tradeList[])
this.listOfCoupleReciept == orig(this.listOfCoupleReciept)
this.listOfCoupleReciept[] == orig(this.listOfCoupleReciept[])
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
return[].getClass().getName() elements == Selecting_Algothrim.resultObjectL.class
size(return[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum:::CLASS
===========================================================================
Selecting_Algothrim.lecMSMomentum:::OBJECT
this.averageChange >= -0.07188001553203112
this.lastAverage one of { 0.0, 11.854665357689507, 12.20130002149847 }
this.shareQuantityToTrade one of { 0, 1 }
this.shareQuantityLeft one of { 0, 1 }
this.shareQuantity == 0
this.sellReceipt != null
this.sellReceipt[] == []
this.sellReceipt[].getClass().getName() == []
this.buyReceipt != null
this.buyReceipt[] == []
this.buyReceipt[].getClass().getName() == []
this.average >= 0.0
this.mode one of { -1, 1 }
this.mode != 0
this.tenArray != null
this.tenArray[] elements >= 0.0
this.recording == false
this.counting >= 0
this.epsilon one of { 0.0, 0.001 }
this.epsilonPrice == 2.0E-4
this.listOfAllReciept != null
this.listOfAllReciept[] elements != null
this.listOfAllReciept[] elements are equal
this.listOfAllReciept[].getClass().getName() elements == Selecting_Algothrim.CoupleReciept.class
this.tempTime one of { 0, 2, 6 }
this.tempTime2 one of { 0, 3 }
this.outComePercentage one of { -0.25, 0.0 }
this.tempDebit one of { 0.0, 5.0 }
this.tempCredit one of { 0.0, 4.0 }
this.tempNumberOfTrades one of { 0, 1, 2 }
this.listOfResultsFromTrade != null
this.listOfResultsFromTrade[] elements has only one value
this.listOfResultsFromTrade[] elements != null
this.listOfResultsFromTrade[].getClass().getName() elements == Selecting_Algothrim.resultObjectL.class
this.listOfResultsFromTrade[].getClass().getName() one of { [], [Selecting_Algothrim.resultObjectL] }
this.tempCR.time != null
this.tempCR.credit == 0.0
this.tempCR.debit == 0.0
this.tempCR.buyList != null
this.tempCR.buyList[] contains no nulls and has only one value, of length 1
this.tempCR.buyList[] elements has only one value
this.tempCR.buyList[] elements != null
this.tempCR.buyList[].getClass().getName() == [java.lang.Long]
this.tempCR.buyList[].getClass().getName() elements == java.lang.Long.class
this.tempCR.sellList != null
this.tempCR.sellList[] elements has only one value
this.tempCR.sellList[] elements != null
this.tempCR.sellList[].getClass().getName() elements == java.lang.Long.class
this.tempCR.sellList[].getClass().getName() one of { [], [java.lang.Long] }
size(this.tenArray[]) == 10
size(this.listOfAllReciept[]) one of { 0, 1, 2 }
size(this.listOfResultsFromTrade[]) one of { 0, 1 }
size(this.tempCR.buyList[]) == 1
size(this.tempCR.sellList[]) one of { 0, 1 }
===========================================================================
Selecting_Algothrim.lecMSMomentum.addTrade(double):::ENTER
this.averageChange one of { 0.0, Infinity }
this.lastAverage == 0.0
this.shareQuantityToTrade == 1
this.average one of { 0.0, 11.854665357689507, 12.20130002149847 }
this.epsilon == 0.0
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempTime one of { 0, 2 }
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades one of { 0, 1 }
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
size(this.listOfAllReciept[]) one of { 0, 1 }
===========================================================================
Selecting_Algothrim.lecMSMomentum.addTrade(double):::EXIT
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.recording == orig(this.recording)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR == orig(this.tempCR)
this.tempCR.time == orig(this.tempCR.time)
this.tempCR.credit == orig(this.tempCR.credit)
this.tempCR.debit == orig(this.tempCR.debit)
this.tempCR.buyList == orig(this.tempCR.buyList)
this.tempCR.buyList[] == orig(this.tempCR.buyList[])
this.tempCR.sellList == orig(this.tempCR.sellList)
this.tempCR.sellList[] == orig(this.tempCR.sellList[])
size(this.tenArray[]) == orig(size(this.tenArray[]))
this.shareQuantityToTrade == 1
this.counting >= 1
this.epsilon == 0.0
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempTime one of { 0, 2 }
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades one of { 0, 1 }
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
size(this.listOfAllReciept[]) one of { 0, 1 }
this.lastAverage >= orig(this.lastAverage)
this.counting != orig(this.counting)
===========================================================================
Selecting_Algothrim.lecMSMomentum.generateSignalList(Trading_Engine.MyBidList, Trading_Engine.MyAskList):::ENTER
this.shareQuantityToTrade == 1
this.counting >= 1
this.epsilon == 0.0
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempTime one of { 0, 2 }
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades one of { 0, 1 }
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
arg0 != null
arg0.myList != null
arg0.myList[] elements != null
arg0.myList[].getClass().getName() == [Trading_Engine.OneData]
arg0.myList[].getClass().getName() elements == Trading_Engine.OneData.class
arg0.allID != null
arg0.allID[] contains no nulls and has only one value, of length 1
arg0.allID[] elements has only one value
arg0.allID[] elements != null
arg0.allID[].getClass().getName() == [java.lang.Long]
arg0.allID[].getClass().getName() elements == java.lang.Long.class
arg0.totalError == 0
arg1 != null
arg1.myList != null
arg1.myList[] elements != null
arg1.myList[].getClass().getName() == [Trading_Engine.OneData]
arg1.myList[].getClass().getName() elements == Trading_Engine.OneData.class
arg1.allID != null
arg1.allID[] elements != null
arg1.allID[].getClass().getName() == [java.lang.Long]
arg1.allID[].getClass().getName() elements == java.lang.Long.class
arg1.totalError == 0
size(this.listOfAllReciept[]) one of { 0, 1 }
size(arg0.myList[]) == 1
size(arg0.allID[]) == 1
size(arg1.myList[]) == 1
size(arg1.allID[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.generateSignalList(Trading_Engine.MyBidList, Trading_Engine.MyAskList):::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR == orig(this.tempCR)
this.tempCR.time == orig(this.tempCR.time)
this.tempCR.credit == orig(this.tempCR.credit)
this.tempCR.debit == orig(this.tempCR.debit)
this.tempCR.buyList == orig(this.tempCR.buyList)
this.tempCR.buyList[] == orig(this.tempCR.buyList[])
this.tempCR.sellList == orig(this.tempCR.sellList)
this.tempCR.sellList[] == orig(this.tempCR.sellList[])
arg0.myList == orig(arg0.myList)
arg0.myList[] == orig(arg0.myList[])
arg0.allID == orig(arg0.allID)
arg0.allID[] == orig(arg0.allID[])
arg0.totalError == orig(arg0.totalError)
arg1.myList == orig(arg1.myList)
arg1.myList[] == orig(arg1.myList[])
arg1.allID == orig(arg1.allID)
arg1.allID[] == orig(arg1.allID[])
arg1.totalError == orig(arg1.totalError)
this.shareQuantityToTrade == 1
this.counting >= 1
this.epsilon == 0.0
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempTime one of { 0, 2 }
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades one of { 0, 1 }
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
arg0.myList != null
arg0.myList[] elements != null
arg0.myList[].getClass().getName() == [Trading_Engine.OneData]
arg0.myList[].getClass().getName() elements == Trading_Engine.OneData.class
arg0.allID != null
arg0.allID[] contains no nulls and has only one value, of length 1
arg0.allID[] elements has only one value
arg0.allID[] elements != null
arg0.allID[].getClass().getName() == [java.lang.Long]
arg0.allID[].getClass().getName() elements == java.lang.Long.class
arg0.totalError == 0
arg1.myList != null
arg1.myList[] elements != null
arg1.myList[].getClass().getName() == [Trading_Engine.OneData]
arg1.myList[].getClass().getName() elements == Trading_Engine.OneData.class
arg1.allID != null
arg1.allID[] elements != null
arg1.allID[].getClass().getName() == [java.lang.Long]
arg1.allID[].getClass().getName() elements == java.lang.Long.class
arg1.totalError == 0
return != null
return[] elements != null
return[].getClass().getName() elements == Selecting_Algothrim.signalObject.class
return[].getClass().getName() one of { [], [Selecting_Algothrim.signalObject] }
size(this.listOfAllReciept[]) one of { 0, 1 }
size(arg0.myList[]) == 1
size(arg0.allID[]) == 1
size(arg1.myList[]) == 1
size(arg1.allID[]) == 1
size(return[]) one of { 0, 1 }
===========================================================================
Selecting_Algothrim.lecMSMomentum.getAllReciept():::ENTER
this has only one value
this.averageChange == -0.07188001553203112
this.lastAverage == 12.20130002149847
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 11.324270386442189
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0]
this.counting == 2
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept has only one value
this.listOfAllReciept[] contains no nulls and has only one value, of length 2
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() == [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept]
this.tempTime == 6
this.tempTime2 == 3
this.tempAverageTime has only one value
this.outComePercentage == -0.25
this.tempDebit == 5.0
this.tempCredit == 4.0
this.tempNumberOfTrades == 2
this.listOfResultsFromTrade has only one value
this.listOfResultsFromTrade[] contains no nulls and has only one value, of length 1
this.listOfResultsFromTrade[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
this.tempCR has only one value
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] contains no nulls and has only one value, of length 1
this.tempCR.sellList[].getClass().getName() == [java.lang.Long]
size(this.listOfAllReciept[]) == 2
size(this.listOfResultsFromTrade[]) == 1
size(this.tempCR.sellList[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.getAllReciept():::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR == orig(this.tempCR)
this.tempCR.time == orig(this.tempCR.time)
this.tempCR.credit == orig(this.tempCR.credit)
this.tempCR.debit == orig(this.tempCR.debit)
this.tempCR.buyList == orig(this.tempCR.buyList)
this.tempCR.buyList[] == orig(this.tempCR.buyList[])
this.tempCR.sellList == orig(this.tempCR.sellList)
this.tempCR.sellList[] == orig(this.tempCR.sellList[])
this.averageChange == -0.07188001553203112
this.lastAverage == 12.20130002149847
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 11.324270386442189
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0]
this.counting == 2
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept has only one value
this.listOfAllReciept[] contains no nulls and has only one value, of length 2
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() == [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept]
this.tempTime == 6
this.tempTime2 == 3
this.tempAverageTime has only one value
this.outComePercentage == -0.25
this.tempDebit == 5.0
this.tempCredit == 4.0
this.tempNumberOfTrades == 2
this.listOfResultsFromTrade has only one value
this.listOfResultsFromTrade[] contains no nulls and has only one value, of length 1
this.listOfResultsFromTrade[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
this.tempCR has only one value
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] contains no nulls and has only one value, of length 1
this.tempCR.sellList[].getClass().getName() == [java.lang.Long]
return has only one value
return[] contains no nulls and has only one value, of length 2
return[] elements has only one value
return[].getClass().getName() == [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept]
return[].getClass().getName() elements == Selecting_Algothrim.CoupleReciept.class
size(this.listOfAllReciept[]) == 2
size(this.listOfResultsFromTrade[]) == 1
size(this.tempCR.sellList[]) == 1
size(return[]) == 2
===========================================================================
Selecting_Algothrim.lecMSMomentum.getReceiptList(java.util.LinkedList):::ENTER
this.averageChange one of { -0.07188001553203112, Infinity }
this.lastAverage one of { 0.0, 12.20130002149847 }
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.average one of { 11.324270386442189, 11.854665357689507, 12.20130002149847 }
this.tenArray[] one of { [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0], [23.0, 8.924378706190321, 10.444494005209169, 8.147837301186053, 9.04912085572079, 9.200080465304055, 11.20583939616565, 9.318339240844818, 9.256563606274206, 20.0], [23.0, 9.770296350562834, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
arg0[].getClass().getName() == [java.lang.Long]
arg0[].getClass().getName() elements == java.lang.Long.class
size(this.listOfAllReciept[]) one of { 0, 1 }
size(arg0[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.getReceiptList(java.util.LinkedList):::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR.time == orig(this.tempCR.time)
this.tempCR.credit == orig(this.tempCR.credit)
this.tempCR.debit == orig(this.tempCR.debit)
this.tempCR.buyList == orig(this.tempCR.buyList)
this.tempCR.buyList[].getClass().getName() == orig(this.tempCR.buyList[].getClass().getName())
arg0[] == orig(arg0[])
size(this.listOfAllReciept[])-1 == orig(size(this.listOfAllReciept[]))
size(this.tempCR.sellList[])-1 == orig(size(this.tempCR.sellList[]))
this.averageChange one of { -0.07188001553203112, Infinity }
this.lastAverage one of { 0.0, 12.20130002149847 }
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.average one of { 11.324270386442189, 11.854665357689507, 12.20130002149847 }
this.tenArray[] one of { [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0], [23.0, 8.924378706190321, 10.444494005209169, 8.147837301186053, 9.04912085572079, 9.200080465304055, 11.20583939616565, 9.318339240844818, 9.256563606274206, 20.0], [23.0, 9.770296350562834, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept[].getClass().getName() one of { [Selecting_Algothrim.CoupleReciept], [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept] }
arg0[].getClass().getName() == [java.lang.Long]
arg0[].getClass().getName() elements == java.lang.Long.class
size(this.listOfAllReciept[]) one of { 1, 2 }
this.tempCR.buyList[] == orig(this.tempCR.buyList[]) (elementwise)
this.tempCR.buyList[] is the reverse of orig(this.tempCR.buyList[])
this.tempCR.buyList[].getClass().getName() == orig(this.tempCR.buyList[].getClass().getName()) (elementwise)
===========================================================================
Selecting_Algothrim.lecMSMomentum.getResultListFromStrategy():::ENTER
this has only one value
this.averageChange == -0.07188001553203112
this.lastAverage == 12.20130002149847
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 11.324270386442189
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0]
this.counting == 2
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept has only one value
this.listOfAllReciept[] contains no nulls and has only one value, of length 2
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() == [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept]
this.tempTime == 6
this.tempTime2 == 3
this.tempAverageTime has only one value
this.outComePercentage == -0.25
this.tempDebit == 5.0
this.tempCredit == 4.0
this.tempNumberOfTrades == 2
this.listOfResultsFromTrade has only one value
this.listOfResultsFromTrade[] contains no nulls and has only one value, of length 1
this.listOfResultsFromTrade[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
this.tempCR has only one value
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] contains no nulls and has only one value, of length 1
this.tempCR.sellList[].getClass().getName() == [java.lang.Long]
size(this.listOfAllReciept[]) == 2
size(this.listOfResultsFromTrade[]) == 1
size(this.tempCR.sellList[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.getResultListFromStrategy():::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR == orig(this.tempCR)
this.tempCR.time == orig(this.tempCR.time)
this.tempCR.credit == orig(this.tempCR.credit)
this.tempCR.debit == orig(this.tempCR.debit)
this.tempCR.buyList == orig(this.tempCR.buyList)
this.tempCR.buyList[] == orig(this.tempCR.buyList[])
this.tempCR.sellList == orig(this.tempCR.sellList)
this.tempCR.sellList[] == orig(this.tempCR.sellList[])
this.averageChange == -0.07188001553203112
this.lastAverage == 12.20130002149847
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average == 11.324270386442189
this.mode == -1
this.tenArray has only one value
this.tenArray[] == [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0]
this.counting == 2
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept has only one value
this.listOfAllReciept[] contains no nulls and has only one value, of length 2
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() == [Selecting_Algothrim.CoupleReciept, Selecting_Algothrim.CoupleReciept]
this.tempTime == 6
this.tempTime2 == 3
this.tempAverageTime has only one value
this.outComePercentage == -0.25
this.tempDebit == 5.0
this.tempCredit == 4.0
this.tempNumberOfTrades == 2
this.listOfResultsFromTrade has only one value
this.listOfResultsFromTrade[] contains no nulls and has only one value, of length 1
this.listOfResultsFromTrade[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
this.tempCR has only one value
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] contains no nulls and has only one value, of length 1
this.tempCR.sellList[].getClass().getName() == [java.lang.Long]
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [Selecting_Algothrim.resultObjectL]
return[].getClass().getName() elements == Selecting_Algothrim.resultObjectL.class
size(this.listOfAllReciept[]) == 2
size(this.listOfResultsFromTrade[]) == 1
size(this.tempCR.sellList[]) == 1
size(return[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.getSTrade(java.util.LinkedList):::ENTER
this has only one value
this.averageChange one of { -0.07188001553203112, Infinity }
this.lastAverage one of { 0.0, 12.20130002149847 }
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average one of { 11.324270386442189, 12.20130002149847 }
this.tenArray has only one value
this.tenArray[] one of { [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0], [23.0, 9.770296350562834, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept has only one value
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempTime one of { 0, 2 }
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades one of { 0, 1 }
this.listOfResultsFromTrade has only one value
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
arg0[].getClass().getName() == [Trading_Engine.ResultData]
arg0[].getClass().getName() elements == Trading_Engine.ResultData.class
size(this.listOfAllReciept[]) one of { 0, 1 }
size(arg0[]) == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.getSTrade(java.util.LinkedList):::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.tempCR == orig(this.tempCR)
this.tempCR.time == orig(this.tempCR.time)
this.tempCR.credit == orig(this.tempCR.credit)
this.tempCR.debit == orig(this.tempCR.debit)
this.tempCR.buyList == orig(this.tempCR.buyList)
this.tempCR.buyList[] == orig(this.tempCR.buyList[])
this.tempCR.sellList == orig(this.tempCR.sellList)
this.tempCR.sellList[] == orig(this.tempCR.sellList[])
arg0[] == orig(arg0[])
this.averageChange one of { -0.07188001553203112, Infinity }
this.lastAverage one of { 0.0, 12.20130002149847 }
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.sellReceipt has only one value
this.buyReceipt has only one value
this.average one of { 11.324270386442189, 12.20130002149847 }
this.tenArray has only one value
this.tenArray[] one of { [23.0, 1.0, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0], [23.0, 9.770296350562834, 9.043828184803367, 11.664243386111199, 10.442652097501878, 8.738134587761557, 10.573190014027338, 10.613396611524582, 8.167258982691962, 20.0] }
this.counting one of { 1, 2 }
this.arrayIsFull == true
this.epsilon == 0.0
this.listOfAllReciept has only one value
this.listOfAllReciept[] elements has only one value
this.listOfAllReciept[].getClass().getName() one of { [], [Selecting_Algothrim.CoupleReciept] }
this.tempTime one of { 2, 6 }
this.tempDebit == 5.0
this.tempNumberOfTrades one of { 1, 2 }
this.listOfResultsFromTrade has only one value
this.tempCR.time has only one value
this.tempCR.buyList has only one value
this.tempCR.sellList has only one value
this.tempCR.sellList[] == []
this.tempCR.sellList[].getClass().getName() == []
arg0[].getClass().getName() == [Trading_Engine.ResultData]
arg0[].getClass().getName() elements == Trading_Engine.ResultData.class
size(this.listOfAllReciept[]) one of { 0, 1 }
===========================================================================
Selecting_Algothrim.lecMSMomentum.lecMSMomentum():::EXIT
this.averageChange == 0.0
this.lastAverage == 0.0
this.shareQuantityToTrade == 0
this.shareQuantityLeft == 0
this.average == 0.0
this.mode == -1
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.epsilon == 0.001
this.listOfAllReciept[] == []
this.listOfAllReciept[].getClass().getName() == []
this.tempTime == 0
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempDebit == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades == 0
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR == null
===========================================================================
Selecting_Algothrim.lecMSMomentum.setAmountToTrade(int):::ENTER
this.averageChange == 0.0
this.lastAverage == 0.0
this.shareQuantityToTrade == 0
this.shareQuantityLeft == 0
this.average == 0.0
this.mode == -1
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.epsilon == 0.0
this.listOfAllReciept[] == []
this.listOfAllReciept[].getClass().getName() == []
this.tempTime == 0
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempDebit == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades == 0
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR == null
arg0 == 1
===========================================================================
Selecting_Algothrim.lecMSMomentum.setAmountToTrade(int):::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilon == orig(this.epsilon)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR == orig(this.tempCR)
this.averageChange == 0.0
this.lastAverage == 0.0
this.shareQuantityToTrade == 1
this.shareQuantityLeft == 0
this.average == 0.0
this.mode == -1
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.epsilon == 0.0
this.listOfAllReciept[] == []
this.listOfAllReciept[].getClass().getName() == []
this.tempTime == 0
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempDebit == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades == 0
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR == null
===========================================================================
Selecting_Algothrim.lecMSMomentum.setThreShold(double):::ENTER
this.averageChange == 0.0
this.lastAverage == 0.0
this.shareQuantityToTrade == 0
this.shareQuantityLeft == 0
this.average == 0.0
this.mode == -1
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.epsilon == 0.001
this.listOfAllReciept[] == []
this.listOfAllReciept[].getClass().getName() == []
this.tempTime == 0
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempDebit == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades == 0
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR == null
arg0 == 0.0
===========================================================================
Selecting_Algothrim.lecMSMomentum.setThreShold(double):::EXIT
this.averageChange == orig(this.averageChange)
this.lastAverage == orig(this.lastAverage)
this.shareQuantityToTrade == orig(this.shareQuantityToTrade)
this.shareQuantityLeft == orig(this.shareQuantityLeft)
this.shareQuantity == orig(this.shareQuantity)
this.sellReceipt == orig(this.sellReceipt)
this.sellReceipt[] == orig(this.sellReceipt[])
this.buyReceipt == orig(this.buyReceipt)
this.buyReceipt[] == orig(this.buyReceipt[])
this.average == orig(this.average)
this.mode == orig(this.mode)
this.tenArray == orig(this.tenArray)
this.tenArray[] == orig(this.tenArray[])
this.recording == orig(this.recording)
this.counting == orig(this.counting)
this.arrayIsFull == orig(this.arrayIsFull)
this.epsilonPrice == orig(this.epsilonPrice)
this.listOfAllReciept == orig(this.listOfAllReciept)
this.listOfAllReciept[] == orig(this.listOfAllReciept[])
this.tempTime == orig(this.tempTime)
this.tempTime2 == orig(this.tempTime2)
this.tempAverageTime == orig(this.tempAverageTime)
this.outComePercentage == orig(this.outComePercentage)
this.tempDebit == orig(this.tempDebit)
this.tempCredit == orig(this.tempCredit)
this.tempNumberOfTrades == orig(this.tempNumberOfTrades)
this.listOfResultsFromTrade == orig(this.listOfResultsFromTrade)
this.listOfResultsFromTrade[] == orig(this.listOfResultsFromTrade[])
this.tempCR == orig(this.tempCR)
this.averageChange == 0.0
this.lastAverage == 0.0
this.shareQuantityToTrade == 0
this.shareQuantityLeft == 0
this.average == 0.0
this.mode == -1
this.tenArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.tenArray[] elements == 0.0
this.counting == 0
this.arrayIsFull == false
this.epsilon == 0.0
this.listOfAllReciept[] == []
this.listOfAllReciept[].getClass().getName() == []
this.tempTime == 0
this.tempTime2 == 0
this.tempAverageTime == null
this.outComePercentage == 0.0
this.tempDebit == 0.0
this.tempCredit == 0.0
this.tempNumberOfTrades == 0
this.listOfResultsFromTrade[] == []
this.listOfResultsFromTrade[].getClass().getName() == []
this.tempCR == null
===========================================================================
Selecting_Algothrim.resultObjectL:::OBJECT
this has only one value
this.time has only one value
this.percentage == -0.25
===========================================================================
Selecting_Algothrim.resultObjectL.getPercentage():::ENTER
===========================================================================
Selecting_Algothrim.resultObjectL.getPercentage():::EXIT
this.time == orig(this.time)
this.percentage == orig(this.percentage)
return == -0.25
===========================================================================
Selecting_Algothrim.resultObjectL.getTime():::ENTER
===========================================================================
Selecting_Algothrim.resultObjectL.getTime():::EXIT
this.time == orig(this.time)
this.percentage == orig(this.percentage)
return has only one value
===========================================================================
Selecting_Algothrim.resultObjectL.resultObjectL(java.sql.Time, double):::ENTER
arg0 has only one value
arg1 == -0.25
===========================================================================
Selecting_Algothrim.resultObjectL.resultObjectL(java.sql.Time, double):::EXIT
===========================================================================
Selecting_Algothrim.signalObject:::OBJECT
this.type != null
this.type.toString one of { "buy", "sell" }
this.quantity == 1
this.price one of { 4.0, 5.0 }
===========================================================================
Selecting_Algothrim.signalObject.getPrice():::ENTER
===========================================================================
Selecting_Algothrim.signalObject.getPrice():::EXIT
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.quantity == orig(this.quantity)
this.price == orig(this.price)
return one of { 4.0, 5.0 }
===========================================================================
Selecting_Algothrim.signalObject.getQuantity():::ENTER
===========================================================================
Selecting_Algothrim.signalObject.getQuantity():::EXIT
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.quantity == orig(this.quantity)
this.price == orig(this.price)
return == 1
===========================================================================
Selecting_Algothrim.signalObject.signalObject(int, double, java.lang.String):::ENTER
arg0 == 1
arg1 one of { 4.0, 5.0 }
arg2.toString one of { "buy", "sell" }
===========================================================================
Selecting_Algothrim.signalObject.signalObject(int, double, java.lang.String):::EXIT
arg2.toString == orig(arg2.toString)
arg2.toString one of { "buy", "sell" }
===========================================================================
Test.MyListTest:::OBJECT
===========================================================================
Test.MyListTest.MyListTest():::EXIT
===========================================================================
Test.MyListTest.testMyAskListSameValue():::ENTER
this has only one value
===========================================================================
Test.MyListTest.testMyAskListSameValue():::EXIT
===========================================================================
Test.MyListTest.testMyAskListSimple():::ENTER
this has only one value
===========================================================================
Test.MyListTest.testMyAskListSimple():::EXIT
===========================================================================
Test.MyListTest.testMyBidListSameValue():::ENTER
this has only one value
===========================================================================
Test.MyListTest.testMyBidListSameValue():::EXIT
===========================================================================
Test.MyListTest.testMyBidListSimple():::ENTER
this has only one value
===========================================================================
Test.MyListTest.testMyBidListSimple():::EXIT
===========================================================================
Test.MyStrategyTest:::OBJECT
this has only one value
===========================================================================
Test.MyStrategyTest.MyStrategyTest():::EXIT
===========================================================================
Test.MyStrategyTest.testStrategy():::ENTER
===========================================================================
Test.MyStrategyTest.testStrategy():::EXIT
===========================================================================
Test.TestMain:::OBJECT
===========================================================================
Test.TestMain.TestMain():::EXIT
===========================================================================
Test.TestMain.reTestAddTrade():::ENTER
this has only one value
===========================================================================
Test.TestMain.reTestAddTrade():::EXIT
===========================================================================
Test.TestMain.reTestReceipt():::ENTER
this has only one value
===========================================================================
Test.TestMain.reTestReceipt():::EXIT
===========================================================================
Test.TestMain.reTestShareQuantity():::ENTER
this has only one value
===========================================================================
Test.TestMain.reTestShareQuantity():::EXIT
===========================================================================
Test.TestMain.testAddTrade():::ENTER
this has only one value
===========================================================================
Test.TestMain.testAddTrade():::EXIT
===========================================================================
Test.TestMain.testOrderbookTable():::ENTER
this has only one value
===========================================================================
Test.TestMain.testOrderbookTable():::EXIT
===========================================================================
Test.TestMain.testReceipt():::ENTER
this has only one value
===========================================================================
Test.TestMain.testReceipt():::EXIT
===========================================================================
Test.TestMain.testShareQuantity():::ENTER
this has only one value
===========================================================================
Test.TestMain.testShareQuantity():::EXIT
===========================================================================
Test.TestMain.testSignal():::ENTER
this has only one value
===========================================================================
Test.TestMain.testSignal():::EXIT
===========================================================================
Test.TestStrategyAndEval:::OBJECT
this has only one value
===========================================================================
Test.TestStrategyAndEval.TestStrategyAndEval():::EXIT
===========================================================================
Test.TestStrategyAndEval.testSV():::ENTER
===========================================================================
Test.TestStrategyAndEval.testSV():::EXIT
===========================================================================
Test.myDatabaseTest:::CLASS
Trading_Engine.myDatabase.connection == null
Test.myDatabaseTest.myTestDB.totalMatch == 0
===========================================================================
Test.myDatabaseTest:::OBJECT
Test.myDatabaseTest.myTestDB has only one value
===========================================================================
Test.myDatabaseTest.close():::ENTER
Test.myDatabaseTest.myTestDB has only one value
===========================================================================
Test.myDatabaseTest.close():::EXIT
Test.myDatabaseTest.myTestDB == orig(Test.myDatabaseTest.myTestDB)
Trading_Engine.myDatabase.connection == orig(Trading_Engine.myDatabase.connection)
Test.myDatabaseTest.myTestDB.totalMatch == orig(Test.myDatabaseTest.myTestDB.totalMatch)
Test.myDatabaseTest.myTestDB has only one value
===========================================================================
Test.myDatabaseTest.myDatabaseTest():::EXIT
===========================================================================
Test.myDatabaseTest.setup():::ENTER
Test.myDatabaseTest.myTestDB == null
===========================================================================
Test.myDatabaseTest.setup():::EXIT
Test.myDatabaseTest.myTestDB has only one value
===========================================================================
Test.myTradeTest:::OBJECT
this has only one value
===========================================================================
Test.myTradeTest.myTradeTest():::EXIT
===========================================================================
Test.myTradeTest.test():::ENTER
===========================================================================
Test.myTradeTest.test():::EXIT
===========================================================================
Trading_Engine.MyAskList:::OBJECT
this.myList != null
this.myList[] elements != null
this.myList[].getClass().getName() elements == Trading_Engine.OneData.class
this.allID != null
this.allID[] elements != null
this.allID[].getClass().getName() elements == java.lang.Long.class
this.totalError == 0
===========================================================================
Trading_Engine.MyAskList.MyAskList():::EXIT
this.myList[] == []
this.myList[].getClass().getName() == []
this.allID[] == []
this.allID[].getClass().getName() == []
===========================================================================
Trading_Engine.MyAskList.add(long, double, int, java.sql.Time):::ENTER
arg2 one of { 3, 100 }
arg3 != null
===========================================================================
Trading_Engine.MyAskList.add(long, double, int, java.sql.Time):::EXIT
this.myList == orig(this.myList)
this.allID == orig(this.allID)
this.totalError == orig(this.totalError)
size(this.myList[])-1 == orig(size(this.myList[]))
size(this.allID[])-1 == orig(size(this.allID[]))
size(this.myList[]) >= 1
size(this.allID[]) >= 1
===========================================================================
Trading_Engine.MyAskList.get(int):::ENTER
arg0 one of { 0, 1, 7 }
size(this.myList[]) >= 1
size(this.allID[]) >= 1
===========================================================================
Trading_Engine.MyAskList.get(int):::EXIT
this.myList == orig(this.myList)
this.myList[] == orig(this.myList[])
this.allID == orig(this.allID)
this.allID[] == orig(this.allID[])
this.totalError == orig(this.totalError)
return != null
return.Vol one of { 3, 100 }
return.time != null
size(this.myList[]) >= 1
size(this.allID[]) >= 1
===========================================================================
Trading_Engine.MyAskList.getLength():::ENTER
===========================================================================
Trading_Engine.MyAskList.getLength():::EXIT
this.myList == orig(this.myList)
this.myList[] == orig(this.myList[])
this.allID == orig(this.allID)
this.allID[] == orig(this.allID[])
this.totalError == orig(this.totalError)
return >= 0
===========================================================================
Trading_Engine.MyAskList.getPosToInsert(double, int, int):::ENTER
arg1 >= 0
arg2 >= 1
===========================================================================
Trading_Engine.MyAskList.getPosToInsert(double, int, int):::EXIT
this.myList == orig(this.myList)
this.myList[] == orig(this.myList[])
this.allID == orig(this.allID)
this.allID[] == orig(this.allID[])
this.totalError == orig(this.totalError)
return >= 0
===========================================================================
Trading_Engine.MyBidList:::OBJECT
this.myList != null
this.myList[] elements != null
this.myList[].getClass().getName() elements == Trading_Engine.OneData.class
this.allID != null
this.allID[] elements != null
this.allID[].getClass().getName() elements == java.lang.Long.class
this.totalError == 0
===========================================================================
Trading_Engine.MyBidList.MyBidList():::EXIT
this.myList[] == []
this.myList[].getClass().getName() == []
this.allID[] == []
this.allID[].getClass().getName() == []
===========================================================================
Trading_Engine.MyBidList.add(long, double, int, java.sql.Time):::ENTER
arg2 one of { 5, 100 }
arg3 != null
===========================================================================
Trading_Engine.MyBidList.add(long, double, int, java.sql.Time):::EXIT
this.myList == orig(this.myList)
this.allID == orig(this.allID)
this.totalError == orig(this.totalError)
size(this.myList[])-1 == orig(size(this.myList[]))
size(this.allID[])-1 == orig(size(this.allID[]))
size(this.myList[]) >= 1
size(this.allID[]) >= 1
===========================================================================
Trading_Engine.MyBidList.get(int):::ENTER
arg0 one of { 0, 2, 8 }
size(this.myList[]) >= 1
size(this.allID[]) >= 1
===========================================================================
Trading_Engine.MyBidList.get(int):::EXIT
this.myList == orig(this.myList)
this.myList[] == orig(this.myList[])
this.allID == orig(this.allID)
this.allID[] == orig(this.allID[])
this.totalError == orig(this.totalError)
return != null
return.Vol one of { 5, 100 }
return.time != null
size(this.myList[]) >= 1
size(this.allID[]) >= 1
===========================================================================
Trading_Engine.MyBidList.getLength():::ENTER
===========================================================================
Trading_Engine.MyBidList.getLength():::EXIT
this.myList == orig(this.myList)
this.myList[] == orig(this.myList[])
this.allID == orig(this.allID)
this.allID[] == orig(this.allID[])
this.totalError == orig(this.totalError)
return >= 0
===========================================================================
Trading_Engine.MyBidList.getPosToInsert(double, int, int):::ENTER
arg1 >= 0
arg2 >= 1
===========================================================================
Trading_Engine.MyBidList.getPosToInsert(double, int, int):::EXIT
this.myList == orig(this.myList)
this.myList[] == orig(this.myList[])
this.allID == orig(this.allID)
this.allID[] == orig(this.allID[])
this.totalError == orig(this.totalError)
return >= 0
===========================================================================
Trading_Engine.OneData:::OBJECT
this.Vol one of { 3, 5, 100 }
this.time != null
===========================================================================
Trading_Engine.OneData.OneData(long, double, int, java.sql.Time):::ENTER
arg2 one of { 3, 5, 100 }
arg3 != null
===========================================================================
Trading_Engine.OneData.OneData(long, double, int, java.sql.Time):::EXIT
===========================================================================
Trading_Engine.OneData.getPrice():::ENTER
===========================================================================
Trading_Engine.OneData.getPrice():::EXIT
this.ID == orig(this.ID)
this.Price == orig(this.Price)
this.Vol == orig(this.Vol)
this.time == orig(this.time)
===========================================================================
Trading_Engine.OneData.getTime():::ENTER
this.ID one of { 30, 38 }
this.Price == 40.0
this.Vol == 100
===========================================================================
Trading_Engine.OneData.getTime():::EXIT
this.ID == orig(this.ID)
this.Price == orig(this.Price)
this.Vol == orig(this.Vol)
this.time == orig(this.time)
this.ID one of { 30, 38 }
this.Price == 40.0
this.Vol == 100
===========================================================================
Trading_Engine.OneData.getVol():::ENTER
this.ID one of { 100, 200 }
this.Price one of { 4.0, 5.0 }
this.Vol one of { 3, 5 }
===========================================================================
Trading_Engine.OneData.getVol():::EXIT
this.ID == orig(this.ID)
this.Price == orig(this.Price)
this.Vol == orig(this.Vol)
this.time == orig(this.time)
this.ID one of { 100, 200 }
this.Price one of { 4.0, 5.0 }
this.Vol one of { 3, 5 }
return one of { 3, 5 }
===========================================================================
Trading_Engine.ResultData:::OBJECT
this.BidID >= 1
this.Vol >= 1
this.time != null
===========================================================================
Trading_Engine.ResultData.ResultData(long, long, double, int, java.sql.Time):::ENTER
arg0 >= 1
arg4 != null
===========================================================================
Trading_Engine.ResultData.ResultData(long, long, double, int, java.sql.Time):::EXIT
===========================================================================
Trading_Engine.ResultData.getPrice():::ENTER
===========================================================================
Trading_Engine.ResultData.getPrice():::EXIT
this.BidID == orig(this.BidID)
this.AskID == orig(this.AskID)
this.Price == orig(this.Price)
this.Vol == orig(this.Vol)
this.time == orig(this.time)
===========================================================================
Trading_Engine.ResultData.getTime():::ENTER
this.BidID one of { 1, 2 }
this.AskID one of { 20, 21 }
this.Price one of { 4.0, 5.0 }
this.Vol == 1
===========================================================================
Trading_Engine.ResultData.getTime():::EXIT
this.BidID == orig(this.BidID)
this.AskID == orig(this.AskID)
this.Price == orig(this.Price)
this.Vol == orig(this.Vol)
this.time == orig(this.time)
this.BidID one of { 1, 2 }
this.AskID one of { 20, 21 }
this.Price one of { 4.0, 5.0 }
this.Vol == 1
===========================================================================
Trading_Engine.myDatabase:::CLASS
Trading_Engine.myDatabase.connection == null
===========================================================================
Trading_Engine.myDatabase:::OBJECT
this.totalMatch == 0
===========================================================================
Trading_Engine.myDatabase.closeDatabase():::ENTER
this has only one value
===========================================================================
Trading_Engine.myDatabase.closeDatabase():::EXIT
Trading_Engine.myDatabase.connection == orig(Trading_Engine.myDatabase.connection)
this.totalMatch == orig(this.totalMatch)
===========================================================================
Trading_Engine.myDatabase.deleteAllTables():::ENTER
===========================================================================
Trading_Engine.myDatabase.deleteAllTables():::EXIT
Trading_Engine.myDatabase.connection == orig(Trading_Engine.myDatabase.connection)
this.totalMatch == orig(this.totalMatch)
===========================================================================
Trading_Engine.myDatabase.myDatabase():::EXIT
===========================================================================
Trading_Engine.myTrade:::OBJECT
this has only one value
this.length >= 0
this.price has only one value
this.price != null
this.price[] elements != null
this.price[].getClass().getName() elements == java.lang.Double.class
===========================================================================
Trading_Engine.myTrade.addPice(java.lang.Double):::ENTER
this.length one of { 0, 1, 2 }
size(this.price[]) one of { 0, 1, 2 }
===========================================================================
Trading_Engine.myTrade.addPice(java.lang.Double):::EXIT
this.price == orig(this.price)
size(this.price[])-1 == orig(size(this.price[]))
this.length one of { 1, 2, 3 }
size(this.price[]) one of { 1, 2, 3 }
===========================================================================
Trading_Engine.myTrade.getAllPrice():::ENTER
this.length == 3
this.price[] contains no nulls and has only one value, of length 3
this.price[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
size(this.price[]) == 3
===========================================================================
Trading_Engine.myTrade.getAllPrice():::EXIT
this.length == orig(this.length)
this.price == orig(this.price)
this.price[] == orig(this.price[])
this.length == 3
this.price[] contains no nulls and has only one value, of length 3
this.price[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
return[].getClass().getName() elements == java.lang.Double.class
size(this.price[]) == 3
size(return[]) == 3
===========================================================================
Trading_Engine.myTrade.getLength():::ENTER
this.length one of { 1, 3 }
this.price[].getClass().getName() one of { [java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.price[]) one of { 1, 3 }
===========================================================================
Trading_Engine.myTrade.getLength():::EXIT
this.length == orig(this.length)
this.price == orig(this.price)
this.price[] == orig(this.price[])
this.length one of { 1, 3 }
this.price[].getClass().getName() one of { [java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double] }
return one of { 1, 3 }
size(this.price[]) one of { 1, 3 }
===========================================================================
Trading_Engine.myTrade.myTrade():::EXIT
this.length == 0
this.price[] == []
this.price[].getClass().getName() == []
===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m4 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
return has only one value
===========================================================================
com.sun.proxy.$Proxy3.value():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.value():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
return has only one value
===========================================================================
com.sun.proxy.$Proxy4:::CLASS
com.sun.proxy.$Proxy4.m1 has only one value
com.sun.proxy.$Proxy4.m2 has only one value
com.sun.proxy.$Proxy4.m4 has only one value
com.sun.proxy.$Proxy4.m0 has only one value
com.sun.proxy.$Proxy4.m3 has only one value
===========================================================================
com.sun.proxy.$Proxy4:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy4.$Proxy4(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy4.$Proxy4(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy4.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy4.annotationType():::EXIT
com.sun.proxy.$Proxy4.m1 == orig(com.sun.proxy.$Proxy4.m1)
com.sun.proxy.$Proxy4.m2 == orig(com.sun.proxy.$Proxy4.m2)
com.sun.proxy.$Proxy4.m4 == orig(com.sun.proxy.$Proxy4.m4)
com.sun.proxy.$Proxy4.m0 == orig(com.sun.proxy.$Proxy4.m0)
com.sun.proxy.$Proxy4.m3 == orig(com.sun.proxy.$Proxy4.m3)
return has only one value
===========================================================================
com.sun.proxy.$Proxy4.value():::ENTER
===========================================================================
com.sun.proxy.$Proxy4.value():::EXIT
com.sun.proxy.$Proxy4.m1 == orig(com.sun.proxy.$Proxy4.m1)
com.sun.proxy.$Proxy4.m2 == orig(com.sun.proxy.$Proxy4.m2)
com.sun.proxy.$Proxy4.m4 == orig(com.sun.proxy.$Proxy4.m4)
com.sun.proxy.$Proxy4.m0 == orig(com.sun.proxy.$Proxy4.m0)
com.sun.proxy.$Proxy4.m3 == orig(com.sun.proxy.$Proxy4.m3)
return has only one value
return.getClass().getName() == java.lang.Class[].class
return[] contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
com.sun.proxy.$Proxy5:::CLASS
com.sun.proxy.$Proxy5.m1 has only one value
com.sun.proxy.$Proxy5.m2 has only one value
com.sun.proxy.$Proxy5.m3 has only one value
com.sun.proxy.$Proxy5.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy5:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy5.$Proxy5(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy5.$Proxy5(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy5.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy5.annotationType():::EXIT
com.sun.proxy.$Proxy5.m1 == orig(com.sun.proxy.$Proxy5.m1)
com.sun.proxy.$Proxy5.m2 == orig(com.sun.proxy.$Proxy5.m2)
com.sun.proxy.$Proxy5.m3 == orig(com.sun.proxy.$Proxy5.m3)
com.sun.proxy.$Proxy5.m0 == orig(com.sun.proxy.$Proxy5.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy6:::CLASS
com.sun.proxy.$Proxy6.m1 has only one value
com.sun.proxy.$Proxy6.m2 has only one value
com.sun.proxy.$Proxy6.m3 has only one value
com.sun.proxy.$Proxy6.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy6:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy6.$Proxy6(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy6.$Proxy6(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy6.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy6.annotationType():::EXIT
com.sun.proxy.$Proxy6.m1 == orig(com.sun.proxy.$Proxy6.m1)
com.sun.proxy.$Proxy6.m2 == orig(com.sun.proxy.$Proxy6.m2)
com.sun.proxy.$Proxy6.m3 == orig(com.sun.proxy.$Proxy6.m3)
com.sun.proxy.$Proxy6.m0 == orig(com.sun.proxy.$Proxy6.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy7:::CLASS
com.sun.proxy.$Proxy7.m1 has only one value
com.sun.proxy.$Proxy7.m1 != null
com.sun.proxy.$Proxy7.m3 has only one value
com.sun.proxy.$Proxy7.m3 != null
com.sun.proxy.$Proxy7.m4 has only one value
com.sun.proxy.$Proxy7.m4 != null
com.sun.proxy.$Proxy7.m2 has only one value
com.sun.proxy.$Proxy7.m2 != null
com.sun.proxy.$Proxy7.m5 has only one value
com.sun.proxy.$Proxy7.m5 != null
com.sun.proxy.$Proxy7.m0 has only one value
com.sun.proxy.$Proxy7.m0 != null
===========================================================================
com.sun.proxy.$Proxy7:::OBJECT
===========================================================================
com.sun.proxy.$Proxy7.$Proxy7(java.lang.reflect.InvocationHandler):::ENTER
arg0 != null
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy7.$Proxy7(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy7.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy7.annotationType():::EXIT
com.sun.proxy.$Proxy7.m1 == orig(com.sun.proxy.$Proxy7.m1)
com.sun.proxy.$Proxy7.m3 == orig(com.sun.proxy.$Proxy7.m3)
com.sun.proxy.$Proxy7.m4 == orig(com.sun.proxy.$Proxy7.m4)
com.sun.proxy.$Proxy7.m2 == orig(com.sun.proxy.$Proxy7.m2)
com.sun.proxy.$Proxy7.m5 == orig(com.sun.proxy.$Proxy7.m5)
com.sun.proxy.$Proxy7.m0 == orig(com.sun.proxy.$Proxy7.m0)
return has only one value
return != null
===========================================================================
com.sun.proxy.$Proxy7.expected():::ENTER
===========================================================================
com.sun.proxy.$Proxy7.expected():::EXIT
com.sun.proxy.$Proxy7.m1 == orig(com.sun.proxy.$Proxy7.m1)
com.sun.proxy.$Proxy7.m3 == orig(com.sun.proxy.$Proxy7.m3)
com.sun.proxy.$Proxy7.m4 == orig(com.sun.proxy.$Proxy7.m4)
com.sun.proxy.$Proxy7.m2 == orig(com.sun.proxy.$Proxy7.m2)
com.sun.proxy.$Proxy7.m5 == orig(com.sun.proxy.$Proxy7.m5)
com.sun.proxy.$Proxy7.m0 == orig(com.sun.proxy.$Proxy7.m0)
return has only one value
return != null
===========================================================================
com.sun.proxy.$Proxy7.timeout():::ENTER
===========================================================================
com.sun.proxy.$Proxy7.timeout():::EXIT
com.sun.proxy.$Proxy7.m1 == orig(com.sun.proxy.$Proxy7.m1)
com.sun.proxy.$Proxy7.m3 == orig(com.sun.proxy.$Proxy7.m3)
com.sun.proxy.$Proxy7.m4 == orig(com.sun.proxy.$Proxy7.m4)
com.sun.proxy.$Proxy7.m2 == orig(com.sun.proxy.$Proxy7.m2)
com.sun.proxy.$Proxy7.m5 == orig(com.sun.proxy.$Proxy7.m5)
com.sun.proxy.$Proxy7.m0 == orig(com.sun.proxy.$Proxy7.m0)
return one of { 0, 900 }
===========================================================================
gui.FinalOrderbookTable:::OBJECT
this has only one value
this.columnNames has only one value
this.columnNames != null
this.columnNames.getClass().getName() == java.lang.String[].class
this.columnNames[] contains no nulls and has only one value, of length 5
this.columnNames[] elements != null
this.columnNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.columnNames[].getClass().getName() elements == java.lang.String.class
this.columnNames[].toString == [BidID, AskId, Price, Volume, Timestamp]
this.data2 != null
this.data2[] elements has only one value
this.data2[] elements != null
this.data2[].getClass().getName() elements == java.lang.Object[].class
size(this.columnNames[]) == 5
===========================================================================
gui.FinalOrderbookTable.FinalOrderbookTable():::EXIT
this.data2 has only one value
this.data2[] == []
this.data2[].getClass().getName() == []
===========================================================================
gui.FinalOrderbookTable.addElement(java.lang.Object[]):::ENTER
this.data2 has only one value
arg0 has only one value
arg0.getClass().getName() == java.lang.Object[].class
size(this.data2[]) one of { 0, 1, 2 }
size(arg0[]) == 5
===========================================================================
gui.FinalOrderbookTable.addElement(java.lang.Object[]):::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
this.data2 == orig(this.data2)
arg0[] == orig(arg0[])
size(this.data2[])-1 == orig(size(this.data2[]))
this.data2 has only one value
size(this.data2[]) one of { 1, 2, 3 }
===========================================================================
gui.FinalOrderbookTable.getColumnCount():::ENTER
this.data2 has only one value
this.data2[].getClass().getName() one of { [], [java.lang.Object[]] }
size(this.data2[]) one of { 0, 1 }
===========================================================================
gui.FinalOrderbookTable.getColumnCount():::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
this.data2 == orig(this.data2)
this.data2[] == orig(this.data2[])
this.data2 has only one value
this.data2[].getClass().getName() one of { [], [java.lang.Object[]] }
return == 5
size(this.data2[]) one of { 0, 1 }
===========================================================================
gui.FinalOrderbookTable.getColumnName(int):::ENTER
this.data2 has only one value
this.data2[].getClass().getName() one of { [], [java.lang.Object[]] }
size(this.data2[]) one of { 0, 1 }
===========================================================================
gui.FinalOrderbookTable.getColumnName(int):::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
this.data2 == orig(this.data2)
this.data2[] == orig(this.data2[])
this.data2 has only one value
this.data2[].getClass().getName() one of { [], [java.lang.Object[]] }
size(this.data2[]) one of { 0, 1 }
===========================================================================
gui.FinalOrderbookTable.getRowCount():::ENTER
size(this.data2[]) >= 1
===========================================================================
gui.FinalOrderbookTable.getRowCount():::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
this.data2 == orig(this.data2)
this.data2[] == orig(this.data2[])
return >= 1
size(this.data2[]) >= 1
===========================================================================
gui.FinalOrderbookTable.getValueAt(int, int):::ENTER
this.data2 has only one value
this.data2[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
arg0 == 0
arg1 one of { 0, 3 }
size(this.data2[]) one of { 1, 2 }
===========================================================================
gui.FinalOrderbookTable.getValueAt(int, int):::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
this.data2 == orig(this.data2)
this.data2[] == orig(this.data2[])
this.data2 has only one value
this.data2[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
size(this.data2[]) one of { 1, 2 }
===========================================================================
gui.FinalOrderbookTable.setData(java.util.LinkedList):::ENTER
this.data2 has only one value
this.data2[] contains no nulls and has only one value, of length 3
this.data2[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[]]
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 5
arg0[] elements has only one value
arg0[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.Object[]]
arg0[].getClass().getName() elements == java.lang.Object[].class
size(this.data2[]) == 3
size(arg0[]) == 5
===========================================================================
gui.FinalOrderbookTable.setData(java.util.LinkedList):::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
arg0[] == orig(arg0[])
this.data2 has only one value
this.data2[] contains no nulls and has only one value, of length 5
this.data2[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.Object[]]
arg0[] contains no nulls and has only one value, of length 5
arg0[] elements has only one value
arg0[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.Object[]]
arg0[].getClass().getName() elements == java.lang.Object[].class
size(this.data2[]) == 5
===========================================================================
gui.FinalOrderbookTable.setValueAt(java.lang.Object, int, int):::ENTER
this.data2 has only one value
this.data2[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
arg1 == 0
arg2 one of { 0, 3 }
size(this.data2[]) one of { 1, 2 }
===========================================================================
gui.FinalOrderbookTable.setValueAt(java.lang.Object, int, int):::EXIT
this.columnNames == orig(this.columnNames)
this.columnNames.getClass().getName() == orig(this.columnNames.getClass().getName())
this.columnNames[] == orig(this.columnNames[])
this.data2 == orig(this.data2)
this.data2[] == orig(this.data2[])
this.data2 has only one value
this.data2[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
size(this.data2[]) one of { 1, 2 }
===========================================================================
org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[]):::ENTER
message has only one value
message.toString == "Error at adding three prices in array"
expecteds has only one value
expecteds.getClass().getName() == java.lang.Object[].class
expecteds[] contains no nulls and has only one value, of length 3
actuals has only one value
actuals.getClass().getName() == java.lang.Object[].class
actuals[] contains no nulls and has only one value, of length 3
size(expecteds[]) == 3
size(actuals[]) == 3
===========================================================================
org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[]):::EXIT
message.toString == orig(message.toString)
expecteds[] == orig(expecteds[])
actuals[] == orig(actuals[])
message.toString == "Error at adding three prices in array"
expecteds[] contains no nulls and has only one value, of length 3
actuals[] contains no nulls and has only one value, of length 3
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == java.lang.Double.class
actual.getClass().getName() == java.lang.Double.class
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, double, double, double):::ENTER
message != null
delta one of { 0.001, 0.01 }
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, double, double, double):::EXIT439
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, double, double, double):::EXIT442
message.toString == "Testing for 11th trade added, and correctly ignoring the 1st trade"
orig(message) has only one value
orig(expected) == 2.413
orig(actual) == 2.4163
orig(delta) == 0.01
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, double, double, double):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT120
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected >= 0
actual >= 0
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertEquals(long, long):::ENTER
expected == 1
actual == 1
===========================================================================
org.junit.Assert.assertEquals(long, long):::EXIT
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::ENTER
message has only one value
message.toString == "Default share qty is zero"
condition == true
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
message.toString == "Default share qty is zero"
===========================================================================
org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message has only one value
message.toString == "Error at adding three prices in array"
expecteds has only one value
expecteds.getClass().getName() == java.lang.Object[].class
actuals has only one value
actuals.getClass().getName() == java.lang.Object[].class
===========================================================================
org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "Error at adding three prices in array"
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.ComparisonCriteria:::OBJECT
this has only one value
this.getClass().getName() == org.junit.internal.ExactComparisonCriteria.class
===========================================================================
org.junit.internal.ComparisonCriteria.ComparisonCriteria():::EXIT
===========================================================================
org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message has only one value
message.toString == "Error at adding three prices in array"
expecteds has only one value
expecteds.getClass().getName() == java.lang.Object[].class
actuals has only one value
actuals.getClass().getName() == java.lang.Object[].class
===========================================================================
org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT55
===========================================================================
org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "Error at adding three prices in array"
===========================================================================
org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String):::ENTER
expecteds has only one value
expecteds.getClass().getName() == java.lang.Object[].class
actuals has only one value
actuals.getClass().getName() == java.lang.Object[].class
header has only one value
header.toString == "Error at adding three prices in array: "
===========================================================================
org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String):::EXIT
header.toString == orig(header.toString)
header.toString == "Error at adding three prices in array: "
return == 3
===========================================================================
org.junit.internal.ComparisonCriteria.isArray(java.lang.Object):::ENTER
expected.getClass().getName() == java.lang.Double.class
===========================================================================
org.junit.internal.ComparisonCriteria.isArray(java.lang.Object):::EXIT
return == false
===========================================================================
org.junit.internal.ComparisonCriteria.isArray(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.ExactComparisonCriteria:::OBJECT
this has only one value
===========================================================================
org.junit.internal.ExactComparisonCriteria.ExactComparisonCriteria():::EXIT
===========================================================================
org.junit.internal.ExactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == java.lang.Double.class
actual.getClass().getName() == java.lang.Double.class
===========================================================================
org.junit.internal.ExactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.fCanUseSuiteMethod == true
this.parents has only one value
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::ENTER
canUseSuiteMethod == true
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::EXIT
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.fSuiteBuilder has only one value
return.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.fSuiteBuilder.parents has only one value
return.fSuiteBuilder.parents.getClass().getName() == java.util.HashSet.class
return.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT31
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT54
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT != null
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this.fSuiteBuilder has only one value
this.fSuiteBuilder != null
this.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.fSuiteBuilder.parents has only one value
this.fSuiteBuilder.parents != null
this.fSuiteBuilder.parents.getClass().getName() == java.util.HashSet.class
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class):::ENTER
this has only one value
this.parents has only one value
runnerClass has only one value
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class):::EXIT35
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.fSuiteBuilder == orig(this.fSuiteBuilder)
this.fSuiteBuilder.getClass().getName() == orig(this.fSuiteBuilder.getClass().getName())
this.fSuiteBuilder.parents == orig(this.fSuiteBuilder.parents)
this.fSuiteBuilder.parents.getClass().getName() == orig(this.fSuiteBuilder.parents.getClass().getName())
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
this.parents has only one value
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT24
this.parents has only one value
return has only one value
orig(this) has only one value
orig(testClass) has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT25
return == null
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.fSuiteBuilder == orig(this.fSuiteBuilder)
this.fSuiteBuilder.getClass().getName() == orig(this.fSuiteBuilder.getClass().getName())
this.fSuiteBuilder.parents == orig(this.fSuiteBuilder.parents)
this.fSuiteBuilder.parents.getClass().getName() == orig(this.fSuiteBuilder.parents.getClass().getName())
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
(return has only one value)  ==>  (orig(testClass) has only one value)
(return has only one value)  ==>  (orig(this) has only one value)
(return has only one value)  ==>  (return.getClass().getName() == org.junit.runners.Suite.class)
(return has only one value)  ==>  (this.parents has only one value)
return.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == false
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == false
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
this.fNotifier has only one value
this.fNotifier != null
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners != null
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[] elements != null
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fNotifier.fPleaseStop == false
this.fDescription != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
this.fDescription.fChildren != null
this.fDescription.fChildren[] elements != null
this.fDescription.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDescription.fDisplayName != null
this.fDescription.fAnnotations != null
this.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fDescription.fAnnotations[] elements != null
size(this.fNotifier.fListeners[]) == 1
size(this.fDescription.fAnnotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
notifier has only one value
notifier != null
notifier.fListeners has only one value
notifier.fListeners != null
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
size(notifier.fListeners[]) == 1
size(description.fAnnotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
notifier.fListeners has only one value
notifier.fListeners != null
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
description.fChildren != null
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
size(notifier.fListeners[]) == 1
size(description.fAnnotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable):::ENTER
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fChildren[] == orig(this.fDescription.fChildren[])
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::ENTER
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fChildren[] == orig(this.fDescription.fChildren[])
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::ENTER
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fChildren[] == orig(this.fDescription.fChildren[])
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.internal.runners.model.MultipleFailureException:::CLASS
===========================================================================
org.junit.internal.runners.model.MultipleFailureException.assertEmpty(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.model.MultipleFailureException.assertEmpty(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable:::OBJECT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable():::EXIT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::ENTER
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::EXIT
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout$1:::OBJECT
this has only one value
org.junit.internal.runners.statements.FailOnTimeout.this has only one value
org.junit.internal.runners.statements.FailOnTimeout.this.fNext has only one value
org.junit.internal.runners.statements.FailOnTimeout.this.fNext.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
org.junit.internal.runners.statements.FailOnTimeout.this.fTimeout == 900
org.junit.internal.runners.statements.FailOnTimeout.this.fFinished == false
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout$1.(org.junit.internal.runners.statements.FailOnTimeout):::ENTER
org.junit.internal.runners.statements.FailOnTimeout.this has only one value
org.junit.internal.runners.statements.FailOnTimeout.this.fNext has only one value
org.junit.internal.runners.statements.FailOnTimeout.this.fNext.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
org.junit.internal.runners.statements.FailOnTimeout.this.fTimeout == 900
org.junit.internal.runners.statements.FailOnTimeout.this.fFinished == false
org.junit.internal.runners.statements.FailOnTimeout.this.fThrown == null
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout$1.(org.junit.internal.runners.statements.FailOnTimeout):::EXIT
org.junit.internal.runners.statements.FailOnTimeout.this == orig(org.junit.internal.runners.statements.FailOnTimeout.this)
org.junit.internal.runners.statements.FailOnTimeout.this.fNext == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fNext)
org.junit.internal.runners.statements.FailOnTimeout.this.fNext.getClass().getName() == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fNext.getClass().getName())
org.junit.internal.runners.statements.FailOnTimeout.this.fTimeout == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fTimeout)
org.junit.internal.runners.statements.FailOnTimeout.this.fFinished == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fFinished)
org.junit.internal.runners.statements.FailOnTimeout.this.fThrown == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fThrown)
org.junit.internal.runners.statements.FailOnTimeout.this.fThrown == null
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout$1.run():::ENTER
org.junit.internal.runners.statements.FailOnTimeout.this.fThrown == null
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout$1.run():::EXIT
org.junit.internal.runners.statements.FailOnTimeout.this == orig(org.junit.internal.runners.statements.FailOnTimeout.this)
org.junit.internal.runners.statements.FailOnTimeout.this.fNext == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fNext)
org.junit.internal.runners.statements.FailOnTimeout.this.fNext.getClass().getName() == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fNext.getClass().getName())
org.junit.internal.runners.statements.FailOnTimeout.this.fTimeout == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fTimeout)
org.junit.internal.runners.statements.FailOnTimeout.this.fFinished == orig(org.junit.internal.runners.statements.FailOnTimeout.this.fFinished)
org.junit.internal.runners.statements.FailOnTimeout.this.fThrown has only one value
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout:::OBJECT
this has only one value
this.fNext has only one value
this.fNext.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTimeout == 900
this.fFinished == false
this.fThrown == null
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long):::ENTER
next has only one value
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
timeout == 900
===========================================================================
org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long):::EXIT
===========================================================================
org.junit.internal.runners.statements.InvokeMethod:::OBJECT
this.fTestMethod != null
this.fTestMethod.fMethod != null
this.fTarget != null
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
testMethod != null
testMethod.fMethod != null
target != null
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
testMethod.fMethod == orig(testMethod.fMethod)
testMethod.fMethod != null
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::EXIT
this.fTestMethod == orig(this.fTestMethod)
this.fTestMethod.fMethod == orig(this.fTestMethod.fMethod)
this.fTarget == orig(this.fTarget)
this.fTarget.getClass().getName() == orig(this.fTarget.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.RunAfters:::OBJECT
this has only one value
this.fNext has only one value
this.fNext.getClass().getName() == org.junit.internal.runners.statements.RunBefores.class
this.fTarget == null
this.fAfters has only one value
this.fAfters[] contains no nulls and has only one value, of length 1
this.fAfters[] elements has only one value
this.fAfters[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
this.fAfters[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
this.fAfters.getClass().getName() == java.util.ArrayList.class
size(this.fAfters[]) == 1
===========================================================================
org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object):::ENTER
next has only one value
next.getClass().getName() == org.junit.internal.runners.statements.RunBefores.class
afters has only one value
afters[] contains no nulls and has only one value, of length 1
afters[] elements has only one value
afters[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
afters[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
afters.getClass().getName() == java.util.ArrayList.class
target == null
size(afters[]) == 1
===========================================================================
org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object):::EXIT
afters[] == orig(afters[])
afters[] contains no nulls and has only one value, of length 1
afters[] elements has only one value
afters[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
afters[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
===========================================================================
org.junit.internal.runners.statements.RunAfters.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.RunAfters.evaluate():::EXIT
this.fNext == orig(this.fNext)
this.fNext.getClass().getName() == orig(this.fNext.getClass().getName())
this.fTarget == orig(this.fTarget)
this.fAfters == orig(this.fAfters)
this.fAfters[] == orig(this.fAfters[])
this.fAfters.getClass().getName() == orig(this.fAfters.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.RunBefores:::OBJECT
this has only one value
this.fNext has only one value
this.fNext.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTarget == null
this.fBefores has only one value
this.fBefores[] contains no nulls and has only one value, of length 1
this.fBefores[] elements has only one value
this.fBefores[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
this.fBefores[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
this.fBefores.getClass().getName() == java.util.ArrayList.class
size(this.fBefores[]) == 1
===========================================================================
org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object):::ENTER
next has only one value
next.getClass().getName() == org.junit.runners.ParentRunner$2.class
befores has only one value
befores[] contains no nulls and has only one value, of length 1
befores[] elements has only one value
befores[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
befores[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
befores.getClass().getName() == java.util.ArrayList.class
target == null
size(befores[]) == 1
===========================================================================
org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object):::EXIT
befores[] == orig(befores[])
befores[] contains no nulls and has only one value, of length 1
befores[] elements has only one value
befores[].getClass().getName() == [org.junit.runners.model.FrameworkMethod]
befores[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
===========================================================================
org.junit.internal.runners.statements.RunBefores.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.RunBefores.evaluate():::EXIT
this.fNext == orig(this.fNext)
this.fNext.getClass().getName() == orig(this.fNext.getClass().getName())
this.fTarget == orig(this.fTarget)
this.fBefores == orig(this.fBefores)
this.fBefores[] == orig(this.fBefores[])
this.fBefores.getClass().getName() == orig(this.fBefores.getClass().getName())
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
this.val$builder.parents.getClass().getName() == java.util.HashSet.class
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$builder.parents == $hidden$2.parents
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.val$builder.parents == orig(this.val$builder.parents)
this.val$builder.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
===========================================================================
org.junit.runner.Description:::OBJECT
this.fChildren != null
this.fChildren[] elements != null
this.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDisplayName != null
this.fAnnotations != null
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] elements != null
size(this.fAnnotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
displayName != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
annotations[] elements != null
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
description != null
description.fChildren != null
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
size(this.fAnnotations[]) one of { 0, 2 }
size(this.fAnnotations[])-1 != 0
size(description.fAnnotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fAnnotations == orig(this.fAnnotations)
this.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
this.fAnnotations[] == orig(this.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fChildren[])-1 == orig(size(this.fChildren[]))
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
description.fChildren != null
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
size(this.fChildren[]) >= 1
size(this.fAnnotations[]) one of { 0, 2 }
size(this.fAnnotations[])-1 != 0
size(description.fAnnotations[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
name != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) one of { 0, 2 }
size(annotations[])-1 != 0
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
name.toString == orig(name.toString)
annotations[] == orig(annotations[])
annotations[] elements != null
return != null
return.fChildren != null
return.fChildren[] == []
return.fChildren[].getClass().getName() == []
return.fDisplayName != null
return.fAnnotations != null
return.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
size(annotations[])-1 != 0
size(return.fAnnotations[]) one of { 0, 2 }
size(return.fAnnotations[])-1 != 0
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
clazz != null
name != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) == 1
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
name.toString == orig(name.toString)
annotations[] == orig(annotations[])
annotations[] elements != null
return != null
return.fChildren != null
return.fChildren[] == []
return.fChildren[].getClass().getName() == []
return.fDisplayName != null
return.fAnnotations != null
return.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(return.fAnnotations[]) == 1
===========================================================================
org.junit.runner.Description.getChildren():::ENTER
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
size(this.fAnnotations[]) one of { 0, 2 }
size(this.fAnnotations[])-1 != 0
===========================================================================
org.junit.runner.Description.getChildren():::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fChildren == orig(this.fChildren)
this.fChildren[] == orig(this.fChildren[])
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fAnnotations == orig(this.fAnnotations)
this.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
this.fAnnotations[] == orig(this.fAnnotations[])
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
return != null
return[] elements != null
return[].getClass().getName() elements == org.junit.runner.Description.class
size(this.fAnnotations[]) one of { 0, 2 }
size(this.fAnnotations[])-1 != 0
===========================================================================
org.junit.runner.Description.getDisplayName():::ENTER
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
this.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
this.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fAnnotations[]) == 1
===========================================================================
org.junit.runner.Description.getDisplayName():::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fChildren == orig(this.fChildren)
this.fChildren[] == orig(this.fChildren[])
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fAnnotations == orig(this.fAnnotations)
this.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
this.fAnnotations[] == orig(this.fAnnotations[])
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
this.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
this.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
return.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
size(this.fAnnotations[]) == 1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fNotifier.fPleaseStop == false
size(this.fNotifier.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fNotifier.fListeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
classes[] == orig(classes[])
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 329
return.fStartTime == 1743926907482L
size(return.fFailures[]) == 2
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 329
return.fStartTime == 1743926907482L
size(return.fFailures[]) == 2
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 329
return.fStartTime == 1743926907482L
size(return.fFailures[]) == 2
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::ENTER
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 2
return.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 329
return.fStartTime == 1743926907482L
size(return.fFailures[]) == 2
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == orig(this.val$runner)
this.val$runner.getClass().getName() == orig(this.val$runner.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount has only one value
org.junit.runner.Result.this.fCount != null
org.junit.runner.Result.this.fIgnoreCount has only one value
org.junit.runner.Result.this.fIgnoreCount != null
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures != null
org.junit.runner.Result.this.fFailures[] elements != null
org.junit.runner.Result.this.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.Result.this.fRunTime one of { 0, 329 }
org.junit.runner.Result.this.fStartTime one of { 0, 1743926907482L }
size(org.junit.runner.Result.this.fFailures[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount has only one value
org.junit.runner.Result.this.fIgnoreCount has only one value
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 0
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 0
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.Result.this.fFailures[] elements has only one value
org.junit.runner.Result.this.fFailures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1743926907482L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.Result.this.fFailures[]) one of { 0, 1 }
size(failure.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren[] == orig(failure.fDescription.fChildren[])
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fThrownException == orig(failure.fThrownException)
size(org.junit.runner.Result.this.fFailures[])-1 == orig(size(org.junit.runner.Result.this.fFailures[]))
org.junit.runner.Result.this.fFailures[].getClass().getName() one of { [org.junit.runner.notification.Failure], [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1743926907482L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.Result.this.fFailures[]) one of { 1, 2 }
size(failure.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fFailures[].getClass().getName() one of { [org.junit.runner.notification.Failure], [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1743926907482L
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.Result.this.fFailures[]) one of { 1, 2 }
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Result.this.fFailures[].getClass().getName() one of { [org.junit.runner.notification.Failure], [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1743926907482L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.Result.this.fFailures[]) one of { 1, 2 }
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this.fFailures[] contains no nulls and has only one value, of length 2
org.junit.runner.Result.this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1743926907482L
result has only one value
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 0
result.fStartTime == 1743926907482L
size(org.junit.runner.Result.this.fFailures[]) == 2
size(result.fFailures[]) == 2
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fStartTime == orig(result.fStartTime)
org.junit.runner.Result.this.fFailures[] contains no nulls and has only one value, of length 2
org.junit.runner.Result.this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
org.junit.runner.Result.this.fRunTime == 329
org.junit.runner.Result.this.fStartTime == 1743926907482L
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 329
result.fStartTime == 1743926907482L
size(org.junit.runner.Result.this.fFailures[]) == 2
size(result.fFailures[]) == 2
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 0
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] == []
description.fAnnotations[].getClass().getName() == []
size(description.fChildren[]) == 1
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1743926907482L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] == []
description.fAnnotations[].getClass().getName() == []
size(description.fChildren[]) == 1
===========================================================================
org.junit.runner.Result:::OBJECT
this has only one value
this.fCount has only one value
this.fCount != null
this.fIgnoreCount has only one value
this.fIgnoreCount != null
this.fFailures has only one value
this.fFailures != null
this.fFailures[] elements != null
this.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.fFailures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure] }
this.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fRunTime one of { 0, 329 }
this.fStartTime one of { 0, 1743926907482L }
size(this.fFailures[]) one of { 0, 2 }
size(this.fFailures[])-1 != 0
===========================================================================
org.junit.runner.Result.Result():::EXIT
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fRunTime == 0
this.fStartTime == 0
===========================================================================
org.junit.runner.Result.createListener():::ENTER
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fRunTime == 0
this.fStartTime == 0
===========================================================================
org.junit.runner.Result.createListener():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fRunTime == 0
this.fStartTime == 0
return has only one value
===========================================================================
org.junit.runner.Result.getFailureCount():::ENTER
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.getFailureCount():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
return == 2
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.getFailures():::ENTER
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.getFailures():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
return has only one value
return[] contains no nulls and has only one value, of length 2
return[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
return[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
size(this.fFailures[]) == 2
size(return[]) == 2
===========================================================================
org.junit.runner.Result.getRunCount():::ENTER
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.getRunCount():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
return == 17
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.wasSuccessful():::ENTER
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fFailures[] contains no nulls and has only one value, of length 2
this.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.fRunTime == 329
this.fStartTime == 1743926907482L
return == false
size(this.fFailures[]) == 2
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.runner.manipulation.Sorter$1.():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
o1 != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
o1.fChildren != null
o1.fChildren[] elements != null
o1.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o1.fDisplayName != null
o1.fAnnotations != null
o1.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o1.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
o2 != null
o2.fChildren != null
o2.fChildren[] elements != null
o2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o2.fDisplayName != null
o2.fAnnotations != null
o2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o2.fAnnotations[] elements != null
o2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o2.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
size(o1.fAnnotations[]) one of { 0, 1 }
size(o2.fAnnotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
o1.fChildren == orig(o1.fChildren)
o1.fChildren[] == orig(o1.fChildren[])
o1.fDisplayName == orig(o1.fDisplayName)
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fChildren[] == orig(o2.fChildren[])
o2.fDisplayName == orig(o2.fDisplayName)
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
o2.fAnnotations[] == orig(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
o1.fChildren != null
o1.fChildren[] elements != null
o1.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o1.fDisplayName != null
o1.fAnnotations != null
o1.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o1.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
o2.fChildren != null
o2.fChildren[] elements != null
o2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o2.fDisplayName != null
o2.fAnnotations != null
o2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o2.fAnnotations[] elements != null
o2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o2.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
return == 0
size(o1.fAnnotations[]) one of { 0, 1 }
size(o2.fAnnotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.manipulation.Sorter:::CLASS
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator != null
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter:::OBJECT
this has only one value
this.fComparator has only one value
this.fComparator != null
this.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::ENTER
comparator has only one value
comparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::ENTER
object != null
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fComparator == orig(this.fComparator)
this.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
o1 != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
o1.fChildren != null
o1.fChildren[] elements != null
o1.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o1.fDisplayName != null
o1.fAnnotations != null
o1.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o1.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
o2 != null
o2.fChildren != null
o2.fChildren[] elements != null
o2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o2.fDisplayName != null
o2.fAnnotations != null
o2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o2.fAnnotations[] elements != null
o2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o2.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
size(o1.fAnnotations[]) one of { 0, 1 }
size(o2.fAnnotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fComparator == orig(this.fComparator)
this.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
o1.fChildren == orig(o1.fChildren)
o1.fChildren[] == orig(o1.fChildren[])
o1.fDisplayName == orig(o1.fDisplayName)
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fChildren[] == orig(o2.fChildren[])
o2.fDisplayName == orig(o2.fDisplayName)
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
o2.fAnnotations[] == orig(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
o1.fChildren != null
o1.fChildren[] elements != null
o1.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o1.fDisplayName != null
o1.fAnnotations != null
o1.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o1.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
o2.fChildren != null
o2.fChildren[] elements != null
o2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
o2.fDisplayName != null
o2.fAnnotations != null
o2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
o2.fAnnotations[] elements != null
o2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
o2.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy7] }
return == 0
size(o1.fAnnotations[]) one of { 0, 1 }
size(o2.fAnnotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.notification.Failure:::OBJECT
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
this.fDescription.fChildren[] == []
this.fDescription.fChildren[].getClass().getName() == []
this.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
this.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::ENTER
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.Failure.getTestHeader():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getTestHeader():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fChildren[] == orig(this.fDescription.fChildren[])
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
this.fThrownException == orig(this.fThrownException)
return.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
===========================================================================
org.junit.runner.notification.Failure.toString():::ENTER
===========================================================================
org.junit.runner.notification.Failure.toString():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fChildren[] == orig(this.fDescription.fChildren[])
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
this.fThrownException == orig(this.fThrownException)
return.toString one of { "testInsertLargeData(Test.myDatabaseTest): null", "testInsertSmallData(Test.myDatabaseTest): null" }
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
this has only one value
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
this has only one value
this.val$description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
this.val$description.fChildren has only one value
this.val$description.fChildren[] contains no nulls and has only one value, of length 1
this.val$description.fChildren[] elements has only one value
this.val$description.fChildren[].getClass().getName() == [org.junit.runner.Description]
this.val$description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "null"
this.val$description.fAnnotations has only one value
this.val$description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.val$description.fAnnotations[] == []
this.val$description.fAnnotations[].getClass().getName() == []
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fChildren[]) == 1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
$hidden$2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fAnnotations[] == []
$hidden$2.fAnnotations[].getClass().getName() == []
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
size($hidden$2.fChildren[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
$hidden$2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fAnnotations[] == []
$hidden$2.fAnnotations[].getClass().getName() == []
size($hidden$2.fChildren[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
this has only one value
this.val$result has only one value
this.val$result.fCount has only one value
this.val$result.fIgnoreCount has only one value
this.val$result.fFailures has only one value
this.val$result.fFailures[] contains no nulls and has only one value, of length 2
this.val$result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
this.val$result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.val$result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.val$result.fRunTime one of { 0, 329 }
this.val$result.fStartTime == 1743926907482L
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$result.fFailures[]) == 2
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
$hidden$2.fCount has only one value
$hidden$2.fIgnoreCount has only one value
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] contains no nulls and has only one value, of length 2
$hidden$2.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
$hidden$2.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fRunTime == 0
$hidden$2.fStartTime == 1743926907482L
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
size($hidden$2.fFailures[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fCount == orig($hidden$2.fCount)
$hidden$2.fIgnoreCount == orig($hidden$2.fIgnoreCount)
$hidden$2.fFailures == orig($hidden$2.fFailures)
$hidden$2.fFailures[] == orig($hidden$2.fFailures[])
$hidden$2.fFailures.getClass().getName() == orig($hidden$2.fFailures.getClass().getName())
$hidden$2.fRunTime == orig($hidden$2.fRunTime)
$hidden$2.fStartTime == orig($hidden$2.fStartTime)
this.val$result.fRunTime == 0
$hidden$2.fCount has only one value
$hidden$2.fIgnoreCount has only one value
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] contains no nulls and has only one value, of length 2
$hidden$2.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
$hidden$2.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fRunTime == 0
$hidden$2.fStartTime == 1743926907482L
size($hidden$2.fFailures[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
this.val$result.fRunTime == 0
each has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
this.val$result.fCount == orig(this.val$result.fCount)
this.val$result.fIgnoreCount == orig(this.val$result.fIgnoreCount)
this.val$result.fFailures == orig(this.val$result.fFailures)
this.val$result.fFailures[] == orig(this.val$result.fFailures[])
this.val$result.fFailures.getClass().getName() == orig(this.val$result.fFailures.getClass().getName())
this.val$result.fStartTime == orig(this.val$result.fStartTime)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
this.val$result.fRunTime == 329
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
this.val$description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
this.val$description.fChildren != null
this.val$description.fChildren[] == []
this.val$description.fChildren[].getClass().getName() == []
this.val$description.fDisplayName != null
this.val$description.fAnnotations != null
this.val$description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners != null
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners != null
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
$hidden$2.fChildren != null
$hidden$2.fChildren[] == []
$hidden$2.fChildren[].getClass().getName() == []
$hidden$2.fDisplayName != null
$hidden$2.fAnnotations != null
$hidden$2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
size($hidden$2.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
$hidden$2.fChildren != null
$hidden$2.fChildren[] == []
$hidden$2.fChildren[].getClass().getName() == []
$hidden$2.fDisplayName != null
$hidden$2.fAnnotations != null
$hidden$2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size($hidden$2.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each != null
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$4:::OBJECT
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
this.val$failure.fDescription.fChildren[] == []
this.val$failure.fDescription.fChildren[].getClass().getName() == []
this.val$failure.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
this.val$failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.val$failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.val$failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$failure.fDescription.fAnnotations[]) == 1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
$hidden$2.fDescription.fChildren[] == []
$hidden$2.fDescription.fChildren[].getClass().getName() == []
$hidden$2.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
$hidden$2.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
$hidden$2.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
size($hidden$2.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fDescription == orig($hidden$2.fDescription)
$hidden$2.fDescription.fChildren == orig($hidden$2.fDescription.fChildren)
$hidden$2.fDescription.fChildren[] == orig($hidden$2.fDescription.fChildren[])
$hidden$2.fDescription.fDisplayName == orig($hidden$2.fDescription.fDisplayName)
$hidden$2.fDescription.fDisplayName.toString == orig($hidden$2.fDescription.fDisplayName.toString)
$hidden$2.fDescription.fAnnotations == orig($hidden$2.fDescription.fAnnotations)
$hidden$2.fDescription.fAnnotations.getClass().getName() == orig($hidden$2.fDescription.fAnnotations.getClass().getName())
$hidden$2.fDescription.fAnnotations[] == orig($hidden$2.fDescription.fAnnotations[])
$hidden$2.fThrownException == orig($hidden$2.fThrownException)
$hidden$2.fDescription.fChildren[] == []
$hidden$2.fDescription.fChildren[].getClass().getName() == []
$hidden$2.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
$hidden$2.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
$hidden$2.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size($hidden$2.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$failure == orig(this.val$failure)
this.val$failure.fDescription == orig(this.val$failure.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
this.val$failure.fDescription.fChildren == orig(this.val$failure.fDescription.fChildren)
this.val$failure.fDescription.fChildren[] == orig(this.val$failure.fDescription.fChildren[])
this.val$failure.fDescription.fDisplayName == orig(this.val$failure.fDescription.fDisplayName)
this.val$failure.fDescription.fDisplayName.toString == orig(this.val$failure.fDescription.fDisplayName.toString)
this.val$failure.fDescription.fAnnotations == orig(this.val$failure.fDescription.fAnnotations)
this.val$failure.fDescription.fAnnotations.getClass().getName() == orig(this.val$failure.fDescription.fAnnotations.getClass().getName())
this.val$failure.fDescription.fAnnotations[] == orig(this.val$failure.fDescription.fAnnotations[])
this.val$failure.fThrownException == orig(this.val$failure.fThrownException)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$7:::OBJECT
this.val$description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
this.val$description.fChildren != null
this.val$description.fChildren[] == []
this.val$description.fChildren[].getClass().getName() == []
this.val$description.fDisplayName != null
this.val$description.fAnnotations != null
this.val$description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners != null
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners != null
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
$hidden$2.fChildren != null
$hidden$2.fChildren[] == []
$hidden$2.fChildren[].getClass().getName() == []
$hidden$2.fDisplayName != null
$hidden$2.fAnnotations != null
$hidden$2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
size($hidden$2.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
$hidden$2.fChildren != null
$hidden$2.fChildren[] == []
$hidden$2.fChildren[].getClass().getName() == []
$hidden$2.fDisplayName != null
$hidden$2.fAnnotations != null
$hidden$2.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size($hidden$2.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each != null
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners != null
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners != null
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fPleaseStop == false
size(this.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[])-1 == orig(size(this.fListeners[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
size(this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fListeners[]) == 1
size(failure.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren[] == orig(failure.fDescription.fChildren[])
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fThrownException == orig(failure.fThrownException)
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren[] == []
failure.fDescription.fChildren[].getClass().getName() == []
failure.fDescription.fDisplayName.toString one of { "testInsertLargeData(Test.myDatabaseTest)", "testInsertSmallData(Test.myDatabaseTest)" }
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
failure.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fListeners[]) == 1
size(failure.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fListeners[]) == 1
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fListeners[]) == 1
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result has only one value
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 0
result.fStartTime == 1743926907482L
size(this.fListeners[]) == 1
size(result.fFailures[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fStartTime == orig(result.fStartTime)
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 2
result.fFailures[].getClass().getName() == [org.junit.runner.notification.Failure, org.junit.runner.notification.Failure]
result.fFailures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 329
result.fStartTime == 1743926907482L
size(this.fListeners[]) == 1
size(result.fFailures[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] == []
description.fAnnotations[].getClass().getName() == []
size(this.fListeners[]) == 1
size(description.fChildren[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] == []
description.fAnnotations[].getClass().getName() == []
size(this.fListeners[]) == 1
size(description.fChildren[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fListeners[]) == 1
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
description.fAnnotations[] == orig(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
description.fChildren != null
description.fChildren[] == []
description.fChildren[].getClass().getName() == []
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(this.fListeners[]) == 1
size(description.fAnnotations[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[]) == orig(size(this.fListeners[]))-1
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1:::OBJECT
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator != null
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler != null
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::ENTER
org.junit.runners.BlockJUnit4ClassRunner.this != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator != null
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler != null
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner:::OBJECT
this.fTestClass != null
this.fTestClass.fClass != null
this.fTestClass.fMethodsForAnnotations != null
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations != null
this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
this.fSorter has only one value
this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator != null
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fSorter.fComparator has only one value
this.fSorter.fComparator != null
this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler != null
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::EXIT
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) is a power of 2
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::ENTER
method != null
method.fMethod != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
return.fChildren != null
return.fChildren[] == []
return.fChildren[].getClass().getName() == []
return.fDisplayName != null
return.fAnnotations != null
return.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(return.fAnnotations[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::ENTER
annotation != null
annotation.getClass().getName() == com.sun.proxy.$Proxy7.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return == false
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) is a power of 2
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::ENTER
annotation != null
annotation.getClass().getName() == com.sun.proxy.$Proxy7.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT366
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return == null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::ENTER
annotation != null
annotation.getClass().getName() == com.sun.proxy.$Proxy7.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT378
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return one of { 0, 900 }
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return == true
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT;condition="return == true"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
method != null
method.fMethod != null
notifier has only one value
notifier != null
notifier.fListeners has only one value
notifier.fListeners != null
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
method.fMethod != null
notifier.fListeners has only one value
notifier.fListeners != null
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
return != null
return.fNotifier has only one value
return.fNotifier != null
return.fNotifier.fListeners has only one value
return.fNotifier.fListeners != null
return.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
return.fNotifier.fListeners[] elements has only one value
return.fNotifier.fListeners[] elements != null
return.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
return.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
return.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fNotifier.fPleaseStop == false
return.fDescription != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
return.fDescription.fChildren != null
return.fDescription.fChildren[] == []
return.fDescription.fChildren[].getClass().getName() == []
return.fDescription.fDisplayName != null
return.fDescription.fAnnotations != null
return.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fDescription.fAnnotations[] elements != null
return.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
return.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(notifier.fListeners[]) == 1
size(return.fNotifier.fListeners[]) == 1
size(return.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::ENTER
method != null
method.fMethod != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT271
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
method != null
method.fMethod != null
test != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
method != null
method.fMethod != null
test != null
next != null
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
method != null
method.fMethod != null
notifier has only one value
notifier != null
notifier.fListeners has only one value
notifier.fListeners != null
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
method.fMethod != null
notifier.fListeners has only one value
notifier.fListeners != null
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(org.junit.runners.model.FrameworkMethod, org.junit.internal.runners.model.EachTestNotifier):::ENTER
method != null
method.fMethod != null
eachNotifier != null
eachNotifier.fNotifier has only one value
eachNotifier.fNotifier != null
eachNotifier.fNotifier.fListeners has only one value
eachNotifier.fNotifier.fListeners != null
eachNotifier.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
eachNotifier.fNotifier.fListeners[] elements has only one value
eachNotifier.fNotifier.fListeners[] elements != null
eachNotifier.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
eachNotifier.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
eachNotifier.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
eachNotifier.fNotifier.fPleaseStop == false
eachNotifier.fDescription != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
eachNotifier.fDescription.fChildren != null
eachNotifier.fDescription.fChildren[] == []
eachNotifier.fDescription.fChildren[].getClass().getName() == []
eachNotifier.fDescription.fDisplayName != null
eachNotifier.fDescription.fAnnotations != null
eachNotifier.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
eachNotifier.fDescription.fAnnotations[] elements != null
eachNotifier.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
eachNotifier.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(eachNotifier.fNotifier.fListeners[]) == 1
size(eachNotifier.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(org.junit.runners.model.FrameworkMethod, org.junit.internal.runners.model.EachTestNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
eachNotifier.fNotifier == orig(eachNotifier.fNotifier)
eachNotifier.fNotifier.fListeners == orig(eachNotifier.fNotifier.fListeners)
eachNotifier.fNotifier.fListeners[] == orig(eachNotifier.fNotifier.fListeners[])
eachNotifier.fNotifier.fListeners.getClass().getName() == orig(eachNotifier.fNotifier.fListeners.getClass().getName())
eachNotifier.fNotifier.fPleaseStop == orig(eachNotifier.fNotifier.fPleaseStop)
eachNotifier.fDescription == orig(eachNotifier.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
eachNotifier.fDescription.fChildren == orig(eachNotifier.fDescription.fChildren)
eachNotifier.fDescription.fChildren[] == orig(eachNotifier.fDescription.fChildren[])
eachNotifier.fDescription.fDisplayName == orig(eachNotifier.fDescription.fDisplayName)
eachNotifier.fDescription.fDisplayName.toString == orig(eachNotifier.fDescription.fDisplayName.toString)
eachNotifier.fDescription.fAnnotations == orig(eachNotifier.fDescription.fAnnotations)
eachNotifier.fDescription.fAnnotations.getClass().getName() == orig(eachNotifier.fDescription.fAnnotations.getClass().getName())
eachNotifier.fDescription.fAnnotations[] == orig(eachNotifier.fDescription.fAnnotations[])
method.fMethod != null
eachNotifier.fNotifier has only one value
eachNotifier.fNotifier != null
eachNotifier.fNotifier.fListeners has only one value
eachNotifier.fNotifier.fListeners != null
eachNotifier.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
eachNotifier.fNotifier.fListeners[] elements has only one value
eachNotifier.fNotifier.fListeners[] elements != null
eachNotifier.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
eachNotifier.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
eachNotifier.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
eachNotifier.fNotifier.fPleaseStop == false
eachNotifier.fDescription != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
eachNotifier.fDescription.fChildren != null
eachNotifier.fDescription.fChildren[] == []
eachNotifier.fDescription.fChildren[].getClass().getName() == []
eachNotifier.fDescription.fDisplayName != null
eachNotifier.fDescription.fAnnotations != null
eachNotifier.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
eachNotifier.fDescription.fAnnotations[] elements != null
eachNotifier.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy7]
eachNotifier.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy7.class
size(eachNotifier.fNotifier.fListeners[]) == 1
size(eachNotifier.fDescription.fAnnotations[]) == 1
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::ENTER
method != null
method.fMethod != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
method != null
method.fMethod != null
target != null
statement != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
method != null
method.fMethod != null
target != null
statement != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
method != null
method.fMethod != null
test != null
next != null
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
method != null
method.fMethod != null
target != null
statement != null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
method.fMethod == orig(method.fMethod)
method.fMethod != null
return != null
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runners.ParentRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator != null
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fScheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fScheduler != null
childStatement != null
childStatement.getClass().getName() == org.junit.runners.ParentRunner$3.class
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fScheduler != null
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
this.val$notifier has only one value
this.val$notifier != null
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners != null
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[] elements != null
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runners.ParentRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator != null
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler != null
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$2.fListeners == orig($hidden$2.fListeners)
$hidden$2.fListeners[] == orig($hidden$2.fListeners[])
$hidden$2.fListeners.getClass().getName() == orig($hidden$2.fListeners.getClass().getName())
$hidden$2.fPleaseStop == orig($hidden$2.fPleaseStop)
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
this.val$each != null
this.val$notifier has only one value
this.val$notifier != null
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners != null
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[] elements != null
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runners.ParentRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator != null
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler != null
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this != null
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runners.ParentRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator != null
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler != null
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 != null
$hidden$3 has only one value
$hidden$3 != null
$hidden$3.fListeners has only one value
$hidden$3.fListeners != null
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$3.fListeners == orig($hidden$3.fListeners)
$hidden$3.fListeners[] == orig($hidden$3.fListeners[])
$hidden$3.fListeners.getClass().getName() == orig($hidden$3.fListeners.getClass().getName())
$hidden$3.fPleaseStop == orig($hidden$3.fPleaseStop)
$hidden$3.fListeners has only one value
$hidden$3.fListeners != null
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.run():::EXIT
this.val$each == orig(this.val$each)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runners.ParentRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator != null
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler != null
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this != null
org.junit.runners.ParentRunner.this.fTestClass != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations != null
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runners.ParentRunner.this.fSorter has only one value
org.junit.runners.ParentRunner.this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator != null
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler != null
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::ENTER
org.junit.runners.ParentRunner.this.fTestClass.fClass != null
o1 != null
o2 != null
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runners.ParentRunner.this.fSorter == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fClass != null
return == 0
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.fTestClass != null
this.fTestClass.fMethodsForAnnotations != null
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations != null
this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
this.fSorter has only one value
this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator != null
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fSorter.fComparator has only one value
this.fSorter.fComparator != null
this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler != null
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.comparator():::ENTER
===========================================================================
org.junit.runners.ParentRunner.comparator():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
return.getClass().getName() == org.junit.runners.ParentRunner$4.class
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::ENTER
child != null
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fChildren[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
return.fChildren != null
return.fChildren[] elements != null
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fDisplayName != null
return.fAnnotations != null
return.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
size(return.fAnnotations[]) one of { 0, 2 }
size(return.fAnnotations[])-1 != 0
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
return[] elements != null
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.getName():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getName():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return != null
return.fMethodsForAnnotations != null
return.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
return.fFieldsForAnnotations != null
return.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::ENTER
each != null
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return == true
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::ENTER
this.fTestClass.fClass != null
sorter has only one value
sorter != null
sorter.fComparator has only one value
sorter.fComparator != null
sorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
sorter.fComparator == orig(sorter.fComparator)
sorter.fComparator.getClass().getName() == orig(sorter.fComparator.getClass().getName())
this.fTestClass.fClass != null
sorter.fComparator has only one value
sorter.fComparator != null
sorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::ENTER
child != null
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
annotation != null
errors != null
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fTestClass.fFieldsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fFilter == orig(this.fFilter)
this.fSorter == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
this.fSorter.fComparator == orig(this.fSorter.fComparator)
this.fSorter.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.Suite:::OBJECT
this.fRunners != null
this.fRunners[] elements != null
this.fRunners[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.Suite] }
this.fRunners.getClass().getName() == java.util.ArrayList.class
this.fTestClass != null
this.fTestClass.fMethodsForAnnotations != null
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations != null
this.fTestClass.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
this.fSorter has only one value
this.fSorter != null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL != null
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator != null
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fSorter.fComparator has only one value
this.fSorter.fComparator != null
this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler != null
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.fRunners[]) one of { 1, 6 }
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
runners[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.Suite] }
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) one of { 1, 6 }
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.fRunners == orig(runners)
this.fRunners[].getClass().getName() == runners[].getClass().getName()
this.fRunners.getClass().getName() == orig(runners.getClass().getName())
this.fTestClass.fClass == orig(klass)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
runners[] == orig(runners[])
runners[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.Suite] }
this.fRunners[] == runners[] (elementwise)
this.fRunners[].getClass().getName() == runners[].getClass().getName() (elementwise)
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder):::ENTER
klass has only one value
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 6
this.fRunners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner]
this.fRunners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
size(this.fRunners[]) == 6
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
klass has only one value
suiteClasses has only one value
suiteClasses.getClass().getName() == java.lang.Class[].class
suiteClasses[] contains no nulls and has only one value, of length 6
size(suiteClasses[]) == 6
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
suiteClasses[] == orig(suiteClasses[])
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 6
this.fRunners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner]
this.fRunners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
suiteClasses[] contains no nulls and has only one value, of length 6
size(this.fRunners[]) == 6
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 1
this.fRunners[] elements has only one value
this.fRunners[].getClass().getName() == [org.junit.runners.Suite]
this.fRunners[].getClass().getName() elements == org.junit.runners.Suite.class
this.fTestClass has only one value
this.fTestClass.fClass == null
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(this.fRunners[]) == 1
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
child != null
child in this.fRunners[]
child.getClass().getName() in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fRunners.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName()
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
return != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[].getClass().getName() == []
return.fChildren != null
return.fChildren[] elements != null
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fDisplayName != null
return.fAnnotations != null
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3, com.sun.proxy.$Proxy4] }
size(return.fAnnotations[]) one of { 0, 2 }
size(return.fAnnotations[])-1 != 0
orig(child) in this.fRunners[]
orig(child.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fRunners.getClass().getName() != orig(child.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != orig(child.getClass().getName())
size(this.fRunners[]) != size(return.fChildren[])
size(this.fRunners[]) != size(return.fChildren[])-1
size(this.fRunners[]) != size(return.fAnnotations[])
size(this.fRunners[]) >= size(return.fAnnotations[])-1
size(this.fRunners[])-1 >= size(org.junit.runner.Description.EMPTY.fChildren[])
size(this.fRunners[])-1 >= size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(this.fRunners[])-1 >= size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(this.fRunners[])-1 != size(return.fChildren[])
size(this.fRunners[])-1 != size(return.fChildren[])-1
size(this.fRunners[])-1 != size(return.fAnnotations[])
size(this.fRunners[])-1 != size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(return.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fAnnotations[]) <= size(return.fChildren[])-1
size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]) <= size(return.fChildren[])-1
size(return.fChildren[]) % size(return.fAnnotations[])-1 == 0
size(return.fChildren[])-1 >= size(return.fAnnotations[])
size(return.fChildren[])-1 % size(return.fAnnotations[])-1 == 0
===========================================================================
org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class):::EXIT
return has only one value
return.getClass().getName() == java.lang.Class[].class
return[] contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.fRunners == return
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fRunners[].getClass().getName() == return[].getClass().getName()
this.fRunners.getClass().getName() == return.getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.Suite] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 6 }
this.fRunners[] == return[] (elementwise)
this.fRunners[].getClass().getName() == return[].getClass().getName() (elementwise)
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != return.getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
runner in this.fRunners[]
runner.getClass().getName() in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fRunners.getClass().getName() != runner.getClass().getName()
this.fRunners.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != runner.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != runner.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != runner.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
runner.getClass().getName() != notifier.fListeners.getClass().getName()
size(this.fRunners[]) >= size(notifier.fListeners[])
size(this.fRunners[])-1 != size(notifier.fListeners[])
size(this.fRunners[])-1 >= size(notifier.fListeners[])-1
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler == orig(this.fScheduler)
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
orig(runner) in this.fRunners[]
orig(runner.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fRunners.getClass().getName() != notifier.fListeners.getClass().getName()
this.fRunners.getClass().getName() != orig(runner.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(runner.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(runner.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != orig(runner.getClass().getName())
notifier.fListeners.getClass().getName() != orig(runner.getClass().getName())
size(this.fRunners[]) >= size(notifier.fListeners[])
size(this.fRunners[])-1 != size(notifier.fListeners[])
size(this.fRunners[])-1 >= size(notifier.fListeners[])-1
===========================================================================
org.junit.runners.model.FrameworkField:::OBJECT
this has only one value
this.fField has only one value
===========================================================================
org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field):::ENTER
field has only one value
===========================================================================
org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field):::EXIT
===========================================================================
org.junit.runners.model.FrameworkField.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkField.getAnnotations():::EXIT
this.fField == orig(this.fField)
return has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.FrameworkMember:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMember.FrameworkMember():::EXIT
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::ENTER
this.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
members != null
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
members.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT
members[] == orig(members[])
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return == false
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod$1:::OBJECT
this.val$params != null
this.val$params.getClass().getName() == java.lang.Object[].class
this.val$params[] == []
this.val$params[].getClass().getName() == []
org.junit.runners.model.FrameworkMethod.this.fMethod != null
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::ENTER
org.junit.runners.model.FrameworkMethod.this != null
org.junit.runners.model.FrameworkMethod.this.fMethod != null
$hidden$3 != null
$hidden$3.getClass().getName() == java.lang.Object[].class
$hidden$3[] == []
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::EXIT
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
$hidden$3[] == orig($hidden$3[])
$hidden$3[] == []
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::EXIT
this.val$target == orig(this.val$target)
this.val$target.getClass().getName() == orig(this.val$target.getClass().getName())
this.val$params == orig(this.val$params)
this.val$params.getClass().getName() == orig(this.val$params.getClass().getName())
this.val$params[] == orig(this.val$params[])
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
return == null
===========================================================================
org.junit.runners.model.FrameworkMethod:::OBJECT
this.fMethod != null
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::ENTER
method != null
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::EXIT
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::ENTER
annotationType != null
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == com.sun.proxy.$Proxy7.class
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::EXIT
this.fMethod == orig(this.fMethod)
return != null
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] elements != null
size(return[]) one of { 0, 1 }
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::EXIT
this.fMethod == orig(this.fMethod)
return != null
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::ENTER
params != null
params.getClass().getName() == java.lang.Object[].class
params[] == []
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::EXIT
this.fMethod == orig(this.fMethod)
params[] == orig(params[])
params[] == []
return == null
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::ENTER
other != null
other.fMethod != null
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT
this.fMethod == orig(this.fMethod)
other.fMethod == orig(other.fMethod)
other.fMethod != null
return == false
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::ENTER
errors != null
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::ENTER
errors != null
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
children.getClass().getName() == java.lang.Class[].class
size(children[]) one of { 1, 6 }
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.Suite] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 6 }
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
children.getClass().getName() == java.lang.Class[].class
size(children[]) one of { 1, 6 }
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.Suite] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 6 }
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass != null
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT57
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.fMethodsForAnnotations != null
this.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFieldsForAnnotations != null
this.fFieldsForAnnotations.getClass().getName() == java.util.HashMap.class
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::ENTER
this.fClass != null
member != null
map != null
map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT60
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fClass != null
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class):::ENTER
this.fClass != null
test != null
annotationClass has only one value
annotationClass != null
valueClass has only one value
valueClass != null
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fClass != null
return != null
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this.fClass != null
annotationClass has only one value
annotationClass != null
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fClass != null
return != null
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::ENTER
map != null
map.getClass().getName() == java.util.HashMap.class
type != null
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
return != null
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
annotationClass != null
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
return != null
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT134
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return[] == []
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT135
this.fClass != null
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
(this.fClass != null)  ==>  (size(return[]) one of { 0, 2 })
(this.fClass == null)  ==>  (orig(this) has only one value)
(this.fClass == null)  ==>  (return[] == [])
(this.fClass == null)  ==>  (this.fFieldsForAnnotations has only one value)
(this.fClass == null)  ==>  (this.fMethodsForAnnotations has only one value)
return != null
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] elements != null
size(return[]) one of { 0, 2 }
size(return[])-1 != 0
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this.fClass != null
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fClass != null
return != null
===========================================================================
org.junit.runners.model.TestClass.getName():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT114
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "null"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT115
this.fClass != null
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
(this.fClass == null)  ==>  (orig(this) has only one value)
(this.fClass == null)  ==>  (return has only one value)
(this.fClass == null)  ==>  (return.toString == "null")
(this.fClass == null)  ==>  (this.fFieldsForAnnotations has only one value)
(this.fClass == null)  ==>  (this.fMethodsForAnnotations has only one value)
return != null
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::ENTER
this.fClass != null
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fClass != null
return != null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
return[].getClass().getName() elements == java.lang.Class.class
return[].getClass().getName() one of { [], [java.lang.Class, java.lang.Class] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 2 }
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::ENTER
this.fClass != null
annotation != null
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fFieldsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
(return == true)  ==>  (orig(annotation) has only one value)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.fClass has only one value)
(return == true)  ==>  (this.fFieldsForAnnotations has only one value)
(return == true)  ==>  (this.fMethodsForAnnotations has only one value)
this.fClass != null
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="return == true"
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return == true
orig(this) has only one value
orig(annotation) has only one value
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="not(return == true)"
return == false
Exiting Daikon.
