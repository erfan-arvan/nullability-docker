Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 2 times.  Unmatched entries are ignored!
Unterminated calls:
  dk.brics.automaton.Datatypes.main(java.lang.String[]) : 1 invocation
  dk.brics.automaton.Datatypes.buildAll() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
dk.brics.automaton.Automaton:::CLASS
dk.brics.automaton.Automaton.minimization == 2
dk.brics.automaton.Automaton.minimize_always == false
===========================================================================
dk.brics.automaton.Automaton:::OBJECT
this.initial != null
this.initial.transitions != null
this.initial.transitions.getClass().getName() == java.util.HashSet.class
this.initial.number >= 0
this.info == null
this.hash_code >= 0
===========================================================================
dk.brics.automaton.Automaton.Automaton():::EXIT
this.initial.accept == false
this.initial.number == 0
this.deterministic == true
this.hash_code == 0
this.singleton == null
===========================================================================
dk.brics.automaton.Automaton.checkMinimizeAlways():::ENTER
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.checkMinimizeAlways():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.clearHashCode():::ENTER
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.clearHashCode():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
this.hash_code <= orig(this.hash_code)
===========================================================================
dk.brics.automaton.Automaton.clone():::ENTER
this.singleton.toString == "0"
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.clone():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.singleton.toString == "0"
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.info == null
return.hash_code >= 0
return.singleton.toString == "0"
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.cloneExpanded():::ENTER
this.singleton.toString == "0"
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.cloneExpanded():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.singleton.toString == "0"
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.info == null
return.hash_code >= 0
return.singleton == null
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.cloneExpandedIfRequired():::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.cloneExpandedIfRequired():::EXIT626
===========================================================================
dk.brics.automaton.Automaton.cloneExpandedIfRequired():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number >= 0
return.info == null
return.hash_code >= 0
return.singleton == null
this.initial.id >= orig(this.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.complement():::ENTER
this.initial.accept == false
this.initial.number == 0
this.deterministic == true
this.hash_code one of { 0, 18 }
this.singleton.toString one of { "", "0000" }
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
===========================================================================
dk.brics.automaton.Automaton.complement():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.initial.number one of { 0, 1 }
this.deterministic == true
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number one of { 0, 1 }
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
===========================================================================
dk.brics.automaton.Automaton.concatenate(dk.brics.automaton.Automaton):::ENTER
this.initial.number == 0
this.hash_code == 0
this.singleton.toString one of { "?", "{" }
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 != null
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 0, 769, 990 }
arg0.singleton.toString == "}"
===========================================================================
dk.brics.automaton.Automaton.concatenate(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
this.initial.accept == false
this.initial.number == 0
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 0, 769, 990 }
arg0.singleton == null
return != null
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.info == null
return.hash_code == 0
return.singleton == null
this.initial.id >= orig(this.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
arg0.initial.id >= orig(arg0.initial.id)
===========================================================================
dk.brics.automaton.Automaton.determinize():::ENTER
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.determinize():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.deterministic == true
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
this.initial.id >= orig(this.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.expandSingleton():::ENTER
===========================================================================
dk.brics.automaton.Automaton.expandSingleton():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.singleton == null
this.initial.id >= orig(this.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.getAcceptStates():::ENTER
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.getAcceptStates():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.Automaton.getLiveStates(java.util.Set):::ENTER
this.deterministic == true
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 != null
arg0.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.Automaton.getLiveStates(java.util.Set):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.deterministic == true
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.Automaton.getNumberOfStates():::ENTER
this.singleton.toString one of { "", "\ufeff" }
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.getNumberOfStates():::EXIT500
this.initial.accept == false
this.initial.number == 0
this.deterministic == true
this.hash_code == 0
this.singleton != null
dk.brics.automaton.Automaton.allow_mutation == true
return one of { 1, 2 }
===========================================================================
dk.brics.automaton.Automaton.getNumberOfStates():::EXIT501
this.singleton == null
===========================================================================
dk.brics.automaton.Automaton.getNumberOfStates():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(this.singleton != null)  ==>  (dk.brics.automaton.Automaton.allow_mutation == true)
(this.singleton != null)  ==>  (return one of { 1, 2 })
(this.singleton != null)  ==>  (this.deterministic == true)
(this.singleton != null)  ==>  (this.hash_code == 0)
(this.singleton != null)  ==>  (this.initial.accept == false)
(this.singleton != null)  ==>  (this.initial.number == 0)
(this.singleton != null)  ==>  (this.singleton.toString one of { "", "\ufeff" })
this.singleton.toString one of { "", "\ufeff" }
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return >= 1
===========================================================================
dk.brics.automaton.Automaton.getNumberOfTransitions():::ENTER
this.singleton.toString one of { "", "\ufeff" }
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.getNumberOfTransitions():::EXIT510
this.initial.accept == false
this.initial.number == 0
this.deterministic == true
this.hash_code == 0
this.singleton != null
dk.brics.automaton.Automaton.allow_mutation == true
return one of { 0, 1 }
===========================================================================
dk.brics.automaton.Automaton.getNumberOfTransitions():::EXIT514
this.singleton == null
return >= 1
===========================================================================
dk.brics.automaton.Automaton.getNumberOfTransitions():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(this.singleton != null)  ==>  (dk.brics.automaton.Automaton.allow_mutation == true)
(this.singleton != null)  ==>  (return one of { 0, 1 })
(this.singleton != null)  ==>  (this.deterministic == true)
(this.singleton != null)  ==>  (this.hash_code == 0)
(this.singleton != null)  ==>  (this.initial.accept == false)
(this.singleton != null)  ==>  (this.initial.number == 0)
(this.singleton != null)  ==>  (this.singleton.toString one of { "", "\ufeff" })
(this.singleton == null)  ==>  (return >= 1)
this.singleton.toString one of { "", "\ufeff" }
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return >= 0
===========================================================================
dk.brics.automaton.Automaton.getSortedTransitions(java.util.Set):::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg0.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.Automaton.getSortedTransitions(java.util.Set):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
return.getClass().getName() == dk.brics.automaton.Transition[][].class
===========================================================================
dk.brics.automaton.Automaton.getStartPoints():::ENTER
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.getStartPoints():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return[] elements >= 0
return[] sorted by <
===========================================================================
dk.brics.automaton.Automaton.getStates():::ENTER
this.singleton == null
===========================================================================
dk.brics.automaton.Automaton.getStates():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.Automaton.intersection(dk.brics.automaton.Automaton):::ENTER
this.initial.number one of { 0, 7, 11 }
this.initial.id one of { 6329, 7442, 7540 }
dk.brics.automaton.State.next_id one of { 6348, 7453, 7563 }
this.deterministic == true
this.hash_code one of { 25, 63, 116 }
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 1 }
arg0.initial.id one of { 6342, 7452, 7562 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 10, 46 }
arg0.singleton == null
===========================================================================
dk.brics.automaton.Automaton.intersection(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg0.initial == orig(arg0.initial)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
this.initial.number one of { 0, 7, 11 }
this.initial.id one of { 6329, 7442, 7540 }
dk.brics.automaton.State.next_id one of { 6357, 7462, 7579 }
this.deterministic == true
this.hash_code one of { 25, 63, 116 }
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 1 }
arg0.initial.id one of { 6342, 7452, 7562 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 10, 46 }
arg0.singleton == null
return.initial.accept == false
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number one of { 1, 3 }
return.initial.id one of { 6348, 7453, 7563 }
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
===========================================================================
dk.brics.automaton.Automaton.isDebug():::ENTER
this.singleton == null
===========================================================================
dk.brics.automaton.Automaton.isDebug():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return == false
===========================================================================
dk.brics.automaton.Automaton.isDebug():::EXIT;condition="not(return == true)"
===========================================================================
dk.brics.automaton.Automaton.isDeterministic():::ENTER
this.initial.number == 0
this.deterministic == true
this.hash_code one of { 0, 769 }
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.isDeterministic():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.initial.number == 0
this.deterministic == true
this.hash_code one of { 0, 769 }
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return == true
===========================================================================
dk.brics.automaton.Automaton.isDeterministic():::EXIT;condition="return == true"
===========================================================================
dk.brics.automaton.Automaton.isEmpty():::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.isEmpty():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return == false
===========================================================================
dk.brics.automaton.Automaton.isEmpty():::EXIT;condition="not(return == true)"
===========================================================================
dk.brics.automaton.Automaton.isEmptyString():::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.isEmptyString():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(return == true)  ==>  (this.deterministic == true)
(return == true)  ==>  (this.hash_code == 3)
(return == true)  ==>  (this.initial.accept == false)
(return == true)  ==>  (this.initial.number == 0)
(return == true)  ==>  (this.singleton != null)
(return == true)  ==>  (this.singleton has only one value)
(return == true)  ==>  (this.singleton.toString == "")
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.isEmptyString():::EXIT;condition="return == true"
this.initial.accept == false
this.initial.number == 0
this.deterministic == true
this.hash_code == 3
this.singleton has only one value
this.singleton != null
this.singleton.toString == ""
return == true
===========================================================================
dk.brics.automaton.Automaton.isEmptyString():::EXIT;condition="not(return == true)"
return == false
===========================================================================
dk.brics.automaton.Automaton.isSingleton():::ENTER
===========================================================================
dk.brics.automaton.Automaton.isSingleton():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(this.singleton != null)  <==>  (return == true)
(this.singleton != null)  ==>  (dk.brics.automaton.Automaton.allow_mutation == true)
(this.singleton != null)  ==>  (dk.brics.automaton.Automaton.is_debug != null)
(this.singleton != null)  ==>  (dk.brics.automaton.Automaton.is_debug has only one value)
(this.singleton != null)  ==>  (this.deterministic == true)
(this.singleton != null)  ==>  (this.hash_code one of { 0, 3 })
(this.singleton != null)  ==>  (this.initial.accept == false)
(this.singleton != null)  ==>  (this.initial.number == 0)
(this.singleton == null)  <==>  (return == false)
===========================================================================
dk.brics.automaton.Automaton.isSingleton():::EXIT;condition="return == true"
this.initial.accept == false
this.initial.number == 0
this.deterministic == true
this.hash_code one of { 0, 3 }
this.singleton != null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return == true
===========================================================================
dk.brics.automaton.Automaton.isSingleton():::EXIT;condition="not(return == true)"
this.singleton == null
return == false
===========================================================================
dk.brics.automaton.Automaton.makeChar(char):::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.makeChar(char):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton != null
return.singleton.toString one of { "?", "{", "}" }
===========================================================================
dk.brics.automaton.Automaton.makeCharRange(char, char):::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.makeCharRange(char, char):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton.toString == "\ufeff"
===========================================================================
dk.brics.automaton.Automaton.makeCharSet(java.lang.String):::ENTER
dk.brics.automaton.Automaton.allow_mutation == false
dk.brics.automaton.Automaton.is_debug == null
arg0 has only one value
arg0.toString == " \t\n\r"
===========================================================================
dk.brics.automaton.Automaton.makeCharSet(java.lang.String):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
arg0.toString == orig(arg0.toString)
dk.brics.automaton.Automaton.allow_mutation == false
dk.brics.automaton.Automaton.is_debug has only one value
arg0.toString == " \t\n\r"
return has only one value
return.initial has only one value
return.initial.accept == false
return.initial.transitions has only one value
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.initial.id == 1
dk.brics.automaton.State.next_id == 3
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
===========================================================================
dk.brics.automaton.Automaton.makeMaxInteger(java.lang.String):::ENTER
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 != null
===========================================================================
dk.brics.automaton.Automaton.makeMaxInteger(java.lang.String):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg0.toString == orig(arg0.toString)
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.deterministic == true
return.info == null
return.singleton == null
===========================================================================
dk.brics.automaton.Automaton.minimize():::ENTER
this.singleton.toString == ""
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.minimize():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.info == orig(this.info)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.deterministic == true
this.singleton.toString == ""
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
this.initial.id >= orig(this.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
orig(this.hash_code) % this.hash_code == 0
this.hash_code >= orig(this.hash_code)
===========================================================================
dk.brics.automaton.Automaton.minimize(dk.brics.automaton.Automaton):::ENTER
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 != null
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.singleton == null
===========================================================================
dk.brics.automaton.Automaton.minimize(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.info == orig(arg0.info)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.deterministic == true
arg0.info == null
arg0.singleton == null
return != null
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.deterministic == true
return.info == null
return.singleton == null
arg0.initial.id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
arg0.hash_code >= orig(arg0.hash_code)
orig(arg0.hash_code) % arg0.hash_code == 0
===========================================================================
dk.brics.automaton.Automaton.optional():::ENTER
this.initial.accept == false
this.singleton.toString one of { " ", "-", "." }
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.optional():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.info == orig(this.info)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.initial.accept == true
this.initial.number == 0
this.deterministic == false
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == true
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
this.initial.number <= orig(this.initial.number)
this.initial.id > orig(this.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
this.hash_code <= orig(this.hash_code)
===========================================================================
dk.brics.automaton.Automaton.recomputeHashCode():::ENTER
this.deterministic == true
this.hash_code == 0
this.singleton.toString == ""
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.recomputeHashCode():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.deterministic == true
this.singleton.toString == ""
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
this.hash_code > orig(this.hash_code)
===========================================================================
dk.brics.automaton.Automaton.reduce():::ENTER
this.deterministic == true
this.hash_code == 0
this.singleton == null
===========================================================================
dk.brics.automaton.Automaton.reduce():::EXIT393
===========================================================================
dk.brics.automaton.Automaton.reduce():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
this.deterministic == true
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.removeDeadTransitions():::ENTER
this.deterministic == true
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.removeDeadTransitions():::EXIT463
===========================================================================
dk.brics.automaton.Automaton.removeDeadTransitions():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.id == orig(this.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.deterministic == true
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
this.hash_code <= orig(this.hash_code)
===========================================================================
dk.brics.automaton.Automaton.repeat():::ENTER
this.initial.accept == false
this.initial.number one of { 0, 1, 2 }
this.deterministic == true
this.singleton.toString == "0"
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.repeat():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
this.singleton.toString == orig(this.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.initial.accept == false
this.initial.number one of { 0, 1, 2 }
this.deterministic == true
this.singleton.toString == "0"
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == true
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.repeat(int):::ENTER
this.initial.accept == false
this.deterministic == true
this.singleton.toString == "0"
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 one of { 1, 4 }
===========================================================================
dk.brics.automaton.Automaton.repeat(int):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.info == orig(this.info)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.initial.accept == false
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number >= 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
this.initial.id >= orig(this.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
this.hash_code <= orig(this.hash_code)
===========================================================================
dk.brics.automaton.Automaton.repeat(int, int):::ENTER
this.initial.accept == false
this.initial.number one of { 0, 1, 2 }
this.deterministic == true
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 >= 0
arg1 >= 0
===========================================================================
dk.brics.automaton.Automaton.repeat(int, int):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.initial.accept == false
this.initial.number one of { 0, 1, 2 }
this.deterministic == true
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.info == null
return.hash_code == 0
return.singleton.toString == ""
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.Automaton.setAllowMutate(boolean):::ENTER
dk.brics.automaton.Automaton.allow_mutation == false
dk.brics.automaton.Automaton.is_debug has only one value
arg0 == true
===========================================================================
dk.brics.automaton.Automaton.setAllowMutate(boolean):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
return == false
===========================================================================
dk.brics.automaton.Automaton.setAllowMutate(boolean):::EXIT;condition="not(return == true)"
===========================================================================
dk.brics.automaton.Automaton.setStateNumbers(java.util.Set):::ENTER
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0 != null
arg0.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.Automaton.setStateNumbers(java.util.Set):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.totalize():::ENTER
this.deterministic == true
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
===========================================================================
dk.brics.automaton.Automaton.totalize():::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial == orig(this.initial)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions == orig(this.initial.transitions)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.initial.id == orig(this.initial.id)
this.deterministic == orig(this.deterministic)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
this.deterministic == true
this.singleton == null
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.State.next_id - orig(dk.brics.automaton.State.next_id) - 1 == 0
===========================================================================
dk.brics.automaton.Automaton.union(dk.brics.automaton.Automaton):::ENTER
this.initial.accept == false
this.initial.number == 0
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg0.initial.accept == false
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
===========================================================================
dk.brics.automaton.Automaton.union(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
this.initial.accept == orig(this.initial.accept)
this.initial.transitions.getClass().getName() == orig(this.initial.transitions.getClass().getName())
this.initial.number == orig(this.initial.number)
this.info == orig(this.info)
this.hash_code == orig(this.hash_code)
this.singleton == orig(this.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg0.initial == orig(arg0.initial)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
this.initial.accept == false
this.initial.number == 0
this.deterministic == false
this.hash_code == 0
this.singleton == null
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg0.initial.accept == false
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
return.initial.accept == false
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.State.next_id - orig(dk.brics.automaton.State.next_id) - 1 == 0
===========================================================================
dk.brics.automaton.BasicAutomata.anyOfRightLength(java.lang.String, int):::ENTER
arg0 != null
arg1 one of { 1, 2 }
===========================================================================
dk.brics.automaton.BasicAutomata.anyOfRightLength(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
return != null
return.transitions != null
return.transitions.getClass().getName() == java.util.HashSet.class
return.number == 0
return.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.atLeast(java.lang.String, int, java.util.Collection, boolean):::ENTER
arg0 != null
arg0.toString one of { "00", "01" }
arg1 one of { 1, 2 }
arg2 != null
arg2.getClass().getName() == java.util.ArrayList.class
arg3 == false
===========================================================================
dk.brics.automaton.BasicAutomata.atLeast(java.lang.String, int, java.util.Collection, boolean):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "00", "01" }
return != null
return.transitions != null
return.transitions.getClass().getName() == java.util.HashSet.class
return.number == 0
return.transitions.getClass().getName() != orig(arg2.getClass().getName())
return.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.atMost(java.lang.String, int):::ENTER
arg0 != null
arg1 one of { 1, 2 }
===========================================================================
dk.brics.automaton.BasicAutomata.atMost(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
return != null
return.transitions != null
return.transitions.getClass().getName() == java.util.HashSet.class
return.number == 0
return.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.between(java.lang.String, java.lang.String, int, java.util.Collection, boolean):::ENTER
arg0.toString one of { "00", "01" }
arg2 == 0
arg3.getClass().getName() == java.util.ArrayList.class
arg4 == false
===========================================================================
dk.brics.automaton.BasicAutomata.between(java.lang.String, java.lang.String, int, java.util.Collection, boolean):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString one of { "00", "01" }
return.accept == false
return.transitions.getClass().getName() == java.util.HashSet.class
return.number == 0
return.transitions.getClass().getName() != orig(arg3.getClass().getName())
return.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.makeAnyString():::EXIT
dk.brics.automaton.Automaton.minimization == 2
return.initial.accept == true
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.initial.id one of { 6087, 6105 }
dk.brics.automaton.State.next_id one of { 6088, 6106 }
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
===========================================================================
dk.brics.automaton.BasicAutomata.makeChar(char):::ENTER
===========================================================================
dk.brics.automaton.BasicAutomata.makeChar(char):::EXIT
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton != null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.id - dk.brics.automaton.State.next_id + 1 == 0
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharRange(char, char):::ENTER
arg0 <= arg1
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharRange(char, char):::EXIT102
orig(arg0) == orig(arg1)
orig(arg0) one of { 48, 65279 }
return.initial.id - dk.brics.automaton.State.next_id + 1 == 0
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharRange(char, char):::EXIT111
return.singleton == null
return.initial.id - dk.brics.automaton.State.next_id + 2 == 0
orig(arg0) < orig(arg1)
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharRange(char, char):::EXIT
(return.singleton == null)  <==>  (orig(arg0) < orig(arg1))
(return.singleton == null)  <==>  (return.initial.id - dk.brics.automaton.State.next_id + 2 == 0)
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton.toString one of { "0", "\ufeff" }
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharSet(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == " \t\n\r"
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharSet(java.lang.String):::EXIT129
===========================================================================
dk.brics.automaton.BasicAutomata.makeCharSet(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == " \t\n\r"
return has only one value
dk.brics.automaton.Automaton.minimization == 2
return.initial has only one value
return.initial.accept == false
return.initial.transitions has only one value
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.initial.id == 1
dk.brics.automaton.State.next_id == 3
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == false
dk.brics.automaton.Automaton.is_debug has only one value
===========================================================================
dk.brics.automaton.BasicAutomata.makeEmptyString():::EXIT
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton has only one value
return.singleton != null
return.singleton.toString == ""
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.id - dk.brics.automaton.State.next_id + 1 == 0
===========================================================================
dk.brics.automaton.BasicAutomata.makeInterval(int, int, int):::ENTER
arg0 one of { 0, 1 }
arg2 == 2
arg0 < arg1
===========================================================================
dk.brics.automaton.BasicAutomata.makeInterval(int, int, int):::EXIT
dk.brics.automaton.Automaton.minimization == 2
return.initial.accept == false
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.makeMaxInteger(java.lang.String):::ENTER
arg0 != null
===========================================================================
dk.brics.automaton.BasicAutomata.makeMaxInteger(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.deterministic == true
return.info == null
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicAutomata.makeString(java.lang.String):::ENTER
arg0 != null
===========================================================================
dk.brics.automaton.BasicAutomata.makeString(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
return.singleton == orig(arg0)
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.accept == false
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton != null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.id - dk.brics.automaton.State.next_id + 1 == 0
===========================================================================
dk.brics.automaton.BasicAutomata.maxInteger(java.lang.String, int, java.lang.StringBuilder):::ENTER
arg0 != null
arg1 >= 0
arg2 != null
===========================================================================
dk.brics.automaton.BasicAutomata.maxInteger(java.lang.String, int, java.lang.StringBuilder):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
dk.brics.automaton.BasicOperations.complement(dk.brics.automaton.Automaton):::ENTER
dk.brics.automaton.Automaton.minimization == 2
arg0.initial.accept == false
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 0, 18 }
arg0.singleton.toString one of { "", "0000" }
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg0.initial.id - dk.brics.automaton.State.next_id + 1 == 0
===========================================================================
dk.brics.automaton.BasicOperations.complement(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == return.initial
arg0.initial.accept == return.initial.accept
arg0.initial.transitions == return.initial.transitions
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == return.initial.number
arg0.initial.id == return.initial.id
arg0.deterministic == return.deterministic
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == return.hash_code
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
return == orig(arg0)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 1 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
return.info == null
return.singleton == null
===========================================================================
dk.brics.automaton.BasicOperations.concatenate(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::ENTER
arg0.initial.transitions.getClass().getName() == arg1.initial.transitions.getClass().getName()
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.info == null
arg0.hash_code == 0
arg0.singleton.toString one of { "?", "{" }
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg1 != null
arg1.initial != null
arg1.initial.transitions != null
arg1.initial.number == 0
arg1.deterministic == true
arg1.info == null
arg1.hash_code one of { 0, 769, 990 }
arg1.singleton.toString == "}"
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id < arg1.initial.id
dk.brics.automaton.State.next_id > arg1.initial.id
===========================================================================
dk.brics.automaton.BasicOperations.concatenate(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::EXIT75
===========================================================================
dk.brics.automaton.BasicOperations.concatenate(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == return.initial
arg0.initial.accept == return.initial.accept
arg0.initial.transitions == return.initial.transitions
arg0.initial.transitions.getClass().getName() == arg1.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.transitions.getClass().getName() == orig(arg1.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == return.initial.id
arg0.deterministic == return.deterministic
arg0.info == orig(arg0.info)
arg0.hash_code == return.hash_code
arg0.hash_code == orig(arg0.hash_code)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg1.initial.accept == orig(arg1.initial.accept)
arg1.initial.number == orig(arg1.initial.number)
arg1.deterministic == orig(arg1.deterministic)
arg1.info == orig(arg1.info)
arg1.hash_code == orig(arg1.hash_code)
return == orig(arg0)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg1.initial != null
arg1.initial.transitions != null
arg1.initial.number == 0
arg1.deterministic == true
arg1.info == null
arg1.hash_code one of { 0, 769, 990 }
arg1.singleton == null
return != null
return.initial.number == 0
return.info == null
return.singleton == null
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id != arg1.initial.id
arg0.initial.id >= orig(arg0.initial.id)
arg0.initial.id <= orig(dk.brics.automaton.State.next_id)
arg0.initial.id != orig(arg1.initial.id)
dk.brics.automaton.State.next_id > arg1.initial.id
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > orig(arg1.initial.id)
arg1.initial.id > orig(arg0.initial.id)
arg1.initial.id <= orig(dk.brics.automaton.State.next_id)
arg1.initial.id >= orig(arg1.initial.id)
===========================================================================
dk.brics.automaton.BasicOperations.concatenate(java.util.List):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == dk.brics.automaton.Automaton.class
arg0.getClass().getName() == java.util.ArrayList.class
size(arg0[]) >= 2
===========================================================================
dk.brics.automaton.BasicOperations.concatenate(java.util.List):::EXIT136
===========================================================================
dk.brics.automaton.BasicOperations.concatenate(java.util.List):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == dk.brics.automaton.Automaton.class
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number >= 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.transitions.getClass().getName() != orig(arg0.getClass().getName())
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.determinize(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.determinize(dk.brics.automaton.Automaton):::EXIT451
arg0.initial == orig(arg0.initial)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg0.deterministic == orig(arg0.deterministic)
dk.brics.automaton.Automaton.allow_mutation == true
===========================================================================
dk.brics.automaton.BasicOperations.determinize(dk.brics.automaton.Automaton):::EXIT455
arg0.initial.id == orig(dk.brics.automaton.State.next_id)
arg0.hash_code == 0
orig(arg0.deterministic) == false
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.BasicOperations.determinize(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(orig(arg0.deterministic) == false)  <==>  (arg0.initial.id == orig(dk.brics.automaton.State.next_id))
(orig(arg0.deterministic) == false)  <==>  (arg0.initial.id > orig(arg0.initial.id))
(orig(arg0.deterministic) == false)  <==>  (dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id))
(orig(arg0.deterministic) == false)  ==>  (arg0.hash_code == 0)
(orig(arg0.deterministic) == true)  <==>  (arg0.initial.id < orig(dk.brics.automaton.State.next_id))
(orig(arg0.deterministic) == true)  <==>  (arg0.initial.id == orig(arg0.initial.id))
(orig(arg0.deterministic) == true)  <==>  (dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id))
(orig(arg0.deterministic) == true)  ==>  (arg0.deterministic == orig(arg0.deterministic))
(orig(arg0.deterministic) == true)  ==>  (arg0.initial == orig(arg0.initial))
(orig(arg0.deterministic) == true)  ==>  (arg0.initial.number == orig(arg0.initial.number))
(orig(arg0.deterministic) == true)  ==>  (arg0.initial.transitions == orig(arg0.initial.transitions))
(orig(arg0.deterministic) == true)  ==>  (dk.brics.automaton.Automaton.allow_mutation == true)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code >= 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id >= orig(arg0.initial.id)
arg0.initial.id <= orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.BasicOperations.determinize(dk.brics.automaton.Automaton, java.util.Set):::ENTER
arg0.initial.transitions.getClass().getName() == arg1.getClass().getName()
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.number >= 0
arg0.deterministic == false
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg1 != null
arg1.getClass().getName() == java.util.HashSet.class
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.determinize(dk.brics.automaton.Automaton, java.util.Set):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == orig(arg1.getClass().getName())
arg0.initial.id == orig(dk.brics.automaton.State.next_id)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.number >= 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.BasicOperations.intersection(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::ENTER
arg0.initial.transitions.getClass().getName() == arg1.initial.transitions.getClass().getName()
dk.brics.automaton.Automaton.minimization == 2
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 7, 11 }
arg0.initial.id one of { 6329, 7442, 7540 }
dk.brics.automaton.State.next_id one of { 6348, 7453, 7563 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 25, 63, 116 }
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg1.initial.number one of { 0, 1 }
arg1.initial.id one of { 6342, 7452, 7562 }
arg1.deterministic == true
arg1.info == null
arg1.hash_code one of { 10, 46 }
arg1.singleton == null
===========================================================================
dk.brics.automaton.BasicOperations.intersection(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::EXIT331
===========================================================================
dk.brics.automaton.BasicOperations.intersection(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == orig(arg0.initial)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.transitions.getClass().getName() == arg1.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.transitions.getClass().getName() == orig(arg1.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg1.initial == orig(arg1.initial)
arg1.initial.accept == orig(arg1.initial.accept)
arg1.initial.transitions == orig(arg1.initial.transitions)
arg1.initial.number == orig(arg1.initial.number)
arg1.initial.id == orig(arg1.initial.id)
arg1.deterministic == orig(arg1.deterministic)
arg1.info == orig(arg1.info)
arg1.hash_code == orig(arg1.hash_code)
arg1.singleton == orig(arg1.singleton)
return.initial.id == orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 7, 11 }
arg0.initial.id one of { 6329, 7442, 7540 }
dk.brics.automaton.State.next_id one of { 6357, 7462, 7579 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code one of { 25, 63, 116 }
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg1.initial.number one of { 0, 1 }
arg1.initial.id one of { 6342, 7452, 7562 }
arg1.deterministic == true
arg1.info == null
arg1.hash_code one of { 10, 46 }
arg1.singleton == null
return.initial.accept == false
return.initial.number one of { 1, 3 }
return.deterministic == true
return.info == null
return.hash_code == 0
return.singleton == null
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::EXIT581
arg0.initial.accept == false
arg0.initial.number == 0
arg0.deterministic == true
arg0.hash_code one of { 0, 3 }
arg0.singleton != null
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::EXIT581;condition="not(return == true)"
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::EXIT582
arg0.singleton == null
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::EXIT582;condition="not(return == true)"
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == orig(arg0.initial)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
arg0.singleton.toString == orig(arg0.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(arg0.singleton != null)  ==>  (arg0.deterministic == true)
(arg0.singleton != null)  ==>  (arg0.hash_code one of { 0, 3 })
(arg0.singleton != null)  ==>  (arg0.initial.accept == false)
(arg0.singleton != null)  ==>  (arg0.initial.number == 0)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return == false
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.isEmpty(dk.brics.automaton.Automaton):::EXIT;condition="not(return == true)"
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT571
(arg0.hash_code == 0)  <==>  (return == false)
(arg0.hash_code == 3)  <==>  (return == true)
(arg0.hash_code == 3)  ==>  (arg0.initial.id - dk.brics.automaton.State.next_id + 1 == 0)
(arg0.hash_code == 3)  ==>  (arg0.singleton has only one value)
(arg0.hash_code == 3)  ==>  (arg0.singleton.toString == "")
arg0.initial.accept == false
arg0.initial.number == 0
arg0.deterministic == true
arg0.hash_code one of { 0, 3 }
arg0.singleton != null
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT571;condition="return == true"
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT571;condition="not(return == true)"
arg0.hash_code == 0
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT573
arg0.singleton == null
return == false
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT573;condition="not(return == true)"
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == orig(arg0.initial)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
arg0.singleton.toString == orig(arg0.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
(arg0.singleton != null)  ==>  (arg0.deterministic == true)
(arg0.singleton != null)  ==>  (arg0.hash_code one of { 0, 3 })
(arg0.singleton != null)  ==>  (arg0.initial.accept == false)
(arg0.singleton != null)  ==>  (arg0.initial.number == 0)
(arg0.singleton == null)  ==>  (return == false)
(return == true)  ==>  (arg0.deterministic == true)
(return == true)  ==>  (arg0.hash_code == 3)
(return == true)  ==>  (arg0.initial.accept == false)
(return == true)  ==>  (arg0.initial.id - dk.brics.automaton.State.next_id + 1 == 0)
(return == true)  ==>  (arg0.initial.number == 0)
(return == true)  ==>  (arg0.singleton != null)
(return == true)  ==>  (arg0.singleton has only one value)
(return == true)  ==>  (arg0.singleton.toString == "")
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT;condition="return == true"
arg0.initial.accept == false
arg0.initial.number == 0
arg0.deterministic == true
arg0.hash_code == 3
arg0.singleton has only one value
arg0.singleton != null
arg0.singleton.toString == ""
return == true
arg0.initial.id - dk.brics.automaton.State.next_id + 1 == 0
===========================================================================
dk.brics.automaton.BasicOperations.isEmptyString(dk.brics.automaton.Automaton):::EXIT;condition="not(return == true)"
return == false
===========================================================================
dk.brics.automaton.BasicOperations.optional(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
arg0.singleton.toString one of { " ", "-", "." }
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.optional(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == return.initial
arg0.initial.accept == return.initial.accept
arg0.initial.transitions == return.initial.transitions
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.id == return.initial.id
arg0.deterministic == return.deterministic
arg0.info == orig(arg0.info)
arg0.hash_code == return.hash_code
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
return == orig(arg0)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == true
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.deterministic == false
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial.number == 0
return.info == null
return.singleton == null
arg0.initial.number <= orig(arg0.initial.number)
arg0.initial.id - dk.brics.automaton.State.next_id + 1 == 0
arg0.initial.id > orig(arg0.initial.id)
arg0.initial.id >= orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
arg0.hash_code <= orig(arg0.hash_code)
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code >= 0
arg0.singleton.toString == "0"
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
return.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
dk.brics.automaton.Automaton.minimization == 2
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.accept == true
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.State.next_id - return.initial.id - 1 == 0
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
return.initial.id > orig(arg0.initial.id)
return.initial.id > orig(dk.brics.automaton.State.next_id)
return.hash_code <= orig(arg0.hash_code)
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton, int):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code >= 0
arg0.singleton.toString == "0"
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg1 one of { 1, 4 }
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton, int):::EXIT192
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton, int):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial.accept == return.initial.accept
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == return.initial.number
arg0.initial.number == orig(arg0.initial.number)
arg0.info == orig(arg0.info)
arg0.hash_code == return.hash_code
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.transitions != null
return.deterministic == false
return.info == null
return.singleton == null
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id <= return.initial.id
arg0.initial.id >= orig(arg0.initial.id)
arg0.initial.id != orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > return.initial.id
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
arg0.hash_code <= orig(arg0.hash_code)
return.initial.id >= orig(arg0.initial.id)
return.initial.id != orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton, int, int):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 1, 2 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code >= 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg1 >= 0
arg2 >= 0
arg0.initial.id < dk.brics.automaton.State.next_id
arg1 <= arg2
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton, int, int):::EXIT233
===========================================================================
dk.brics.automaton.BasicOperations.repeat(dk.brics.automaton.Automaton, int, int):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == orig(arg0.initial)
arg0.initial.accept == return.initial.accept
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == orig(arg0.initial.transitions)
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(arg0.initial.id)
arg0.deterministic == orig(arg0.deterministic)
arg0.info == orig(arg0.info)
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.accept == false
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number one of { 0, 1, 2 }
arg0.deterministic == true
arg0.info == null
arg0.hash_code >= 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return != null
return.initial != null
return.initial.transitions != null
return.initial.number == 0
return.info == null
return.hash_code == 0
return.singleton.toString == ""
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id < return.initial.id
arg0.initial.id < orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > return.initial.id
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
return.initial.id >= orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.BasicOperations.union(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::ENTER
arg0.initial.transitions.getClass().getName() == arg1.initial.transitions.getClass().getName()
dk.brics.automaton.Automaton.minimization == 2
arg0.initial.accept == false
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg1.initial.accept == false
arg1.initial.number == 0
arg1.info == null
arg1.hash_code == 0
arg1.singleton == null
===========================================================================
dk.brics.automaton.BasicOperations.union(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::EXIT412
===========================================================================
dk.brics.automaton.BasicOperations.union(dk.brics.automaton.Automaton, dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial == return.initial
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions == return.initial.transitions
arg0.initial.transitions.getClass().getName() == arg1.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == return.initial.transitions.getClass().getName()
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.initial.transitions.getClass().getName() == orig(arg1.initial.transitions.getClass().getName())
arg0.initial.number == orig(arg0.initial.number)
arg0.initial.id == orig(dk.brics.automaton.State.next_id)
arg0.deterministic == return.deterministic
arg0.info == orig(arg0.info)
arg0.hash_code == return.hash_code
arg0.hash_code == orig(arg0.hash_code)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
arg1.initial == orig(arg1.initial)
arg1.initial.accept == orig(arg1.initial.accept)
arg1.initial.transitions == orig(arg1.initial.transitions)
arg1.initial.number == orig(arg1.initial.number)
arg1.initial.id == orig(arg1.initial.id)
arg1.deterministic == orig(arg1.deterministic)
arg1.info == orig(arg1.info)
arg1.hash_code == orig(arg1.hash_code)
arg1.singleton == orig(arg1.singleton)
return == orig(arg0)
return.initial.id == orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial.accept == false
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number == 0
arg0.deterministic == false
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
arg1.initial.accept == false
arg1.initial.number == 0
arg1.info == null
arg1.hash_code == 0
arg1.singleton == null
return.initial.accept == false
return.initial.number == 0
return.info == null
return.singleton == null
dk.brics.automaton.State.next_id - orig(dk.brics.automaton.State.next_id) - 1 == 0
===========================================================================
dk.brics.automaton.BasicOperations.union(java.util.Collection):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.ArrayList.class
===========================================================================
dk.brics.automaton.BasicOperations.union(java.util.Collection):::EXIT
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number == 0
return.deterministic == false
return.info == null
return.hash_code == 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
return.initial.transitions.getClass().getName() != orig(arg0.getClass().getName())
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.Datatypes:::CLASS
dk.brics.automaton.Datatypes.ws.initial.transitions.getClass().getName() == dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName()
dk.brics.automaton.Datatypes.ws.info == dk.brics.automaton.Datatypes.ws.singleton
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == dk.brics.automaton.Datatypes.unicodecategory_names.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == dk.brics.automaton.Datatypes.xml_names.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == dk.brics.automaton.Datatypes.unicodecategory_names_array.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == dk.brics.automaton.Datatypes.xml_names_array.getClass().getName()
dk.brics.automaton.Datatypes.automata has only one value
dk.brics.automaton.Datatypes.automata != null
dk.brics.automaton.Datatypes.automata.getClass().getName() == java.util.HashMap.class
dk.brics.automaton.Datatypes.ws has only one value
dk.brics.automaton.Datatypes.ws != null
dk.brics.automaton.Automaton.minimization == 2
dk.brics.automaton.Datatypes.ws.initial has only one value
dk.brics.automaton.Datatypes.ws.initial != null
dk.brics.automaton.Datatypes.ws.initial.accept == true
dk.brics.automaton.Datatypes.ws.initial.transitions has only one value
dk.brics.automaton.Datatypes.ws.initial.transitions != null
dk.brics.automaton.Datatypes.ws.initial.number == 0
dk.brics.automaton.Datatypes.ws.initial.id == 10
dk.brics.automaton.Datatypes.ws.deterministic == true
dk.brics.automaton.Datatypes.ws.info == null
dk.brics.automaton.Datatypes.ws.hash_code == 9
dk.brics.automaton.Datatypes.ws.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.Datatypes.unicodeblock_names has only one value
dk.brics.automaton.Datatypes.unicodeblock_names != null
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == java.util.HashSet.class
dk.brics.automaton.Datatypes.unicodecategory_names has only one value
dk.brics.automaton.Datatypes.unicodecategory_names != null
dk.brics.automaton.Datatypes.xml_names has only one value
dk.brics.automaton.Datatypes.xml_names != null
dk.brics.automaton.Datatypes.unicodeblock_names_array has only one value
dk.brics.automaton.Datatypes.unicodeblock_names_array != null
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == java.lang.String[].class
dk.brics.automaton.Datatypes.unicodeblock_names_array[] contains no nulls and has only one value, of length 93
dk.brics.automaton.Datatypes.unicodeblock_names_array[] elements != null
dk.brics.automaton.Datatypes.unicodeblock_names_array[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
dk.brics.automaton.Datatypes.unicodeblock_names_array[].getClass().getName() elements == java.lang.String.class
dk.brics.automaton.Datatypes.unicodeblock_names_array[].toString == [BasicLatin, Latin-1Supplement, LatinExtended-A, LatinExtended-B, IPAExtensions, SpacingModifierLetters, CombiningDiacriticalMarks, Greek, Cyrillic, Armenian, Hebrew, Arabic, Syriac, Thaana, Devanagari, Bengali, Gurmukhi, Gujarati, Oriya, Tamil, Telugu, Kannada, Malayalam, Sinhala, Thai, Lao, Tibetan, Myanmar, Georgian, HangulJamo, Ethiopic, Cherokee, UnifiedCanadianAboriginalSyllabics, Ogham, Runic, Khmer, Mongolian, LatinExtendedAdditional, GreekExtended, GeneralPunctuation, SuperscriptsandSubscripts, CurrencySymbols, CombiningMarksforSymbols, LetterlikeSymbols, NumberForms, Arrows, MathematicalOperators, MiscellaneousTechnical, ControlPictures, OpticalCharacterRecognition, EnclosedAlphanumerics, BoxDrawing, BlockElements, GeometricShapes, MiscellaneousSymbols, Dingbats, BraillePatterns, CJKRadicalsSupplement, KangxiRadicals, IdeographicDescriptionCharacters, CJKSymbolsandPunctuation, Hiragana, Katakana, Bopomofo, HangulCompatibilityJamo, Kanbun, BopomofoExtended, EnclosedCJKLettersandMonths, CJKCompatibility, CJKUnifiedIdeographsExtensionA, CJKUnifiedIdeographs, YiSyllables, YiRadicals, HangulSyllables, CJKCompatibilityIdeographs, AlphabeticPresentationForms, ArabicPresentationForms-A, CombiningHalfMarks, CJKCompatibilityForms, SmallFormVariants, ArabicPresentationForms-B, Specials, HalfwidthandFullwidthForms, Specials, OldItalic, Gothic, Deseret, ByzantineMusicalSymbols, MusicalSymbols, MathematicalAlphanumericSymbols, CJKUnifiedIdeographsExtensionB, CJKCompatibilityIdeographsSupplement, Tags]
dk.brics.automaton.Datatypes.unicodecategory_names_array has only one value
dk.brics.automaton.Datatypes.unicodecategory_names_array != null
dk.brics.automaton.Datatypes.unicodecategory_names_array[] contains no nulls and has only one value, of length 36
dk.brics.automaton.Datatypes.unicodecategory_names_array[] elements != null
dk.brics.automaton.Datatypes.unicodecategory_names_array[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
dk.brics.automaton.Datatypes.unicodecategory_names_array[].getClass().getName() elements == java.lang.String.class
dk.brics.automaton.Datatypes.unicodecategory_names_array[].toString == [Lu, Ll, Lt, Lm, Lo, L, Mn, Mc, Me, M, Nd, Nl, No, N, Pc, Pd, Ps, Pe, Pi, Pf, Po, P, Zs, Zl, Zp, Z, Sm, Sc, Sk, So, S, Cc, Cf, Co, Cn, C]
dk.brics.automaton.Datatypes.xml_names_array has only one value
dk.brics.automaton.Datatypes.xml_names_array != null
dk.brics.automaton.Datatypes.xml_names_array[] contains no nulls and has only one value, of length 32
dk.brics.automaton.Datatypes.xml_names_array[] elements != null
dk.brics.automaton.Datatypes.xml_names_array[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
dk.brics.automaton.Datatypes.xml_names_array[].getClass().getName() elements == java.lang.String.class
dk.brics.automaton.Datatypes.xml_names_array[].toString == [NCName, QName, Char, NameChar, URI, anyname, noap, whitespace, whitespacechar, string, boolean, decimal, float, integer, duration, dateTime, time, date, gYearMonth, gYear, gMonthDay, gDay, hexBinary, base64Binary, NCName2, NCNames, QName2, Nmtoken2, Nmtokens, Name2, Names, language]
size(dk.brics.automaton.Datatypes.unicodeblock_names_array[]) == 93
size(dk.brics.automaton.Datatypes.unicodecategory_names_array[]) == 36
size(dk.brics.automaton.Datatypes.xml_names_array[]) == 32
dk.brics.automaton.Datatypes.automata.getClass().getName() != dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName()
dk.brics.automaton.Datatypes.automata.getClass().getName() != dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() != dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName()
===========================================================================
dk.brics.automaton.Datatypes.buildMap(java.lang.String[]):::ENTER
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == arg0.getClass().getName()
dk.brics.automaton.State.next_id one of { 12, 1609, 6117 }
size(arg0[]) one of { 26, 28, 84 }
===========================================================================
dk.brics.automaton.Datatypes.buildMap(java.lang.String[]):::EXIT
dk.brics.automaton.Datatypes.automata == orig(dk.brics.automaton.Datatypes.automata)
dk.brics.automaton.Datatypes.automata.getClass().getName() == return.getClass().getName()
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(dk.brics.automaton.Datatypes.automata.getClass().getName())
dk.brics.automaton.Datatypes.ws == orig(dk.brics.automaton.Datatypes.ws)
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Datatypes.ws.initial == orig(dk.brics.automaton.Datatypes.ws.initial)
dk.brics.automaton.Datatypes.ws.initial.accept == orig(dk.brics.automaton.Datatypes.ws.initial.accept)
dk.brics.automaton.Datatypes.ws.initial.transitions == orig(dk.brics.automaton.Datatypes.ws.initial.transitions)
dk.brics.automaton.Datatypes.ws.initial.number == orig(dk.brics.automaton.Datatypes.ws.initial.number)
dk.brics.automaton.Datatypes.ws.initial.id == orig(dk.brics.automaton.Datatypes.ws.initial.id)
dk.brics.automaton.Datatypes.ws.deterministic == orig(dk.brics.automaton.Datatypes.ws.deterministic)
dk.brics.automaton.Datatypes.ws.info == orig(dk.brics.automaton.Datatypes.ws.info)
dk.brics.automaton.Datatypes.ws.hash_code == orig(dk.brics.automaton.Datatypes.ws.hash_code)
dk.brics.automaton.Datatypes.ws.singleton == orig(dk.brics.automaton.Datatypes.ws.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Datatypes.unicodeblock_names == orig(dk.brics.automaton.Datatypes.unicodeblock_names)
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.ws.initial.transitions.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodecategory_names == orig(dk.brics.automaton.Datatypes.unicodecategory_names)
dk.brics.automaton.Datatypes.xml_names == orig(dk.brics.automaton.Datatypes.xml_names)
dk.brics.automaton.Datatypes.unicodeblock_names_array == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array)
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(arg0.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array[] == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array[])
dk.brics.automaton.Datatypes.unicodecategory_names_array == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array)
dk.brics.automaton.Datatypes.unicodecategory_names_array[] == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array[])
dk.brics.automaton.Datatypes.xml_names_array == orig(dk.brics.automaton.Datatypes.xml_names_array)
dk.brics.automaton.Datatypes.xml_names_array[] == orig(dk.brics.automaton.Datatypes.xml_names_array[])
arg0[] == orig(arg0[])
dk.brics.automaton.State.next_id one of { 1609, 5891, 6699 }
===========================================================================
dk.brics.automaton.Datatypes.put(java.util.Map, java.lang.String, dk.brics.automaton.Automaton):::ENTER
dk.brics.automaton.Datatypes.automata.getClass().getName() == arg0.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == arg2.initial.transitions.getClass().getName()
arg0 != null
arg1 != null
arg2 != null
arg2.initial != null
arg2.initial.transitions != null
arg2.initial.number >= 0
arg2.info == null
arg2.hash_code >= 0
arg2.singleton.toString == "\ufeff"
dk.brics.automaton.State.next_id > arg2.initial.id
===========================================================================
dk.brics.automaton.Datatypes.put(java.util.Map, java.lang.String, dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Datatypes.automata == orig(dk.brics.automaton.Datatypes.automata)
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(dk.brics.automaton.Datatypes.automata.getClass().getName())
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(arg0.getClass().getName())
dk.brics.automaton.Datatypes.ws == orig(dk.brics.automaton.Datatypes.ws)
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Datatypes.ws.initial == orig(dk.brics.automaton.Datatypes.ws.initial)
dk.brics.automaton.Datatypes.ws.initial.accept == orig(dk.brics.automaton.Datatypes.ws.initial.accept)
dk.brics.automaton.Datatypes.ws.initial.transitions == orig(dk.brics.automaton.Datatypes.ws.initial.transitions)
dk.brics.automaton.Datatypes.ws.initial.number == orig(dk.brics.automaton.Datatypes.ws.initial.number)
dk.brics.automaton.Datatypes.ws.initial.id == orig(dk.brics.automaton.Datatypes.ws.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.Datatypes.ws.deterministic == orig(dk.brics.automaton.Datatypes.ws.deterministic)
dk.brics.automaton.Datatypes.ws.info == orig(dk.brics.automaton.Datatypes.ws.info)
dk.brics.automaton.Datatypes.ws.hash_code == orig(dk.brics.automaton.Datatypes.ws.hash_code)
dk.brics.automaton.Datatypes.ws.singleton == orig(dk.brics.automaton.Datatypes.ws.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Datatypes.unicodeblock_names == orig(dk.brics.automaton.Datatypes.unicodeblock_names)
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == arg2.initial.transitions.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.ws.initial.transitions.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(arg2.initial.transitions.getClass().getName())
dk.brics.automaton.Datatypes.unicodecategory_names == orig(dk.brics.automaton.Datatypes.unicodecategory_names)
dk.brics.automaton.Datatypes.xml_names == orig(dk.brics.automaton.Datatypes.xml_names)
dk.brics.automaton.Datatypes.unicodeblock_names_array == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array)
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array[] == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array[])
dk.brics.automaton.Datatypes.unicodecategory_names_array == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array)
dk.brics.automaton.Datatypes.unicodecategory_names_array[] == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array[])
dk.brics.automaton.Datatypes.xml_names_array == orig(dk.brics.automaton.Datatypes.xml_names_array)
dk.brics.automaton.Datatypes.xml_names_array[] == orig(dk.brics.automaton.Datatypes.xml_names_array[])
arg1.toString == orig(arg1.toString)
arg2.initial == orig(arg2.initial)
arg2.initial.accept == orig(arg2.initial.accept)
arg2.initial.transitions == orig(arg2.initial.transitions)
arg2.initial.number == orig(arg2.initial.number)
arg2.initial.id == orig(arg2.initial.id)
arg2.deterministic == orig(arg2.deterministic)
arg2.info == orig(arg2.info)
arg2.hash_code == orig(arg2.hash_code)
arg2.singleton == orig(arg2.singleton)
arg2.singleton.toString == orig(arg2.singleton.toString)
arg2.initial != null
arg2.initial.transitions != null
arg2.initial.number >= 0
arg2.info == null
arg2.hash_code >= 0
arg2.singleton.toString == "\ufeff"
dk.brics.automaton.State.next_id > arg2.initial.id
===========================================================================
dk.brics.automaton.Datatypes.putFrom(java.lang.String, java.util.Map):::ENTER
dk.brics.automaton.Datatypes.automata.getClass().getName() == arg1.getClass().getName()
dk.brics.automaton.State.next_id one of { 1609, 5891 }
===========================================================================
dk.brics.automaton.Datatypes.putFrom(java.lang.String, java.util.Map):::EXIT
dk.brics.automaton.Datatypes.automata == orig(dk.brics.automaton.Datatypes.automata)
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(dk.brics.automaton.Datatypes.automata.getClass().getName())
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(arg1.getClass().getName())
dk.brics.automaton.Datatypes.ws == orig(dk.brics.automaton.Datatypes.ws)
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Datatypes.ws.initial == orig(dk.brics.automaton.Datatypes.ws.initial)
dk.brics.automaton.Datatypes.ws.initial.accept == orig(dk.brics.automaton.Datatypes.ws.initial.accept)
dk.brics.automaton.Datatypes.ws.initial.transitions == orig(dk.brics.automaton.Datatypes.ws.initial.transitions)
dk.brics.automaton.Datatypes.ws.initial.number == orig(dk.brics.automaton.Datatypes.ws.initial.number)
dk.brics.automaton.Datatypes.ws.initial.id == orig(dk.brics.automaton.Datatypes.ws.initial.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.Datatypes.ws.deterministic == orig(dk.brics.automaton.Datatypes.ws.deterministic)
dk.brics.automaton.Datatypes.ws.info == orig(dk.brics.automaton.Datatypes.ws.info)
dk.brics.automaton.Datatypes.ws.hash_code == orig(dk.brics.automaton.Datatypes.ws.hash_code)
dk.brics.automaton.Datatypes.ws.singleton == orig(dk.brics.automaton.Datatypes.ws.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Datatypes.unicodeblock_names == orig(dk.brics.automaton.Datatypes.unicodeblock_names)
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.ws.initial.transitions.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodecategory_names == orig(dk.brics.automaton.Datatypes.unicodecategory_names)
dk.brics.automaton.Datatypes.xml_names == orig(dk.brics.automaton.Datatypes.xml_names)
dk.brics.automaton.Datatypes.unicodeblock_names_array == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array)
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array[] == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array[])
dk.brics.automaton.Datatypes.unicodecategory_names_array == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array)
dk.brics.automaton.Datatypes.unicodecategory_names_array[] == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array[])
dk.brics.automaton.Datatypes.xml_names_array == orig(dk.brics.automaton.Datatypes.xml_names_array)
dk.brics.automaton.Datatypes.xml_names_array[] == orig(dk.brics.automaton.Datatypes.xml_names_array[])
arg0.toString == orig(arg0.toString)
dk.brics.automaton.State.next_id one of { 1609, 5891 }
===========================================================================
dk.brics.automaton.Datatypes.putWith(java.lang.String[], java.util.Map):::ENTER
dk.brics.automaton.Datatypes.automata.getClass().getName() == arg1.getClass().getName()
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == arg0.getClass().getName()
dk.brics.automaton.State.next_id one of { 6699, 25959 }
arg0[].toString one of { [Nmtoken2, <_><Nmtoken><_>, Name2, <_><Name><_>, NCName2, <_><NCName><_>, QName2, <_><QName><_>, Nmtokens, <_>(<Nmtoken><_>)+, NCNames, <_>(<NCName><_>)+, Names, <_>(<Name><_>)+, unsignedLong, <_><UNSIGNEDLONG><_>, unsignedInt, <_><UNSIGNEDINT><_>, unsignedShort, <_><UNSIGNEDSHORT><_>, unsignedByte, <_><UNSIGNEDBYTE><_>, long, <_>(<LONG>|-<LONG_NEG>)<_>, int, <_>(<INT>|-<INT_NEG>)<_>, short, <_>(<SHORT>|-<SHORT_NEG>)<_>, byte, <_>(<BYTE>|-<BYTE_NEG>)<_>, string, <Char>*], [boolean, <_>(true|false|1|0)<_>, decimal, <_>([-+]?<d>+(\.<d>+)?)<_>, float, <_>([-+]?<d>+(\.<d>+)?([Ee][-+]?<d>+)?|INF|-INF|NaN)<_>, integer, <_>[-+]?[0-9]+<_>, duration, <_>(-?P(((<d>+Y)?(<d>+M)?(<d>+D)?(T(((<d>+H)?(<d>+M)?(<d>+(\.<d>+)?S)?)&~()))?)&~()))<_>, dateTime, <_>(-?<Y>-<M>-<D>T<T>(\.<d>+)?<Z>?)<_>, time, <_>(<T>(\.<d>+)?<Z>?)<_>, date, <_>(-?<Y>-<M>-<D><Z>?)<_>, gYearMonth, <_>(-?<Y>-<M><Z>?)<_>, gYear, <_>(-?<Y><Z>?)<_>, gMonthDay, <_>(--<M>-<D><Z>?)<_>, gDay, <_>(--<D><Z>?)<_>, gMonth, <_>(--<M><Z>?)<_>, hexBinary, <_>([0-9a-fA-F]{2}*)<_>, base64Binary, <_>(((<B64S><B64S><B64S><B64S>)*((<B64S><B64S><B64S><B64>)|(<B64S><B64S><B16S>=)|(<B64S><B04S>= ?=)))?)<_>, language, <_>[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*<_>, nonPositiveInteger, <_>(0+|-<d>+)<_>, negativeInteger, <_>(-[1-9]<d>*)<_>, nonNegativeInteger, <_>(<d>+)<_>, positiveInteger, <_>([1-9]<d>*)<_>] }
size(arg0[]) one of { 32, 40 }
===========================================================================
dk.brics.automaton.Datatypes.putWith(java.lang.String[], java.util.Map):::EXIT
dk.brics.automaton.Datatypes.automata == orig(dk.brics.automaton.Datatypes.automata)
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(dk.brics.automaton.Datatypes.automata.getClass().getName())
dk.brics.automaton.Datatypes.automata.getClass().getName() == orig(arg1.getClass().getName())
dk.brics.automaton.Datatypes.ws == orig(dk.brics.automaton.Datatypes.ws)
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
dk.brics.automaton.Datatypes.ws.initial == orig(dk.brics.automaton.Datatypes.ws.initial)
dk.brics.automaton.Datatypes.ws.initial.accept == orig(dk.brics.automaton.Datatypes.ws.initial.accept)
dk.brics.automaton.Datatypes.ws.initial.transitions == orig(dk.brics.automaton.Datatypes.ws.initial.transitions)
dk.brics.automaton.Datatypes.ws.initial.number == orig(dk.brics.automaton.Datatypes.ws.initial.number)
dk.brics.automaton.Datatypes.ws.initial.id == orig(dk.brics.automaton.Datatypes.ws.initial.id)
dk.brics.automaton.Datatypes.ws.deterministic == orig(dk.brics.automaton.Datatypes.ws.deterministic)
dk.brics.automaton.Datatypes.ws.info == orig(dk.brics.automaton.Datatypes.ws.info)
dk.brics.automaton.Datatypes.ws.hash_code == orig(dk.brics.automaton.Datatypes.ws.hash_code)
dk.brics.automaton.Datatypes.ws.singleton == orig(dk.brics.automaton.Datatypes.ws.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Datatypes.unicodeblock_names == orig(dk.brics.automaton.Datatypes.unicodeblock_names)
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.ws.initial.transitions.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names.getClass().getName())
dk.brics.automaton.Datatypes.unicodecategory_names == orig(dk.brics.automaton.Datatypes.unicodecategory_names)
dk.brics.automaton.Datatypes.xml_names == orig(dk.brics.automaton.Datatypes.xml_names)
dk.brics.automaton.Datatypes.unicodeblock_names_array == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array)
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(dk.brics.automaton.Datatypes.xml_names_array.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array.getClass().getName() == orig(arg0.getClass().getName())
dk.brics.automaton.Datatypes.unicodeblock_names_array[] == orig(dk.brics.automaton.Datatypes.unicodeblock_names_array[])
dk.brics.automaton.Datatypes.unicodecategory_names_array == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array)
dk.brics.automaton.Datatypes.unicodecategory_names_array[] == orig(dk.brics.automaton.Datatypes.unicodecategory_names_array[])
dk.brics.automaton.Datatypes.xml_names_array == orig(dk.brics.automaton.Datatypes.xml_names_array)
dk.brics.automaton.Datatypes.xml_names_array[] == orig(dk.brics.automaton.Datatypes.xml_names_array[])
arg0[] == orig(arg0[])
dk.brics.automaton.State.next_id one of { 9420, 27299 }
arg0[].toString one of { [Nmtoken2, <_><Nmtoken><_>, Name2, <_><Name><_>, NCName2, <_><NCName><_>, QName2, <_><QName><_>, Nmtokens, <_>(<Nmtoken><_>)+, NCNames, <_>(<NCName><_>)+, Names, <_>(<Name><_>)+, unsignedLong, <_><UNSIGNEDLONG><_>, unsignedInt, <_><UNSIGNEDINT><_>, unsignedShort, <_><UNSIGNEDSHORT><_>, unsignedByte, <_><UNSIGNEDBYTE><_>, long, <_>(<LONG>|-<LONG_NEG>)<_>, int, <_>(<INT>|-<INT_NEG>)<_>, short, <_>(<SHORT>|-<SHORT_NEG>)<_>, byte, <_>(<BYTE>|-<BYTE_NEG>)<_>, string, <Char>*], [boolean, <_>(true|false|1|0)<_>, decimal, <_>([-+]?<d>+(\.<d>+)?)<_>, float, <_>([-+]?<d>+(\.<d>+)?([Ee][-+]?<d>+)?|INF|-INF|NaN)<_>, integer, <_>[-+]?[0-9]+<_>, duration, <_>(-?P(((<d>+Y)?(<d>+M)?(<d>+D)?(T(((<d>+H)?(<d>+M)?(<d>+(\.<d>+)?S)?)&~()))?)&~()))<_>, dateTime, <_>(-?<Y>-<M>-<D>T<T>(\.<d>+)?<Z>?)<_>, time, <_>(<T>(\.<d>+)?<Z>?)<_>, date, <_>(-?<Y>-<M>-<D><Z>?)<_>, gYearMonth, <_>(-?<Y>-<M><Z>?)<_>, gYear, <_>(-?<Y><Z>?)<_>, gMonthDay, <_>(--<M>-<D><Z>?)<_>, gDay, <_>(--<D><Z>?)<_>, gMonth, <_>(--<M><Z>?)<_>, hexBinary, <_>([0-9a-fA-F]{2}*)<_>, base64Binary, <_>(((<B64S><B64S><B64S><B64S>)*((<B64S><B64S><B64S><B64>)|(<B64S><B64S><B16S>=)|(<B64S><B04S>= ?=)))?)<_>, language, <_>[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*<_>, nonPositiveInteger, <_>(0+|-<d>+)<_>, negativeInteger, <_>(-[1-9]<d>*)<_>, nonNegativeInteger, <_>(<d>+)<_>, positiveInteger, <_>([1-9]<d>*)<_>] }
===========================================================================
dk.brics.automaton.MinimizationOperations$IntPair:::OBJECT
this.n1 >= 0
this.n2 >= 0
===========================================================================
dk.brics.automaton.MinimizationOperations$IntPair.IntPair(int, int):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
dk.brics.automaton.MinimizationOperations$IntPair.IntPair(int, int):::EXIT
this.n1 == orig(arg0)
this.n2 == orig(arg1)
===========================================================================
dk.brics.automaton.MinimizationOperations$StateList:::OBJECT
this == this.first.next.sl
this == this.first.sl
this.size == this.first.sl.size
this.first == this.first.next.prev
this.first == this.first.sl.first
this.first.q.accept == this.last.q.accept
this.first.q.transitions.getClass().getName() == this.last.q.transitions.getClass().getName()
this.first.next.prev == this.first.sl.first
this.first.next.sl == this.first.sl
this.first.next.sl == this.last.prev.sl
this.first.sl == this.last.sl
this.first.sl.size == this.last.sl.size
this.first.sl.first == this.last.sl.first
this.first.sl.last == this.last
this.first.sl.last == this.last.prev.next
this.first.sl.last == this.last.sl.last
this.last == this.last.prev.next
this.size >= 0
this.first.q != null
this.first.q.transitions != null
this.first.q.transitions.getClass().getName() == java.util.HashSet.class
this.first.q.number >= 0
this.first.next.q != null
this.first.next.prev != null
this.first.next.sl != null
this.first.prev == null
this.first.sl != null
this.first.sl.size >= 1
this.first.sl.first != null
this.first.sl.last != null
this.last.q != null
this.last.q.transitions != null
this.last.q.number >= 0
this.last.next == null
this.last.prev.q != null
this.last.prev.next != null
this.first.q.id < dk.brics.automaton.State.next_id
dk.brics.automaton.State.next_id > this.last.q.id
===========================================================================
dk.brics.automaton.MinimizationOperations$StateList.StateList():::EXIT
this.first == this.last
this.size == 0
this.first == null
===========================================================================
dk.brics.automaton.MinimizationOperations$StateList.add(dk.brics.automaton.State):::ENTER
this.first.q.accept == arg0.accept
this.first.q.transitions.getClass().getName() == arg0.transitions.getClass().getName()
arg0 != null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
this.first.q.number != arg0.number
this.first.q.id != arg0.id
dk.brics.automaton.State.next_id > arg0.id
this.last.q.number != arg0.number
this.last.q.id != arg0.id
===========================================================================
dk.brics.automaton.MinimizationOperations$StateList.add(dk.brics.automaton.State):::EXIT
this.size == this.last.sl.size
this.size == return.sl.size
this.first == this.last.sl.first
this.first == return.sl.first
this.first == orig(this.first.next.prev)
this.first.q == orig(this.first.q)
this.first.q.accept == arg0.accept
this.first.q.transitions == orig(this.first.q.transitions)
this.first.q.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.first.q.number == orig(this.first.q.number)
this.first.q.id == orig(this.first.q.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.first.next.q == orig(this.first.next.q)
this.first.next.prev == orig(this.first)
this.first.next.prev == orig(this.first.next.prev)
this.first.next.prev == orig(this.first.sl.first)
this.first.next.prev == orig(this.last.sl.first)
this.first.next.sl == return.prev.sl
this.first.prev == orig(this.first.prev)
this.first.sl == return.sl
this.first.sl.last == return
this.last == return
this.last.q == return.q
this.last.q.accept == arg0.accept
this.last.q.transitions == arg0.transitions
this.last.q.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.last.q.number == arg0.number
this.last.q.id == arg0.id
this.last.next == orig(this.last.next)
this.last.prev == return.prev
this.last.prev.q == return.prev.q
this.last.prev.next == return.prev.next
this.last.prev.prev == return.prev.prev
this.last.prev.sl == return.prev.sl
this.last.sl == return.sl
this.last.sl.last == return
arg0.accept == return.q.accept
arg0.accept == orig(this.first.q.accept)
arg0.accept == orig(arg0.accept)
arg0.transitions == return.q.transitions
arg0.transitions == orig(arg0.transitions)
arg0.transitions.getClass().getName() == return.q.transitions.getClass().getName()
arg0.transitions.getClass().getName() == orig(this.first.q.transitions.getClass().getName())
arg0.transitions.getClass().getName() == orig(arg0.transitions.getClass().getName())
arg0.number == return.q.number
arg0.number == orig(arg0.number)
arg0.id == return.q.id
arg0.id == orig(arg0.id)
return == return.prev.next
return == return.sl.last
return.q == orig(arg0)
return.prev == orig(this.first.sl.last)
return.prev == orig(this.last)
return.prev == orig(this.last.prev.next)
return.prev.q == orig(this.last.q)
return.prev.prev == orig(this.last.prev)
return.prev.sl == return.sl
return.prev.sl == orig(this)
return.prev.sl == orig(this.first.next.sl)
return.prev.sl == orig(this.first.sl)
return.prev.sl == orig(this.last.sl)
return.sl == orig(this)
return.sl == orig(this.first.next.sl)
this.size >= 1
this.first != null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
return != null
return.q != null
return.next == null
return.prev.q != null
return.prev.next != null
return.prev.sl != null
return.sl != null
this.size - orig(this.size) - 1 == 0
this.size - orig(this.first.sl.size) - 1 == 0
dk.brics.automaton.State.next_id > arg0.id
dk.brics.automaton.State.next_id > orig(this.first.q.id)
dk.brics.automaton.State.next_id > orig(this.last.q.id)
arg0.number != orig(this.first.q.number)
arg0.number != orig(this.last.q.number)
arg0.id != orig(this.first.q.id)
arg0.id != orig(this.last.q.id)
===========================================================================
dk.brics.automaton.MinimizationOperations$StateListNode:::OBJECT
this.q.transitions.getClass().getName() == this.next.q.transitions.getClass().getName()
this.q.transitions.getClass().getName() == this.prev.q.transitions.getClass().getName()
this.next == this.next.next.prev
this.next == this.next.prev.next
this.next.q.transitions.getClass().getName() == this.prev.q.transitions.getClass().getName()
this.next.next.prev == this.next.prev.next
this.next.next.sl == this.next.prev.sl
this.next.next.sl == this.next.sl
this.next.next.sl == this.prev.next.sl
this.next.next.sl == this.prev.prev.sl
this.next.next.sl == this.prev.sl
this.next.next.sl == this.sl
this.next.next.sl == this.sl.first.sl
this.next.prev.sl == this.next.sl
this.next.prev.sl == this.prev.next.sl
this.next.prev.sl == this.prev.prev.sl
this.next.prev.sl == this.prev.sl
this.next.prev.sl == this.sl
this.next.prev.sl == this.sl.first.sl
this.next.sl == this.prev.next.sl
this.next.sl == this.prev.prev.sl
this.next.sl == this.prev.sl
this.next.sl == this.sl
this.next.sl == this.sl.first.sl
this.next.sl.size == this.prev.sl.size
this.next.sl.size == this.sl.size
this.next.sl.first == this.prev.sl.first
this.next.sl.first == this.sl.first
this.next.sl.last == this.prev.sl.last
this.next.sl.last == this.sl.last
this.prev == this.prev.next.prev
this.prev == this.prev.prev.next
this.prev.next.prev == this.prev.prev.next
this.prev.next.sl == this.prev.prev.sl
this.prev.next.sl == this.prev.sl
this.prev.next.sl == this.sl
this.prev.next.sl == this.sl.first.sl
this.prev.prev.sl == this.prev.sl
this.prev.prev.sl == this.sl
this.prev.prev.sl == this.sl.first.sl
this.prev.sl == this.sl
this.prev.sl == this.sl.first.sl
this.prev.sl.size == this.sl.size
this.prev.sl.first == this.sl.first
this.prev.sl.last == this.sl.last
this.sl == this.sl.first.sl
this.sl.first.sl == this.sl.last.sl
this.q != null
this.q.transitions != null
this.q.transitions.getClass().getName() == java.util.HashSet.class
this.q.number >= 0
this.next.q != null
this.next.q.transitions != null
this.next.q.transitions.getClass().getName() == java.util.HashSet.class
this.next.q.number >= 0
this.next.next.q != null
this.next.next.prev != null
this.next.next.sl != null
this.next.prev.q != null
this.next.prev.next != null
this.next.prev.sl != null
this.next.sl != null
this.next.sl.size >= 1
this.next.sl.first != null
this.next.sl.last != null
this.prev.q != null
this.prev.q.transitions != null
this.prev.q.transitions.getClass().getName() == java.util.HashSet.class
this.prev.q.number >= 0
this.prev.next.q != null
this.prev.next.prev != null
this.prev.next.sl != null
this.prev.prev.q != null
this.prev.prev.next != null
this.prev.prev.sl != null
this.prev.sl != null
this.prev.sl.size >= 1
this.prev.sl.first != null
this.prev.sl.last != null
this.sl != null
this.sl.size >= 0
this.sl.first.q != null
this.sl.first.prev == null
this.sl.first.sl != null
this.sl.last.q != null
this.sl.last.next == null
this.q.number != this.next.q.number
this.q.number != this.prev.q.number
this.q.id < dk.brics.automaton.State.next_id
this.q.id != this.next.q.id
this.q.id != this.prev.q.id
dk.brics.automaton.State.next_id > this.next.q.id
dk.brics.automaton.State.next_id > this.prev.q.id
this.next.q.number != this.prev.q.number
this.next.q.id != this.prev.q.id
===========================================================================
dk.brics.automaton.MinimizationOperations$StateListNode.StateListNode(dk.brics.automaton.State, dk.brics.automaton.MinimizationOperations$StateList):::ENTER
arg1 == arg1.first.sl
arg1.first.sl == arg1.last.sl
arg0 != null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
arg1 != null
arg1.size >= 0
arg1.first.q != null
arg1.first.prev == null
arg1.first.sl != null
arg1.last.q != null
arg1.last.next == null
arg0.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.MinimizationOperations$StateListNode.StateListNode(dk.brics.automaton.State, dk.brics.automaton.MinimizationOperations$StateList):::EXIT
this.q == this.prev.next.q
this.q == this.sl.last.q
this.q == arg1.last.q
this.q == orig(arg0)
this.q.accept == arg0.accept
this.q.transitions == arg0.transitions
this.q.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.q.number == arg0.number
this.q.id == arg0.id
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.next == this.prev.next.next
this.prev == this.sl.last.prev
this.prev == arg1.last.prev
this.prev == orig(arg1.last)
this.prev.q == orig(arg1.last.q)
this.prev.q.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.prev.next == this.prev.sl.last
this.prev.next == arg1.last
this.prev.prev == orig(arg1.last.prev)
this.prev.sl == orig(arg1.first.sl)
this.prev.sl == orig(arg1.last.sl)
this.prev.sl.size == arg1.size
this.prev.sl.first == arg1.first
this.prev.sl.first == orig(arg1.first)
this.sl == this.sl.last.sl
this.sl == arg1.first.sl
this.sl == arg1.last.sl
this.sl == orig(arg1)
this.sl.size == arg1.size
this.sl.first == arg1.first
this.sl.first.q == arg1.first.q
this.sl.first.next == arg1.first.next
this.sl.last == arg1.last
arg0.accept == orig(arg0.accept)
arg0.transitions == orig(arg0.transitions)
arg0.transitions.getClass().getName() == orig(arg0.transitions.getClass().getName())
arg0.number == orig(arg0.number)
arg0.id == orig(arg0.id)
arg1.first.q == orig(arg1.first.q)
arg1.first.prev == orig(arg1.first.prev)
arg1.last.next == orig(arg1.last.next)
this.next == null
this.prev.next != null
this.prev.next.next == null
this.prev.sl.size >= 2
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
arg1.size >= 1
arg1.first != null
arg1.first.q != null
arg1.first.prev == null
arg1.last != null
arg1.last.next == null
dk.brics.automaton.State.next_id > arg0.id
this.prev.q.number != arg0.number
this.prev.q.id != arg0.id
this.prev.sl.size - orig(arg1.size) - 1 == 0
arg1.size - orig(arg1.size) - 1 == 0
===========================================================================
dk.brics.automaton.MinimizationOperations$StateListNode.remove():::ENTER
this == this.next.prev
this == this.prev.next
this.q == this.next.prev.q
this.q == this.prev.next.q
this.next == this.prev.next.next
this.next.next.prev == this.prev.next.next
this.next.prev == this.prev.next
this.next.prev.q == this.prev.next.q
this.next.prev.next == this.prev.next.next
this.next.prev.prev == this.prev
this.next.prev.prev == this.prev.next.prev
this.next.prev.prev == this.prev.prev.next
this.sl == this.sl.last.sl
this.next.prev != null
this.next.sl.size >= 2
this.prev.next != null
this.prev.sl.size >= 2
this.sl.size >= 1
this.sl.first != null
this.sl.last != null
===========================================================================
dk.brics.automaton.MinimizationOperations$StateListNode.remove():::EXIT
this.q == orig(this.q)
this.q == orig(this.next.prev.q)
this.q == orig(this.prev.next.q)
this.q.accept == orig(this.q.accept)
this.q.transitions == orig(this.q.transitions)
this.q.transitions.getClass().getName() == orig(this.q.transitions.getClass().getName())
this.q.number == orig(this.q.number)
this.q.id == orig(this.q.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.next == this.prev.next
this.next == orig(this.next)
this.next == orig(this.next.prev.next)
this.next.q == this.prev.next.q
this.next.q == orig(this.next.q)
this.next.q.accept == orig(this.next.q.accept)
this.next.q.transitions == orig(this.next.q.transitions)
this.next.q.transitions.getClass().getName() == orig(this.next.q.transitions.getClass().getName())
this.next.q.number == orig(this.next.q.number)
this.next.q.id == orig(this.next.q.id)
this.next.next == this.prev.next.next
this.next.next == orig(this.next.next)
this.next.next.q == orig(this.next.next.q)
this.next.next.next == orig(this.next.next.next)
this.next.next.prev == this.prev.next
this.next.next.prev == orig(this.next.next.prev)
this.next.next.prev == orig(this.next.prev.next)
this.next.next.sl == orig(this.next.next.sl)
this.next.prev == this.prev
this.next.prev == this.prev.next.prev
this.next.prev == this.prev.prev.next
this.next.prev == orig(this.next.prev.prev)
this.next.prev == orig(this.prev.next.prev)
this.next.prev.q == this.prev.q
this.next.prev.next == this.prev.next
this.next.prev.next == orig(this.next.prev.next)
this.next.prev.prev == this.prev.prev
this.next.sl == orig(this.next.prev.sl)
this.next.sl == orig(this.next.sl)
this.next.sl.last == orig(this.next.sl.last)
this.next.sl.last == orig(this.prev.sl.last)
this.next.sl.last == orig(this.sl.last)
this.prev == orig(this.prev)
this.prev == orig(this.prev.next.prev)
this.prev.q == orig(this.prev.q)
this.prev.q.accept == orig(this.prev.q.accept)
this.prev.q.transitions == orig(this.prev.q.transitions)
this.prev.q.transitions.getClass().getName() == orig(this.prev.q.transitions.getClass().getName())
this.prev.q.number == orig(this.prev.q.number)
this.prev.q.id == orig(this.prev.q.id)
this.prev.next == orig(this.next.prev.next)
this.prev.next == orig(this.prev.next.next)
this.prev.next.prev == orig(this.prev.next.prev)
this.prev.prev == orig(this.prev.prev)
this.prev.prev.q == orig(this.prev.prev.q)
this.prev.prev.next == orig(this.prev.next.prev)
this.prev.prev.next == orig(this.prev.prev.next)
this.prev.prev.prev == orig(this.prev.prev.prev)
this.prev.prev.sl == orig(this.prev.prev.sl)
this.prev.sl == orig(this.prev.next.sl)
this.prev.sl == orig(this.prev.sl)
this.prev.sl.first == orig(this.next.sl.first)
this.prev.sl.first == orig(this.prev.sl.first)
this.prev.sl.first == orig(this.sl.first)
this.sl == orig(this.sl)
this.sl == orig(this.sl.first.sl)
this.sl == orig(this.sl.last.sl)
this.sl.first.prev == orig(this.sl.first.prev)
this.sl.last.next == orig(this.sl.last.next)
this.next.sl.size - orig(this.next.sl.size) + 1 == 0
this.next.sl.size - orig(this.prev.sl.size) + 1 == 0
this.next.sl.size - orig(this.sl.size) + 1 == 0
this.prev.sl.size - orig(this.next.sl.size) + 1 == 0
this.prev.sl.size - orig(this.prev.sl.size) + 1 == 0
this.prev.sl.size - orig(this.sl.size) + 1 == 0
this.sl.size - orig(this.next.sl.size) + 1 == 0
this.sl.size - orig(this.prev.sl.size) + 1 == 0
this.sl.size - orig(this.sl.size) + 1 == 0
===========================================================================
dk.brics.automaton.MinimizationOperations.initialize(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] == []
arg0[].getClass().getName() == []
===========================================================================
dk.brics.automaton.MinimizationOperations.initialize(java.util.ArrayList, int):::EXIT
arg0[] elements == null
arg0[].getClass().getName() elements == null
size(arg0[])-1 >= orig(size(arg0[]))
===========================================================================
dk.brics.automaton.MinimizationOperations.minimize(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
arg0.singleton.toString == ""
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.MinimizationOperations.minimize(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.info == orig(arg0.info)
arg0.singleton == orig(arg0.singleton)
arg0.singleton.toString == orig(arg0.singleton.toString)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.deterministic == true
arg0.info == null
arg0.singleton.toString == ""
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id >= orig(arg0.initial.id)
arg0.initial.id != orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id >= orig(dk.brics.automaton.State.next_id)
arg0.hash_code >= orig(arg0.hash_code)
orig(arg0.hash_code) % arg0.hash_code == 0
===========================================================================
dk.brics.automaton.MinimizationOperations.minimizeHopcroft(dk.brics.automaton.Automaton):::ENTER
arg0 != null
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.info == null
arg0.hash_code >= 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.MinimizationOperations.minimizeHopcroft(dk.brics.automaton.Automaton):::EXIT383
===========================================================================
dk.brics.automaton.MinimizationOperations.minimizeHopcroft(dk.brics.automaton.Automaton):::EXIT
dk.brics.automaton.Automaton.minimization == orig(dk.brics.automaton.Automaton.minimization)
arg0.initial.accept == orig(arg0.initial.accept)
arg0.initial.transitions.getClass().getName() == orig(arg0.initial.transitions.getClass().getName())
arg0.info == orig(arg0.info)
arg0.singleton == orig(arg0.singleton)
dk.brics.automaton.Automaton.minimize_always == orig(dk.brics.automaton.Automaton.minimize_always)
dk.brics.automaton.Automaton.allow_mutation == orig(dk.brics.automaton.Automaton.allow_mutation)
dk.brics.automaton.Automaton.is_debug == orig(dk.brics.automaton.Automaton.is_debug)
dk.brics.automaton.Automaton.minimization == 2
arg0.initial != null
arg0.initial.transitions != null
arg0.initial.transitions.getClass().getName() == java.util.HashSet.class
arg0.initial.number >= 0
arg0.deterministic == true
arg0.info == null
arg0.hash_code == 0
arg0.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
arg0.initial.id < dk.brics.automaton.State.next_id
arg0.initial.id > orig(arg0.initial.id)
arg0.initial.id > orig(dk.brics.automaton.State.next_id)
dk.brics.automaton.State.next_id > orig(arg0.initial.id)
dk.brics.automaton.State.next_id > orig(dk.brics.automaton.State.next_id)
arg0.hash_code <= orig(arg0.hash_code)
===========================================================================
dk.brics.automaton.RegExp$Kind:::CLASS
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp$Kind:::OBJECT
===========================================================================
dk.brics.automaton.RegExp$Kind.Kind(java.lang.String, int):::ENTER
arg0 != null
===========================================================================
dk.brics.automaton.RegExp$Kind.Kind(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
dk.brics.automaton.RegExp$Kind.values():::ENTER
===========================================================================
dk.brics.automaton.RegExp$Kind.values():::EXIT
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == return.getClass().getName()
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
return has only one value
return[] contains no nulls and has only one value, of length 16
size(return[]) == 16
dk.brics.automaton.RegExp$Kind.REGEXP_UNION in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_STRING in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON in return[]
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL in return[]
===========================================================================
dk.brics.automaton.RegExp:::CLASS
dk.brics.automaton.RegExp.allow_mutation == false
===========================================================================
dk.brics.automaton.RegExp:::OBJECT
this.exp1.exp1.min == this.exp2.exp1.max
this.exp1.exp1.min == this.exp2.exp2.max
this.exp1.exp1.max == this.exp2.exp1.max
this.exp1.exp1.max == this.exp2.exp2.max
this.exp1.exp1.digits == this.exp2.exp2.digits
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
this.exp1.kind != null
this.exp1.exp1.kind != null
this.exp1.exp1.c >= 0
this.exp1.exp1.min one of { 0, 1 }
this.exp1.exp1.max >= 0
this.exp1.exp1.digits one of { 0, 2 }
this.exp1.exp1.from >= 0
this.exp1.exp1.to >= 0
this.exp1.exp1.b == null
this.exp1.exp1.flags == 0
this.exp1.exp1.pos == 0
this.exp1.exp2.kind != null
this.exp1.exp2.c >= 0
this.exp1.exp2.min >= 0
this.exp1.exp2.max >= 0
this.exp1.exp2.digits == 0
this.exp1.exp2.from >= 0
this.exp1.exp2.to >= 0
this.exp1.exp2.b == null
this.exp1.exp2.flags == 0
this.exp1.exp2.pos == 0
this.exp1.c >= 0
this.exp1.min >= 0
this.exp1.max >= 0
this.exp1.digits one of { 0, 2 }
this.exp1.from >= 0
this.exp1.to >= 0
this.exp1.b == null
this.exp1.flags == 0
this.exp1.pos == 0
this.exp2.kind != null
this.exp2.exp1.kind != null
this.exp2.exp1.c >= 0
this.exp2.exp1.min one of { 0, 1 }
this.exp2.exp1.max >= 0
this.exp2.exp1.digits == 0
this.exp2.exp1.from >= 0
this.exp2.exp1.to >= 0
this.exp2.exp1.b == null
this.exp2.exp1.flags == 0
this.exp2.exp1.pos == 0
this.exp2.exp2.kind != null
this.exp2.exp2.c >= 0
this.exp2.exp2.min one of { 0, 1 }
this.exp2.exp2.max one of { 0, 59 }
this.exp2.exp2.digits one of { 0, 2 }
this.exp2.exp2.from one of { 0, 65, 56320 }
this.exp2.exp2.to one of { 0, 70, 57343 }
this.exp2.exp2.b == null
this.exp2.exp2.flags == 0
this.exp2.exp2.pos == 0
this.exp2.c >= 0
this.exp2.min >= 0
this.exp2.max >= 0
this.exp2.digits == 0
this.exp2.from >= 0
this.exp2.to >= 0
this.exp2.b == null
this.exp2.flags == 0
this.exp2.pos == 0
this.c >= 0
this.min >= 0
this.max >= 0
this.digits one of { 0, 2 }
this.from >= 0
this.to >= 0
this.flags one of { 0, 65535 }
this.pos >= 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
this.exp1.exp1.c >= this.exp1.c
this.exp1.exp1.c >= this.exp1.from
this.exp1.exp1.c >= this.exp1.to
this.exp1.exp1.min <= this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp1.max**2
this.exp2.exp1.max == this.exp1.exp1.min**2
this.exp1.exp1.min <= this.exp2.exp2.min
this.exp1.exp1.min <= this.exp2.min
this.exp1.exp1.min <= this.exp2.max
this.exp1.exp1.max <= this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp1.max**2
this.exp2.exp1.max == this.exp1.exp1.max**2
this.exp1.exp1.max <= this.exp2.exp2.min
this.exp1.exp1.max == this.exp2.exp2.max**2
this.exp2.exp2.max == this.exp1.exp1.max**2
this.exp1.exp1.digits >= this.exp1.digits
this.exp1.exp1.digits >= this.digits
this.exp1.exp1.from <= this.exp1.exp1.to
this.exp1.exp1.from >= this.exp1.c
this.exp1.exp1.from >= this.exp1.from
this.exp1.exp1.from >= this.exp1.to
this.exp1.exp1.to >= this.exp1.c
this.exp1.exp1.to >= this.exp1.from
this.exp1.exp1.to >= this.exp1.to
this.exp1.exp2.c >= this.exp1.c
this.exp1.exp2.c >= this.exp1.from
this.exp1.exp2.c >= this.exp1.to
this.exp1.exp2.c >= this.exp2.exp2.c
this.exp1.exp2.min >= this.exp1.min
this.exp1.exp2.min >= this.exp1.max
this.exp1.exp2.min >= this.exp2.exp1.min
this.exp1.exp2.min >= this.exp2.exp1.max
this.exp1.exp2.min >= this.exp2.exp2.max
this.exp1.exp2.min >= this.exp2.min
this.exp1.exp2.min >= this.exp2.max
this.exp1.exp2.max >= this.exp1.min
this.exp1.exp2.max >= this.exp1.max
this.exp1.exp2.max >= this.exp2.exp1.min
this.exp1.exp2.max >= this.exp2.exp1.max
this.exp1.exp2.max >= this.exp2.exp2.max
this.exp1.exp2.max >= this.exp2.min
this.exp1.exp2.max >= this.exp2.max
this.exp1.exp2.from <= this.exp1.exp2.to
this.exp1.exp2.from >= this.exp1.c
this.exp1.exp2.from >= this.exp1.from
this.exp1.exp2.from >= this.exp1.to
this.exp1.exp2.from >= this.exp2.exp1.from
this.exp1.exp2.from >= this.exp2.exp1.to
this.exp1.exp2.from >= this.exp2.exp2.c
this.exp1.exp2.from >= this.exp2.exp2.from
this.exp1.exp2.from >= this.exp2.exp2.to
this.exp1.exp2.to >= this.exp1.c
this.exp1.exp2.to >= this.exp1.from
this.exp1.exp2.to >= this.exp1.to
this.exp1.exp2.to >= this.exp2.exp1.from
this.exp1.exp2.to >= this.exp2.exp1.to
this.exp1.exp2.to >= this.exp2.exp2.c
this.exp1.exp2.to >= this.exp2.exp2.from
this.exp1.exp2.to >= this.exp2.exp2.to
this.exp1.digits >= this.exp2.exp2.digits
this.exp1.digits >= this.digits
this.exp1.from <= this.exp1.to
this.exp1.from <= this.exp2.exp1.from
this.exp1.from <= this.exp2.exp1.to
this.exp1.from <= this.exp2.exp2.c
this.exp1.from <= this.exp2.exp2.from
this.exp1.from <= this.exp2.exp2.to
this.exp1.to <= this.exp2.exp1.to
this.exp1.to <= this.exp2.exp2.c
this.exp1.to <= this.exp2.exp2.from
this.exp1.to <= this.exp2.exp2.to
this.exp2.exp1.c >= this.exp2.c
this.exp2.exp1.c >= this.exp2.from
this.exp2.exp1.c >= this.exp2.to
this.exp2.exp1.min >= this.min
this.exp2.exp1.min >= this.max
this.exp2.exp1.max >= this.min
this.exp2.exp1.max >= this.max
this.exp2.exp1.from <= this.exp2.exp1.to
this.exp2.exp1.from >= this.exp2.c
this.exp2.exp1.from >= this.exp2.from
this.exp2.exp1.from >= this.exp2.to
this.exp2.exp1.to >= this.exp2.c
this.exp2.exp1.to >= this.exp2.from
this.exp2.exp1.to >= this.exp2.to
this.exp2.exp2.c >= this.exp2.c
this.exp2.exp2.c >= this.exp2.from
this.exp2.exp2.c >= this.exp2.to
this.exp2.exp2.min >= this.exp2.min
this.exp2.exp2.min >= this.exp2.max
this.exp2.exp2.min >= this.min
this.exp2.exp2.min >= this.max
this.exp2.exp2.max >= this.exp2.min
this.exp2.exp2.max >= this.exp2.max
this.exp2.exp2.max >= this.min
this.exp2.exp2.max >= this.max
this.exp2.exp2.digits >= this.digits
this.exp2.exp2.from <= this.exp2.exp2.to
this.exp2.exp2.from >= this.exp2.c
this.exp2.exp2.from >= this.exp2.from
this.exp2.exp2.from >= this.exp2.to
this.exp2.exp2.to >= this.exp2.c
this.exp2.exp2.to >= this.exp2.from
this.exp2.exp2.to >= this.exp2.to
this.exp2.min >= this.min
this.exp2.min >= this.max
this.exp2.max >= this.min
this.exp2.max >= this.max
this.exp2.from <= this.exp2.to
this.from <= this.to
===========================================================================
dk.brics.automaton.RegExp.RegExp():::EXIT
this.exp1 == this.exp2
this.min == this.max
this.digits == this.pos
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b == null
this.flags == 0
===========================================================================
dk.brics.automaton.RegExp.RegExp(java.lang.String):::ENTER
arg0 != null
===========================================================================
dk.brics.automaton.RegExp.RegExp(java.lang.String):::EXIT
this.exp1.exp1.s == this.exp2.exp2.s
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.min == this.exp1.exp2.min
this.exp1.exp1.min == this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp2.min
this.exp1.exp1.min == this.max
this.exp1.exp1.max == this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp2.min
this.exp1.exp1.from == this.exp2.exp2.c
this.exp1.exp1.to == this.exp2.exp2.c
this.exp1.exp2.kind == this.exp2.exp2.kind
this.exp1.exp2.exp1 == this.exp2.exp2.exp1
this.exp1.exp2.exp1 == this.exp2.exp2.exp2
this.exp1.exp2.exp2 == this.exp2.exp2.exp1
this.exp1.exp2.exp2 == this.exp2.exp2.exp2
this.exp1.exp2.s == this.exp2.exp2.s
this.exp1.exp2.c == this.exp2.exp2.c
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.exp1.min
this.exp1.exp2.min == this.exp1.max
this.exp1.exp2.min == this.exp2.exp1.min
this.exp1.exp2.min == this.exp2.exp1.max
this.exp1.exp2.min == this.exp2.exp2.min
this.exp1.exp2.min == this.exp2.min
this.exp1.exp2.min == this.exp2.max
this.exp1.exp2.min == this.max
this.exp1.min == this.exp2.exp2.min
this.exp1.max == this.exp2.exp2.min
this.exp1.digits == this.exp2.exp2.digits
this.exp1.digits == this.digits
this.exp1.from == this.exp1.to
this.exp1.from == this.exp2.exp2.c
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.c == this.exp2.from
this.exp2.exp2.c == this.exp2.to
this.exp2.exp2.min == this.exp2.exp2.max
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.min == this.exp2.max
this.exp2.exp2.min == this.min
this.exp2.exp2.min == this.max
this.exp2.exp2.digits == this.digits
arg0.toString == orig(arg0.toString)
this.kind != null
this.exp1.exp1.c one of { 0, 48 }
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 23 }
this.exp1.exp1.from one of { 0, 19968 }
this.exp1.exp1.to one of { 0, 40869 }
this.exp1.exp2.s.toString one of { "abs_path", "hostport" }
this.exp1.exp2.min == 0
this.exp1.c one of { 0, 37, 47 }
this.exp1.max one of { 0, 3, 4 }
this.exp1.digits == 0
this.exp1.from == 0
this.exp2.exp1.max one of { 0, 8 }
this.exp2.exp1.from one of { 0, 97, 55296 }
this.exp2.exp1.to one of { 0, 102, 56319 }
this.exp2.exp2.s.toString one of { "_", "escaped", "hex" }
this.exp2.exp2.c == 0
this.exp2.exp2.min == 0
this.exp2.exp2.digits == 0
this.exp2.min one of { 0, 1 }
this.exp2.max one of { 0, 3 }
this.exp2.from one of { 0, 3872 }
this.exp2.to one of { 0, 3881 }
this.s == null
this.c == 0
this.min one of { 0, 1 }
this.max one of { 0, 12, 31 }
this.b == null
this.flags == 65535
this.exp1.exp1.c <= this.exp1.exp2.c
this.exp1.exp1.c <= this.exp1.exp2.from
this.exp1.exp1.c <= this.exp1.exp2.to
this.exp1.exp1.c >= this.exp2.exp2.c
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= this.min
this.exp1.exp1.max >= this.exp1.exp2.min
this.exp1.exp1.max >= this.max
this.exp1.exp1.digits < this.pos
this.exp1.exp1.from <= this.exp2.exp1.c
this.exp1.exp1.from <= this.exp2.exp1.from
this.exp1.exp1.from <= this.exp2.exp1.to
this.exp1.exp1.from <= this.exp2.exp2.from
this.exp1.exp1.from <= this.exp2.exp2.to
this.exp1.exp1.to <= this.exp2.exp1.c
this.exp1.exp1.to <= this.exp2.exp1.from
this.exp1.exp1.to <= this.exp2.exp1.to
this.exp1.exp1.to <= this.exp2.exp2.from
this.exp1.exp1.to <= this.exp2.exp2.to
this.exp1.exp2.min <= this.min
this.exp1.c >= this.exp1.from
this.exp1.c >= this.exp2.exp2.c
this.exp1.min >= this.exp2.max
this.exp1.min >= this.max
this.exp1.max >= this.exp2.max
this.exp1.max >= this.max
this.exp1.digits < this.pos
this.exp1.from <= this.exp2.exp1.c
this.exp1.from <= this.exp2.c
this.exp1.from <= this.exp2.from
this.exp1.from <= this.exp2.to
this.exp2.exp1.c >= this.exp2.exp2.c
this.exp2.exp1.min >= this.exp2.exp2.min
this.exp2.exp1.max >= this.exp2.exp2.min
this.exp2.exp1.from >= this.exp2.exp2.c
this.exp2.exp1.to >= this.exp2.exp2.c
this.exp2.exp2.c <= this.exp2.exp2.from
this.exp2.exp2.c <= this.exp2.exp2.to
this.exp2.c == this.exp2.exp2.c**2
this.exp2.exp2.c == this.exp2.c**2
this.exp2.exp2.digits < this.pos
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.RegExp(java.lang.String, int):::ENTER
arg0 != null
arg1 == 65535
===========================================================================
dk.brics.automaton.RegExp.RegExp(java.lang.String, int):::EXIT
this.exp1.exp1.s == this.exp2.exp2.s
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.min == this.exp1.exp2.min
this.exp1.exp1.min == this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp2.min
this.exp1.exp1.min == this.max
this.exp1.exp1.max == this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp2.min
this.exp1.exp1.from == this.exp2.exp2.c
this.exp1.exp1.to == this.exp2.exp2.c
this.exp1.exp2.kind == this.exp2.exp2.kind
this.exp1.exp2.exp1 == this.exp2.exp2.exp1
this.exp1.exp2.exp1 == this.exp2.exp2.exp2
this.exp1.exp2.exp2 == this.exp2.exp2.exp1
this.exp1.exp2.exp2 == this.exp2.exp2.exp2
this.exp1.exp2.s == this.exp2.exp2.s
this.exp1.exp2.c == this.exp2.exp2.c
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.exp1.min
this.exp1.exp2.min == this.exp1.max
this.exp1.exp2.min == this.exp2.exp1.min
this.exp1.exp2.min == this.exp2.exp1.max
this.exp1.exp2.min == this.exp2.exp2.min
this.exp1.exp2.min == this.exp2.min
this.exp1.exp2.min == this.exp2.max
this.exp1.exp2.min == this.max
this.exp1.min == this.exp2.exp2.min
this.exp1.max == this.exp2.exp2.min
this.exp1.digits == this.exp2.exp2.digits
this.exp1.digits == this.digits
this.exp1.from == this.exp1.to
this.exp1.from == this.exp2.exp2.c
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.c == this.exp2.from
this.exp2.exp2.c == this.exp2.to
this.exp2.exp2.min == this.exp2.exp2.max
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.min == this.exp2.max
this.exp2.exp2.min == this.min
this.exp2.exp2.min == this.max
this.exp2.exp2.digits == this.digits
this.flags == orig(arg1)
arg0.toString == orig(arg0.toString)
this.kind != null
this.exp1.exp1.c one of { 0, 48 }
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 23 }
this.exp1.exp1.from one of { 0, 19968 }
this.exp1.exp1.to one of { 0, 40869 }
this.exp1.exp2.s.toString one of { "abs_path", "hostport" }
this.exp1.exp2.min == 0
this.exp1.c one of { 0, 37, 47 }
this.exp1.max one of { 0, 3, 4 }
this.exp1.digits == 0
this.exp1.from == 0
this.exp2.exp1.max one of { 0, 8 }
this.exp2.exp1.from one of { 0, 97, 55296 }
this.exp2.exp1.to one of { 0, 102, 56319 }
this.exp2.exp2.s.toString one of { "_", "escaped", "hex" }
this.exp2.exp2.c == 0
this.exp2.exp2.min == 0
this.exp2.exp2.digits == 0
this.exp2.min one of { 0, 1 }
this.exp2.max one of { 0, 3 }
this.exp2.from one of { 0, 3872 }
this.exp2.to one of { 0, 3881 }
this.s == null
this.c == 0
this.min one of { 0, 1 }
this.max one of { 0, 12, 31 }
this.b == null
this.flags == 65535
this.exp1.exp1.c <= this.exp1.exp2.c
this.exp1.exp1.c <= this.exp1.exp2.from
this.exp1.exp1.c <= this.exp1.exp2.to
this.exp1.exp1.c >= this.exp2.exp2.c
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= this.min
this.exp1.exp1.max >= this.exp1.exp2.min
this.exp1.exp1.max >= this.max
this.exp1.exp1.digits < this.pos
this.exp1.exp1.from <= this.exp2.exp1.c
this.exp1.exp1.from <= this.exp2.exp1.from
this.exp1.exp1.from <= this.exp2.exp1.to
this.exp1.exp1.from <= this.exp2.exp2.from
this.exp1.exp1.from <= this.exp2.exp2.to
this.exp1.exp1.to <= this.exp2.exp1.c
this.exp1.exp1.to <= this.exp2.exp1.from
this.exp1.exp1.to <= this.exp2.exp1.to
this.exp1.exp1.to <= this.exp2.exp2.from
this.exp1.exp1.to <= this.exp2.exp2.to
this.exp1.exp2.min <= this.min
this.exp1.c >= this.exp1.from
this.exp1.c >= this.exp2.exp2.c
this.exp1.min >= this.exp2.max
this.exp1.min >= this.max
this.exp1.max >= this.exp2.max
this.exp1.max >= this.max
this.exp1.digits < this.pos
this.exp1.from <= this.exp2.exp1.c
this.exp1.from <= this.exp2.c
this.exp1.from <= this.exp2.from
this.exp1.from <= this.exp2.to
this.exp2.exp1.c >= this.exp2.exp2.c
this.exp2.exp1.min >= this.exp2.exp2.min
this.exp2.exp1.max >= this.exp2.exp2.min
this.exp2.exp1.from >= this.exp2.exp2.c
this.exp2.exp1.to >= this.exp2.exp2.c
this.exp2.exp2.c <= this.exp2.exp2.from
this.exp2.exp2.c <= this.exp2.exp2.to
this.exp2.c == this.exp2.exp2.c**2
this.exp2.exp2.c == this.exp2.c**2
this.exp2.exp2.digits < this.pos
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.check(int):::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
arg0 >= 1
arg0 is a power of 2
this.digits <= this.pos
this.flags > arg0
===========================================================================
dk.brics.automaton.RegExp.check(int):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
return == true
this.digits <= this.pos
this.flags > orig(arg0)
===========================================================================
dk.brics.automaton.RegExp.check(int):::EXIT;condition="return == true"
===========================================================================
dk.brics.automaton.RegExp.findLeaves(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp$Kind, java.util.List, java.util.Map, dk.brics.automaton.AutomatonProvider, boolean):::ENTER
this.kind == arg1
this.exp1.exp1.min == this.min
this.exp1.exp1.max == arg0.exp1.max
this.exp1.exp1.digits == arg0.exp1.digits
this.exp1.exp2.min == this.exp1.exp2.max
this.min == this.max
this.from == this.to
this.kind != null
this.exp1 != null
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 13, 23 }
this.exp1.exp2.s.toString == "abs_path"
this.exp1.min one of { 0, 1, 3 }
this.exp2 != null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b == null
arg0 != null
arg0.kind != null
arg0.exp1.kind != null
arg0.exp1.c >= 0
arg0.exp1.min one of { 0, 1, 2 }
arg0.exp1.max >= 0
arg0.exp1.digits one of { 0, 2 }
arg0.exp1.from >= 0
arg0.exp1.to >= 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.c >= 0
arg0.exp2.min >= 0
arg0.exp2.max >= 0
arg0.exp2.digits one of { 0, 2 }
arg0.exp2.from >= 0
arg0.exp2.to >= 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c >= 0
arg0.min >= 0
arg0.max >= 0
arg0.digits one of { 0, 2 }
arg0.from >= 0
arg0.to >= 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == dk.brics.automaton.Automaton.class
arg2.getClass().getName() == java.util.ArrayList.class
arg3.getClass().getName() == java.util.HashMap.class
arg4 == null
arg5 == true
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != arg2.getClass().getName()
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != arg3.getClass().getName()
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.exp2.min
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= arg0.exp1.min
this.exp1.exp1.min <= arg0.exp1.max
this.exp1.exp1.min <= arg0.exp2.min
this.exp1.exp1.min <= arg0.exp2.max
this.exp1.exp1.min <= arg0.min
this.exp1.exp1.min <= arg0.max
this.exp1.exp1.max >= this.min
this.exp1.exp1.digits >= arg0.exp2.digits
this.exp1.exp1.digits >= arg0.digits
this.exp1.exp2.min >= this.min
this.exp1.exp2.min >= arg0.exp1.min
this.exp1.exp2.min >= arg0.exp2.max
this.exp1.exp2.min >= arg0.max
this.exp1.min >= this.min
this.exp1.max >= this.min
this.exp1.digits >= arg0.exp2.digits
this.exp1.digits >= arg0.digits
this.exp1.from <= arg0.exp1.from
this.exp1.from <= arg0.exp1.to
this.exp1.from <= arg0.exp2.c
this.exp1.from <= arg0.exp2.from
this.exp1.from <= arg0.exp2.to
this.exp1.to <= arg0.exp1.to
this.exp1.to <= arg0.exp2.c
this.exp1.to <= arg0.exp2.from
this.exp1.to <= arg0.exp2.to
this.exp2.exp2.c <= arg0.exp2.c
this.exp2.exp2.max <= arg0.exp2.max
this.exp2.exp2.digits <= arg0.exp2.digits
this.exp2.min <= arg0.exp2.min
this.exp2.min <= arg0.exp2.max
this.exp2.max <= arg0.exp2.min
this.exp2.max <= arg0.exp2.max
this.min <= arg0.exp1.min
this.min <= arg0.exp1.max
this.min <= arg0.exp2.min
this.min <= arg0.exp2.max
this.min <= arg0.min
this.min <= arg0.max
this.digits <= this.pos
this.digits <= arg0.exp1.digits
this.digits <= arg0.exp2.digits
this.digits <= arg0.digits
arg0.exp1.c >= arg0.c
arg0.exp1.c >= arg0.from
arg0.exp1.c >= arg0.to
arg0.exp1.digits >= arg0.digits
arg0.exp1.from <= arg0.exp1.to
arg0.exp1.from >= arg0.c
arg0.exp1.from >= arg0.from
arg0.exp1.from >= arg0.to
arg0.exp1.to >= arg0.c
arg0.exp1.to >= arg0.from
arg0.exp1.to >= arg0.to
arg0.exp2.c >= arg0.c
arg0.exp2.c >= arg0.from
arg0.exp2.c >= arg0.to
arg0.exp2.min >= arg0.min
arg0.exp2.min >= arg0.max
arg0.exp2.max >= arg0.min
arg0.exp2.max >= arg0.max
arg0.exp2.digits >= arg0.digits
arg0.exp2.from <= arg0.exp2.to
arg0.exp2.from >= arg0.c
arg0.exp2.from >= arg0.from
arg0.exp2.from >= arg0.to
arg0.exp2.to >= arg0.c
arg0.exp2.to >= arg0.from
arg0.exp2.to >= arg0.to
arg0.from <= arg0.to
arg2.getClass().getName() != arg3.getClass().getName()
===========================================================================
dk.brics.automaton.RegExp.findLeaves(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp$Kind, java.util.List, java.util.Map, dk.brics.automaton.AutomatonProvider, boolean):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
this.kind == orig(arg1)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == orig(this.exp1)
this.exp1.kind == orig(this.exp1.kind)
this.exp1.exp1 == orig(this.exp1.exp1)
this.exp1.exp1.kind == orig(this.exp1.exp1.kind)
this.exp1.exp1.exp1 == orig(this.exp1.exp1.exp1)
this.exp1.exp1.exp2 == orig(this.exp1.exp1.exp2)
this.exp1.exp1.s == orig(this.exp1.exp1.s)
this.exp1.exp1.s.toString == orig(this.exp1.exp1.s.toString)
this.exp1.exp1.c == orig(this.exp1.exp1.c)
this.exp1.exp1.min == this.min
this.exp1.exp1.min == orig(this.exp1.exp1.min)
this.exp1.exp1.max == arg0.exp1.max
this.exp1.exp1.max == orig(this.exp1.exp1.max)
this.exp1.exp1.digits == arg0.exp1.digits
this.exp1.exp1.digits == orig(this.exp1.exp1.digits)
this.exp1.exp1.from == orig(this.exp1.exp1.from)
this.exp1.exp1.to == orig(this.exp1.exp1.to)
this.exp1.exp1.b == orig(this.exp1.exp1.b)
this.exp1.exp1.flags == orig(this.exp1.exp1.flags)
this.exp1.exp1.pos == orig(this.exp1.exp1.pos)
this.exp1.exp2 == orig(this.exp1.exp2)
this.exp1.exp2.kind == orig(this.exp1.exp2.kind)
this.exp1.exp2.exp1 == orig(this.exp1.exp2.exp1)
this.exp1.exp2.exp2 == orig(this.exp1.exp2.exp2)
this.exp1.exp2.s == orig(this.exp1.exp2.s)
this.exp1.exp2.s.toString == orig(this.exp1.exp2.s.toString)
this.exp1.exp2.c == orig(this.exp1.exp2.c)
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == orig(this.exp1.exp2.min)
this.exp1.exp2.min == orig(this.exp1.exp2.max)
this.exp1.exp2.digits == orig(this.exp1.exp2.digits)
this.exp1.exp2.from == orig(this.exp1.exp2.from)
this.exp1.exp2.to == orig(this.exp1.exp2.to)
this.exp1.exp2.b == orig(this.exp1.exp2.b)
this.exp1.exp2.flags == orig(this.exp1.exp2.flags)
this.exp1.exp2.pos == orig(this.exp1.exp2.pos)
this.exp1.s == orig(this.exp1.s)
this.exp1.s.toString == orig(this.exp1.s.toString)
this.exp1.c == orig(this.exp1.c)
this.exp1.min == orig(this.exp1.min)
this.exp1.max == orig(this.exp1.max)
this.exp1.digits == orig(this.exp1.digits)
this.exp1.from == orig(this.exp1.from)
this.exp1.to == orig(this.exp1.to)
this.exp1.b == orig(this.exp1.b)
this.exp1.flags == orig(this.exp1.flags)
this.exp1.pos == orig(this.exp1.pos)
this.exp2 == orig(this.exp2)
this.exp2.kind == orig(this.exp2.kind)
this.exp2.exp1 == orig(this.exp2.exp1)
this.exp2.exp1.kind == orig(this.exp2.exp1.kind)
this.exp2.exp1.exp1 == orig(this.exp2.exp1.exp1)
this.exp2.exp1.exp2 == orig(this.exp2.exp1.exp2)
this.exp2.exp1.s == orig(this.exp2.exp1.s)
this.exp2.exp1.s.toString == orig(this.exp2.exp1.s.toString)
this.exp2.exp1.c == orig(this.exp2.exp1.c)
this.exp2.exp1.min == orig(this.exp2.exp1.min)
this.exp2.exp1.max == orig(this.exp2.exp1.max)
this.exp2.exp1.digits == orig(this.exp2.exp1.digits)
this.exp2.exp1.from == orig(this.exp2.exp1.from)
this.exp2.exp1.to == orig(this.exp2.exp1.to)
this.exp2.exp1.b == orig(this.exp2.exp1.b)
this.exp2.exp1.flags == orig(this.exp2.exp1.flags)
this.exp2.exp1.pos == orig(this.exp2.exp1.pos)
this.exp2.exp2 == orig(this.exp2.exp2)
this.exp2.exp2.kind == orig(this.exp2.exp2.kind)
this.exp2.exp2.exp1 == orig(this.exp2.exp2.exp1)
this.exp2.exp2.exp2 == orig(this.exp2.exp2.exp2)
this.exp2.exp2.s == orig(this.exp2.exp2.s)
this.exp2.exp2.s.toString == orig(this.exp2.exp2.s.toString)
this.exp2.exp2.c == orig(this.exp2.exp2.c)
this.exp2.exp2.min == orig(this.exp2.exp2.min)
this.exp2.exp2.max == orig(this.exp2.exp2.max)
this.exp2.exp2.digits == orig(this.exp2.exp2.digits)
this.exp2.exp2.from == orig(this.exp2.exp2.from)
this.exp2.exp2.to == orig(this.exp2.exp2.to)
this.exp2.exp2.b == orig(this.exp2.exp2.b)
this.exp2.exp2.flags == orig(this.exp2.exp2.flags)
this.exp2.exp2.pos == orig(this.exp2.exp2.pos)
this.exp2.s == orig(this.exp2.s)
this.exp2.s.toString == orig(this.exp2.s.toString)
this.exp2.c == orig(this.exp2.c)
this.exp2.min == orig(this.exp2.min)
this.exp2.max == orig(this.exp2.max)
this.exp2.digits == orig(this.exp2.digits)
this.exp2.from == orig(this.exp2.from)
this.exp2.to == orig(this.exp2.to)
this.exp2.b == orig(this.exp2.b)
this.exp2.flags == orig(this.exp2.flags)
this.exp2.pos == orig(this.exp2.pos)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
arg0.kind == orig(arg0.kind)
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.s.toString == orig(arg0.exp2.s.toString)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == orig(arg0.c)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == orig(arg0.from)
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
this.kind != null
this.exp1 != null
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 13, 23 }
this.exp1.exp2.s.toString == "abs_path"
this.exp1.min one of { 0, 1, 3 }
this.exp2 != null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b == null
arg0.kind != null
arg0.exp1.kind != null
arg0.exp1.c >= 0
arg0.exp1.min one of { 0, 1, 2 }
arg0.exp1.max >= 0
arg0.exp1.digits one of { 0, 2 }
arg0.exp1.from >= 0
arg0.exp1.to >= 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.c >= 0
arg0.exp2.min >= 0
arg0.exp2.max >= 0
arg0.exp2.digits one of { 0, 2 }
arg0.exp2.from >= 0
arg0.exp2.to >= 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c >= 0
arg0.min >= 0
arg0.max >= 0
arg0.digits one of { 0, 2 }
arg0.from >= 0
arg0.to >= 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg2[] elements != null
arg2[].getClass().getName() elements == dk.brics.automaton.Automaton.class
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != orig(arg2.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != orig(arg3.getClass().getName())
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.exp2.min
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= arg0.exp1.min
this.exp1.exp1.min <= arg0.exp1.max
this.exp1.exp1.min <= arg0.exp2.min
this.exp1.exp1.min <= arg0.exp2.max
this.exp1.exp1.min <= arg0.min
this.exp1.exp1.min <= arg0.max
this.exp1.exp1.max >= this.min
this.exp1.exp1.digits >= arg0.exp2.digits
this.exp1.exp1.digits >= arg0.digits
this.exp1.exp2.min >= this.min
this.exp1.exp2.min >= arg0.exp1.min
this.exp1.exp2.min >= arg0.exp2.max
this.exp1.exp2.min >= arg0.max
this.exp1.min >= this.min
this.exp1.max >= this.min
this.exp1.digits >= arg0.exp2.digits
this.exp1.digits >= arg0.digits
this.exp1.from <= arg0.exp1.from
this.exp1.from <= arg0.exp1.to
this.exp1.from <= arg0.exp2.c
this.exp1.from <= arg0.exp2.from
this.exp1.from <= arg0.exp2.to
this.exp1.to <= arg0.exp1.to
this.exp1.to <= arg0.exp2.c
this.exp1.to <= arg0.exp2.from
this.exp1.to <= arg0.exp2.to
this.exp2.exp2.c <= arg0.exp2.c
this.exp2.exp2.max <= arg0.exp2.max
this.exp2.exp2.digits <= arg0.exp2.digits
this.exp2.min <= arg0.exp2.min
this.exp2.min <= arg0.exp2.max
this.exp2.max <= arg0.exp2.min
this.exp2.max <= arg0.exp2.max
this.min <= arg0.exp1.min
this.min <= arg0.exp1.max
this.min <= arg0.exp2.min
this.min <= arg0.exp2.max
this.min <= arg0.min
this.min <= arg0.max
this.digits <= this.pos
this.digits <= arg0.exp1.digits
this.digits <= arg0.exp2.digits
this.digits <= arg0.digits
arg0.exp1.c >= arg0.c
arg0.exp1.c >= arg0.from
arg0.exp1.c >= arg0.to
arg0.exp1.digits >= arg0.digits
arg0.exp1.from <= arg0.exp1.to
arg0.exp1.from >= arg0.c
arg0.exp1.from >= arg0.from
arg0.exp1.from >= arg0.to
arg0.exp1.to >= arg0.c
arg0.exp1.to >= arg0.from
arg0.exp1.to >= arg0.to
arg0.exp2.c >= arg0.c
arg0.exp2.c >= arg0.from
arg0.exp2.c >= arg0.to
arg0.exp2.min >= arg0.min
arg0.exp2.min >= arg0.max
arg0.exp2.max >= arg0.min
arg0.exp2.max >= arg0.max
arg0.exp2.digits >= arg0.digits
arg0.exp2.from <= arg0.exp2.to
arg0.exp2.from >= arg0.c
arg0.exp2.from >= arg0.from
arg0.exp2.from >= arg0.to
arg0.exp2.to >= arg0.c
arg0.exp2.to >= arg0.from
arg0.exp2.to >= arg0.to
arg0.from <= arg0.to
size(arg2[])-1 >= orig(size(arg2[]))
===========================================================================
dk.brics.automaton.RegExp.makeAnyString():::ENTER
===========================================================================
dk.brics.automaton.RegExp.makeAnyString():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
return.kind == dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
return.exp1 == null
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeAutomaton(java.lang.String):::ENTER
arg0 != null
===========================================================================
dk.brics.automaton.RegExp.makeAutomaton(java.lang.String):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.toString == orig(arg0.toString)
return.kind == dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON
return.s == orig(arg0)
return != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
return.exp1 == null
return.exp2 == null
return.s != null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeChar(char):::ENTER
===========================================================================
dk.brics.automaton.RegExp.makeChar(char):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
return.kind == dk.brics.automaton.RegExp$Kind.REGEXP_CHAR
return.c == orig(arg0)
return != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
return.exp1 == null
return.exp2 == null
return.s == null
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeCharRange(char, char):::ENTER
arg0 <= arg1
===========================================================================
dk.brics.automaton.RegExp.makeCharRange(char, char):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
return.kind == dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE
return.from == orig(arg0)
return.to == orig(arg1)
return != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
return.exp1 == null
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.makeComplement(dk.brics.automaton.RegExp):::ENTER
arg0.kind == arg0.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == arg0.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == arg0.exp1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind has only one value
arg0.exp1.exp1 == null
arg0.exp1.exp2 == null
arg0.exp1.s == null
arg0.exp1.c == 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind has only one value
arg0.exp2.exp1 has only one value
arg0.exp2.exp2 has only one value
arg0.exp2.s == null
arg0.exp2.c == 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "", "0000" }
arg0.c == 0
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeComplement(dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == arg0.exp2.kind
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == arg0.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == arg0.exp1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == return.exp1.s
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == orig(arg0.c)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == orig(arg0.from)
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
return.exp1 == orig(arg0)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind has only one value
arg0.exp1.exp1 == null
arg0.exp1.exp2 == null
arg0.exp1.s == null
arg0.exp1.c == 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind has only one value
arg0.exp2.exp1 has only one value
arg0.exp2.exp2 has only one value
arg0.exp2.s == null
arg0.exp2.c == 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "", "0000" }
arg0.c == 0
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
return.exp1.s.toString one of { "", "0000" }
return.exp1.c == 0
return.exp1.min == 0
return.exp1.max == 0
return.exp1.digits == 0
return.exp1.from == 0
return.exp1.to == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeConcatenation(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::ENTER
arg0 != null
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.c >= 0
arg0.exp1.min one of { 0, 1, 2 }
arg0.exp1.max one of { 0, 2 }
arg0.exp1.digits == 0
arg0.exp1.from one of { 0, 48, 49 }
arg0.exp1.to one of { 0, 57 }
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.s.toString == "abs_path"
arg0.exp2.c >= 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c >= 0
arg0.min one of { 0, 1, 3 }
arg0.max >= 0
arg0.digits one of { 0, 2 }
arg0.from >= 0
arg0.to >= 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1 != null
arg1.kind != null
arg1.exp1.kind != null
arg1.exp1.c >= 0
arg1.exp1.min one of { 0, 1 }
arg1.exp1.max one of { 0, 8, 59 }
arg1.exp1.digits one of { 0, 2 }
arg1.exp1.from one of { 0, 48, 49 }
arg1.exp1.to one of { 0, 57 }
arg1.exp1.b == null
arg1.exp1.flags == 0
arg1.exp1.pos == 0
arg1.exp2.kind != null
arg1.exp2.c >= 0
arg1.exp2.min one of { 0, 1 }
arg1.exp2.max one of { 0, 59 }
arg1.exp2.digits one of { 0, 2 }
arg1.exp2.from == 0
arg1.exp2.to == 0
arg1.exp2.b == null
arg1.exp2.flags == 0
arg1.exp2.pos == 0
arg1.c >= 0
arg1.min >= 0
arg1.max >= 0
arg1.digits one of { 0, 2 }
arg1.from one of { 0, 56320 }
arg1.to one of { 0, 57343 }
arg1.b == null
arg1.flags == 0
arg1.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg0.exp1.c >= arg0.c
arg0.exp1.min >= arg0.exp1.max
arg0.digits >= arg1.exp2.digits
arg0.from <= arg0.to
arg1.exp1.c >= arg1.c
arg1.exp1.to >= arg1.from
arg1.exp1.to >= arg1.to
arg1.exp2.c >= arg1.c
arg1.exp2.min >= arg1.min
arg1.exp2.min >= arg1.max
arg1.exp2.max >= arg1.min
arg1.exp2.max >= arg1.max
arg1.from <= arg1.to
===========================================================================
dk.brics.automaton.RegExp.makeConcatenation(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::EXIT540
arg0.kind == dk.brics.automaton.RegExp$Kind.REGEXP_CHAR
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == return.kind
arg0.min == arg0.max
arg0.min == arg1.min
arg0.min == arg1.max
arg0.min == orig(arg0.max)
arg0.min == orig(arg1.min)
arg0.min == orig(arg1.max)
arg0.from == arg0.to
arg0.from == arg1.from
arg0.from == arg1.to
arg0.from == orig(arg0.to)
arg0.from == orig(arg1.from)
arg0.from == orig(arg1.to)
arg1.exp2 == return.exp2
arg0.exp1 == null
arg0.exp2 == null
arg0.s == null
arg0.min == 0
arg0.digits == 0
arg0.from == 0
arg1.exp1 == null
arg1.exp2 == null
arg1.digits == 0
return.exp1 == null
return.s != null
arg0.c >= arg1.c
===========================================================================
dk.brics.automaton.RegExp.makeConcatenation(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::EXIT557
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == return.kind
return.exp1 != null
return.exp2 != null
return.s == null
===========================================================================
dk.brics.automaton.RegExp.makeConcatenation(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.s.toString == orig(arg0.exp2.s.toString)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == orig(arg0.c)
arg0.min == return.exp1.min
arg0.min == orig(arg0.min)
arg0.max == return.exp1.max
arg0.max == orig(arg0.max)
arg0.digits == return.exp1.digits
arg0.digits == orig(arg0.digits)
arg0.from == return.exp1.from
arg0.from == orig(arg0.from)
arg0.to == return.exp1.to
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
arg1.kind == orig(arg1.kind)
arg1.exp1 == orig(arg1.exp1)
arg1.exp1.kind == orig(arg1.exp1.kind)
arg1.exp1.exp1 == orig(arg1.exp1.exp1)
arg1.exp1.exp2 == orig(arg1.exp1.exp2)
arg1.exp1.s == orig(arg1.exp1.s)
arg1.exp1.s.toString == orig(arg1.exp1.s.toString)
arg1.exp1.c == orig(arg1.exp1.c)
arg1.exp1.min == orig(arg1.exp1.min)
arg1.exp1.max == orig(arg1.exp1.max)
arg1.exp1.digits == orig(arg1.exp1.digits)
arg1.exp1.from == orig(arg1.exp1.from)
arg1.exp1.to == orig(arg1.exp1.to)
arg1.exp1.b == orig(arg1.exp1.b)
arg1.exp1.flags == orig(arg1.exp1.flags)
arg1.exp1.pos == orig(arg1.exp1.pos)
arg1.exp2 == orig(arg1.exp2)
arg1.exp2.kind == orig(arg1.exp2.kind)
arg1.exp2.exp1 == orig(arg1.exp2.exp1)
arg1.exp2.exp2 == orig(arg1.exp2.exp2)
arg1.exp2.s == orig(arg1.exp2.s)
arg1.exp2.s.toString == orig(arg1.exp2.s.toString)
arg1.exp2.c == orig(arg1.exp2.c)
arg1.exp2.min == orig(arg1.exp2.min)
arg1.exp2.max == orig(arg1.exp2.max)
arg1.exp2.digits == orig(arg1.exp2.digits)
arg1.exp2.from == orig(arg1.exp2.from)
arg1.exp2.to == orig(arg1.exp2.to)
arg1.exp2.b == orig(arg1.exp2.b)
arg1.exp2.flags == orig(arg1.exp2.flags)
arg1.exp2.pos == orig(arg1.exp2.pos)
arg1.s == orig(arg1.s)
arg1.s.toString == orig(arg1.s.toString)
arg1.c == return.exp2.c
arg1.c == orig(arg1.c)
arg1.min == return.exp2.min
arg1.min == orig(arg1.min)
arg1.max == return.exp2.max
arg1.max == orig(arg1.max)
arg1.digits == return.exp2.digits
arg1.digits == orig(arg1.digits)
arg1.from == return.exp2.from
arg1.from == orig(arg1.from)
arg1.to == return.exp2.to
arg1.to == orig(arg1.to)
arg1.b == orig(arg1.b)
arg1.flags == orig(arg1.flags)
arg1.pos == orig(arg1.pos)
(return.exp1 != null)  <==>  (return.exp2 != null)
(return.exp1 != null)  <==>  (return.s == null)
(return.exp1 != null)  ==>  (arg0.c >= return.exp1.c)
(return.exp1 != null)  ==>  (arg0.digits == return.exp1.digits)
(return.exp1 != null)  ==>  (arg0.digits >= arg1.exp2.digits)
(return.exp1 != null)  ==>  (arg0.digits one of { 0, 2 })
(return.exp1 != null)  ==>  (arg0.exp1 == return.exp1.exp1)
(return.exp1 != null)  ==>  (arg0.exp1.b == null)
(return.exp1 != null)  ==>  (arg0.exp1.c >= 0)
(return.exp1 != null)  ==>  (arg0.exp1.c >= arg0.c)
(return.exp1 != null)  ==>  (arg0.exp1.c >= return.exp1.c)
(return.exp1 != null)  ==>  (arg0.exp1.from one of { 0, 48, 49 })
(return.exp1 != null)  ==>  (arg0.exp1.kind != null)
(return.exp1 != null)  ==>  (arg0.exp1.max one of { 0, 2 })
(return.exp1 != null)  ==>  (arg0.exp1.min >= arg0.exp1.max)
(return.exp1 != null)  ==>  (arg0.exp1.min one of { 0, 1, 2 })
(return.exp1 != null)  ==>  (arg0.exp1.to one of { 0, 57 })
(return.exp1 != null)  ==>  (arg0.exp2 == return.exp1.exp2)
(return.exp1 != null)  ==>  (arg0.exp2.b == null)
(return.exp1 != null)  ==>  (arg0.exp2.c >= 0)
(return.exp1 != null)  ==>  (arg0.exp2.kind != null)
(return.exp1 != null)  ==>  (arg0.exp2.s.toString == "abs_path")
(return.exp1 != null)  ==>  (arg0.from <= return.exp1.to)
(return.exp1 != null)  ==>  (arg0.from == return.exp1.from)
(return.exp1 != null)  ==>  (arg0.max == return.exp1.max)
(return.exp1 != null)  ==>  (arg0.min == return.exp1.min)
(return.exp1 != null)  ==>  (arg0.min one of { 0, 1, 3 })
(return.exp1 != null)  ==>  (arg0.to == return.exp1.to)
(return.exp1 != null)  ==>  (arg0.to >= return.exp1.from)
(return.exp1 != null)  ==>  (arg1.c == return.exp2.c)
(return.exp1 != null)  ==>  (arg1.digits == return.exp2.digits)
(return.exp1 != null)  ==>  (arg1.digits one of { 0, 2 })
(return.exp1 != null)  ==>  (arg1.exp1.b == null)
(return.exp1 != null)  ==>  (arg1.exp1.c >= 0)
(return.exp1 != null)  ==>  (arg1.exp1.c >= arg1.c)
(return.exp1 != null)  ==>  (arg1.exp1.c >= return.exp2.c)
(return.exp1 != null)  ==>  (arg1.exp1.digits one of { 0, 2 })
(return.exp1 != null)  ==>  (arg1.exp1.from one of { 0, 48, 49 })
(return.exp1 != null)  ==>  (arg1.exp1.kind != null)
(return.exp1 != null)  ==>  (arg1.exp1.max one of { 0, 8, 59 })
(return.exp1 != null)  ==>  (arg1.exp1.min one of { 0, 1 })
(return.exp1 != null)  ==>  (arg1.exp1.to >= arg1.from)
(return.exp1 != null)  ==>  (arg1.exp1.to >= arg1.to)
(return.exp1 != null)  ==>  (arg1.exp1.to >= return.exp2.from)
(return.exp1 != null)  ==>  (arg1.exp1.to >= return.exp2.to)
(return.exp1 != null)  ==>  (arg1.exp1.to one of { 0, 57 })
(return.exp1 != null)  ==>  (arg1.exp2.b == null)
(return.exp1 != null)  ==>  (arg1.exp2.c >= 0)
(return.exp1 != null)  ==>  (arg1.exp2.c >= arg1.c)
(return.exp1 != null)  ==>  (arg1.exp2.c >= return.exp2.c)
(return.exp1 != null)  ==>  (arg1.exp2.digits <= return.exp1.digits)
(return.exp1 != null)  ==>  (arg1.exp2.digits one of { 0, 2 })
(return.exp1 != null)  ==>  (arg1.exp2.kind != null)
(return.exp1 != null)  ==>  (arg1.exp2.max >= arg1.max)
(return.exp1 != null)  ==>  (arg1.exp2.max >= arg1.min)
(return.exp1 != null)  ==>  (arg1.exp2.max >= return.exp2.max)
(return.exp1 != null)  ==>  (arg1.exp2.max >= return.exp2.min)
(return.exp1 != null)  ==>  (arg1.exp2.max one of { 0, 59 })
(return.exp1 != null)  ==>  (arg1.exp2.min >= arg1.max)
(return.exp1 != null)  ==>  (arg1.exp2.min >= arg1.min)
(return.exp1 != null)  ==>  (arg1.exp2.min >= return.exp2.max)
(return.exp1 != null)  ==>  (arg1.exp2.min >= return.exp2.min)
(return.exp1 != null)  ==>  (arg1.exp2.min one of { 0, 1 })
(return.exp1 != null)  ==>  (arg1.from <= return.exp2.to)
(return.exp1 != null)  ==>  (arg1.from == return.exp2.from)
(return.exp1 != null)  ==>  (arg1.from one of { 0, 56320 })
(return.exp1 != null)  ==>  (arg1.max == return.exp2.max)
(return.exp1 != null)  ==>  (arg1.min == return.exp2.min)
(return.exp1 != null)  ==>  (arg1.to == return.exp2.to)
(return.exp1 != null)  ==>  (arg1.to >= return.exp2.from)
(return.exp1 != null)  ==>  (arg1.to one of { 0, 57343 })
(return.exp1 != null)  ==>  (dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == return.kind)
(return.exp1 != null)  ==>  (return.exp1.b == null)
(return.exp1 != null)  ==>  (return.exp1.c >= 0)
(return.exp1 != null)  ==>  (return.exp1.digits one of { 0, 2 })
(return.exp1 != null)  ==>  (return.exp1.from <= return.exp1.to)
(return.exp1 != null)  ==>  (return.exp1.from >= 0)
(return.exp1 != null)  ==>  (return.exp1.kind != null)
(return.exp1 != null)  ==>  (return.exp1.max >= 0)
(return.exp1 != null)  ==>  (return.exp1.min one of { 0, 1, 3 })
(return.exp1 != null)  ==>  (return.exp1.to >= 0)
(return.exp1 != null)  ==>  (return.exp2.b == null)
(return.exp1 != null)  ==>  (return.exp2.c >= 0)
(return.exp1 != null)  ==>  (return.exp2.digits one of { 0, 2 })
(return.exp1 != null)  ==>  (return.exp2.from <= return.exp2.to)
(return.exp1 != null)  ==>  (return.exp2.from one of { 0, 56320 })
(return.exp1 != null)  ==>  (return.exp2.kind != null)
(return.exp1 != null)  ==>  (return.exp2.max >= 0)
(return.exp1 != null)  ==>  (return.exp2.min >= 0)
(return.exp1 != null)  ==>  (return.exp2.to one of { 0, 57343 })
(return.exp1 == null)  <==>  (return.exp2 == null)
(return.exp1 == null)  <==>  (return.s != null)
(return.exp1 == null)  ==>  (arg0.c >= arg1.c)
(return.exp1 == null)  ==>  (arg0.digits == 0)
(return.exp1 == null)  ==>  (arg0.exp1 == null)
(return.exp1 == null)  ==>  (arg0.exp2 == null)
(return.exp1 == null)  ==>  (arg0.from == 0)
(return.exp1 == null)  ==>  (arg0.from == arg0.to)
(return.exp1 == null)  ==>  (arg0.from == arg1.from)
(return.exp1 == null)  ==>  (arg0.from == arg1.to)
(return.exp1 == null)  ==>  (arg0.kind == dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
(return.exp1 == null)  ==>  (arg0.kind has only one value)
(return.exp1 == null)  ==>  (arg0.max == 0)
(return.exp1 == null)  ==>  (arg0.min == 0)
(return.exp1 == null)  ==>  (arg0.min == arg0.max)
(return.exp1 == null)  ==>  (arg0.min == arg1.max)
(return.exp1 == null)  ==>  (arg0.min == arg1.min)
(return.exp1 == null)  ==>  (arg0.s == null)
(return.exp1 == null)  ==>  (arg0.to == 0)
(return.exp1 == null)  ==>  (arg1.digits == 0)
(return.exp1 == null)  ==>  (arg1.exp1 == null)
(return.exp1 == null)  ==>  (arg1.exp2 == null)
(return.exp1 == null)  ==>  (arg1.exp2 == return.exp2)
(return.exp1 == null)  ==>  (arg1.from == 0)
(return.exp1 == null)  ==>  (arg1.max == 0)
(return.exp1 == null)  ==>  (arg1.min == 0)
(return.exp1 == null)  ==>  (arg1.to == 0)
(return.exp1 == null)  ==>  (dk.brics.automaton.RegExp$Kind.REGEXP_STRING == return.kind)
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.c >= 0
arg0.exp1.min one of { 0, 1, 2 }
arg0.exp1.max one of { 0, 2 }
arg0.exp1.digits == 0
arg0.exp1.from one of { 0, 48, 49 }
arg0.exp1.to one of { 0, 57 }
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.s.toString == "abs_path"
arg0.exp2.c >= 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c >= 0
arg0.min one of { 0, 1, 3 }
arg0.max >= 0
arg0.digits one of { 0, 2 }
arg0.from >= 0
arg0.to >= 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1.kind != null
arg1.exp1.kind != null
arg1.exp1.c >= 0
arg1.exp1.min one of { 0, 1 }
arg1.exp1.max one of { 0, 8, 59 }
arg1.exp1.digits one of { 0, 2 }
arg1.exp1.from one of { 0, 48, 49 }
arg1.exp1.to one of { 0, 57 }
arg1.exp1.b == null
arg1.exp1.flags == 0
arg1.exp1.pos == 0
arg1.exp2.kind != null
arg1.exp2.c >= 0
arg1.exp2.min one of { 0, 1 }
arg1.exp2.max one of { 0, 59 }
arg1.exp2.digits one of { 0, 2 }
arg1.exp2.from == 0
arg1.exp2.to == 0
arg1.exp2.b == null
arg1.exp2.flags == 0
arg1.exp2.pos == 0
arg1.c >= 0
arg1.min >= 0
arg1.max >= 0
arg1.digits one of { 0, 2 }
arg1.from one of { 0, 56320 }
arg1.to one of { 0, 57343 }
arg1.b == null
arg1.flags == 0
arg1.pos == 0
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min one of { 0, 1, 3 }
return.exp1.max >= 0
return.exp1.digits one of { 0, 2 }
return.exp1.from >= 0
return.exp1.to >= 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min >= 0
return.exp2.max >= 0
return.exp2.digits one of { 0, 2 }
return.exp2.from one of { 0, 56320 }
return.exp2.to one of { 0, 57343 }
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg0.exp1.c >= arg0.c
arg0.exp1.c >= return.exp1.c
arg0.exp1.min >= arg0.exp1.max
arg0.c >= return.exp1.c
arg0.digits >= arg1.exp2.digits
arg0.from <= arg0.to
arg0.from <= return.exp1.to
arg0.to >= return.exp1.from
arg1.exp1.c >= arg1.c
arg1.exp1.c >= return.exp2.c
arg1.exp1.to >= arg1.from
arg1.exp1.to >= arg1.to
arg1.exp1.to >= return.exp2.from
arg1.exp1.to >= return.exp2.to
arg1.exp2.c >= arg1.c
arg1.exp2.c >= return.exp2.c
arg1.exp2.min >= arg1.min
arg1.exp2.min >= arg1.max
arg1.exp2.min >= return.exp2.min
arg1.exp2.min >= return.exp2.max
arg1.exp2.max >= arg1.min
arg1.exp2.max >= arg1.max
arg1.exp2.max >= return.exp2.min
arg1.exp2.max >= return.exp2.max
arg1.exp2.digits <= return.exp1.digits
arg1.from <= arg1.to
arg1.from <= return.exp2.to
arg1.to >= return.exp2.from
return.exp1.from <= return.exp1.to
return.exp2.from <= return.exp2.to
===========================================================================
dk.brics.automaton.RegExp.makeIntersection(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::ENTER
arg0.kind == arg0.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == arg0.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == arg1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == arg1.exp1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.exp2 == null
arg0.exp1.s.toString == "d"
arg0.exp1.c == 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind has only one value
arg0.exp2.s == null
arg0.exp2.c == 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s == null
arg0.c == 0
arg0.min one of { 0, 4 }
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1.exp1.exp1 == null
arg1.exp1.exp2 == null
arg1.exp1.s.toString one of { "", "0000" }
arg1.exp1.c == 0
arg1.exp1.min == 0
arg1.exp1.max == 0
arg1.exp1.digits == 0
arg1.exp1.from == 0
arg1.exp1.to == 0
arg1.exp1.b == null
arg1.exp1.flags == 0
arg1.exp1.pos == 0
arg1.exp2 == null
arg1.s == null
arg1.c == 0
arg1.min == 0
arg1.max == 0
arg1.digits == 0
arg1.from == 0
arg1.to == 0
arg1.b == null
arg1.flags == 0
arg1.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeIntersection(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == arg0.exp2.kind
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == arg0.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == arg1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == return.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(arg1.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == arg1.exp1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(arg1.exp1.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == orig(arg0.s)
arg0.c == orig(arg0.c)
arg0.min == return.exp1.min
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == orig(arg0.from)
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
arg1.exp1 == return.exp2.exp1
arg1.exp1 == orig(arg1.exp1)
arg1.exp1.exp1 == orig(arg1.exp1.exp1)
arg1.exp1.exp2 == orig(arg1.exp1.exp2)
arg1.exp1.s == orig(arg1.exp1.s)
arg1.exp1.s.toString == orig(arg1.exp1.s.toString)
arg1.exp1.c == orig(arg1.exp1.c)
arg1.exp1.min == orig(arg1.exp1.min)
arg1.exp1.max == orig(arg1.exp1.max)
arg1.exp1.digits == orig(arg1.exp1.digits)
arg1.exp1.from == orig(arg1.exp1.from)
arg1.exp1.to == orig(arg1.exp1.to)
arg1.exp1.b == orig(arg1.exp1.b)
arg1.exp1.flags == orig(arg1.exp1.flags)
arg1.exp1.pos == orig(arg1.exp1.pos)
arg1.exp2 == orig(arg1.exp2)
arg1.s == orig(arg1.s)
arg1.c == orig(arg1.c)
arg1.min == orig(arg1.min)
arg1.max == orig(arg1.max)
arg1.digits == orig(arg1.digits)
arg1.from == orig(arg1.from)
arg1.to == orig(arg1.to)
arg1.b == orig(arg1.b)
arg1.flags == orig(arg1.flags)
arg1.pos == orig(arg1.pos)
return.exp1 == orig(arg0)
return.exp2 == orig(arg1)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.exp2 == null
arg0.exp1.s.toString == "d"
arg0.exp1.c == 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind has only one value
arg0.exp2.s == null
arg0.exp2.c == 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s == null
arg0.c == 0
arg0.min one of { 0, 4 }
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1.exp1.exp1 == null
arg1.exp1.exp2 == null
arg1.exp1.s.toString one of { "", "0000" }
arg1.exp1.c == 0
arg1.exp1.min == 0
arg1.exp1.max == 0
arg1.exp1.digits == 0
arg1.exp1.from == 0
arg1.exp1.to == 0
arg1.exp1.b == null
arg1.exp1.flags == 0
arg1.exp1.pos == 0
arg1.exp2 == null
arg1.s == null
arg1.c == 0
arg1.min == 0
arg1.max == 0
arg1.digits == 0
arg1.from == 0
arg1.to == 0
arg1.b == null
arg1.flags == 0
arg1.pos == 0
return.exp1.s == null
return.exp1.c == 0
return.exp1.max == 0
return.exp1.digits == 0
return.exp1.from == 0
return.exp1.to == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.exp2 == null
return.exp2.s == null
return.exp2.c == 0
return.exp2.min == 0
return.exp2.max == 0
return.exp2.digits == 0
return.exp2.from == 0
return.exp2.to == 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeInterval(int, int, int):::ENTER
arg0 one of { 0, 1 }
arg2 == 2
arg0 < arg1
===========================================================================
dk.brics.automaton.RegExp.makeInterval(int, int, int):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
return.kind == dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL
return.min == orig(arg0)
return.max == orig(arg1)
return.digits == orig(arg2)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
return.exp1 == null
return.exp2 == null
return.s == null
return.c == 0
return.min one of { 0, 1 }
return.digits == 2
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
return.min < return.max
===========================================================================
dk.brics.automaton.RegExp.makeOptional(dk.brics.automaton.RegExp):::ENTER
arg0 != null
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.s.toString one of { "NCName", "absoluteURI", "userinfo" }
arg0.exp1.c >= 0
arg0.exp1.min one of { 0, 1 }
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.c >= 0
arg0.exp2.min one of { 0, 1 }
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "Z", "abs_path", "hexseq" }
arg0.c >= 0
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeOptional(dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.s.toString == orig(arg0.exp2.s.toString)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == return.exp1.s
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == return.exp1.c
arg0.c == orig(arg0.c)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == orig(arg0.from)
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
return.exp1 == orig(arg0)
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.s.toString one of { "NCName", "absoluteURI", "userinfo" }
arg0.exp1.c >= 0
arg0.exp1.min one of { 0, 1 }
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.c >= 0
arg0.exp2.min one of { 0, 1 }
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "Z", "abs_path", "hexseq" }
arg0.c >= 0
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
return != null
return.exp1 != null
return.exp1.s.toString one of { "Z", "abs_path", "hexseq" }
return.exp1.min == 0
return.exp1.max == 0
return.exp1.digits == 0
return.exp1.from == 0
return.exp1.to == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeRepeat(dk.brics.automaton.RegExp):::ENTER
arg0.min == arg0.max
arg0 != null
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.c >= 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.s.toString one of { "param", "segment" }
arg0.exp2.c >= 0
arg0.exp2.min one of { 0, 1 }
arg0.exp2.max one of { 0, 4, 8 }
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c one of { 0, 48 }
arg0.min one of { 0, 2 }
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeRepeat(dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.s.toString == orig(arg0.exp2.s.toString)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == return.exp1.s
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == return.exp1.c
arg0.c == orig(arg0.c)
arg0.min == arg0.max
arg0.min == return.exp1.min
arg0.min == return.exp1.max
arg0.min == orig(arg0.min)
arg0.min == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == orig(arg0.from)
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
return.exp1 == orig(arg0)
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.c >= 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.s.toString one of { "param", "segment" }
arg0.exp2.c >= 0
arg0.exp2.min one of { 0, 1 }
arg0.exp2.max one of { 0, 4, 8 }
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c one of { 0, 48 }
arg0.min one of { 0, 2 }
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
return != null
return.exp1 != null
return.exp1.digits == 0
return.exp1.from == 0
return.exp1.to == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeRepeat(dk.brics.automaton.RegExp, int):::ENTER
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == arg0.exp1.kind
arg0 != null
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind has only one value
arg0.exp1.exp1 == null
arg0.exp1.exp2 == null
arg0.exp1.c == 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.s.toString == "_"
arg0.exp2.c == 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "NameChar", "d" }
arg0.c one of { 0, 48 }
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from one of { 0, 48 }
arg0.to one of { 0, 57 }
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1 one of { 1, 4 }
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeRepeat(dk.brics.automaton.RegExp, int):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == arg0.exp1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.s.toString == orig(arg0.exp2.s.toString)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == return.exp1.s
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == return.exp1.c
arg0.c == orig(arg0.c)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == return.exp1.from
arg0.from == orig(arg0.from)
arg0.to == return.exp1.to
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
return.exp1 == orig(arg0)
return.min == orig(arg1)
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind has only one value
arg0.exp1.exp1 == null
arg0.exp1.exp2 == null
arg0.exp1.c == 0
arg0.exp1.min == 0
arg0.exp1.max == 0
arg0.exp1.digits == 0
arg0.exp1.from == 0
arg0.exp1.to == 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.s.toString == "_"
arg0.exp2.c == 0
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from == 0
arg0.exp2.to == 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "NameChar", "d" }
arg0.c one of { 0, 48 }
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from one of { 0, 48 }
arg0.to one of { 0, 57 }
arg0.b == null
arg0.flags == 0
arg0.pos == 0
return != null
return.exp1 != null
return.exp1.s.toString one of { "NameChar", "d" }
return.exp1.min == 0
return.exp1.max == 0
return.exp1.digits == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2 == null
return.s == null
return.c == 0
return.min one of { 1, 4 }
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeRepeat(dk.brics.automaton.RegExp, int, int):::ENTER
arg0 != null
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.s == null
arg0.exp1.c == 0
arg0.exp1.min one of { 0, 1 }
arg0.exp1.max one of { 0, 3 }
arg0.exp1.digits == 0
arg0.exp1.from one of { 0, 97 }
arg0.exp1.to one of { 0, 122 }
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.exp1 == null
arg0.exp2.exp2 == null
arg0.exp2.s == null
arg0.exp2.c one of { 0, 46 }
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from one of { 0, 48, 65 }
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "digit", "hex" }
arg0.c == 0
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from one of { 0, 48 }
arg0.to one of { 0, 57 }
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1 >= 0
arg2 >= 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg1 <= arg2
===========================================================================
dk.brics.automaton.RegExp.makeRepeat(dk.brics.automaton.RegExp, int, int):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.max == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == return.exp1.s
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == orig(arg0.c)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == return.exp1.from
arg0.from == orig(arg0.from)
arg0.to == return.exp1.to
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
return.exp1 == orig(arg0)
return.min == orig(arg1)
return.max == orig(arg2)
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.s == null
arg0.exp1.c == 0
arg0.exp1.min one of { 0, 1 }
arg0.exp1.max one of { 0, 3 }
arg0.exp1.digits == 0
arg0.exp1.from one of { 0, 97 }
arg0.exp1.to one of { 0, 122 }
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.exp1 == null
arg0.exp2.exp2 == null
arg0.exp2.s == null
arg0.exp2.c one of { 0, 46 }
arg0.exp2.min == 0
arg0.exp2.max == 0
arg0.exp2.digits == 0
arg0.exp2.from one of { 0, 48, 65 }
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.s.toString one of { "digit", "hex" }
arg0.c == 0
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from one of { 0, 48 }
arg0.to one of { 0, 57 }
arg0.b == null
arg0.flags == 0
arg0.pos == 0
return != null
return.exp1 != null
return.exp1.s.toString one of { "digit", "hex" }
return.exp1.c == 0
return.exp1.min == 0
return.exp1.max == 0
return.exp1.digits == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2 == null
return.s == null
return.c == 0
return.min >= 0
return.max >= 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
return.min <= return.max
===========================================================================
dk.brics.automaton.RegExp.makeString(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::ENTER
arg0.kind == dk.brics.automaton.RegExp$Kind.REGEXP_CHAR
arg0 != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1 == null
arg0.exp2 == null
arg0.s == null
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1 != null
arg1.kind != null
arg1.exp1 == null
arg1.exp2 == null
arg1.c >= 0
arg1.min == 0
arg1.max == 0
arg1.digits == 0
arg1.from == 0
arg1.to == 0
arg1.b == null
arg1.flags == 0
arg1.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg0.c >= arg1.c
===========================================================================
dk.brics.automaton.RegExp.makeString(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == dk.brics.automaton.RegExp$Kind.REGEXP_CHAR
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == orig(arg0.exp1)
arg0.exp2 == orig(arg0.exp2)
arg0.s == orig(arg0.s)
arg0.c == orig(arg0.c)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == orig(arg0.from)
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
arg1.kind == orig(arg1.kind)
arg1.exp1 == orig(arg1.exp1)
arg1.exp2 == orig(arg1.exp2)
arg1.s == orig(arg1.s)
arg1.s.toString == orig(arg1.s.toString)
arg1.c == orig(arg1.c)
arg1.min == orig(arg1.min)
arg1.max == orig(arg1.max)
arg1.digits == orig(arg1.digits)
arg1.from == orig(arg1.from)
arg1.to == orig(arg1.to)
arg1.b == orig(arg1.b)
arg1.flags == orig(arg1.flags)
arg1.pos == orig(arg1.pos)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1 == null
arg0.exp2 == null
arg0.s == null
arg0.min == 0
arg0.max == 0
arg0.digits == 0
arg0.from == 0
arg0.to == 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1.kind != null
arg1.exp1 == null
arg1.exp2 == null
arg1.c >= 0
arg1.min == 0
arg1.max == 0
arg1.digits == 0
arg1.from == 0
arg1.to == 0
arg1.b == null
arg1.flags == 0
arg1.pos == 0
return != null
return.exp1 == null
return.exp2 == null
return.s != null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg0.c >= arg1.c
===========================================================================
dk.brics.automaton.RegExp.makeString(java.lang.String):::ENTER
arg0 != null
===========================================================================
dk.brics.automaton.RegExp.makeString(java.lang.String):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.toString == orig(arg0.toString)
return.kind == dk.brics.automaton.RegExp$Kind.REGEXP_STRING
return.s == orig(arg0)
return != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
return.exp1 == null
return.exp2 == null
return.s != null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
===========================================================================
dk.brics.automaton.RegExp.makeUnion(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::ENTER
arg0.exp2.min == arg0.exp2.max
arg0 != null
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.s.toString one of { "B64S", "hexseq" }
arg0.exp1.c >= 0
arg0.exp1.min == 0
arg0.exp1.max one of { 0, 13, 23 }
arg0.exp1.digits one of { 0, 2 }
arg0.exp1.from >= 0
arg0.exp1.to >= 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.s == null
arg0.exp2.c >= 0
arg0.exp2.min >= 0
arg0.exp2.digits == 0
arg0.exp2.from >= 0
arg0.exp2.to >= 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c >= 0
arg0.min one of { 0, 1 }
arg0.max >= 0
arg0.digits == 0
arg0.from >= 0
arg0.to >= 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1 != null
arg1.kind != null
arg1.exp1.kind != null
arg1.exp1.c >= 0
arg1.exp1.min one of { 0, 1 }
arg1.exp1.max >= 0
arg1.exp1.digits == 0
arg1.exp1.from one of { 0, 97, 55296 }
arg1.exp1.to one of { 0, 102, 56319 }
arg1.exp1.b == null
arg1.exp1.flags == 0
arg1.exp1.pos == 0
arg1.exp2.kind != null
arg1.exp2.c >= 0
arg1.exp2.min one of { 0, 1 }
arg1.exp2.max == 0
arg1.exp2.digits == 0
arg1.exp2.from one of { 0, 65, 56320 }
arg1.exp2.to one of { 0, 70, 57343 }
arg1.exp2.b == null
arg1.exp2.flags == 0
arg1.exp2.pos == 0
arg1.c >= 0
arg1.min == 0
arg1.max == 0
arg1.digits == 0
arg1.from >= 0
arg1.to >= 0
arg1.b == null
arg1.flags == 0
arg1.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg0.exp1.c >= arg0.c
arg0.exp1.c >= arg0.from
arg0.exp1.c >= arg0.to
arg0.exp1.min <= arg0.exp1.max
arg0.exp1.from <= arg0.exp1.to
arg0.exp1.from >= arg0.c
arg0.exp1.from >= arg0.from
arg0.exp1.from >= arg0.to
arg0.exp1.to >= arg0.c
arg0.exp1.to >= arg0.from
arg0.exp1.to >= arg0.to
arg0.exp2.c >= arg0.c
arg0.exp2.c >= arg0.from
arg0.exp2.c >= arg0.to
arg0.exp2.from <= arg0.exp2.to
arg0.exp2.from >= arg0.c
arg0.exp2.from >= arg0.from
arg0.exp2.from >= arg0.to
arg0.exp2.from >= arg1.exp1.from
arg0.exp2.from >= arg1.exp1.to
arg0.exp2.from >= arg1.exp2.from
arg0.exp2.from >= arg1.exp2.to
arg0.exp2.to >= arg0.c
arg0.exp2.to >= arg0.from
arg0.exp2.to >= arg0.to
arg0.exp2.to >= arg1.exp1.from
arg0.exp2.to >= arg1.exp1.to
arg0.exp2.to >= arg1.exp2.from
arg0.exp2.to >= arg1.exp2.to
arg0.from <= arg0.to
arg0.from <= arg1.exp1.from
arg0.from <= arg1.exp1.to
arg0.from <= arg1.exp2.from
arg0.from <= arg1.exp2.to
arg0.to <= arg1.exp1.from
arg0.to <= arg1.exp1.to
arg0.to <= arg1.exp2.from
arg0.to <= arg1.exp2.to
arg1.exp1.min <= arg1.exp1.max
arg1.exp1.from <= arg1.exp1.to
arg1.exp1.from >= arg1.c
arg1.exp1.from >= arg1.from
arg1.exp1.from >= arg1.to
arg1.exp1.to >= arg1.c
arg1.exp1.to >= arg1.from
arg1.exp1.to >= arg1.to
arg1.exp2.from <= arg1.exp2.to
arg1.exp2.from >= arg1.c
arg1.exp2.from >= arg1.from
arg1.exp2.from >= arg1.to
arg1.exp2.to >= arg1.c
arg1.exp2.to >= arg1.from
arg1.exp2.to >= arg1.to
arg1.from <= arg1.to
===========================================================================
dk.brics.automaton.RegExp.makeUnion(dk.brics.automaton.RegExp, dk.brics.automaton.RegExp):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
arg0.kind == return.exp1.kind
arg0.kind == orig(arg0.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == return.kind
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
arg0.exp1 == return.exp1.exp1
arg0.exp1 == orig(arg0.exp1)
arg0.exp1.kind == orig(arg0.exp1.kind)
arg0.exp1.exp1 == orig(arg0.exp1.exp1)
arg0.exp1.exp2 == orig(arg0.exp1.exp2)
arg0.exp1.s == orig(arg0.exp1.s)
arg0.exp1.s.toString == orig(arg0.exp1.s.toString)
arg0.exp1.c == orig(arg0.exp1.c)
arg0.exp1.min == orig(arg0.exp1.min)
arg0.exp1.max == orig(arg0.exp1.max)
arg0.exp1.digits == orig(arg0.exp1.digits)
arg0.exp1.from == orig(arg0.exp1.from)
arg0.exp1.to == orig(arg0.exp1.to)
arg0.exp1.b == orig(arg0.exp1.b)
arg0.exp1.flags == orig(arg0.exp1.flags)
arg0.exp1.pos == orig(arg0.exp1.pos)
arg0.exp2 == return.exp1.exp2
arg0.exp2 == orig(arg0.exp2)
arg0.exp2.kind == orig(arg0.exp2.kind)
arg0.exp2.exp1 == orig(arg0.exp2.exp1)
arg0.exp2.exp2 == orig(arg0.exp2.exp2)
arg0.exp2.s == orig(arg0.exp2.s)
arg0.exp2.c == orig(arg0.exp2.c)
arg0.exp2.min == arg0.exp2.max
arg0.exp2.min == orig(arg0.exp2.min)
arg0.exp2.min == orig(arg0.exp2.max)
arg0.exp2.digits == orig(arg0.exp2.digits)
arg0.exp2.from == orig(arg0.exp2.from)
arg0.exp2.to == orig(arg0.exp2.to)
arg0.exp2.b == orig(arg0.exp2.b)
arg0.exp2.flags == orig(arg0.exp2.flags)
arg0.exp2.pos == orig(arg0.exp2.pos)
arg0.s == return.exp1.s
arg0.s == orig(arg0.s)
arg0.s.toString == orig(arg0.s.toString)
arg0.c == return.exp1.c
arg0.c == orig(arg0.c)
arg0.min == return.exp1.min
arg0.min == orig(arg0.min)
arg0.max == return.exp1.max
arg0.max == orig(arg0.max)
arg0.digits == orig(arg0.digits)
arg0.from == return.exp1.from
arg0.from == orig(arg0.from)
arg0.to == return.exp1.to
arg0.to == orig(arg0.to)
arg0.b == orig(arg0.b)
arg0.flags == orig(arg0.flags)
arg0.pos == orig(arg0.pos)
arg1.kind == return.exp2.kind
arg1.kind == orig(arg1.kind)
arg1.exp1 == return.exp2.exp1
arg1.exp1 == orig(arg1.exp1)
arg1.exp1.kind == orig(arg1.exp1.kind)
arg1.exp1.exp1 == orig(arg1.exp1.exp1)
arg1.exp1.exp2 == orig(arg1.exp1.exp2)
arg1.exp1.s == orig(arg1.exp1.s)
arg1.exp1.s.toString == orig(arg1.exp1.s.toString)
arg1.exp1.c == orig(arg1.exp1.c)
arg1.exp1.min == orig(arg1.exp1.min)
arg1.exp1.max == orig(arg1.exp1.max)
arg1.exp1.digits == orig(arg1.exp1.digits)
arg1.exp1.from == orig(arg1.exp1.from)
arg1.exp1.to == orig(arg1.exp1.to)
arg1.exp1.b == orig(arg1.exp1.b)
arg1.exp1.flags == orig(arg1.exp1.flags)
arg1.exp1.pos == orig(arg1.exp1.pos)
arg1.exp2 == return.exp2.exp2
arg1.exp2 == orig(arg1.exp2)
arg1.exp2.kind == orig(arg1.exp2.kind)
arg1.exp2.exp1 == orig(arg1.exp2.exp1)
arg1.exp2.exp2 == orig(arg1.exp2.exp2)
arg1.exp2.s == orig(arg1.exp2.s)
arg1.exp2.s.toString == orig(arg1.exp2.s.toString)
arg1.exp2.c == orig(arg1.exp2.c)
arg1.exp2.min == orig(arg1.exp2.min)
arg1.exp2.max == orig(arg1.exp2.max)
arg1.exp2.digits == orig(arg1.exp2.digits)
arg1.exp2.from == orig(arg1.exp2.from)
arg1.exp2.to == orig(arg1.exp2.to)
arg1.exp2.b == orig(arg1.exp2.b)
arg1.exp2.flags == orig(arg1.exp2.flags)
arg1.exp2.pos == orig(arg1.exp2.pos)
arg1.s == return.exp2.s
arg1.s == orig(arg1.s)
arg1.s.toString == orig(arg1.s.toString)
arg1.c == return.exp2.c
arg1.c == orig(arg1.c)
arg1.min == orig(arg1.min)
arg1.max == orig(arg1.max)
arg1.digits == orig(arg1.digits)
arg1.from == return.exp2.from
arg1.from == orig(arg1.from)
arg1.to == return.exp2.to
arg1.to == orig(arg1.to)
arg1.b == orig(arg1.b)
arg1.flags == orig(arg1.flags)
arg1.pos == orig(arg1.pos)
return.exp1 == orig(arg0)
return.exp2 == orig(arg1)
arg0.kind != null
dk.brics.automaton.RegExp$Kind.REGEXP_UNION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_UNION != null
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION != null
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN != null
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX != null
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR != null
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY != null
dk.brics.automaton.RegExp$Kind.REGEXP_STRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_STRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING != null
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON != null
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL has only one value
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL != null
dk.brics.automaton.RegExp$Kind.$VALUES has only one value
dk.brics.automaton.RegExp$Kind.$VALUES != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == dk.brics.automaton.RegExp$Kind[].class
dk.brics.automaton.RegExp$Kind.$VALUES[] contains no nulls and has only one value, of length 16
dk.brics.automaton.RegExp$Kind.$VALUES[] elements != null
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == [dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind, dk.brics.automaton.RegExp.Kind]
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() elements == dk.brics.automaton.RegExp.Kind.class
arg0.exp1.kind != null
arg0.exp1.s.toString one of { "B64S", "hexseq" }
arg0.exp1.c >= 0
arg0.exp1.min == 0
arg0.exp1.max one of { 0, 13, 23 }
arg0.exp1.digits one of { 0, 2 }
arg0.exp1.from >= 0
arg0.exp1.to >= 0
arg0.exp1.b == null
arg0.exp1.flags == 0
arg0.exp1.pos == 0
arg0.exp2.kind != null
arg0.exp2.s == null
arg0.exp2.c >= 0
arg0.exp2.min >= 0
arg0.exp2.digits == 0
arg0.exp2.from >= 0
arg0.exp2.to >= 0
arg0.exp2.b == null
arg0.exp2.flags == 0
arg0.exp2.pos == 0
arg0.c >= 0
arg0.min one of { 0, 1 }
arg0.max >= 0
arg0.digits == 0
arg0.from >= 0
arg0.to >= 0
arg0.b == null
arg0.flags == 0
arg0.pos == 0
arg1.kind != null
arg1.exp1.kind != null
arg1.exp1.c >= 0
arg1.exp1.min one of { 0, 1 }
arg1.exp1.max >= 0
arg1.exp1.digits == 0
arg1.exp1.from one of { 0, 97, 55296 }
arg1.exp1.to one of { 0, 102, 56319 }
arg1.exp1.b == null
arg1.exp1.flags == 0
arg1.exp1.pos == 0
arg1.exp2.kind != null
arg1.exp2.c >= 0
arg1.exp2.min one of { 0, 1 }
arg1.exp2.max == 0
arg1.exp2.digits == 0
arg1.exp2.from one of { 0, 65, 56320 }
arg1.exp2.to one of { 0, 70, 57343 }
arg1.exp2.b == null
arg1.exp2.flags == 0
arg1.exp2.pos == 0
arg1.c >= 0
arg1.min == 0
arg1.max == 0
arg1.digits == 0
arg1.from >= 0
arg1.to >= 0
arg1.b == null
arg1.flags == 0
arg1.pos == 0
return != null
return.exp1 != null
return.exp1.digits == 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2 != null
return.exp2.min == 0
return.exp2.max == 0
return.exp2.digits == 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
size(dk.brics.automaton.RegExp$Kind.$VALUES[]) == 16
arg0.exp1.c >= arg0.c
arg0.exp1.c >= arg0.from
arg0.exp1.c >= arg0.to
arg0.exp1.min <= arg0.exp1.max
arg0.exp1.from <= arg0.exp1.to
arg0.exp1.from >= arg0.c
arg0.exp1.from >= arg0.from
arg0.exp1.from >= arg0.to
arg0.exp1.to >= arg0.c
arg0.exp1.to >= arg0.from
arg0.exp1.to >= arg0.to
arg0.exp2.c >= arg0.c
arg0.exp2.c >= arg0.from
arg0.exp2.c >= arg0.to
arg0.exp2.from <= arg0.exp2.to
arg0.exp2.from >= arg0.c
arg0.exp2.from >= arg0.from
arg0.exp2.from >= arg0.to
arg0.exp2.from >= arg1.exp1.from
arg0.exp2.from >= arg1.exp1.to
arg0.exp2.from >= arg1.exp2.from
arg0.exp2.from >= arg1.exp2.to
arg0.exp2.to >= arg0.c
arg0.exp2.to >= arg0.from
arg0.exp2.to >= arg0.to
arg0.exp2.to >= arg1.exp1.from
arg0.exp2.to >= arg1.exp1.to
arg0.exp2.to >= arg1.exp2.from
arg0.exp2.to >= arg1.exp2.to
arg0.from <= arg0.to
arg0.from <= arg1.exp1.from
arg0.from <= arg1.exp1.to
arg0.from <= arg1.exp2.from
arg0.from <= arg1.exp2.to
arg0.to <= arg1.exp1.from
arg0.to <= arg1.exp1.to
arg0.to <= arg1.exp2.from
arg0.to <= arg1.exp2.to
arg1.exp1.min <= arg1.exp1.max
arg1.exp1.from <= arg1.exp1.to
arg1.exp1.from >= arg1.c
arg1.exp1.from >= arg1.from
arg1.exp1.from >= arg1.to
arg1.exp1.to >= arg1.c
arg1.exp1.to >= arg1.from
arg1.exp1.to >= arg1.to
arg1.exp2.from <= arg1.exp2.to
arg1.exp2.from >= arg1.c
arg1.exp2.from >= arg1.from
arg1.exp2.from >= arg1.to
arg1.exp2.to >= arg1.c
arg1.exp2.to >= arg1.from
arg1.exp2.to >= arg1.to
arg1.from <= arg1.to
===========================================================================
dk.brics.automaton.RegExp.match(char):::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT681
this.pos == orig(this.pos)
return == false
orig(arg0) one of { 38, 124 }
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT681;condition="not(return == true)"
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT684
this.pos >= 1
return == true
this.digits < this.pos
this.pos - orig(this.pos) - 1 == 0
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT684;condition="return == true"
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT686
this.pos == orig(this.pos)
return == false
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT686;condition="not(return == true)"
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
(return == false)  <==>  (this.pos == orig(this.pos))
(return == true)  <==>  (this.pos - orig(this.pos) - 1 == 0)
(return == true)  ==>  (this.digits < this.pos)
(return == true)  ==>  (this.pos >= 1)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
this.digits <= orig(this.pos)
this.pos >= orig(this.pos)
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT;condition="return == true"
this.pos >= 1
return == true
this.digits < this.pos
this.pos - orig(this.pos) - 1 == 0
===========================================================================
dk.brics.automaton.RegExp.match(char):::EXIT;condition="not(return == true)"
this.pos == orig(this.pos)
return == false
===========================================================================
dk.brics.automaton.RegExp.more():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.more():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
(return == false)  ==>  (this.digits < this.pos)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.more():::EXIT;condition="return == true"
return == true
===========================================================================
dk.brics.automaton.RegExp.more():::EXIT;condition="not(return == true)"
return == false
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.next():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.next():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
this.digits < this.pos
this.digits <= orig(this.pos)
this.pos - orig(this.pos) - 1 == 0
===========================================================================
dk.brics.automaton.RegExp.parseCharClass():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.parseCharClass():::EXIT795
return.kind has only one value
return.c == 0
this.pos - orig(this.pos) - 3 == 0
===========================================================================
dk.brics.automaton.RegExp.parseCharClass():::EXIT797
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
return.from == return.to
return.kind has only one value
return.from == 0
===========================================================================
dk.brics.automaton.RegExp.parseCharClass():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 2
return != null
return.kind != null
return.exp1 == null
return.exp2 == null
return.s == null
return.c >= 0
return.min == 0
return.max == 0
return.digits == 0
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits < orig(this.pos)
this.pos > orig(this.pos)
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseCharClassExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseCharClassExp():::EXIT777
this.digits == return.digits
return.exp1.min == return.exp1.max
return.min == return.max
return.exp1.s == null
return.exp1.min == 0
return.exp1.from one of { 0, 97 }
return.exp1.to one of { 0, 122 }
return.exp2.exp1 == null
return.exp2.exp2 == null
return.exp2.s == null
return.exp2.min == 0
return.exp2.max == 0
return.s == null
return.c == 0
return.min == 0
===========================================================================
dk.brics.automaton.RegExp.parseCharClassExp():::EXIT779
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
return.exp2.from == return.exp2.to
return.from == return.to
return.exp1.from one of { 0, 49 }
return.exp1.to one of { 0, 57 }
return.exp2.from == 0
return.from == 0
return.exp1.to >= return.exp2.from
===========================================================================
dk.brics.automaton.RegExp.parseCharClassExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min one of { 0, 1, 2 }
return.exp1.max one of { 0, 2, 3 }
return.exp1.digits == 0
return.exp1.from one of { 0, 49, 97 }
return.exp1.to one of { 0, 57, 122 }
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min one of { 0, 1 }
return.exp2.max one of { 0, 4, 8 }
return.exp2.digits == 0
return.exp2.from >= 0
return.exp2.to >= 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min one of { 0, 1, 4 }
return.max >= 0
return.digits one of { 0, 2 }
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.digits
this.pos > orig(this.pos)
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseCharClasses():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.parseCharClasses():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
return != null
return.kind != null
return.exp1.kind != null
return.exp1.s == null
return.exp1.c >= 0
return.exp1.min == 0
return.exp1.max == 0
return.exp1.digits == 0
return.exp1.from one of { 0, 97 }
return.exp1.to one of { 0, 122 }
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.exp1 == null
return.exp2.exp2 == null
return.exp2.s == null
return.exp2.c >= 0
return.exp2.min == 0
return.exp2.max == 0
return.exp2.digits == 0
return.exp2.from >= 0
return.exp2.to >= 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.s == null
return.c == 0
return.min == 0
return.max == 0
return.digits == 0
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits < orig(this.pos)
this.pos > orig(this.pos)
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseCharExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseCharExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
this.digits < this.pos
this.digits <= orig(this.pos)
this.pos > orig(this.pos)
===========================================================================
dk.brics.automaton.RegExp.parseComplExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseComplExp():::EXIT762
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.digits == return.digits
return.exp1.min == return.exp1.max
return.min == return.max
return.from == return.to
this.b.toString one of { "(<d>{4,})&~(0000)", "<_>(-?P(((<d>+Y)?(<d>+M)?(<d>+D)?(T(((<d>+H)?(<d>+M)?(<d>+(\\.<d>+)?S)?)&~()))?)&~()))<_>", "~(@[@%]@)" }
return.kind has only one value
return.exp1.s.toString one of { "", "0000" }
return.exp1.c == 0
return.exp1.min == 0
return.exp1.from == 0
return.exp1.to == 0
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
return.from == 0
===========================================================================
dk.brics.automaton.RegExp.parseComplExp():::EXIT764
===========================================================================
dk.brics.automaton.RegExp.parseComplExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min one of { 0, 1, 2 }
return.exp1.max one of { 0, 2, 3 }
return.exp1.digits == 0
return.exp1.from one of { 0, 49, 97 }
return.exp1.to one of { 0, 57, 122 }
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min one of { 0, 1 }
return.exp2.max one of { 0, 4, 8 }
return.exp2.digits == 0
return.exp2.from >= 0
return.exp2.to >= 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min one of { 0, 1, 4 }
return.max >= 0
return.digits one of { 0, 2 }
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.digits
this.pos > orig(this.pos)
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseConcatExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseConcatExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min >= 0
return.exp1.max >= 0
return.exp1.digits one of { 0, 2 }
return.exp1.from >= 0
return.exp1.to >= 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min >= 0
return.exp2.max >= 0
return.exp2.digits one of { 0, 2 }
return.exp2.from >= 0
return.exp2.to >= 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min >= 0
return.max >= 0
return.digits one of { 0, 2 }
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits <= return.exp1.digits
this.digits <= return.exp2.digits
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.exp1.digits
this.pos > return.exp2.digits
this.pos > return.digits
this.pos > orig(this.pos)
return.exp1.digits >= return.digits
return.exp1.from <= return.exp1.to
return.exp2.digits >= return.digits
return.exp2.digits <= orig(this.pos)
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseInterExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseInterExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min >= 0
return.exp1.max >= 0
return.exp1.digits one of { 0, 2 }
return.exp1.from >= 0
return.exp1.to >= 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min >= 0
return.exp2.max >= 0
return.exp2.digits == 0
return.exp2.from >= 0
return.exp2.to >= 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min one of { 0, 1, 4 }
return.max >= 0
return.digits one of { 0, 2 }
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits <= return.exp1.digits
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.exp1.digits
this.pos > return.digits
this.pos > orig(this.pos)
return.exp1.digits >= return.digits
return.exp1.from <= return.exp1.to
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseRepeatExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseRepeatExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min one of { 0, 1, 2 }
return.exp1.max one of { 0, 2 }
return.exp1.digits == 0
return.exp1.from one of { 0, 48, 49 }
return.exp1.to one of { 0, 57 }
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min == 0
return.exp2.max == 0
return.exp2.digits == 0
return.exp2.from one of { 0, 3872, 57344 }
return.exp2.to one of { 0, 3881, 65533 }
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min >= 0
return.max >= 0
return.digits one of { 0, 2 }
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.digits
this.pos > orig(this.pos)
return.exp1.min >= return.exp1.max
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT806
this.digits == return.digits
return.min == return.max
this.b has only one value
this.b.toString == "~(@[@%]@)"
this.pos one of { 3, 8 }
return.kind has only one value
return.exp1 == null
return.exp2 == null
return.s == null
return.c == 0
return.min == 0
orig(this) has only one value
orig(this.pos) one of { 2, 7 }
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT816
this.digits == return.digits
return.min == return.max
return.kind has only one value
return.exp1 == null
return.exp2 == null
return.s has only one value
return.s != null
return.s.toString == ""
return.c == 0
return.min == 0
this.digits < orig(this.pos)
this.pos - orig(this.pos) - 2 == 0
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT820
this.digits == return.digits
return.s.toString == "0000"
return.c == 0
return.max == 0
return.min >= return.max
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT832
this.digits == return.digits
return.min == return.max
return.kind has only one value
return.exp1 == null
return.exp2 == null
return.s != null
return.c == 0
return.min == 0
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT853
return.kind has only one value
return.exp1 == null
return.exp2 == null
return.s == null
return.c == 0
return.min one of { 0, 1 }
return.digits == 2
this.pos - orig(this.pos) - 7 == 0
return.min < return.max
return.digits != orig(this.pos)
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT859
this.digits == return.digits
return.min == return.max
return.kind has only one value
return.exp1 == null
return.exp2 == null
return.s == null
return.min == 0
===========================================================================
dk.brics.automaton.RegExp.parseSimpleExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min one of { 0, 1, 2 }
return.exp1.max one of { 0, 2, 3 }
return.exp1.digits == 0
return.exp1.from one of { 0, 49 }
return.exp1.to one of { 0, 57 }
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min one of { 0, 1 }
return.exp2.max one of { 0, 4, 8 }
return.exp2.digits == 0
return.exp2.from == 0
return.exp2.to == 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min one of { 0, 1, 4 }
return.max >= 0
return.digits one of { 0, 2 }
return.from == 0
return.to == 0
return.b == null
return.flags == 0
return.pos == 0
this.digits < this.pos
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.digits
this.pos > orig(this.pos)
===========================================================================
dk.brics.automaton.RegExp.parseUnionExp():::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.digits <= this.pos
===========================================================================
dk.brics.automaton.RegExp.parseUnionExp():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName())
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
return != null
return.kind != null
return.exp1.kind != null
return.exp1.c >= 0
return.exp1.min >= 0
return.exp1.max >= 0
return.exp1.digits == 0
return.exp1.from >= 0
return.exp1.to >= 0
return.exp1.b == null
return.exp1.flags == 0
return.exp1.pos == 0
return.exp2.kind != null
return.exp2.c >= 0
return.exp2.min one of { 0, 1 }
return.exp2.max >= 0
return.exp2.digits == 0
return.exp2.from >= 0
return.exp2.to >= 0
return.exp2.b == null
return.exp2.flags == 0
return.exp2.pos == 0
return.c >= 0
return.min one of { 0, 1, 4 }
return.max one of { 0, 12, 31 }
return.digits one of { 0, 2 }
return.from >= 0
return.to >= 0
return.b == null
return.flags == 0
return.pos == 0
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[]) (elementwise)
dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES[].getClass().getName()) (elementwise)
this.digits < this.pos
this.digits <= return.digits
this.digits <= orig(this.pos)
this.pos > return.digits
this.pos > orig(this.pos)
return.exp1.from <= return.exp1.to
return.exp2.from <= return.exp2.to
return.from <= return.to
===========================================================================
dk.brics.automaton.RegExp.peek(java.lang.String):::ENTER
this.exp1 == this.exp2
this.min == this.max
this.from == this.to
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
arg0 != null
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.peek(java.lang.String):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == this.exp2
this.exp1 == orig(this.exp1)
this.exp1 == orig(this.exp2)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.b.toString == orig(this.b.toString)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
arg0.toString == orig(arg0.toString)
this.kind == null
this.exp1 == null
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b != null
this.flags == 65535
this.pos >= 1
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.peek(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
dk.brics.automaton.RegExp.peek(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
dk.brics.automaton.RegExp.toAutomaton():::ENTER
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == this.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == this.exp1.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == this.exp2.exp1.kind
this.exp1.kind == this.exp1.exp2.kind
this.exp1.exp1.kind == this.exp2.exp1.kind
this.exp1.exp1.exp1 == this.exp1.exp1.exp2
this.exp1.exp1.exp1 == this.exp2.exp1.exp1
this.exp1.exp1.s == this.exp1.s
this.exp1.exp1.c == this.exp1.exp2.c
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.min == this.min
this.exp1.exp1.max == this.min
this.exp1.exp1.digits == this.digits
this.exp1.exp1.from == this.exp1.c
this.exp1.exp1.to == this.exp1.c
this.exp1.exp2 == this.exp2.exp1.exp1
this.exp1.exp2.s == this.exp1.s
this.exp1.exp2.c == this.exp1.exp2.from
this.exp1.exp2.c == this.exp1.exp2.to
this.exp1.exp2.c == this.exp1.c
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.min
this.exp1.s == this.exp2.s
this.exp1.c == this.exp1.from
this.exp1.c == this.exp1.to
this.exp1.c == this.exp2.c
this.exp1.min == this.min
this.exp1.max == this.min
this.exp1.digits == this.digits
this.exp2.kind == this.exp2.exp2.kind
this.exp2.exp1.exp1 == this.exp2.exp1.exp2
this.exp2.exp1.s == this.exp2.s
this.exp2.exp1.min == this.exp2.min
this.exp2.exp1.max == this.exp2.min
this.exp2.exp1.from == this.exp2.c
this.exp2.exp1.to == this.exp2.c
this.exp2.exp2.s == this.exp2.s
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.max == this.exp2.min
this.exp2.exp2.digits == this.digits
this.exp2.exp2.from == this.exp2.c
this.exp2.exp2.to == this.exp2.c
this.exp2.c == this.exp2.from
this.exp2.c == this.exp2.to
this.exp2.min == this.exp2.max
this.exp2.min == this.min
this.min == this.max
this.from == this.to
this.kind != null
this.exp1 != null
this.exp1.exp1 != null
this.exp1.exp1.exp1 == null
this.exp1.exp1.c one of { 0, 48 }
this.exp1.exp2.kind has only one value
this.exp1.exp2.exp1 has only one value
this.exp1.exp2.exp2 has only one value
this.exp1.exp2.s == null
this.exp1.exp2.c == 0
this.exp1.exp2.min == 0
this.exp1.s == null
this.exp1.c == 0
this.exp2.kind has only one value
this.exp2.exp1 != null
this.exp2.exp1.kind has only one value
this.exp2.exp1.exp1 == null
this.exp2.exp1.c == 48
this.exp2.exp2 != null
this.exp2.exp2.exp1 != null
this.exp2.exp2.exp2 != null
this.exp2.exp2.digits == 0
this.exp2.s == null
this.exp2.c == 0
this.exp2.min == 0
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b == null
this.flags == 65535
this.exp1.exp1.c > this.exp2.c
this.exp2.exp2.digits < this.pos
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.toAutomaton():::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == this.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == this.exp1.exp2.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == this.exp2.exp1.kind
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == orig(this.exp1)
this.exp1.kind == this.exp1.exp2.kind
this.exp1.kind == orig(this.exp1.kind)
this.exp1.exp1 == orig(this.exp1.exp1)
this.exp1.exp1.kind == this.exp2.exp1.kind
this.exp1.exp1.kind == orig(this.exp1.exp1.kind)
this.exp1.exp1.exp1 == this.exp1.exp1.exp2
this.exp1.exp1.exp1 == this.exp2.exp1.exp1
this.exp1.exp1.exp1 == orig(this.exp1.exp1.exp1)
this.exp1.exp1.exp1 == orig(this.exp1.exp1.exp2)
this.exp1.exp1.s == this.exp1.s
this.exp1.exp1.c == this.exp1.exp2.c
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.c == orig(this.exp1.exp1.c)
this.exp1.exp1.min == this.min
this.exp1.exp1.max == this.min
this.exp1.exp1.digits == this.digits
this.exp1.exp1.from == this.exp1.c
this.exp1.exp1.to == this.exp1.c
this.exp1.exp1.b == orig(this.exp1.exp1.b)
this.exp1.exp1.flags == orig(this.exp1.exp1.flags)
this.exp1.exp1.pos == orig(this.exp1.exp1.pos)
this.exp1.exp2 == this.exp2.exp1.exp1
this.exp1.exp2 == orig(this.exp1.exp2)
this.exp1.exp2.kind == orig(this.exp1.exp2.kind)
this.exp1.exp2.exp1 == orig(this.exp1.exp2.exp1)
this.exp1.exp2.exp2 == orig(this.exp1.exp2.exp2)
this.exp1.exp2.s == this.exp1.s
this.exp1.exp2.s == orig(this.exp1.exp2.s)
this.exp1.exp2.c == this.exp1.exp2.from
this.exp1.exp2.c == this.exp1.exp2.to
this.exp1.exp2.c == this.exp1.c
this.exp1.exp2.c == orig(this.exp1.exp2.c)
this.exp1.exp2.c == orig(this.exp1.exp2.from)
this.exp1.exp2.c == orig(this.exp1.exp2.to)
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.min
this.exp1.exp2.min == orig(this.exp1.exp2.min)
this.exp1.exp2.min == orig(this.exp1.exp2.max)
this.exp1.exp2.digits == orig(this.exp1.exp2.digits)
this.exp1.exp2.b == orig(this.exp1.exp2.b)
this.exp1.exp2.flags == orig(this.exp1.exp2.flags)
this.exp1.exp2.pos == orig(this.exp1.exp2.pos)
this.exp1.s == this.exp2.s
this.exp1.s == orig(this.exp1.exp1.s)
this.exp1.s == orig(this.exp1.s)
this.exp1.c == this.exp1.from
this.exp1.c == this.exp1.to
this.exp1.c == this.exp2.c
this.exp1.c == orig(this.exp1.exp1.from)
this.exp1.c == orig(this.exp1.exp1.to)
this.exp1.c == orig(this.exp1.c)
this.exp1.c == orig(this.exp1.from)
this.exp1.c == orig(this.exp1.to)
this.exp1.min == this.min
this.exp1.max == this.min
this.exp1.digits == this.digits
this.exp1.b == orig(this.exp1.b)
this.exp1.flags == orig(this.exp1.flags)
this.exp1.pos == orig(this.exp1.pos)
this.exp2 == orig(this.exp2)
this.exp2.kind == this.exp2.exp2.kind
this.exp2.kind == orig(this.exp2.kind)
this.exp2.kind == orig(this.exp2.exp2.kind)
this.exp2.exp1 == orig(this.exp2.exp1)
this.exp2.exp1.kind == orig(this.exp2.exp1.kind)
this.exp2.exp1.exp1 == this.exp2.exp1.exp2
this.exp2.exp1.exp1 == orig(this.exp2.exp1.exp1)
this.exp2.exp1.exp1 == orig(this.exp2.exp1.exp2)
this.exp2.exp1.s == this.exp2.s
this.exp2.exp1.c == orig(this.exp2.exp1.c)
this.exp2.exp1.min == this.exp2.min
this.exp2.exp1.max == this.exp2.min
this.exp2.exp1.digits == orig(this.exp2.exp1.digits)
this.exp2.exp1.from == this.exp2.c
this.exp2.exp1.to == this.exp2.c
this.exp2.exp1.b == orig(this.exp2.exp1.b)
this.exp2.exp1.flags == orig(this.exp2.exp1.flags)
this.exp2.exp1.pos == orig(this.exp2.exp1.pos)
this.exp2.exp2 == orig(this.exp2.exp2)
this.exp2.exp2.exp1 == orig(this.exp2.exp2.exp1)
this.exp2.exp2.exp2 == orig(this.exp2.exp2.exp2)
this.exp2.exp2.s == this.exp2.s
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.max == this.exp2.min
this.exp2.exp2.digits == this.digits
this.exp2.exp2.digits == orig(this.exp2.exp2.digits)
this.exp2.exp2.from == this.exp2.c
this.exp2.exp2.to == this.exp2.c
this.exp2.exp2.b == orig(this.exp2.exp2.b)
this.exp2.exp2.flags == orig(this.exp2.exp2.flags)
this.exp2.exp2.pos == orig(this.exp2.exp2.pos)
this.exp2.s == orig(this.exp2.exp1.s)
this.exp2.s == orig(this.exp2.exp2.s)
this.exp2.s == orig(this.exp2.s)
this.exp2.c == this.exp2.from
this.exp2.c == this.exp2.to
this.exp2.c == orig(this.exp2.exp1.from)
this.exp2.c == orig(this.exp2.exp1.to)
this.exp2.c == orig(this.exp2.exp2.c)
this.exp2.c == orig(this.exp2.exp2.from)
this.exp2.c == orig(this.exp2.exp2.to)
this.exp2.c == orig(this.exp2.c)
this.exp2.c == orig(this.exp2.from)
this.exp2.c == orig(this.exp2.to)
this.exp2.min == this.exp2.max
this.exp2.min == this.min
this.exp2.min == orig(this.exp2.exp1.min)
this.exp2.min == orig(this.exp2.exp1.max)
this.exp2.min == orig(this.exp2.exp2.min)
this.exp2.min == orig(this.exp2.exp2.max)
this.exp2.min == orig(this.exp2.min)
this.exp2.min == orig(this.exp2.max)
this.exp2.digits == orig(this.exp2.digits)
this.exp2.b == orig(this.exp2.b)
this.exp2.flags == orig(this.exp2.flags)
this.exp2.pos == orig(this.exp2.pos)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == this.max
this.min == orig(this.exp1.exp1.min)
this.min == orig(this.exp1.exp1.max)
this.min == orig(this.exp1.min)
this.min == orig(this.exp1.max)
this.min == orig(this.min)
this.min == orig(this.max)
this.digits == orig(this.exp1.exp1.digits)
this.digits == orig(this.exp1.digits)
this.digits == orig(this.digits)
this.from == this.to
this.from == orig(this.from)
this.from == orig(this.to)
this.b == orig(this.b)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
this.kind != null
this.exp1 != null
this.exp1.exp1 != null
this.exp1.exp1.exp1 == null
this.exp1.exp1.c one of { 0, 48 }
this.exp1.exp2.kind has only one value
this.exp1.exp2.exp1 has only one value
this.exp1.exp2.exp2 has only one value
this.exp1.exp2.s == null
this.exp1.exp2.c == 0
this.exp1.exp2.min == 0
this.exp1.s == null
this.exp1.c == 0
this.exp2.kind has only one value
this.exp2.exp1 != null
this.exp2.exp1.kind has only one value
this.exp2.exp1.exp1 == null
this.exp2.exp1.c == 48
this.exp2.exp2 != null
this.exp2.exp2.exp1 != null
this.exp2.exp2.exp2 != null
this.exp2.exp2.digits == 0
this.exp2.s == null
this.exp2.c == 0
this.exp2.min == 0
this.s == null
this.c == 0
this.min == 0
this.digits == 0
this.from == 0
this.b == null
this.flags == 65535
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.deterministic == true
return.info == null
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != return.initial.transitions.getClass().getName()
this.exp1.exp1.c > this.exp2.c
this.exp2.exp2.digits < this.pos
this.digits < this.pos
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.RegExp.toAutomaton(java.util.Map):::ENTER
this.exp1.exp1.s == this.exp2.exp2.s
this.exp1.exp1.c == this.exp1.c
this.exp1.exp1.c == this.exp1.from
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.c == this.exp2.exp2.c
this.exp1.exp1.min == this.exp1.exp2.min
this.exp1.exp1.min == this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp2.min
this.exp1.exp1.min == this.max
this.exp1.exp1.max == this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp2.min
this.exp1.exp1.from == this.exp2.exp1.c
this.exp1.exp1.from == this.exp2.exp2.c
this.exp1.exp1.to == this.exp2.exp1.c
this.exp1.exp1.to == this.exp2.exp2.c
this.exp1.exp2.kind == this.exp2.exp2.kind
this.exp1.exp2.exp1 == this.exp2.exp2.exp1
this.exp1.exp2.exp1 == this.exp2.exp2.exp2
this.exp1.exp2.exp2 == this.exp2.exp2.exp1
this.exp1.exp2.exp2 == this.exp2.exp2.exp2
this.exp1.exp2.s == this.exp2.exp2.s
this.exp1.exp2.c == this.exp2.exp2.c
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.exp1.min
this.exp1.exp2.min == this.exp1.max
this.exp1.exp2.min == this.exp2.exp1.min
this.exp1.exp2.min == this.exp2.exp1.max
this.exp1.exp2.min == this.exp2.exp2.min
this.exp1.exp2.min == this.exp2.min
this.exp1.exp2.min == this.exp2.max
this.exp1.exp2.min == this.max
this.exp1.min == this.exp2.exp2.min
this.exp1.max == this.exp2.exp2.min
this.exp1.digits == this.exp2.exp2.digits
this.exp1.digits == this.digits
this.exp1.from == this.exp1.to
this.exp1.from == this.exp2.exp2.c
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.c == this.exp2.from
this.exp2.exp2.c == this.exp2.to
this.exp2.exp2.min == this.exp2.exp2.max
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.min == this.exp2.max
this.exp2.exp2.min == this.min
this.exp2.exp2.min == this.max
this.exp2.exp2.digits == this.digits
this.kind != null
this.exp1.exp1.c == 0
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 23 }
this.exp1.exp1.from one of { 0, 19968 }
this.exp1.exp1.to one of { 0, 40869 }
this.exp1.exp2.s.toString one of { "abs_path", "hostport" }
this.exp1.exp2.min == 0
this.exp1.c one of { 0, 37, 47 }
this.exp1.max one of { 0, 3, 4 }
this.exp1.digits == 0
this.exp1.from == 0
this.exp2.exp1.c one of { 0, 32, 58 }
this.exp2.exp1.max one of { 0, 8 }
this.exp2.exp1.from one of { 0, 97, 55296 }
this.exp2.exp1.to one of { 0, 102, 56319 }
this.exp2.exp2.s.toString one of { "_", "escaped", "hex" }
this.exp2.exp2.c == 0
this.exp2.exp2.min == 0
this.exp2.exp2.digits == 0
this.exp2.min one of { 0, 1 }
this.exp2.max one of { 0, 3 }
this.exp2.from one of { 0, 3872 }
this.exp2.to one of { 0, 3881 }
this.s == null
this.c == 0
this.min one of { 0, 1 }
this.max one of { 0, 12, 31 }
this.b == null
this.flags == 65535
arg0 != null
arg0.getClass().getName() == java.util.HashMap.class
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != arg0.getClass().getName()
this.exp1.exp1.c <= this.exp1.exp1.from
this.exp1.exp1.c <= this.exp1.exp1.to
this.exp1.exp1.c <= this.exp1.exp2.c
this.exp1.exp1.c <= this.exp1.exp2.from
this.exp1.exp1.c <= this.exp1.exp2.to
this.exp1.exp1.c <= this.exp2.exp1.from
this.exp1.exp1.c <= this.exp2.exp1.to
this.exp1.exp1.c <= this.exp2.c
this.exp1.exp1.c <= this.exp2.from
this.exp1.exp1.c <= this.exp2.to
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= this.min
this.exp1.exp1.max >= this.exp1.exp2.min
this.exp1.exp1.max >= this.max
this.exp1.exp1.digits < this.pos
this.exp1.exp1.from == this.exp2.exp1.c**2
this.exp2.exp1.c == this.exp1.exp1.from**2
this.exp1.exp1.from <= this.exp2.exp1.from
this.exp1.exp1.from <= this.exp2.exp1.to
this.exp1.exp1.to == this.exp2.exp1.c**2
this.exp2.exp1.c == this.exp1.exp1.to**2
this.exp1.exp1.to <= this.exp2.exp1.from
this.exp1.exp1.to <= this.exp2.exp1.to
this.exp1.exp2.min <= this.min
this.exp1.c >= this.exp1.from
this.exp1.c >= this.exp2.exp2.c
this.exp1.min >= this.exp2.max
this.exp1.min >= this.max
this.exp1.max >= this.exp2.max
this.exp1.max >= this.max
this.exp1.digits < this.pos
this.exp1.from <= this.exp2.exp1.c
this.exp1.from <= this.exp2.c
this.exp1.from <= this.exp2.from
this.exp1.from <= this.exp2.to
this.exp2.exp1.c >= this.exp2.exp2.c
this.exp2.exp1.min >= this.exp2.exp2.min
this.exp2.exp1.max >= this.exp2.exp2.min
this.exp2.exp1.from >= this.exp2.exp2.c
this.exp2.exp1.to >= this.exp2.exp2.c
this.exp2.exp2.c <= this.exp2.exp2.from
this.exp2.exp2.c <= this.exp2.exp2.to
this.exp2.c == this.exp2.exp2.c**2
this.exp2.exp2.c == this.exp2.c**2
this.exp2.exp2.digits < this.pos
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.toAutomaton(java.util.Map):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == orig(this.exp1)
this.exp1.kind == orig(this.exp1.kind)
this.exp1.exp1 == orig(this.exp1.exp1)
this.exp1.exp1.kind == orig(this.exp1.exp1.kind)
this.exp1.exp1.exp1 == orig(this.exp1.exp1.exp1)
this.exp1.exp1.exp2 == orig(this.exp1.exp1.exp2)
this.exp1.exp1.s == this.exp2.exp2.s
this.exp1.exp1.s == orig(this.exp1.exp1.s)
this.exp1.exp1.s.toString == orig(this.exp1.exp1.s.toString)
this.exp1.exp1.c == this.exp1.c
this.exp1.exp1.c == this.exp1.from
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.c == this.exp2.exp2.c
this.exp1.exp1.c == orig(this.exp1.exp1.c)
this.exp1.exp1.min == this.exp1.exp2.min
this.exp1.exp1.min == this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp2.min
this.exp1.exp1.min == this.max
this.exp1.exp1.min == orig(this.exp1.exp1.min)
this.exp1.exp1.max == this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp2.min
this.exp1.exp1.max == orig(this.exp1.exp1.max)
this.exp1.exp1.digits == orig(this.exp1.exp1.digits)
this.exp1.exp1.from == this.exp2.exp1.c
this.exp1.exp1.from == this.exp2.exp2.c
this.exp1.exp1.from == orig(this.exp1.exp1.from)
this.exp1.exp1.to == this.exp2.exp1.c
this.exp1.exp1.to == this.exp2.exp2.c
this.exp1.exp1.to == orig(this.exp1.exp1.to)
this.exp1.exp1.b == orig(this.exp1.exp1.b)
this.exp1.exp1.flags == orig(this.exp1.exp1.flags)
this.exp1.exp1.pos == orig(this.exp1.exp1.pos)
this.exp1.exp2 == orig(this.exp1.exp2)
this.exp1.exp2.kind == this.exp2.exp2.kind
this.exp1.exp2.kind == orig(this.exp1.exp2.kind)
this.exp1.exp2.exp1 == this.exp2.exp2.exp1
this.exp1.exp2.exp1 == this.exp2.exp2.exp2
this.exp1.exp2.exp1 == orig(this.exp1.exp2.exp1)
this.exp1.exp2.exp2 == this.exp2.exp2.exp1
this.exp1.exp2.exp2 == this.exp2.exp2.exp2
this.exp1.exp2.exp2 == orig(this.exp1.exp2.exp2)
this.exp1.exp2.s == this.exp2.exp2.s
this.exp1.exp2.s == orig(this.exp1.exp2.s)
this.exp1.exp2.s.toString == orig(this.exp1.exp2.s.toString)
this.exp1.exp2.c == this.exp2.exp2.c
this.exp1.exp2.c == orig(this.exp1.exp2.c)
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.exp1.min
this.exp1.exp2.min == this.exp1.max
this.exp1.exp2.min == this.exp2.exp1.min
this.exp1.exp2.min == this.exp2.exp1.max
this.exp1.exp2.min == this.exp2.exp2.min
this.exp1.exp2.min == this.exp2.min
this.exp1.exp2.min == this.exp2.max
this.exp1.exp2.min == this.max
this.exp1.exp2.min == orig(this.exp1.exp2.min)
this.exp1.exp2.min == orig(this.exp1.exp2.max)
this.exp1.exp2.digits == orig(this.exp1.exp2.digits)
this.exp1.exp2.from == orig(this.exp1.exp2.from)
this.exp1.exp2.to == orig(this.exp1.exp2.to)
this.exp1.exp2.b == orig(this.exp1.exp2.b)
this.exp1.exp2.flags == orig(this.exp1.exp2.flags)
this.exp1.exp2.pos == orig(this.exp1.exp2.pos)
this.exp1.s == orig(this.exp1.s)
this.exp1.s.toString == orig(this.exp1.s.toString)
this.exp1.c == orig(this.exp1.c)
this.exp1.min == this.exp2.exp2.min
this.exp1.min == orig(this.exp1.min)
this.exp1.max == this.exp2.exp2.min
this.exp1.max == orig(this.exp1.max)
this.exp1.digits == this.exp2.exp2.digits
this.exp1.digits == this.digits
this.exp1.digits == orig(this.exp1.digits)
this.exp1.from == this.exp1.to
this.exp1.from == this.exp2.exp2.c
this.exp1.from == orig(this.exp1.from)
this.exp1.from == orig(this.exp1.to)
this.exp1.b == orig(this.exp1.b)
this.exp1.flags == orig(this.exp1.flags)
this.exp1.pos == orig(this.exp1.pos)
this.exp2 == orig(this.exp2)
this.exp2.kind == orig(this.exp2.kind)
this.exp2.exp1 == orig(this.exp2.exp1)
this.exp2.exp1.kind == orig(this.exp2.exp1.kind)
this.exp2.exp1.exp1 == orig(this.exp2.exp1.exp1)
this.exp2.exp1.exp2 == orig(this.exp2.exp1.exp2)
this.exp2.exp1.s == orig(this.exp2.exp1.s)
this.exp2.exp1.s.toString == orig(this.exp2.exp1.s.toString)
this.exp2.exp1.c == orig(this.exp2.exp1.c)
this.exp2.exp1.min == orig(this.exp2.exp1.min)
this.exp2.exp1.max == orig(this.exp2.exp1.max)
this.exp2.exp1.digits == orig(this.exp2.exp1.digits)
this.exp2.exp1.from == orig(this.exp2.exp1.from)
this.exp2.exp1.to == orig(this.exp2.exp1.to)
this.exp2.exp1.b == orig(this.exp2.exp1.b)
this.exp2.exp1.flags == orig(this.exp2.exp1.flags)
this.exp2.exp1.pos == orig(this.exp2.exp1.pos)
this.exp2.exp2 == orig(this.exp2.exp2)
this.exp2.exp2.kind == orig(this.exp2.exp2.kind)
this.exp2.exp2.exp1 == orig(this.exp2.exp2.exp1)
this.exp2.exp2.exp2 == orig(this.exp2.exp2.exp2)
this.exp2.exp2.s == orig(this.exp2.exp2.s)
this.exp2.exp2.s.toString == orig(this.exp2.exp2.s.toString)
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.c == this.exp2.from
this.exp2.exp2.c == this.exp2.to
this.exp2.exp2.c == orig(this.exp2.exp2.c)
this.exp2.exp2.min == this.exp2.exp2.max
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.min == this.exp2.max
this.exp2.exp2.min == this.min
this.exp2.exp2.min == this.max
this.exp2.exp2.min == orig(this.exp2.exp2.min)
this.exp2.exp2.min == orig(this.exp2.exp2.max)
this.exp2.exp2.digits == this.digits
this.exp2.exp2.digits == orig(this.exp2.exp2.digits)
this.exp2.exp2.from == orig(this.exp2.exp2.from)
this.exp2.exp2.to == orig(this.exp2.exp2.to)
this.exp2.exp2.b == orig(this.exp2.exp2.b)
this.exp2.exp2.flags == orig(this.exp2.exp2.flags)
this.exp2.exp2.pos == orig(this.exp2.exp2.pos)
this.exp2.s == orig(this.exp2.s)
this.exp2.s.toString == orig(this.exp2.s.toString)
this.exp2.c == orig(this.exp2.c)
this.exp2.min == orig(this.exp2.min)
this.exp2.max == orig(this.exp2.max)
this.exp2.digits == orig(this.exp2.digits)
this.exp2.from == orig(this.exp2.from)
this.exp2.to == orig(this.exp2.to)
this.exp2.b == orig(this.exp2.b)
this.exp2.flags == orig(this.exp2.flags)
this.exp2.pos == orig(this.exp2.pos)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == orig(this.min)
this.max == orig(this.max)
this.digits == orig(this.digits)
this.from == orig(this.from)
this.to == orig(this.to)
this.b == orig(this.b)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
this.kind != null
this.exp1.exp1.c == 0
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 23 }
this.exp1.exp1.from one of { 0, 19968 }
this.exp1.exp1.to one of { 0, 40869 }
this.exp1.exp2.s.toString one of { "abs_path", "hostport" }
this.exp1.exp2.min == 0
this.exp1.c one of { 0, 37, 47 }
this.exp1.max one of { 0, 3, 4 }
this.exp1.digits == 0
this.exp1.from == 0
this.exp2.exp1.c one of { 0, 32, 58 }
this.exp2.exp1.max one of { 0, 8 }
this.exp2.exp1.from one of { 0, 97, 55296 }
this.exp2.exp1.to one of { 0, 102, 56319 }
this.exp2.exp2.s.toString one of { "_", "escaped", "hex" }
this.exp2.exp2.c == 0
this.exp2.exp2.min == 0
this.exp2.exp2.digits == 0
this.exp2.min one of { 0, 1 }
this.exp2.max one of { 0, 3 }
this.exp2.from one of { 0, 3872 }
this.exp2.to one of { 0, 3881 }
this.s == null
this.c == 0
this.min one of { 0, 1 }
this.max one of { 0, 12, 31 }
this.b == null
this.flags == 65535
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number >= 0
return.deterministic == true
return.info == null
return.hash_code >= 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != return.initial.transitions.getClass().getName()
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.exp1.exp1.c <= this.exp1.exp1.from
this.exp1.exp1.c <= this.exp1.exp1.to
this.exp1.exp1.c <= this.exp1.exp2.c
this.exp1.exp1.c <= this.exp1.exp2.from
this.exp1.exp1.c <= this.exp1.exp2.to
this.exp1.exp1.c <= this.exp2.exp1.from
this.exp1.exp1.c <= this.exp2.exp1.to
this.exp1.exp1.c <= this.exp2.c
this.exp1.exp1.c <= this.exp2.from
this.exp1.exp1.c <= this.exp2.to
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= this.min
this.exp1.exp1.max >= this.exp1.exp2.min
this.exp1.exp1.max >= this.max
this.exp1.exp1.digits < this.pos
this.exp1.exp1.from == this.exp2.exp1.c**2
this.exp2.exp1.c == this.exp1.exp1.from**2
this.exp1.exp1.from <= this.exp2.exp1.from
this.exp1.exp1.from <= this.exp2.exp1.to
this.exp1.exp1.to == this.exp2.exp1.c**2
this.exp2.exp1.c == this.exp1.exp1.to**2
this.exp1.exp1.to <= this.exp2.exp1.from
this.exp1.exp1.to <= this.exp2.exp1.to
this.exp1.exp2.min <= this.min
this.exp1.c >= this.exp1.from
this.exp1.c >= this.exp2.exp2.c
this.exp1.min >= this.exp2.max
this.exp1.min >= this.max
this.exp1.max >= this.exp2.max
this.exp1.max >= this.max
this.exp1.digits < this.pos
this.exp1.from <= this.exp2.exp1.c
this.exp1.from <= this.exp2.c
this.exp1.from <= this.exp2.from
this.exp1.from <= this.exp2.to
this.exp2.exp1.c >= this.exp2.exp2.c
this.exp2.exp1.min >= this.exp2.exp2.min
this.exp2.exp1.max >= this.exp2.exp2.min
this.exp2.exp1.from >= this.exp2.exp2.c
this.exp2.exp1.to >= this.exp2.exp2.c
this.exp2.exp2.c <= this.exp2.exp2.from
this.exp2.exp2.c <= this.exp2.exp2.to
this.exp2.c == this.exp2.exp2.c**2
this.exp2.exp2.c == this.exp2.c**2
this.exp2.exp2.digits < this.pos
this.digits < this.pos
return.initial.transitions.getClass().getName() != orig(arg0.getClass().getName())
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.RegExp.toAutomaton(java.util.Map, dk.brics.automaton.AutomatonProvider, boolean):::ENTER
this.kind != null
this.b == null
arg0.getClass().getName() == java.util.HashMap.class
arg1 == null
arg2 == true
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != arg0.getClass().getName()
===========================================================================
dk.brics.automaton.RegExp.toAutomaton(java.util.Map, dk.brics.automaton.AutomatonProvider, boolean):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == orig(this.exp1)
this.exp1.kind == orig(this.exp1.kind)
this.exp1.exp1 == orig(this.exp1.exp1)
this.exp1.exp1.kind == orig(this.exp1.exp1.kind)
this.exp1.exp1.exp1 == orig(this.exp1.exp1.exp1)
this.exp1.exp1.exp2 == orig(this.exp1.exp1.exp2)
this.exp1.exp1.s == orig(this.exp1.exp1.s)
this.exp1.exp1.s.toString == orig(this.exp1.exp1.s.toString)
this.exp1.exp1.c == orig(this.exp1.exp1.c)
this.exp1.exp1.min == orig(this.exp1.exp1.min)
this.exp1.exp1.max == orig(this.exp1.exp1.max)
this.exp1.exp1.digits == orig(this.exp1.exp1.digits)
this.exp1.exp1.from == orig(this.exp1.exp1.from)
this.exp1.exp1.to == orig(this.exp1.exp1.to)
this.exp1.exp1.b == orig(this.exp1.exp1.b)
this.exp1.exp1.flags == orig(this.exp1.exp1.flags)
this.exp1.exp1.pos == orig(this.exp1.exp1.pos)
this.exp1.exp2 == orig(this.exp1.exp2)
this.exp1.exp2.kind == orig(this.exp1.exp2.kind)
this.exp1.exp2.exp1 == orig(this.exp1.exp2.exp1)
this.exp1.exp2.exp2 == orig(this.exp1.exp2.exp2)
this.exp1.exp2.s == orig(this.exp1.exp2.s)
this.exp1.exp2.s.toString == orig(this.exp1.exp2.s.toString)
this.exp1.exp2.c == orig(this.exp1.exp2.c)
this.exp1.exp2.min == orig(this.exp1.exp2.min)
this.exp1.exp2.max == orig(this.exp1.exp2.max)
this.exp1.exp2.digits == orig(this.exp1.exp2.digits)
this.exp1.exp2.from == orig(this.exp1.exp2.from)
this.exp1.exp2.to == orig(this.exp1.exp2.to)
this.exp1.exp2.b == orig(this.exp1.exp2.b)
this.exp1.exp2.flags == orig(this.exp1.exp2.flags)
this.exp1.exp2.pos == orig(this.exp1.exp2.pos)
this.exp1.s == orig(this.exp1.s)
this.exp1.s.toString == orig(this.exp1.s.toString)
this.exp1.c == orig(this.exp1.c)
this.exp1.min == orig(this.exp1.min)
this.exp1.max == orig(this.exp1.max)
this.exp1.digits == orig(this.exp1.digits)
this.exp1.from == orig(this.exp1.from)
this.exp1.to == orig(this.exp1.to)
this.exp1.b == orig(this.exp1.b)
this.exp1.flags == orig(this.exp1.flags)
this.exp1.pos == orig(this.exp1.pos)
this.exp2 == orig(this.exp2)
this.exp2.kind == orig(this.exp2.kind)
this.exp2.exp1 == orig(this.exp2.exp1)
this.exp2.exp1.kind == orig(this.exp2.exp1.kind)
this.exp2.exp1.exp1 == orig(this.exp2.exp1.exp1)
this.exp2.exp1.exp2 == orig(this.exp2.exp1.exp2)
this.exp2.exp1.s == orig(this.exp2.exp1.s)
this.exp2.exp1.s.toString == orig(this.exp2.exp1.s.toString)
this.exp2.exp1.c == orig(this.exp2.exp1.c)
this.exp2.exp1.min == orig(this.exp2.exp1.min)
this.exp2.exp1.max == orig(this.exp2.exp1.max)
this.exp2.exp1.digits == orig(this.exp2.exp1.digits)
this.exp2.exp1.from == orig(this.exp2.exp1.from)
this.exp2.exp1.to == orig(this.exp2.exp1.to)
this.exp2.exp1.b == orig(this.exp2.exp1.b)
this.exp2.exp1.flags == orig(this.exp2.exp1.flags)
this.exp2.exp1.pos == orig(this.exp2.exp1.pos)
this.exp2.exp2 == orig(this.exp2.exp2)
this.exp2.exp2.kind == orig(this.exp2.exp2.kind)
this.exp2.exp2.exp1 == orig(this.exp2.exp2.exp1)
this.exp2.exp2.exp2 == orig(this.exp2.exp2.exp2)
this.exp2.exp2.s == orig(this.exp2.exp2.s)
this.exp2.exp2.s.toString == orig(this.exp2.exp2.s.toString)
this.exp2.exp2.c == orig(this.exp2.exp2.c)
this.exp2.exp2.min == orig(this.exp2.exp2.min)
this.exp2.exp2.max == orig(this.exp2.exp2.max)
this.exp2.exp2.digits == orig(this.exp2.exp2.digits)
this.exp2.exp2.from == orig(this.exp2.exp2.from)
this.exp2.exp2.to == orig(this.exp2.exp2.to)
this.exp2.exp2.b == orig(this.exp2.exp2.b)
this.exp2.exp2.flags == orig(this.exp2.exp2.flags)
this.exp2.exp2.pos == orig(this.exp2.exp2.pos)
this.exp2.s == orig(this.exp2.s)
this.exp2.s.toString == orig(this.exp2.s.toString)
this.exp2.c == orig(this.exp2.c)
this.exp2.min == orig(this.exp2.min)
this.exp2.max == orig(this.exp2.max)
this.exp2.digits == orig(this.exp2.digits)
this.exp2.from == orig(this.exp2.from)
this.exp2.to == orig(this.exp2.to)
this.exp2.b == orig(this.exp2.b)
this.exp2.flags == orig(this.exp2.flags)
this.exp2.pos == orig(this.exp2.pos)
this.s == orig(this.s)
this.s.toString == orig(this.s.toString)
this.c == orig(this.c)
this.min == orig(this.min)
this.max == orig(this.max)
this.digits == orig(this.digits)
this.from == orig(this.from)
this.to == orig(this.to)
this.b == orig(this.b)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
this.kind != null
this.b == null
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number >= 0
return.deterministic == true
return.info == null
return.hash_code >= 0
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != return.initial.transitions.getClass().getName()
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
return.initial.transitions.getClass().getName() != orig(arg0.getClass().getName())
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.RegExp.toAutomatonAllowMutate(java.util.Map, dk.brics.automaton.AutomatonProvider, boolean):::ENTER
this.exp1.exp1.s == this.exp2.exp2.s
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.min == this.exp1.exp2.min
this.exp1.exp1.min == this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp2.min
this.exp1.exp1.min == this.max
this.exp1.exp1.max == this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp2.min
this.exp1.exp1.from == this.exp2.exp2.c
this.exp1.exp1.to == this.exp2.exp2.c
this.exp1.exp2.kind == this.exp2.exp2.kind
this.exp1.exp2.exp1 == this.exp2.exp2.exp1
this.exp1.exp2.exp1 == this.exp2.exp2.exp2
this.exp1.exp2.exp2 == this.exp2.exp2.exp1
this.exp1.exp2.exp2 == this.exp2.exp2.exp2
this.exp1.exp2.s == this.exp2.exp2.s
this.exp1.exp2.c == this.exp2.exp2.c
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.exp1.min
this.exp1.exp2.min == this.exp1.max
this.exp1.exp2.min == this.exp2.exp1.min
this.exp1.exp2.min == this.exp2.exp1.max
this.exp1.exp2.min == this.exp2.exp2.min
this.exp1.exp2.min == this.exp2.min
this.exp1.exp2.min == this.exp2.max
this.exp1.exp2.min == this.max
this.exp1.min == this.exp2.exp2.min
this.exp1.max == this.exp2.exp2.min
this.exp1.digits == this.exp2.exp2.digits
this.exp1.digits == this.digits
this.exp1.from == this.exp1.to
this.exp1.from == this.exp2.exp2.c
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.c == this.exp2.from
this.exp2.exp2.c == this.exp2.to
this.exp2.exp2.min == this.exp2.exp2.max
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.min == this.exp2.max
this.exp2.exp2.min == this.min
this.exp2.exp2.min == this.max
this.exp2.exp2.digits == this.digits
this.kind != null
this.exp1.exp1.c one of { 0, 48 }
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 23 }
this.exp1.exp1.from one of { 0, 19968 }
this.exp1.exp1.to one of { 0, 40869 }
this.exp1.exp2.s.toString one of { "abs_path", "hostport" }
this.exp1.exp2.min == 0
this.exp1.c one of { 0, 37, 47 }
this.exp1.max one of { 0, 3, 4 }
this.exp1.digits == 0
this.exp1.from == 0
this.exp2.exp1.max one of { 0, 8 }
this.exp2.exp1.from one of { 0, 97, 55296 }
this.exp2.exp1.to one of { 0, 102, 56319 }
this.exp2.exp2.s.toString one of { "_", "escaped", "hex" }
this.exp2.exp2.c == 0
this.exp2.exp2.min == 0
this.exp2.exp2.digits == 0
this.exp2.min one of { 0, 1 }
this.exp2.max one of { 0, 3 }
this.exp2.from one of { 0, 3872 }
this.exp2.to one of { 0, 3881 }
this.s == null
this.c == 0
this.min one of { 0, 1 }
this.max one of { 0, 12, 31 }
this.b == null
this.flags == 65535
arg0.getClass().getName() == java.util.HashMap.class
arg1 == null
arg2 == true
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != arg0.getClass().getName()
this.exp1.exp1.c <= this.exp1.exp2.c
this.exp1.exp1.c <= this.exp1.exp2.from
this.exp1.exp1.c <= this.exp1.exp2.to
this.exp1.exp1.c >= this.exp2.exp2.c
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= this.min
this.exp1.exp1.max >= this.exp1.exp2.min
this.exp1.exp1.max >= this.max
this.exp1.exp1.digits < this.pos
this.exp1.exp1.from <= this.exp2.exp1.c
this.exp1.exp1.from <= this.exp2.exp1.from
this.exp1.exp1.from <= this.exp2.exp1.to
this.exp1.exp1.from <= this.exp2.exp2.from
this.exp1.exp1.from <= this.exp2.exp2.to
this.exp1.exp1.to <= this.exp2.exp1.c
this.exp1.exp1.to <= this.exp2.exp1.from
this.exp1.exp1.to <= this.exp2.exp1.to
this.exp1.exp1.to <= this.exp2.exp2.from
this.exp1.exp1.to <= this.exp2.exp2.to
this.exp1.exp2.min <= this.min
this.exp1.c >= this.exp1.from
this.exp1.c >= this.exp2.exp2.c
this.exp1.min >= this.exp2.max
this.exp1.min >= this.max
this.exp1.max >= this.exp2.max
this.exp1.max >= this.max
this.exp1.digits < this.pos
this.exp1.from <= this.exp2.exp1.c
this.exp1.from <= this.exp2.c
this.exp1.from <= this.exp2.from
this.exp1.from <= this.exp2.to
this.exp2.exp1.c >= this.exp2.exp2.c
this.exp2.exp1.min >= this.exp2.exp2.min
this.exp2.exp1.max >= this.exp2.exp2.min
this.exp2.exp1.from >= this.exp2.exp2.c
this.exp2.exp1.to >= this.exp2.exp2.c
this.exp2.exp2.c <= this.exp2.exp2.from
this.exp2.exp2.c <= this.exp2.exp2.to
this.exp2.c == this.exp2.exp2.c**2
this.exp2.exp2.c == this.exp2.c**2
this.exp2.exp2.digits < this.pos
this.digits < this.pos
===========================================================================
dk.brics.automaton.RegExp.toAutomatonAllowMutate(java.util.Map, dk.brics.automaton.AutomatonProvider, boolean):::EXIT
dk.brics.automaton.RegExp.allow_mutation == orig(dk.brics.automaton.RegExp.allow_mutation)
this.kind == orig(this.kind)
dk.brics.automaton.RegExp$Kind.REGEXP_UNION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_UNION)
dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CONCATENATION)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERSECTION)
dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_OPTIONAL)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MIN)
dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX == orig(dk.brics.automaton.RegExp$Kind.REGEXP_REPEAT_MINMAX)
dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT == orig(dk.brics.automaton.RegExp$Kind.REGEXP_COMPLEMENT)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE == orig(dk.brics.automaton.RegExp$Kind.REGEXP_CHAR_RANGE)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYCHAR)
dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY == orig(dk.brics.automaton.RegExp$Kind.REGEXP_EMPTY)
dk.brics.automaton.RegExp$Kind.REGEXP_STRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_STRING)
dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING == orig(dk.brics.automaton.RegExp$Kind.REGEXP_ANYSTRING)
dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON == orig(dk.brics.automaton.RegExp$Kind.REGEXP_AUTOMATON)
dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL == orig(dk.brics.automaton.RegExp$Kind.REGEXP_INTERVAL)
dk.brics.automaton.RegExp$Kind.$VALUES == orig(dk.brics.automaton.RegExp$Kind.$VALUES)
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() == orig(dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName())
dk.brics.automaton.RegExp$Kind.$VALUES[] == orig(dk.brics.automaton.RegExp$Kind.$VALUES[])
this.exp1 == orig(this.exp1)
this.exp1.kind == orig(this.exp1.kind)
this.exp1.exp1 == orig(this.exp1.exp1)
this.exp1.exp1.kind == orig(this.exp1.exp1.kind)
this.exp1.exp1.exp1 == orig(this.exp1.exp1.exp1)
this.exp1.exp1.exp2 == orig(this.exp1.exp1.exp2)
this.exp1.exp1.s == this.exp2.exp2.s
this.exp1.exp1.s == orig(this.exp1.exp1.s)
this.exp1.exp1.s.toString == orig(this.exp1.exp1.s.toString)
this.exp1.exp1.c == this.exp2.exp1.c
this.exp1.exp1.c == orig(this.exp1.exp1.c)
this.exp1.exp1.min == this.exp1.exp2.min
this.exp1.exp1.min == this.exp2.exp1.min
this.exp1.exp1.min == this.exp2.exp2.min
this.exp1.exp1.min == this.max
this.exp1.exp1.min == orig(this.exp1.exp1.min)
this.exp1.exp1.max == this.exp2.exp1.min
this.exp1.exp1.max == this.exp2.exp2.min
this.exp1.exp1.max == orig(this.exp1.exp1.max)
this.exp1.exp1.digits == orig(this.exp1.exp1.digits)
this.exp1.exp1.from == this.exp2.exp2.c
this.exp1.exp1.from == orig(this.exp1.exp1.from)
this.exp1.exp1.to == this.exp2.exp2.c
this.exp1.exp1.to == orig(this.exp1.exp1.to)
this.exp1.exp1.b == orig(this.exp1.exp1.b)
this.exp1.exp1.flags == orig(this.exp1.exp1.flags)
this.exp1.exp1.pos == orig(this.exp1.exp1.pos)
this.exp1.exp2 == orig(this.exp1.exp2)
this.exp1.exp2.kind == this.exp2.exp2.kind
this.exp1.exp2.kind == orig(this.exp1.exp2.kind)
this.exp1.exp2.exp1 == this.exp2.exp2.exp1
this.exp1.exp2.exp1 == this.exp2.exp2.exp2
this.exp1.exp2.exp1 == orig(this.exp1.exp2.exp1)
this.exp1.exp2.exp2 == this.exp2.exp2.exp1
this.exp1.exp2.exp2 == this.exp2.exp2.exp2
this.exp1.exp2.exp2 == orig(this.exp1.exp2.exp2)
this.exp1.exp2.s == this.exp2.exp2.s
this.exp1.exp2.s == orig(this.exp1.exp2.s)
this.exp1.exp2.s.toString == orig(this.exp1.exp2.s.toString)
this.exp1.exp2.c == this.exp2.exp2.c
this.exp1.exp2.c == orig(this.exp1.exp2.c)
this.exp1.exp2.min == this.exp1.exp2.max
this.exp1.exp2.min == this.exp1.min
this.exp1.exp2.min == this.exp1.max
this.exp1.exp2.min == this.exp2.exp1.min
this.exp1.exp2.min == this.exp2.exp1.max
this.exp1.exp2.min == this.exp2.exp2.min
this.exp1.exp2.min == this.exp2.min
this.exp1.exp2.min == this.exp2.max
this.exp1.exp2.min == this.max
this.exp1.exp2.min == orig(this.exp1.exp2.min)
this.exp1.exp2.min == orig(this.exp1.exp2.max)
this.exp1.exp2.digits == orig(this.exp1.exp2.digits)
this.exp1.exp2.from == orig(this.exp1.exp2.from)
this.exp1.exp2.to == orig(this.exp1.exp2.to)
this.exp1.exp2.b == orig(this.exp1.exp2.b)
this.exp1.exp2.flags == orig(this.exp1.exp2.flags)
this.exp1.exp2.pos == orig(this.exp1.exp2.pos)
this.exp1.s == orig(this.exp1.s)
this.exp1.s.toString == orig(this.exp1.s.toString)
this.exp1.c == orig(this.exp1.c)
this.exp1.min == this.exp2.exp2.min
this.exp1.min == orig(this.exp1.min)
this.exp1.max == this.exp2.exp2.min
this.exp1.max == orig(this.exp1.max)
this.exp1.digits == this.exp2.exp2.digits
this.exp1.digits == this.digits
this.exp1.digits == orig(this.exp1.digits)
this.exp1.from == this.exp1.to
this.exp1.from == this.exp2.exp2.c
this.exp1.from == orig(this.exp1.from)
this.exp1.from == orig(this.exp1.to)
this.exp1.b == orig(this.exp1.b)
this.exp1.flags == orig(this.exp1.flags)
this.exp1.pos == orig(this.exp1.pos)
this.exp2 == orig(this.exp2)
this.exp2.kind == orig(this.exp2.kind)
this.exp2.exp1 == orig(this.exp2.exp1)
this.exp2.exp1.kind == orig(this.exp2.exp1.kind)
this.exp2.exp1.exp1 == orig(this.exp2.exp1.exp1)
this.exp2.exp1.exp2 == orig(this.exp2.exp1.exp2)
this.exp2.exp1.s == orig(this.exp2.exp1.s)
this.exp2.exp1.s.toString == orig(this.exp2.exp1.s.toString)
this.exp2.exp1.c == orig(this.exp2.exp1.c)
this.exp2.exp1.min == orig(this.exp2.exp1.min)
this.exp2.exp1.max == orig(this.exp2.exp1.max)
this.exp2.exp1.digits == orig(this.exp2.exp1.digits)
this.exp2.exp1.from == orig(this.exp2.exp1.from)
this.exp2.exp1.to == orig(this.exp2.exp1.to)
this.exp2.exp1.b == orig(this.exp2.exp1.b)
this.exp2.exp1.flags == orig(this.exp2.exp1.flags)
this.exp2.exp1.pos == orig(this.exp2.exp1.pos)
this.exp2.exp2 == orig(this.exp2.exp2)
this.exp2.exp2.kind == orig(this.exp2.exp2.kind)
this.exp2.exp2.exp1 == orig(this.exp2.exp2.exp1)
this.exp2.exp2.exp2 == orig(this.exp2.exp2.exp2)
this.exp2.exp2.s == orig(this.exp2.exp2.s)
this.exp2.exp2.s.toString == orig(this.exp2.exp2.s.toString)
this.exp2.exp2.c == this.exp2.c
this.exp2.exp2.c == this.exp2.from
this.exp2.exp2.c == this.exp2.to
this.exp2.exp2.c == orig(this.exp2.exp2.c)
this.exp2.exp2.min == this.exp2.exp2.max
this.exp2.exp2.min == this.exp2.min
this.exp2.exp2.min == this.exp2.max
this.exp2.exp2.min == this.min
this.exp2.exp2.min == this.max
this.exp2.exp2.min == orig(this.exp2.exp2.min)
this.exp2.exp2.min == orig(this.exp2.exp2.max)
this.exp2.exp2.digits == this.digits
this.exp2.exp2.digits == orig(this.exp2.exp2.digits)
this.exp2.exp2.from == orig(this.exp2.exp2.from)
this.exp2.exp2.to == orig(this.exp2.exp2.to)
this.exp2.exp2.b == orig(this.exp2.exp2.b)
this.exp2.exp2.flags == orig(this.exp2.exp2.flags)
this.exp2.exp2.pos == orig(this.exp2.exp2.pos)
this.exp2.s == orig(this.exp2.s)
this.exp2.s.toString == orig(this.exp2.s.toString)
this.exp2.c == orig(this.exp2.c)
this.exp2.min == orig(this.exp2.min)
this.exp2.max == orig(this.exp2.max)
this.exp2.digits == orig(this.exp2.digits)
this.exp2.from == orig(this.exp2.from)
this.exp2.to == orig(this.exp2.to)
this.exp2.b == orig(this.exp2.b)
this.exp2.flags == orig(this.exp2.flags)
this.exp2.pos == orig(this.exp2.pos)
this.s == orig(this.s)
this.c == orig(this.c)
this.min == orig(this.min)
this.max == orig(this.max)
this.digits == orig(this.digits)
this.from == orig(this.from)
this.to == orig(this.to)
this.b == orig(this.b)
this.flags == orig(this.flags)
this.pos == orig(this.pos)
this.kind != null
this.exp1.exp1.c one of { 0, 48 }
this.exp1.exp1.min == 0
this.exp1.exp1.max one of { 0, 23 }
this.exp1.exp1.from one of { 0, 19968 }
this.exp1.exp1.to one of { 0, 40869 }
this.exp1.exp2.s.toString one of { "abs_path", "hostport" }
this.exp1.exp2.min == 0
this.exp1.c one of { 0, 37, 47 }
this.exp1.max one of { 0, 3, 4 }
this.exp1.digits == 0
this.exp1.from == 0
this.exp2.exp1.max one of { 0, 8 }
this.exp2.exp1.from one of { 0, 97, 55296 }
this.exp2.exp1.to one of { 0, 102, 56319 }
this.exp2.exp2.s.toString one of { "_", "escaped", "hex" }
this.exp2.exp2.c == 0
this.exp2.exp2.min == 0
this.exp2.exp2.digits == 0
this.exp2.min one of { 0, 1 }
this.exp2.max one of { 0, 3 }
this.exp2.from one of { 0, 3872 }
this.exp2.to one of { 0, 3881 }
this.s == null
this.c == 0
this.min one of { 0, 1 }
this.max one of { 0, 12, 31 }
this.b == null
this.flags == 65535
return != null
dk.brics.automaton.Automaton.minimization == 2
return.initial != null
return.initial.transitions != null
return.initial.transitions.getClass().getName() == java.util.HashSet.class
return.initial.number >= 0
return.deterministic == true
return.info == null
return.hash_code >= 0
return.singleton == null
dk.brics.automaton.Automaton.minimize_always == false
dk.brics.automaton.Automaton.allow_mutation == true
dk.brics.automaton.Automaton.is_debug has only one value
dk.brics.automaton.Automaton.is_debug != null
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != return.initial.transitions.getClass().getName()
dk.brics.automaton.RegExp$Kind.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.exp1.exp1.c <= this.exp1.exp2.c
this.exp1.exp1.c <= this.exp1.exp2.from
this.exp1.exp1.c <= this.exp1.exp2.to
this.exp1.exp1.c >= this.exp2.exp2.c
this.exp1.exp1.min <= this.exp1.exp1.max
this.exp1.exp1.min <= this.exp1.min
this.exp1.exp1.min <= this.exp1.max
this.exp1.exp1.min <= this.min
this.exp1.exp1.max >= this.exp1.exp2.min
this.exp1.exp1.max >= this.max
this.exp1.exp1.digits < this.pos
this.exp1.exp1.from <= this.exp2.exp1.c
this.exp1.exp1.from <= this.exp2.exp1.from
this.exp1.exp1.from <= this.exp2.exp1.to
this.exp1.exp1.from <= this.exp2.exp2.from
this.exp1.exp1.from <= this.exp2.exp2.to
this.exp1.exp1.to <= this.exp2.exp1.c
this.exp1.exp1.to <= this.exp2.exp1.from
this.exp1.exp1.to <= this.exp2.exp1.to
this.exp1.exp1.to <= this.exp2.exp2.from
this.exp1.exp1.to <= this.exp2.exp2.to
this.exp1.exp2.min <= this.min
this.exp1.c >= this.exp1.from
this.exp1.c >= this.exp2.exp2.c
this.exp1.min >= this.exp2.max
this.exp1.min >= this.max
this.exp1.max >= this.exp2.max
this.exp1.max >= this.max
this.exp1.digits < this.pos
this.exp1.from <= this.exp2.exp1.c
this.exp1.from <= this.exp2.c
this.exp1.from <= this.exp2.from
this.exp1.from <= this.exp2.to
this.exp2.exp1.c >= this.exp2.exp2.c
this.exp2.exp1.min >= this.exp2.exp2.min
this.exp2.exp1.max >= this.exp2.exp2.min
this.exp2.exp1.from >= this.exp2.exp2.c
this.exp2.exp1.to >= this.exp2.exp2.c
this.exp2.exp2.c <= this.exp2.exp2.from
this.exp2.exp2.c <= this.exp2.exp2.to
this.exp2.c == this.exp2.exp2.c**2
this.exp2.exp2.c == this.exp2.c**2
this.exp2.exp2.digits < this.pos
this.digits < this.pos
return.initial.transitions.getClass().getName() != orig(arg0.getClass().getName())
return.initial.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.State:::CLASS
===========================================================================
dk.brics.automaton.State:::OBJECT
this.transitions.getClass().getName() == java.util.HashSet.class
this.number >= 0
this.id >= 0
===========================================================================
dk.brics.automaton.State.State():::EXIT
this.accept == false
this.transitions != null
this.number == 0
===========================================================================
dk.brics.automaton.State.addEpsilon(dk.brics.automaton.State):::ENTER
this.transitions != null
arg0 != null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
===========================================================================
dk.brics.automaton.State.addEpsilon(dk.brics.automaton.State):::EXIT
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg0.accept == orig(arg0.accept)
arg0.transitions == orig(arg0.transitions)
arg0.transitions.getClass().getName() == orig(arg0.transitions.getClass().getName())
arg0.number == orig(arg0.number)
arg0.id == orig(arg0.id)
this.transitions != null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
===========================================================================
dk.brics.automaton.State.addTransition(dk.brics.automaton.Transition):::ENTER
this.accept == false
this.transitions != null
this.number == 0
arg0 != null
arg0.to != null
arg0.to.transitions != null
arg0.to.transitions.getClass().getName() == java.util.HashSet.class
arg0.to.number == 0
===========================================================================
dk.brics.automaton.State.addTransition(dk.brics.automaton.Transition):::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.to == orig(arg0.to)
arg0.to.accept == orig(arg0.to.accept)
arg0.to.transitions == orig(arg0.to.transitions)
arg0.to.transitions.getClass().getName() == orig(arg0.to.transitions.getClass().getName())
arg0.to.number == orig(arg0.to.number)
arg0.to.id == orig(arg0.to.id)
this.accept == false
this.transitions != null
this.number == 0
arg0.to != null
arg0.to.transitions != null
arg0.to.transitions.getClass().getName() == java.util.HashSet.class
arg0.to.number == 0
===========================================================================
dk.brics.automaton.State.equals(java.lang.Object):::ENTER
this.transitions != null
arg0 != null
arg0.getClass().getName() == dk.brics.automaton.State.class
===========================================================================
dk.brics.automaton.State.equals(java.lang.Object):::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
===========================================================================
dk.brics.automaton.State.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
dk.brics.automaton.State.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
dk.brics.automaton.State.getSortedTransitionArray(boolean):::ENTER
this.transitions != null
===========================================================================
dk.brics.automaton.State.getSortedTransitionArray(boolean):::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
return != null
return.getClass().getName() == dk.brics.automaton.Transition[].class
return[] elements != null
return[].min elements >= 0
return[].to elements != null
return[].to.transitions elements != null
return[].to.transitions.getClass().getName() elements == java.util.HashSet.class
return[].to.number elements >= 0
===========================================================================
dk.brics.automaton.State.getSortedTransitions(boolean):::ENTER
this.transitions != null
===========================================================================
dk.brics.automaton.State.getSortedTransitions(boolean):::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
return != null
return[] elements != null
return[].getClass().getName() elements == dk.brics.automaton.Transition.class
return.getClass().getName() == java.util.Arrays$ArrayList.class
===========================================================================
dk.brics.automaton.State.getTransitions():::ENTER
this.transitions != null
===========================================================================
dk.brics.automaton.State.getTransitions():::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
return != null
return.getClass().getName() == java.util.HashSet.class
===========================================================================
dk.brics.automaton.State.hashCode():::ENTER
this.transitions != null
===========================================================================
dk.brics.automaton.State.hashCode():::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
===========================================================================
dk.brics.automaton.State.resetTransitions():::ENTER
===========================================================================
dk.brics.automaton.State.resetTransitions():::EXIT
this.accept == orig(this.accept)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
===========================================================================
dk.brics.automaton.State.setAccept(boolean):::ENTER
this.accept == false
this.transitions != null
this.number == 0
arg0 == true
===========================================================================
dk.brics.automaton.State.setAccept(boolean):::EXIT
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.accept == true
this.transitions != null
this.number == 0
===========================================================================
dk.brics.automaton.State.step(char):::ENTER
this.transitions != null
arg0 >= 0
===========================================================================
dk.brics.automaton.State.step(char):::EXIT112
===========================================================================
dk.brics.automaton.State.step(char):::EXIT
this.accept == orig(this.accept)
this.transitions == orig(this.transitions)
this.transitions.getClass().getName() == orig(this.transitions.getClass().getName())
this.number == orig(this.number)
this.id == orig(this.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.transitions != null
return != null
return.transitions != null
return.transitions.getClass().getName() == java.util.HashSet.class
return.number >= 0
===========================================================================
dk.brics.automaton.StatePair:::OBJECT
this.s.transitions.getClass().getName() == this.s1.transitions.getClass().getName()
this.s1.transitions.getClass().getName() == this.s2.transitions.getClass().getName()
this.s.accept == false
this.s.transitions != null
this.s.transitions.getClass().getName() == java.util.HashSet.class
this.s.number == 0
this.s1 != null
this.s1.transitions != null
this.s1.transitions.getClass().getName() == java.util.HashSet.class
this.s1.number >= 0
this.s2 != null
this.s2.transitions != null
this.s2.number >= 0
this.s.id > this.s1.id
this.s.id > this.s2.id
this.s1.id < this.s2.id
===========================================================================
dk.brics.automaton.StatePair.StatePair(dk.brics.automaton.State, dk.brics.automaton.State):::ENTER
arg0.transitions.getClass().getName() == arg1.transitions.getClass().getName()
arg0 != null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
arg1 != null
arg1.transitions != null
arg1.number >= 0
arg0.id < arg1.id
===========================================================================
dk.brics.automaton.StatePair.StatePair(dk.brics.automaton.State, dk.brics.automaton.State):::EXIT
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.s1 == orig(arg0)
this.s1.accept == arg0.accept
this.s1.transitions == arg0.transitions
this.s1.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.s1.number == arg0.number
this.s1.id == arg0.id
this.s2 == orig(arg1)
this.s2.accept == arg1.accept
this.s2.transitions == arg1.transitions
this.s2.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.s2.number == arg1.number
this.s2.id == arg1.id
arg0.accept == orig(arg0.accept)
arg0.transitions == orig(arg0.transitions)
arg0.transitions.getClass().getName() == arg1.transitions.getClass().getName()
arg0.transitions.getClass().getName() == orig(arg0.transitions.getClass().getName())
arg0.transitions.getClass().getName() == orig(arg1.transitions.getClass().getName())
arg0.number == orig(arg0.number)
arg0.id == orig(arg0.id)
arg1.accept == orig(arg1.accept)
arg1.transitions == orig(arg1.transitions)
arg1.number == orig(arg1.number)
arg1.id == orig(arg1.id)
this.s == null
arg0.transitions != null
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number >= 0
arg1.transitions != null
arg1.number >= 0
arg0.id < arg1.id
===========================================================================
dk.brics.automaton.StatePair.StatePair(dk.brics.automaton.State, dk.brics.automaton.State, dk.brics.automaton.State):::ENTER
arg0.transitions.getClass().getName() == arg1.transitions.getClass().getName()
arg0.transitions.getClass().getName() == arg2.transitions.getClass().getName()
arg0.accept == false
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number == 0
arg0.id one of { 6348, 7453, 7563 }
dk.brics.automaton.State.next_id one of { 6349, 7454, 7564 }
arg1.number one of { 0, 7, 11 }
arg1.id one of { 6329, 7442, 7540 }
arg2.number one of { 0, 1 }
arg2.id one of { 6342, 7452, 7562 }
===========================================================================
dk.brics.automaton.StatePair.StatePair(dk.brics.automaton.State, dk.brics.automaton.State, dk.brics.automaton.State):::EXIT
this.s == orig(arg0)
this.s.transitions == arg0.transitions
this.s.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.s.id == arg0.id
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.s1 == orig(arg1)
this.s1.accept == arg1.accept
this.s1.transitions == arg1.transitions
this.s1.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.s1.number == arg1.number
this.s1.id == arg1.id
this.s2 == orig(arg2)
this.s2.accept == arg2.accept
this.s2.transitions == arg2.transitions
this.s2.transitions.getClass().getName() == arg0.transitions.getClass().getName()
this.s2.number == arg2.number
this.s2.id == arg2.id
arg0.accept == orig(arg0.accept)
arg0.transitions == orig(arg0.transitions)
arg0.transitions.getClass().getName() == arg1.transitions.getClass().getName()
arg0.transitions.getClass().getName() == arg2.transitions.getClass().getName()
arg0.transitions.getClass().getName() == orig(arg0.transitions.getClass().getName())
arg0.transitions.getClass().getName() == orig(arg1.transitions.getClass().getName())
arg0.transitions.getClass().getName() == orig(arg2.transitions.getClass().getName())
arg0.number == orig(arg0.number)
arg0.id == orig(arg0.id)
arg1.accept == orig(arg1.accept)
arg1.transitions == orig(arg1.transitions)
arg1.number == orig(arg1.number)
arg1.id == orig(arg1.id)
arg2.accept == orig(arg2.accept)
arg2.transitions == orig(arg2.transitions)
arg2.number == orig(arg2.number)
arg2.id == orig(arg2.id)
dk.brics.automaton.State.next_id one of { 6349, 7454, 7564 }
arg0.accept == false
arg0.transitions.getClass().getName() == java.util.HashSet.class
arg0.number == 0
arg0.id one of { 6348, 7453, 7563 }
arg1.number one of { 0, 7, 11 }
arg1.id one of { 6329, 7442, 7540 }
arg2.number one of { 0, 1 }
arg2.id one of { 6342, 7452, 7562 }
===========================================================================
dk.brics.automaton.StatePair.equals(java.lang.Object):::ENTER
this.s == null
this.s2.accept == true
this.s2.number one of { 0, 1, 5 }
this.s2.id one of { 6347, 7451, 7561 }
arg0 != null
arg0.getClass().getName() == dk.brics.automaton.StatePair.class
this.s1.transitions.getClass().getName() != arg0.getClass().getName()
===========================================================================
dk.brics.automaton.StatePair.equals(java.lang.Object):::EXIT82
===========================================================================
dk.brics.automaton.StatePair.equals(java.lang.Object):::EXIT82;condition="return == true"
===========================================================================
dk.brics.automaton.StatePair.equals(java.lang.Object):::EXIT
this.s == orig(this.s)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.s1 == orig(this.s1)
this.s1.accept == orig(this.s1.accept)
this.s1.transitions == orig(this.s1.transitions)
this.s1.transitions.getClass().getName() == orig(this.s1.transitions.getClass().getName())
this.s1.transitions.getClass().getName() == orig(this.s2.transitions.getClass().getName())
this.s1.number == orig(this.s1.number)
this.s1.id == orig(this.s1.id)
this.s2 == orig(this.s2)
this.s2.accept == orig(this.s2.accept)
this.s2.transitions == orig(this.s2.transitions)
this.s2.number == orig(this.s2.number)
this.s2.id == orig(this.s2.id)
this.s == null
this.s2.accept == true
this.s2.number one of { 0, 1, 5 }
this.s2.id one of { 6347, 7451, 7561 }
return == true
this.s1.transitions.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
dk.brics.automaton.StatePair.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
dk.brics.automaton.StatePair.hashCode():::ENTER
===========================================================================
dk.brics.automaton.StatePair.hashCode():::EXIT
this.s == orig(this.s)
this.s.accept == orig(this.s.accept)
this.s.transitions == orig(this.s.transitions)
this.s.transitions.getClass().getName() == orig(this.s.transitions.getClass().getName())
this.s.number == orig(this.s.number)
this.s.id == orig(this.s.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
this.s1 == orig(this.s1)
this.s1.accept == orig(this.s1.accept)
this.s1.transitions == orig(this.s1.transitions)
this.s1.transitions.getClass().getName() == orig(this.s1.transitions.getClass().getName())
this.s1.transitions.getClass().getName() == orig(this.s2.transitions.getClass().getName())
this.s1.number == orig(this.s1.number)
this.s1.id == orig(this.s1.id)
this.s2 == orig(this.s2)
this.s2.accept == orig(this.s2.accept)
this.s2.transitions == orig(this.s2.transitions)
this.s2.number == orig(this.s2.number)
this.s2.id == orig(this.s2.id)
===========================================================================
dk.brics.automaton.Transition:::CLASS
===========================================================================
dk.brics.automaton.Transition:::OBJECT
this.min >= 0
this.to != null
this.to.transitions != null
this.to.transitions.getClass().getName() == java.util.HashSet.class
this.to.number >= 0
this.min <= this.max
this.to.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.Transition.Transition(char, char, dk.brics.automaton.State):::ENTER
arg0 >= 0
arg2 != null
arg2.transitions != null
arg2.transitions.getClass().getName() == java.util.HashSet.class
arg2.number >= 0
arg0 <= arg1
arg2.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.Transition.Transition(char, char, dk.brics.automaton.State):::EXIT
this.min == orig(arg0)
this.max == orig(arg1)
this.to == orig(arg2)
this.to.accept == arg2.accept
this.to.transitions == arg2.transitions
this.to.transitions.getClass().getName() == arg2.transitions.getClass().getName()
this.to.number == arg2.number
this.to.id == arg2.id
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg2.accept == orig(arg2.accept)
arg2.transitions == orig(arg2.transitions)
arg2.transitions.getClass().getName() == orig(arg2.transitions.getClass().getName())
arg2.number == orig(arg2.number)
arg2.id == orig(arg2.id)
arg2.transitions != null
arg2.transitions.getClass().getName() == java.util.HashSet.class
arg2.number >= 0
dk.brics.automaton.State.next_id > arg2.id
===========================================================================
dk.brics.automaton.Transition.Transition(char, dk.brics.automaton.State):::ENTER
arg1 != null
arg1.transitions != null
arg1.transitions.getClass().getName() == java.util.HashSet.class
arg1.number == 0
arg1.id >= 2
arg1.id < dk.brics.automaton.State.next_id
===========================================================================
dk.brics.automaton.Transition.Transition(char, dk.brics.automaton.State):::EXIT
this.min == this.max
this.min == orig(arg0)
this.to == orig(arg1)
this.to.accept == arg1.accept
this.to.transitions == arg1.transitions
this.to.transitions.getClass().getName() == arg1.transitions.getClass().getName()
this.to.id == arg1.id
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg1.accept == orig(arg1.accept)
arg1.transitions == orig(arg1.transitions)
arg1.transitions.getClass().getName() == orig(arg1.transitions.getClass().getName())
arg1.number == orig(arg1.number)
arg1.id == orig(arg1.id)
this.to.number == 0
arg1.transitions != null
arg1.transitions.getClass().getName() == java.util.HashSet.class
arg1.number == 0
arg1.id >= 2
dk.brics.automaton.State.next_id > arg1.id
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == dk.brics.automaton.Transition.class
this.to.transitions.getClass().getName() != arg0.getClass().getName()
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::EXIT107
(return == true)  ==>  (dk.brics.automaton.State.next_id one of { 26034, 26070, 26109 })
(return == true)  ==>  (this.to.accept == true)
(return == true)  ==>  (this.to.id one of { 26032, 26067, 26106 })
(return == true)  ==>  (this.to.number == 0)
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::EXIT107;condition="return == true"
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::EXIT107;condition="not(return == true)"
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::EXIT
this.min == orig(this.min)
this.max == orig(this.max)
this.to == orig(this.to)
this.to.accept == orig(this.to.accept)
this.to.transitions == orig(this.to.transitions)
this.to.transitions.getClass().getName() == orig(this.to.transitions.getClass().getName())
this.to.number == orig(this.to.number)
this.to.id == orig(this.to.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
(return == true)  ==>  (dk.brics.automaton.State.next_id one of { 26034, 26070, 26109 })
(return == true)  ==>  (this.to.accept == true)
(return == true)  ==>  (this.to.id one of { 26032, 26067, 26106 })
(return == true)  ==>  (this.to.number == 0)
this.to.transitions.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::EXIT;condition="return == true"
this.to.accept == true
this.to.number == 0
this.to.id one of { 26032, 26067, 26106 }
dk.brics.automaton.State.next_id one of { 26034, 26070, 26109 }
return == true
===========================================================================
dk.brics.automaton.Transition.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
dk.brics.automaton.Transition.hashCode():::ENTER
===========================================================================
dk.brics.automaton.Transition.hashCode():::EXIT
this.min == orig(this.min)
this.max == orig(this.max)
this.to == orig(this.to)
this.to.accept == orig(this.to.accept)
this.to.transitions == orig(this.to.transitions)
this.to.transitions.getClass().getName() == orig(this.to.transitions.getClass().getName())
this.to.number == orig(this.to.number)
this.to.id == orig(this.to.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
===========================================================================
dk.brics.automaton.TransitionComparator:::CLASS
===========================================================================
dk.brics.automaton.TransitionComparator:::OBJECT
===========================================================================
dk.brics.automaton.TransitionComparator.TransitionComparator(boolean):::ENTER
===========================================================================
dk.brics.automaton.TransitionComparator.TransitionComparator(boolean):::EXIT
this.to_first == orig(arg0)
===========================================================================
dk.brics.automaton.TransitionComparator.compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition):::ENTER
arg0.to.transitions.getClass().getName() == arg1.to.transitions.getClass().getName()
arg0 != null
arg0.min >= 0
arg0.to != null
arg0.to.transitions != null
arg0.to.transitions.getClass().getName() == java.util.HashSet.class
arg0.to.number >= 0
arg1 != null
arg1.to != null
arg1.to.transitions != null
arg1.to.number >= 0
===========================================================================
dk.brics.automaton.TransitionComparator.compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition):::EXIT56
this.to_first == true
arg1.to.number >= 1
return == -1
===========================================================================
dk.brics.automaton.TransitionComparator.compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition):::EXIT58
this.to_first == true
arg0.to.number >= 1
return == 1
===========================================================================
dk.brics.automaton.TransitionComparator.compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition):::EXIT62
return == -1
===========================================================================
dk.brics.automaton.TransitionComparator.compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition):::EXIT64
return == 1
===========================================================================
dk.brics.automaton.TransitionComparator.compare(dk.brics.automaton.Transition, dk.brics.automaton.Transition):::EXIT
this.to_first == orig(this.to_first)
arg0.min == orig(arg0.min)
arg0.max == orig(arg0.max)
arg0.to == orig(arg0.to)
arg0.to.accept == orig(arg0.to.accept)
arg0.to.transitions == orig(arg0.to.transitions)
arg0.to.transitions.getClass().getName() == arg1.to.transitions.getClass().getName()
arg0.to.transitions.getClass().getName() == orig(arg0.to.transitions.getClass().getName())
arg0.to.transitions.getClass().getName() == orig(arg1.to.transitions.getClass().getName())
arg0.to.number == orig(arg0.to.number)
arg0.to.id == orig(arg0.to.id)
dk.brics.automaton.State.next_id == orig(dk.brics.automaton.State.next_id)
arg1.min == orig(arg1.min)
arg1.max == orig(arg1.max)
arg1.to == orig(arg1.to)
arg1.to.accept == orig(arg1.to.accept)
arg1.to.transitions == orig(arg1.to.transitions)
arg1.to.number == orig(arg1.to.number)
arg1.to.id == orig(arg1.to.id)
arg0.min >= 0
arg0.to != null
arg0.to.transitions != null
arg0.to.transitions.getClass().getName() == java.util.HashSet.class
arg0.to.number >= 0
arg1.to != null
arg1.to.transitions != null
arg1.to.number >= 0
return one of { -1, 1 }
return != 0
Exiting Daikon.
