Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
EXMEM:::CLASS
EXMEM.writeRegD >= 0
EXMEM.readRegD >= 0
EXMEM.writeRegS >= 0
EXMEM.readRegS >= 0
EXMEM.writeRegT >= 0
EXMEM.readRegT >= 0
EXMEM.writeRegWrite one of { 0, 1 }
EXMEM.readRegWrite one of { 0, 1 }
EXMEM.writeMemRead one of { 0, 1 }
EXMEM.readMemRead one of { 0, 1 }
EXMEM.writeMemWrite one of { 0, 1 }
EXMEM.readMemWrite one of { 0, 1 }
EXMEM.writeMemtoReg one of { 0, 1 }
EXMEM.readMemtoReg one of { 0, 1 }
EXMEM.writeWriteRegister >= 0
EXMEM.readWriteRegister >= 0
EXMEM.WriteALUresult >= 0
EXMEM.ReadALUresult >= 0
EXMEM.writeReadData1 >= 0
EXMEM.readReadData1 >= 0
EXMEM.writeReadData2 >= 0
EXMEM.readReadData2 >= 0
EXMEM.writeRegD <= EXMEM.WriteALUresult
EXMEM.writeRegD <= EXMEM.ReadALUresult
EXMEM.writeRegD <= EXMEM.writeReadData2
EXMEM.writeRegD <= EXMEM.readReadData2
EXMEM.readRegD <= EXMEM.WriteALUresult
EXMEM.readRegD <= EXMEM.ReadALUresult
EXMEM.readRegD <= EXMEM.readReadData2
EXMEM.readRegS <= EXMEM.WriteALUresult
===========================================================================
EXMEM.getReadALUresult():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadALUresult():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == return
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadInstr():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadInstr():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == return
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadMemRead():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadMemRead():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == return
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadMemWrite():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadMemWrite():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == return
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadMemtoReg():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadMemtoReg():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == return
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadOffset():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadOffset():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == return
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegD():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegD():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == return
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegS():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegS():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == return
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegT():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegT():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == return
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegWrite():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadRegWrite():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == return
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadWriteRegister():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getReadWriteRegister():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == return
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteALUresult():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteALUresult():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == return
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteInstr():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteInstr():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == return
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteMemRead():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteMemRead():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == return
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteMemWrite():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteMemWrite():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == return
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteMemtoReg():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteMemtoReg():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == return
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteOffset():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeMemRead >= EXMEM.readMemRead
EXMEM.writeMemtoReg >= EXMEM.readMemtoReg
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteOffset():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == return
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeMemRead >= EXMEM.readMemRead
EXMEM.writeMemtoReg >= EXMEM.readMemtoReg
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteReadData1():::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.getWriteReadData1():::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == return
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.getWriteReadData2():::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.getWriteReadData2():::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == return
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.getWriteRegD():::ENTER
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeMemRead <= EXMEM.readMemRead
EXMEM.writeMemtoReg <= EXMEM.readMemtoReg
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegD():::EXIT
EXMEM.writeRegD == return
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeMemRead <= EXMEM.readMemRead
EXMEM.writeMemtoReg <= EXMEM.readMemtoReg
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegS():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegS():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == return
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegT():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegT():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == return
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegWrite():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteRegWrite():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == return
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteWriteRegister():::ENTER
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.ReadALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.ReadALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.writeMemWrite <= EXMEM.readMemWrite
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.ReadALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.getWriteWriteRegister():::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == return
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.ReadALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.ReadALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.writeMemWrite <= EXMEM.readMemWrite
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.ReadALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadALUresult(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.WriteALUresult == arg0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadALUresult(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(arg0)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegD <= orig(EXMEM.ReadALUresult)
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.readReadData2
EXMEM.readWriteRegister <= orig(EXMEM.ReadALUresult)
===========================================================================
EXMEM.setReadInstr(int):::ENTER
EXMEM.writeInstr == arg0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadInstr(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(arg0)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadMemRead(int):::ENTER
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == arg0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadMemRead(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(arg0)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadMemWrite(int):::ENTER
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == arg0
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadMemWrite(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(arg0)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadMemtoReg(int):::ENTER
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemtoReg == arg0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadMemtoReg(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(arg0)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadOffset(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == arg0
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadOffset(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(arg0)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadReadData1(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == arg0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setReadReadData1(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(arg0)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setReadReadData2(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == arg0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setReadReadData2(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(arg0)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegD <= orig(EXMEM.readReadData2)
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setReadRegD(int):::ENTER
EXMEM.writeRegD == arg0
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadRegD(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(arg0)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
EXMEM.WriteALUresult >= orig(EXMEM.readRegD)
EXMEM.ReadALUresult >= orig(EXMEM.readRegD)
EXMEM.readReadData1 >= orig(EXMEM.readRegD)
EXMEM.readReadData2 >= orig(EXMEM.readRegD)
===========================================================================
EXMEM.setReadRegS(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == arg0
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadRegS(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(arg0)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
EXMEM.WriteALUresult >= orig(EXMEM.readRegS)
EXMEM.ReadALUresult >= orig(EXMEM.readRegS)
EXMEM.readReadData2 >= orig(EXMEM.readRegS)
===========================================================================
EXMEM.setReadRegT(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == arg0
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadRegT(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(arg0)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
EXMEM.readWriteRegister >= orig(EXMEM.readRegT)
EXMEM.ReadALUresult >= orig(EXMEM.readRegT)
EXMEM.readReadData2 >= orig(EXMEM.readRegT)
===========================================================================
EXMEM.setReadRegWrite(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == arg0
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadRegWrite(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(arg0)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadWriteRegister(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == arg0
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setReadWriteRegister(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.writeInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(arg0)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readReadData2 >= orig(EXMEM.readWriteRegister)
===========================================================================
EXMEM.setWriteALUresult(int):::ENTER
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeRegT >= 2
EXMEM.writeRegD != EXMEM.writeInstr
EXMEM.writeRegD < EXMEM.writeReadData1
EXMEM.writeRegD < EXMEM.writeReadData2
EXMEM.writeRegD < arg0
EXMEM.readRegD != EXMEM.writeRegS
EXMEM.readRegD != EXMEM.writeRegT
EXMEM.readRegD != EXMEM.writeInstr
EXMEM.readRegD < EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.readRegD < EXMEM.writeReadData2
EXMEM.readRegD < arg0
EXMEM.writeRegS != EXMEM.writeRegT
EXMEM.writeRegS != EXMEM.readRegT
EXMEM.writeRegS != EXMEM.writeOffset
EXMEM.writeRegS != EXMEM.readOffset
EXMEM.writeRegS != EXMEM.writeInstr
EXMEM.writeRegS != EXMEM.readInstr
EXMEM.writeRegS != EXMEM.writeWriteRegister
EXMEM.writeRegS != EXMEM.WriteALUresult
EXMEM.writeRegS != EXMEM.writeReadData1
EXMEM.writeRegS != EXMEM.readReadData1
EXMEM.writeRegS < EXMEM.writeReadData2
EXMEM.writeRegS != EXMEM.readReadData2
EXMEM.writeRegS < arg0
EXMEM.readRegS != EXMEM.writeRegT
EXMEM.readRegS != EXMEM.writeInstr
EXMEM.readRegS != EXMEM.writeReadData1
EXMEM.readRegS < EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.readRegS < arg0
EXMEM.writeRegT != EXMEM.readRegT
EXMEM.writeRegT != EXMEM.writeOffset
EXMEM.writeRegT != EXMEM.readOffset
EXMEM.writeRegT != EXMEM.writeInstr
EXMEM.writeRegT != EXMEM.readInstr
EXMEM.writeRegT != EXMEM.writeWriteRegister
EXMEM.writeRegT != EXMEM.WriteALUresult
EXMEM.writeRegT != EXMEM.writeReadData1
EXMEM.writeRegT != EXMEM.readReadData1
EXMEM.writeRegT - EXMEM.writeReadData2 + 256 == 0
EXMEM.writeRegT != EXMEM.readReadData2
EXMEM.writeRegT < arg0
EXMEM.readRegT != EXMEM.writeInstr
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT != EXMEM.writeReadData1
EXMEM.readRegT < EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.readRegT != arg0
EXMEM.writeOffset != EXMEM.writeInstr
EXMEM.writeOffset != EXMEM.writeReadData1
EXMEM.writeOffset != EXMEM.writeReadData2
EXMEM.writeOffset != arg0
EXMEM.readOffset != EXMEM.writeInstr
EXMEM.readOffset != EXMEM.writeReadData1
EXMEM.readOffset != EXMEM.writeReadData2
EXMEM.readOffset != arg0
EXMEM.writeInstr != EXMEM.readInstr
EXMEM.writeInstr != EXMEM.writeWriteRegister
EXMEM.writeInstr != EXMEM.WriteALUresult
EXMEM.writeInstr != EXMEM.writeReadData1
EXMEM.writeInstr != EXMEM.readReadData1
EXMEM.writeInstr != EXMEM.writeReadData2
EXMEM.writeInstr != EXMEM.readReadData2
EXMEM.writeInstr != arg0
EXMEM.readInstr != EXMEM.writeReadData1
EXMEM.readInstr != EXMEM.writeReadData2
EXMEM.readInstr != arg0
EXMEM.writeRegWrite >= EXMEM.readRegWrite
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister != EXMEM.writeReadData1
EXMEM.writeWriteRegister < EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.readReadData2
EXMEM.writeWriteRegister != arg0
EXMEM.WriteALUresult != EXMEM.writeReadData2
EXMEM.WriteALUresult != arg0
EXMEM.writeReadData1 != EXMEM.writeReadData2
EXMEM.writeReadData1 != EXMEM.readReadData2
EXMEM.readReadData1 != EXMEM.writeReadData2
EXMEM.readReadData1 != arg0
EXMEM.writeReadData2 != EXMEM.readReadData2
EXMEM.writeReadData2 != arg0
EXMEM.readReadData2 != arg0
===========================================================================
EXMEM.setWriteALUresult(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(arg0)
EXMEM.ReadALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegT >= 2
EXMEM.writeRegD != EXMEM.writeInstr
EXMEM.writeRegD < EXMEM.WriteALUresult
EXMEM.writeRegD < EXMEM.writeReadData1
EXMEM.writeRegD < EXMEM.writeReadData2
EXMEM.readRegD != EXMEM.writeRegS
EXMEM.readRegD != EXMEM.writeRegT
EXMEM.readRegD != EXMEM.writeInstr
EXMEM.readRegD < EXMEM.WriteALUresult
EXMEM.readRegD < EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.readRegD < EXMEM.writeReadData2
EXMEM.writeRegS != EXMEM.writeRegT
EXMEM.writeRegS != EXMEM.readRegT
EXMEM.writeRegS != EXMEM.writeOffset
EXMEM.writeRegS != EXMEM.readOffset
EXMEM.writeRegS != EXMEM.writeInstr
EXMEM.writeRegS != EXMEM.readInstr
EXMEM.writeRegS != EXMEM.writeWriteRegister
EXMEM.writeRegS < EXMEM.WriteALUresult
EXMEM.writeRegS != EXMEM.ReadALUresult
EXMEM.writeRegS != EXMEM.writeReadData1
EXMEM.writeRegS != EXMEM.readReadData1
EXMEM.writeRegS < EXMEM.writeReadData2
EXMEM.writeRegS != EXMEM.readReadData2
EXMEM.readRegS != EXMEM.writeRegT
EXMEM.readRegS != EXMEM.writeInstr
EXMEM.readRegS < EXMEM.WriteALUresult
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS != EXMEM.writeReadData1
EXMEM.readRegS < EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT != EXMEM.readRegT
EXMEM.writeRegT != EXMEM.writeOffset
EXMEM.writeRegT != EXMEM.readOffset
EXMEM.writeRegT != EXMEM.writeInstr
EXMEM.writeRegT != EXMEM.readInstr
EXMEM.writeRegT != EXMEM.writeWriteRegister
EXMEM.writeRegT < EXMEM.WriteALUresult
EXMEM.writeRegT != EXMEM.ReadALUresult
EXMEM.writeRegT != EXMEM.writeReadData1
EXMEM.writeRegT != EXMEM.readReadData1
EXMEM.writeRegT - EXMEM.writeReadData2 + 256 == 0
EXMEM.writeRegT != EXMEM.readReadData2
EXMEM.readRegT != EXMEM.writeInstr
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT != EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT != EXMEM.writeReadData1
EXMEM.readRegT < EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeOffset != EXMEM.writeInstr
EXMEM.writeOffset != EXMEM.WriteALUresult
EXMEM.writeOffset != EXMEM.writeReadData1
EXMEM.writeOffset != EXMEM.writeReadData2
EXMEM.readOffset != EXMEM.writeInstr
EXMEM.readOffset != EXMEM.WriteALUresult
EXMEM.readOffset != EXMEM.writeReadData1
EXMEM.readOffset != EXMEM.writeReadData2
EXMEM.writeInstr != EXMEM.readInstr
EXMEM.writeInstr != EXMEM.writeWriteRegister
EXMEM.writeInstr != EXMEM.WriteALUresult
EXMEM.writeInstr != EXMEM.ReadALUresult
EXMEM.writeInstr != EXMEM.writeReadData1
EXMEM.writeInstr != EXMEM.readReadData1
EXMEM.writeInstr != EXMEM.writeReadData2
EXMEM.writeInstr != EXMEM.readReadData2
EXMEM.readInstr != EXMEM.WriteALUresult
EXMEM.readInstr != EXMEM.writeReadData1
EXMEM.readInstr != EXMEM.writeReadData2
EXMEM.writeRegWrite >= EXMEM.readRegWrite
EXMEM.writeWriteRegister != EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.ReadALUresult
EXMEM.writeWriteRegister != EXMEM.writeReadData1
EXMEM.writeWriteRegister < EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.readReadData2
EXMEM.WriteALUresult != EXMEM.ReadALUresult
EXMEM.WriteALUresult != EXMEM.readReadData1
EXMEM.WriteALUresult != EXMEM.writeReadData2
EXMEM.WriteALUresult != EXMEM.readReadData2
EXMEM.ReadALUresult != EXMEM.writeReadData2
EXMEM.writeReadData1 != EXMEM.writeReadData2
EXMEM.writeReadData1 != EXMEM.readReadData2
EXMEM.readReadData1 != EXMEM.writeReadData2
EXMEM.writeReadData2 != EXMEM.readReadData2
===========================================================================
EXMEM.setWriteInstr(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeInstr == EXMEM.readInstr
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteInstr(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(arg0)
EXMEM.readInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.writeMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteMemRead(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemRead == EXMEM.readMemRead
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 one of { 0, 1 }
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteMemRead(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(arg0)
EXMEM.readMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.writeMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteMemWrite(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 one of { 0, 1 }
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteMemWrite(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(arg0)
EXMEM.readMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteMemtoReg(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemtoReg == EXMEM.readMemtoReg
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 one of { 0, 1 }
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteMemtoReg(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.writeRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == EXMEM.readMemWrite
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.writeMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(arg0)
EXMEM.readMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteOffset(int):::ENTER
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteOffset(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(arg0)
EXMEM.readOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteReadData1(int):::ENTER
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 >= 0
EXMEM.writeRegD <= arg0
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteReadData1(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(arg0)
EXMEM.readReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteReadData2(int):::ENTER
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 >= 0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegD <= arg0
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.writeRegS <= arg0
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= arg0
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteReadData2(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(arg0)
EXMEM.readReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.readReadData2
===========================================================================
EXMEM.setWriteRegD(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 >= 0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.WriteALUresult >= arg0
EXMEM.writeReadData2 >= arg0
===========================================================================
EXMEM.setWriteRegD(int):::EXIT
EXMEM.writeRegD == orig(arg0)
EXMEM.readRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteRegS(int):::ENTER
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 >= 0
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteRegS(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(arg0)
EXMEM.readRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteRegT(int):::ENTER
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 >= 0
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteRegT(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(arg0)
EXMEM.readRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.readRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.WriteALUresult
EXMEM.readRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteRegWrite(int):::ENTER
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeRegWrite == EXMEM.readRegWrite
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData2 == EXMEM.readReadData2
arg0 one of { 0, 1 }
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteRegWrite(int):::EXIT
EXMEM.writeRegD == EXMEM.readRegD
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.writeRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == EXMEM.readRegS
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.writeRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == EXMEM.readRegT
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.writeRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == EXMEM.readOffset
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.writeOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(arg0)
EXMEM.readRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
EXMEM.writeWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.writeWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == EXMEM.ReadALUresult
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.WriteALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == EXMEM.readReadData1
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.writeReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == EXMEM.readReadData2
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.writeReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
===========================================================================
EXMEM.setWriteWriteRegister(int):::ENTER
EXMEM.writeWriteRegister == EXMEM.readWriteRegister
arg0 >= 0
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.writeRegT <= arg0
EXMEM.readRegT <= EXMEM.writeWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.ReadALUresult
EXMEM.writeWriteRegister <= EXMEM.readReadData2
EXMEM.WriteALUresult >= arg0
EXMEM.writeReadData2 >= arg0
===========================================================================
EXMEM.setWriteWriteRegister(int):::EXIT
EXMEM.writeRegD == orig(EXMEM.writeRegD)
EXMEM.readRegD == orig(EXMEM.readRegD)
EXMEM.writeRegS == orig(EXMEM.writeRegS)
EXMEM.readRegS == orig(EXMEM.readRegS)
EXMEM.writeRegT == orig(EXMEM.writeRegT)
EXMEM.readRegT == orig(EXMEM.readRegT)
EXMEM.writeOffset == orig(EXMEM.writeOffset)
EXMEM.readOffset == orig(EXMEM.readOffset)
EXMEM.writeInstr == orig(EXMEM.writeInstr)
EXMEM.readInstr == orig(EXMEM.readInstr)
EXMEM.writeRegWrite == orig(EXMEM.writeRegWrite)
EXMEM.readRegWrite == orig(EXMEM.readRegWrite)
EXMEM.writeMemRead == orig(EXMEM.writeMemRead)
EXMEM.readMemRead == orig(EXMEM.readMemRead)
EXMEM.writeMemWrite == orig(EXMEM.writeMemWrite)
EXMEM.readMemWrite == orig(EXMEM.readMemWrite)
EXMEM.writeMemtoReg == orig(EXMEM.writeMemtoReg)
EXMEM.readMemtoReg == orig(EXMEM.readMemtoReg)
EXMEM.writeWriteRegister == orig(arg0)
EXMEM.readWriteRegister == orig(EXMEM.writeWriteRegister)
EXMEM.readWriteRegister == orig(EXMEM.readWriteRegister)
EXMEM.WriteALUresult == orig(EXMEM.WriteALUresult)
EXMEM.ReadALUresult == orig(EXMEM.ReadALUresult)
EXMEM.writeReadData1 == orig(EXMEM.writeReadData1)
EXMEM.readReadData1 == orig(EXMEM.readReadData1)
EXMEM.writeReadData2 == orig(EXMEM.writeReadData2)
EXMEM.readReadData2 == orig(EXMEM.readReadData2)
EXMEM.writeRegD <= EXMEM.writeReadData1
EXMEM.readRegD <= EXMEM.readReadData1
EXMEM.writeRegS <= EXMEM.WriteALUresult
EXMEM.writeRegS <= EXMEM.writeReadData2
EXMEM.readRegS <= EXMEM.ReadALUresult
EXMEM.readRegS <= EXMEM.readReadData2
EXMEM.writeRegT <= EXMEM.writeWriteRegister
EXMEM.writeRegT <= EXMEM.WriteALUresult
EXMEM.writeRegT <= EXMEM.writeReadData2
EXMEM.readRegT <= EXMEM.readWriteRegister
EXMEM.readRegT <= EXMEM.ReadALUresult
EXMEM.readRegT <= EXMEM.readReadData2
EXMEM.writeWriteRegister <= EXMEM.WriteALUresult
EXMEM.writeWriteRegister <= EXMEM.writeReadData2
EXMEM.readWriteRegister <= EXMEM.ReadALUresult
EXMEM.readWriteRegister <= EXMEM.readReadData2
===========================================================================
IDEX:::CLASS
IDEX.writeRegS >= 0
IDEX.readRegS >= 0
IDEX.writeRegT >= 0
IDEX.readRegT >= 0
IDEX.writeRegD >= 0
IDEX.readRegD >= 0
IDEX.writeOpCode one of { 0, 32, 40 }
IDEX.readOpCode one of { 0, 32, 40 }
IDEX.writeFunct >= 0
IDEX.readFunct >= 0
IDEX.WriteRegDst one of { 0, 1 }
IDEX.ReadRegDst one of { 0, 1 }
IDEX.WriteALUOp one of { 0, 2 }
IDEX.ReadALUOp one of { 0, 2 }
IDEX.WriteALUSrc one of { 0, 1 }
IDEX.ReadALUSrc one of { 0, 1 }
IDEX.WriteMemRead one of { 0, 1 }
IDEX.ReadMemRead one of { 0, 1 }
IDEX.WriteMemWrite one of { 0, 1 }
IDEX.ReadMemWrite one of { 0, 1 }
IDEX.WriteMemtoReg one of { 0, 1 }
IDEX.ReadMemtoReg one of { 0, 1 }
IDEX.WriteRegWrite one of { 0, 1 }
IDEX.ReadRegWrite one of { 0, 1 }
IDEX.writeALUcontrol one of { 0, 2, 6 }
IDEX.readALUcontrol one of { 0, 2, 6 }
IDEX.writeReadData1 >= 0
IDEX.readReadData1 >= 0
IDEX.writeReadData2 >= 0
IDEX.readReadData2 >= 0
IDEX.writeRegD <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.readReadData2
IDEX.readRegD <= IDEX.readReadData2
IDEX.readOpCode <= IDEX.writeReadData2
IDEX.writeFunct <= IDEX.writeReadData2
IDEX.writeFunct <= IDEX.readReadData2
IDEX.readFunct <= IDEX.readReadData2
===========================================================================
IDEX.getReadALUOp():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadALUOp():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == return
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadALUSrc():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadALUSrc():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == return
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadALUcontrol():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadALUcontrol():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == return
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadInstr():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadInstr():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == return
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadMemRead():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadMemRead():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == return
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadMemWrite():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadMemWrite():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == return
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadMemtoReg():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadMemtoReg():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == return
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadOffset():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadOffset():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == return
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadReadData1():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadReadData1():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == return
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadReadData2():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadReadData2():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == return
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegD():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegD():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == return
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegDst():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegDst():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == return
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegS():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegS():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == return
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegT():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegT():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == return
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegWrite():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getReadRegWrite():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == return
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteALUOp():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteALUOp():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == return
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteALUSrc():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteALUSrc():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == return
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteALUcontrol():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteALUcontrol():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == return
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteFunct():::ENTER
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegDst >= IDEX.ReadRegDst
IDEX.WriteALUOp >= IDEX.ReadALUOp
IDEX.WriteALUSrc <= IDEX.ReadALUSrc
IDEX.WriteMemRead <= IDEX.ReadMemRead
IDEX.WriteMemtoReg <= IDEX.ReadMemtoReg
===========================================================================
IDEX.getWriteFunct():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == return
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegDst >= IDEX.ReadRegDst
IDEX.WriteALUOp >= IDEX.ReadALUOp
IDEX.WriteALUSrc <= IDEX.ReadALUSrc
IDEX.WriteMemRead <= IDEX.ReadMemRead
IDEX.WriteMemtoReg <= IDEX.ReadMemtoReg
===========================================================================
IDEX.getWriteInstr():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteInstr():::EXIT
IDEX.writeInstr == return
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteMemRead():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteMemRead():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == return
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteMemWrite():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteMemWrite():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == return
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteMemtoReg():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteMemtoReg():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == return
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteOffset():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.readFunct <= IDEX.writeReadData2
IDEX.WriteRegDst <= IDEX.ReadRegDst
IDEX.WriteALUOp <= IDEX.ReadALUOp
IDEX.WriteALUSrc >= IDEX.ReadALUSrc
IDEX.WriteMemRead >= IDEX.ReadMemRead
IDEX.WriteMemtoReg >= IDEX.ReadMemtoReg
IDEX.WriteRegWrite >= IDEX.ReadRegWrite
IDEX.writeALUcontrol >= IDEX.readALUcontrol
===========================================================================
IDEX.getWriteOffset():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == return
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.readFunct <= IDEX.writeReadData2
IDEX.WriteRegDst <= IDEX.ReadRegDst
IDEX.WriteALUOp <= IDEX.ReadALUOp
IDEX.WriteALUSrc >= IDEX.ReadALUSrc
IDEX.WriteMemRead >= IDEX.ReadMemRead
IDEX.WriteMemtoReg >= IDEX.ReadMemtoReg
IDEX.WriteRegWrite >= IDEX.ReadRegWrite
IDEX.writeALUcontrol >= IDEX.readALUcontrol
===========================================================================
IDEX.getWriteOpCode():::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteOpCode():::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == return
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteReadData1():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.getWriteReadData1():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == return
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.getWriteReadData2():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.getWriteReadData2():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == return
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.getWriteRegD():::ENTER
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.readFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.readOpCode
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.WriteALUSrc <= IDEX.ReadALUSrc
IDEX.WriteMemRead <= IDEX.ReadMemRead
IDEX.WriteMemtoReg <= IDEX.ReadMemtoReg
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.getWriteRegD():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == return
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.readFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.readOpCode
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.WriteALUSrc <= IDEX.ReadALUSrc
IDEX.WriteMemRead <= IDEX.ReadMemRead
IDEX.WriteMemtoReg <= IDEX.ReadMemtoReg
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.getWriteRegDst():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteRegDst():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == return
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteRegS():::ENTER
IDEX.readRegS <= IDEX.readReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.readFunct
===========================================================================
IDEX.getWriteRegS():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == return
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.readReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.readFunct
===========================================================================
IDEX.getWriteRegT():::ENTER
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
===========================================================================
IDEX.getWriteRegT():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == return
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
===========================================================================
IDEX.getWriteRegWrite():::ENTER
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.getWriteRegWrite():::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == return
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadALUOp(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == arg0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadALUOp(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(arg0)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadALUSrc(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == arg0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadALUSrc(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(arg0)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadALUcontrol(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.writeALUcontrol == arg0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadALUcontrol(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(arg0)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadFunct(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeFunct == arg0
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadFunct(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(arg0)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.readRegD <= orig(IDEX.readFunct)
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.readReadData2 >= orig(IDEX.readFunct)
===========================================================================
IDEX.setReadInstr(int):::ENTER
IDEX.writeInstr == arg0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadInstr(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(arg0)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadMemRead(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == arg0
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadMemRead(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(arg0)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadMemWrite(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == arg0
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadMemWrite(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(arg0)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadMemtoReg(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemtoReg == arg0
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadMemtoReg(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(arg0)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadOffset(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == arg0
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadOffset(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(arg0)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadOpCode(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOpCode == arg0
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadOpCode(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(arg0)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.writeReadData2 >= orig(IDEX.readOpCode)
IDEX.readReadData2 >= orig(IDEX.readOpCode)
===========================================================================
IDEX.setReadReadData1(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == arg0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setReadReadData1(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.writeRegS == orig(IDEX.readRegS)
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.writeRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(arg0)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setReadReadData2(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == arg0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setReadReadData2(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.writeRegS == orig(IDEX.readRegS)
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.writeRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(arg0)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeRegD <= orig(IDEX.readReadData2)
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.writeFunct <= orig(IDEX.readReadData2)
===========================================================================
IDEX.setReadRegD(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeRegD == arg0
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setReadRegD(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(arg0)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readReadData1 >= orig(IDEX.readRegD)
IDEX.readReadData2 >= orig(IDEX.readRegD)
===========================================================================
IDEX.setReadRegDst(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteRegDst == arg0
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadRegDst(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(arg0)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadRegS(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeRegS == arg0
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setReadRegS(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.writeRegS == orig(arg0)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readReadData2 >= orig(IDEX.readRegS)
===========================================================================
IDEX.setReadRegT(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegT == arg0
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setReadRegT(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == IDEX.readOffset
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.writeOffset == orig(IDEX.readOffset)
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.writeRegS == orig(IDEX.readRegS)
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.writeRegT == orig(arg0)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readReadData2 >= orig(IDEX.readRegT)
===========================================================================
IDEX.setReadRegWrite(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteRegWrite == arg0
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setReadRegWrite(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(arg0)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteALUOp(int):::ENTER
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 2 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteALUOp(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(arg0)
IDEX.ReadALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteALUSrc(int):::ENTER
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 1 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteALUSrc(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(arg0)
IDEX.ReadALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteALUcontrol(int):::ENTER
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.readOffset >= 0
IDEX.writeRegD one of { 0, 8, 31 }
IDEX.readRegD one of { 0, 8, 9 }
arg0 one of { 0, 2, 6 }
IDEX.readOffset >= IDEX.readRegD
IDEX.readOffset >= IDEX.readFunct
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.readOpCode
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteALUcontrol(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == orig(arg0)
IDEX.readALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.readALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.readOffset >= 0
IDEX.writeRegD one of { 0, 8, 31 }
IDEX.readRegD one of { 0, 8, 9 }
IDEX.readOffset >= IDEX.readRegD
IDEX.readOffset >= IDEX.readFunct
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.readOpCode
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteFunct(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
arg0 >= 0
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= arg0
IDEX.readRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.writeReadData2 >= arg0
===========================================================================
IDEX.setWriteFunct(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(arg0)
IDEX.readFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.readFunct <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteInstr(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.readFunct <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteInstr(int):::EXIT
IDEX.writeInstr == orig(arg0)
IDEX.readInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.readFunct <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteMemRead(int):::ENTER
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 1 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteMemRead(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(arg0)
IDEX.ReadMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteMemWrite(int):::ENTER
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 1 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteMemWrite(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(arg0)
IDEX.ReadMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteMemtoReg(int):::ENTER
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 1 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteMemtoReg(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(arg0)
IDEX.ReadMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
IDEX.WriteRegWrite <= IDEX.ReadRegWrite
===========================================================================
IDEX.setWriteOffset(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOffset == IDEX.readOffset
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteOffset(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(arg0)
IDEX.readOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.writeRegS == orig(IDEX.readRegS)
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.writeRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteOpCode(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
arg0 one of { 0, 32, 40 }
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.readRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteOpCode(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(arg0)
IDEX.readOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.readRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteReadData1(int):::ENTER
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
arg0 >= 0
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= arg0
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.readFunct <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteReadData1(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(arg0)
IDEX.readReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.readFunct <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteReadData2(int):::ENTER
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData2 == IDEX.readReadData2
arg0 >= 0
IDEX.writeRegS <= arg0
IDEX.readRegS <= IDEX.writeReadData2
IDEX.writeRegT <= arg0
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeRegD <= arg0
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.writeOpCode <= arg0
IDEX.readOpCode <= arg0
IDEX.writeFunct <= arg0
IDEX.readFunct <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteReadData2(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(arg0)
IDEX.readReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteRegD(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
arg0 >= 0
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.writeReadData2 >= arg0
===========================================================================
IDEX.setWriteRegD(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(arg0)
IDEX.readRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.readRegD <= IDEX.writeFunct
IDEX.readRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.writeReadData2
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteRegDst(int):::ENTER
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 1 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteRegDst(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(arg0)
IDEX.ReadRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteRegS(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeRegS == IDEX.readRegS
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
arg0 >= 0
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteRegS(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(arg0)
IDEX.readRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.writeRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteRegT(int):::ENTER
IDEX.writeInstr == IDEX.readInstr
IDEX.writeRegT == IDEX.readRegT
IDEX.writeRegD == IDEX.readRegD
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeFunct == IDEX.readFunct
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData2 == IDEX.readReadData2
arg0 >= 0
IDEX.readRegS <= IDEX.writeReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteRegT(int):::EXIT
IDEX.writeInstr == IDEX.readInstr
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.writeInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(arg0)
IDEX.readRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == IDEX.readRegD
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.writeRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == IDEX.readOpCode
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.writeOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == IDEX.readFunct
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.writeFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == IDEX.ReadRegDst
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.WriteRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == IDEX.ReadALUOp
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.WriteALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == IDEX.ReadALUSrc
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.WriteALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == IDEX.ReadMemRead
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.WriteMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == IDEX.ReadMemWrite
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.WriteMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == IDEX.ReadMemtoReg
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.WriteMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.WriteRegWrite == orig(IDEX.WriteRegWrite)
IDEX.WriteRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == IDEX.readReadData1
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.writeReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == IDEX.readReadData2
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.writeReadData2 == orig(IDEX.readReadData2)
IDEX.readRegS <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.writeReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
===========================================================================
IDEX.setWriteRegWrite(int):::ENTER
IDEX.WriteRegWrite == IDEX.ReadRegWrite
IDEX.writeALUcontrol == IDEX.readALUcontrol
arg0 one of { 0, 1 }
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IDEX.setWriteRegWrite(int):::EXIT
IDEX.writeInstr == orig(IDEX.writeInstr)
IDEX.readInstr == orig(IDEX.readInstr)
IDEX.writeOffset == orig(IDEX.writeOffset)
IDEX.readOffset == orig(IDEX.readOffset)
IDEX.writeRegS == orig(IDEX.writeRegS)
IDEX.readRegS == orig(IDEX.readRegS)
IDEX.writeRegT == orig(IDEX.writeRegT)
IDEX.readRegT == orig(IDEX.readRegT)
IDEX.writeRegD == orig(IDEX.writeRegD)
IDEX.readRegD == orig(IDEX.readRegD)
IDEX.writeOpCode == orig(IDEX.writeOpCode)
IDEX.readOpCode == orig(IDEX.readOpCode)
IDEX.writeFunct == orig(IDEX.writeFunct)
IDEX.readFunct == orig(IDEX.readFunct)
IDEX.WriteRegDst == orig(IDEX.WriteRegDst)
IDEX.ReadRegDst == orig(IDEX.ReadRegDst)
IDEX.WriteALUOp == orig(IDEX.WriteALUOp)
IDEX.ReadALUOp == orig(IDEX.ReadALUOp)
IDEX.WriteALUSrc == orig(IDEX.WriteALUSrc)
IDEX.ReadALUSrc == orig(IDEX.ReadALUSrc)
IDEX.WriteMemRead == orig(IDEX.WriteMemRead)
IDEX.ReadMemRead == orig(IDEX.ReadMemRead)
IDEX.WriteMemWrite == orig(IDEX.WriteMemWrite)
IDEX.ReadMemWrite == orig(IDEX.ReadMemWrite)
IDEX.WriteMemtoReg == orig(IDEX.WriteMemtoReg)
IDEX.ReadMemtoReg == orig(IDEX.ReadMemtoReg)
IDEX.WriteRegWrite == orig(arg0)
IDEX.ReadRegWrite == orig(IDEX.WriteRegWrite)
IDEX.ReadRegWrite == orig(IDEX.ReadRegWrite)
IDEX.writeALUcontrol == IDEX.readALUcontrol
IDEX.writeALUcontrol == orig(IDEX.writeALUcontrol)
IDEX.writeALUcontrol == orig(IDEX.readALUcontrol)
IDEX.writeReadData1 == orig(IDEX.writeReadData1)
IDEX.readReadData1 == orig(IDEX.readReadData1)
IDEX.writeReadData2 == orig(IDEX.writeReadData2)
IDEX.readReadData2 == orig(IDEX.readReadData2)
IDEX.writeRegS <= IDEX.writeReadData2
IDEX.readRegS <= IDEX.readReadData2
IDEX.writeRegT <= IDEX.writeReadData2
IDEX.readRegT <= IDEX.readReadData2
IDEX.writeRegD <= IDEX.writeFunct
IDEX.writeRegD <= IDEX.writeReadData1
IDEX.readRegD <= IDEX.readFunct
IDEX.readRegD <= IDEX.readReadData1
IDEX.writeOpCode <= IDEX.writeReadData2
IDEX.readOpCode <= IDEX.readReadData2
===========================================================================
IFID:::CLASS
IFID.readPCIncr == 0
IFID.writePCIncr == 0
===========================================================================
IFID.getReadInstruction():::ENTER
===========================================================================
IFID.getReadInstruction():::EXIT
IFID.readInstruction == return
IFID.readInstruction == orig(IFID.readInstruction)
IFID.writeInstruction == orig(IFID.writeInstruction)
IFID.readPCIncr == orig(IFID.readPCIncr)
IFID.writePCIncr == orig(IFID.writePCIncr)
===========================================================================
IFID.getWriteInstruction():::ENTER
===========================================================================
IFID.getWriteInstruction():::EXIT
IFID.readInstruction == orig(IFID.readInstruction)
IFID.writeInstruction == return
IFID.writeInstruction == orig(IFID.writeInstruction)
IFID.readPCIncr == orig(IFID.readPCIncr)
IFID.writePCIncr == orig(IFID.writePCIncr)
===========================================================================
IFID.setReadInstruction(int):::ENTER
IFID.writeInstruction == arg0
===========================================================================
IFID.setReadInstruction(int):::EXIT
IFID.readInstruction == IFID.writeInstruction
IFID.readInstruction == orig(IFID.writeInstruction)
IFID.readInstruction == orig(arg0)
IFID.readPCIncr == orig(IFID.readPCIncr)
IFID.writePCIncr == orig(IFID.writePCIncr)
===========================================================================
IFID.setWriteInstruction(int):::ENTER
IFID.readInstruction == IFID.writeInstruction
===========================================================================
IFID.setWriteInstruction(int):::EXIT
IFID.readInstruction == orig(IFID.readInstruction)
IFID.readInstruction == orig(IFID.writeInstruction)
IFID.writeInstruction == orig(arg0)
IFID.readPCIncr == orig(IFID.readPCIncr)
IFID.writePCIncr == orig(IFID.writePCIncr)
===========================================================================
MEMWB:::CLASS
MEMWB.readData >= 0
MEMWB.writeData >= 0
MEMWB.writeRegS >= 0
MEMWB.readRegS >= 0
MEMWB.writeRegD >= 0
MEMWB.readRegD >= 0
MEMWB.writeRegT >= 0
MEMWB.readRegT >= 0
MEMWB.writeRegWrite one of { 0, 1 }
MEMWB.readRegWrite one of { 0, 1 }
MEMWB.writeMemtoReg one of { 0, 1 }
MEMWB.readMemtoReg one of { 0, 1 }
MEMWB.writeWriteRegister >= 0
MEMWB.readWriteRegister >= 0
MEMWB.writeALUresult >= 0
MEMWB.readALUresult >= 0
MEMWB.readData <= MEMWB.writeData
MEMWB.readData <= MEMWB.writeALUresult
MEMWB.readData <= MEMWB.readALUresult
MEMWB.writeData <= MEMWB.writeALUresult
MEMWB.writeData <= MEMWB.readALUresult
MEMWB.writeRegS <= MEMWB.writeALUresult
MEMWB.readRegS <= MEMWB.writeALUresult
MEMWB.readRegS <= MEMWB.readALUresult
MEMWB.writeRegD <= MEMWB.writeALUresult
MEMWB.writeRegD <= MEMWB.readALUresult
MEMWB.readRegD <= MEMWB.writeALUresult
MEMWB.readRegD <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadALUresult():::ENTER
MEMWB.readRegD == MEMWB.readWriteRegister
MEMWB.readData one of { 4, 20 }
MEMWB.writeData one of { 4, 8, 20 }
MEMWB.writeRegS one of { 0, 8, 9 }
MEMWB.readRegS one of { 3, 4, 9 }
MEMWB.writeRegD one of { 0, 7, 9 }
MEMWB.readRegT one of { 2, 3, 6 }
MEMWB.writeOffset one of { 0, 14368, 18464 }
MEMWB.readRegWrite == 1
MEMWB.readMemtoReg == 0
===========================================================================
MEMWB.getReadALUresult():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == MEMWB.readWriteRegister
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.readRegD == orig(MEMWB.readWriteRegister)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == return
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.readData one of { 4, 20 }
MEMWB.writeData one of { 4, 8, 20 }
MEMWB.writeRegS one of { 0, 8, 9 }
MEMWB.readRegS one of { 3, 4, 9 }
MEMWB.writeRegD one of { 0, 7, 9 }
MEMWB.readRegT one of { 2, 3, 6 }
MEMWB.writeOffset one of { 0, 14368, 18464 }
MEMWB.readRegWrite == 1
MEMWB.readMemtoReg == 0
===========================================================================
MEMWB.getReadData():::ENTER
MEMWB.readRegT == MEMWB.readWriteRegister
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.readData one of { 4, 8, 20 }
MEMWB.writeData one of { 4, 20 }
MEMWB.writeInstr one of { -2125398000, 6438946, 8591392 }
MEMWB.readInstr one of { -2129985540, -2129133568, -2125398000 }
MEMWB.writeRegS one of { 3, 4, 10 }
MEMWB.readRegS one of { 8, 10 }
MEMWB.writeRegD one of { 0, 3, 8 }
MEMWB.readRegD one of { 0, 31 }
MEMWB.writeRegT one of { 2, 3, 17 }
MEMWB.readRegT one of { 10, 17, 24 }
MEMWB.writeOffset one of { 16, 6176, 16418 }
MEMWB.readOffset one of { -4, 0, 16 }
MEMWB.writeRegWrite == 1
MEMWB.readMemtoReg == 1
MEMWB.writeWriteRegister one of { 3, 8, 17 }
MEMWB.writeALUresult one of { 20, 261, 519 }
MEMWB.readALUresult one of { 20, 260, 264 }
MEMWB.readInstr % MEMWB.readData == 0
MEMWB.readALUresult % MEMWB.readData == 0
MEMWB.writeRegD % MEMWB.writeRegT == 0
MEMWB.writeRegD % MEMWB.writeWriteRegister == 0
MEMWB.writeWriteRegister % MEMWB.writeRegT == 0
===========================================================================
MEMWB.getReadData():::EXIT
MEMWB.readData == return
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == MEMWB.readWriteRegister
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.readRegT == orig(MEMWB.readWriteRegister)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.readData one of { 4, 8, 20 }
MEMWB.writeData one of { 4, 20 }
MEMWB.writeInstr one of { -2125398000, 6438946, 8591392 }
MEMWB.readInstr one of { -2129985540, -2129133568, -2125398000 }
MEMWB.writeRegS one of { 3, 4, 10 }
MEMWB.readRegS one of { 8, 10 }
MEMWB.writeRegD one of { 0, 3, 8 }
MEMWB.readRegD one of { 0, 31 }
MEMWB.writeRegT one of { 2, 3, 17 }
MEMWB.readRegT one of { 10, 17, 24 }
MEMWB.writeOffset one of { 16, 6176, 16418 }
MEMWB.readOffset one of { -4, 0, 16 }
MEMWB.writeRegWrite == 1
MEMWB.readMemtoReg == 1
MEMWB.writeWriteRegister one of { 3, 8, 17 }
MEMWB.writeALUresult one of { 20, 261, 519 }
MEMWB.readALUresult one of { 20, 260, 264 }
MEMWB.readInstr % MEMWB.readData == 0
MEMWB.readALUresult % MEMWB.readData == 0
MEMWB.writeRegD % MEMWB.writeRegT == 0
MEMWB.writeRegD % MEMWB.writeWriteRegister == 0
MEMWB.writeWriteRegister % MEMWB.writeRegT == 0
===========================================================================
MEMWB.getReadInstr():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadInstr():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == return
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadMemtoReg():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadMemtoReg():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == return
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadOffset():::ENTER
MEMWB.readRegT == MEMWB.readWriteRegister
MEMWB.writeData one of { 4, 20 }
MEMWB.readRegS one of { 8, 10 }
MEMWB.readRegD one of { 0, 31 }
MEMWB.readOffset one of { -4, 0, 16 }
MEMWB.writeRegWrite == 1
MEMWB.readMemtoReg == 1
MEMWB.readALUresult one of { 20, 260, 264 }
===========================================================================
MEMWB.getReadOffset():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == MEMWB.readWriteRegister
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.readRegT == orig(MEMWB.readWriteRegister)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == return
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeData one of { 4, 20 }
MEMWB.readRegS one of { 8, 10 }
MEMWB.readRegD one of { 0, 31 }
MEMWB.readOffset one of { -4, 0, 16 }
MEMWB.writeRegWrite == 1
MEMWB.readMemtoReg == 1
MEMWB.readALUresult one of { 20, 260, 264 }
===========================================================================
MEMWB.getReadRegD():::ENTER
MEMWB.readRegD == MEMWB.readWriteRegister
MEMWB.readData one of { 0, 4, 20 }
MEMWB.readInstr >= 0
MEMWB.writeRegS one of { 0, 8, 9 }
MEMWB.writeRegD one of { 0, 7, 9 }
MEMWB.writeOffset one of { 0, 14368, 18464 }
MEMWB.readOffset >= 0
MEMWB.readMemtoReg == 0
MEMWB.readData <= MEMWB.readInstr
MEMWB.readData <= MEMWB.readOffset
MEMWB.writeData <= MEMWB.readInstr
MEMWB.writeData <= MEMWB.readOffset
MEMWB.readInstr >= MEMWB.readRegS
MEMWB.readInstr >= MEMWB.writeRegD
MEMWB.readInstr >= MEMWB.readRegD
MEMWB.readInstr >= MEMWB.readRegT
MEMWB.readInstr >= MEMWB.writeOffset
MEMWB.readInstr >= MEMWB.readOffset
MEMWB.readInstr >= MEMWB.readALUresult
MEMWB.writeRegS >= MEMWB.writeRegD
MEMWB.readRegS >= MEMWB.readRegT
MEMWB.readRegS <= MEMWB.readOffset
MEMWB.writeRegD <= MEMWB.writeOffset
MEMWB.writeRegD <= MEMWB.readOffset
MEMWB.writeRegD <= MEMWB.writeWriteRegister
MEMWB.readRegD >= MEMWB.readRegT
MEMWB.readRegD <= MEMWB.readOffset
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readOffset
MEMWB.readRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.readOffset >= MEMWB.readALUresult
MEMWB.writeRegWrite <= MEMWB.readRegWrite
MEMWB.writeMemtoReg >= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getReadRegD():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == MEMWB.readWriteRegister
MEMWB.readRegD == return
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.readRegD == orig(MEMWB.readWriteRegister)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.readData one of { 0, 4, 20 }
MEMWB.readInstr >= 0
MEMWB.writeRegS one of { 0, 8, 9 }
MEMWB.writeRegD one of { 0, 7, 9 }
MEMWB.writeOffset one of { 0, 14368, 18464 }
MEMWB.readOffset >= 0
MEMWB.readMemtoReg == 0
MEMWB.readData <= MEMWB.readInstr
MEMWB.readData <= MEMWB.readOffset
MEMWB.writeData <= MEMWB.readInstr
MEMWB.writeData <= MEMWB.readOffset
MEMWB.readInstr >= MEMWB.readRegS
MEMWB.readInstr >= MEMWB.writeRegD
MEMWB.readInstr >= MEMWB.readRegD
MEMWB.readInstr >= MEMWB.readRegT
MEMWB.readInstr >= MEMWB.writeOffset
MEMWB.readInstr >= MEMWB.readOffset
MEMWB.readInstr >= MEMWB.readALUresult
MEMWB.writeRegS >= MEMWB.writeRegD
MEMWB.readRegS >= MEMWB.readRegT
MEMWB.readRegS <= MEMWB.readOffset
MEMWB.writeRegD <= MEMWB.writeOffset
MEMWB.writeRegD <= MEMWB.readOffset
MEMWB.writeRegD <= MEMWB.writeWriteRegister
MEMWB.readRegD >= MEMWB.readRegT
MEMWB.readRegD <= MEMWB.readOffset
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readOffset
MEMWB.readRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.readOffset >= MEMWB.readALUresult
MEMWB.writeRegWrite <= MEMWB.readRegWrite
MEMWB.writeMemtoReg >= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getReadRegS():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadRegS():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == return
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadRegT():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadRegT():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == return
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadRegWrite():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadRegWrite():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == return
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getReadWriteRegister():::ENTER
MEMWB.readData one of { 4, 8, 20 }
MEMWB.writeData one of { 4, 8, 20 }
MEMWB.readRegWrite == 1
MEMWB.readData != MEMWB.writeInstr
MEMWB.readData != MEMWB.readInstr
MEMWB.readData != MEMWB.writeRegD
MEMWB.readData != MEMWB.readRegD
MEMWB.readData != MEMWB.writeRegT
MEMWB.readData != MEMWB.readRegT
MEMWB.readData != MEMWB.writeOffset
MEMWB.readData != MEMWB.readOffset
MEMWB.readData != MEMWB.writeWriteRegister
MEMWB.readData != MEMWB.readWriteRegister
MEMWB.readData < MEMWB.writeALUresult
MEMWB.writeData != MEMWB.writeInstr
MEMWB.writeData != MEMWB.readInstr
MEMWB.writeData != MEMWB.writeRegD
MEMWB.writeData != MEMWB.readRegD
MEMWB.writeData != MEMWB.writeRegT
MEMWB.writeData != MEMWB.readRegT
MEMWB.writeData != MEMWB.writeOffset
MEMWB.writeData != MEMWB.readOffset
MEMWB.writeData != MEMWB.writeWriteRegister
MEMWB.writeData != MEMWB.readWriteRegister
MEMWB.writeInstr != MEMWB.readInstr
MEMWB.writeInstr != MEMWB.readRegS
MEMWB.writeInstr != MEMWB.readRegD
MEMWB.writeInstr != MEMWB.readRegT
MEMWB.writeInstr != MEMWB.readOffset
MEMWB.writeInstr != MEMWB.readWriteRegister
MEMWB.writeInstr != MEMWB.writeALUresult
MEMWB.writeInstr != MEMWB.readALUresult
MEMWB.readInstr != MEMWB.writeRegS
MEMWB.readInstr != MEMWB.readRegS
MEMWB.readInstr != MEMWB.writeRegD
MEMWB.readInstr != MEMWB.readRegD
MEMWB.readInstr != MEMWB.writeRegT
MEMWB.readInstr != MEMWB.readRegT
MEMWB.readInstr != MEMWB.writeOffset
MEMWB.readInstr != MEMWB.readOffset
MEMWB.readInstr != MEMWB.writeWriteRegister
MEMWB.readInstr != MEMWB.readWriteRegister
MEMWB.readInstr != MEMWB.writeALUresult
MEMWB.readInstr != MEMWB.readALUresult
MEMWB.writeRegS != MEMWB.readRegD
MEMWB.writeRegS != MEMWB.readRegT
MEMWB.writeRegS != MEMWB.readOffset
MEMWB.writeRegS != MEMWB.readWriteRegister
MEMWB.writeRegS < MEMWB.writeALUresult
MEMWB.writeRegS < MEMWB.readALUresult
MEMWB.readRegS != MEMWB.writeRegT
MEMWB.readRegS != MEMWB.readRegT
MEMWB.readRegS != MEMWB.writeOffset
MEMWB.readRegS != MEMWB.readOffset
MEMWB.readRegS < MEMWB.writeALUresult
MEMWB.readRegS < MEMWB.readALUresult
MEMWB.writeRegD != MEMWB.readRegT
MEMWB.writeRegD <= MEMWB.writeOffset
MEMWB.writeRegD <= MEMWB.writeWriteRegister
MEMWB.writeRegD != MEMWB.readWriteRegister
MEMWB.writeRegD < MEMWB.writeALUresult
MEMWB.writeRegD < MEMWB.readALUresult
MEMWB.readRegD != MEMWB.writeRegT
MEMWB.readRegD != MEMWB.writeOffset
MEMWB.readRegD != MEMWB.writeWriteRegister
MEMWB.readRegD < MEMWB.writeALUresult
MEMWB.readRegD < MEMWB.readALUresult
MEMWB.writeRegT != MEMWB.readRegT
MEMWB.writeRegT != MEMWB.readOffset
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT != MEMWB.readWriteRegister
MEMWB.writeRegT < MEMWB.writeALUresult
MEMWB.writeRegT < MEMWB.readALUresult
MEMWB.readRegT != MEMWB.writeOffset
MEMWB.readRegT != MEMWB.readOffset
MEMWB.readRegT != MEMWB.writeWriteRegister
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT != MEMWB.writeALUresult
MEMWB.readRegT < MEMWB.readALUresult
MEMWB.writeOffset != MEMWB.readOffset
MEMWB.writeOffset != MEMWB.readWriteRegister
MEMWB.writeOffset != MEMWB.writeALUresult
MEMWB.writeOffset != MEMWB.readALUresult
MEMWB.readOffset != MEMWB.writeWriteRegister
MEMWB.readOffset != MEMWB.readWriteRegister
MEMWB.readOffset != MEMWB.writeALUresult
MEMWB.readOffset != MEMWB.readALUresult
MEMWB.writeRegWrite <= MEMWB.readRegWrite
MEMWB.writeWriteRegister != MEMWB.readWriteRegister
MEMWB.writeWriteRegister < MEMWB.writeALUresult
MEMWB.writeWriteRegister < MEMWB.readALUresult
MEMWB.readWriteRegister != MEMWB.writeALUresult
MEMWB.readWriteRegister < MEMWB.readALUresult
===========================================================================
MEMWB.getReadWriteRegister():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == return
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.readData one of { 4, 8, 20 }
MEMWB.writeData one of { 4, 8, 20 }
MEMWB.readRegWrite == 1
MEMWB.readData != MEMWB.writeInstr
MEMWB.readData != MEMWB.readInstr
MEMWB.readData != MEMWB.writeRegD
MEMWB.readData != MEMWB.readRegD
MEMWB.readData != MEMWB.writeRegT
MEMWB.readData != MEMWB.readRegT
MEMWB.readData != MEMWB.writeOffset
MEMWB.readData != MEMWB.readOffset
MEMWB.readData != MEMWB.writeWriteRegister
MEMWB.readData != MEMWB.readWriteRegister
MEMWB.readData < MEMWB.writeALUresult
MEMWB.writeData != MEMWB.writeInstr
MEMWB.writeData != MEMWB.readInstr
MEMWB.writeData != MEMWB.writeRegD
MEMWB.writeData != MEMWB.readRegD
MEMWB.writeData != MEMWB.writeRegT
MEMWB.writeData != MEMWB.readRegT
MEMWB.writeData != MEMWB.writeOffset
MEMWB.writeData != MEMWB.readOffset
MEMWB.writeData != MEMWB.writeWriteRegister
MEMWB.writeData != MEMWB.readWriteRegister
MEMWB.writeInstr != MEMWB.readInstr
MEMWB.writeInstr != MEMWB.readRegS
MEMWB.writeInstr != MEMWB.readRegD
MEMWB.writeInstr != MEMWB.readRegT
MEMWB.writeInstr != MEMWB.readOffset
MEMWB.writeInstr != MEMWB.readWriteRegister
MEMWB.writeInstr != MEMWB.writeALUresult
MEMWB.writeInstr != MEMWB.readALUresult
MEMWB.readInstr != MEMWB.writeRegS
MEMWB.readInstr != MEMWB.readRegS
MEMWB.readInstr != MEMWB.writeRegD
MEMWB.readInstr != MEMWB.readRegD
MEMWB.readInstr != MEMWB.writeRegT
MEMWB.readInstr != MEMWB.readRegT
MEMWB.readInstr != MEMWB.writeOffset
MEMWB.readInstr != MEMWB.readOffset
MEMWB.readInstr != MEMWB.writeWriteRegister
MEMWB.readInstr != MEMWB.readWriteRegister
MEMWB.readInstr != MEMWB.writeALUresult
MEMWB.readInstr != MEMWB.readALUresult
MEMWB.writeRegS != MEMWB.readRegD
MEMWB.writeRegS != MEMWB.readRegT
MEMWB.writeRegS != MEMWB.readOffset
MEMWB.writeRegS != MEMWB.readWriteRegister
MEMWB.writeRegS < MEMWB.writeALUresult
MEMWB.writeRegS < MEMWB.readALUresult
MEMWB.readRegS != MEMWB.writeRegT
MEMWB.readRegS != MEMWB.readRegT
MEMWB.readRegS != MEMWB.writeOffset
MEMWB.readRegS != MEMWB.readOffset
MEMWB.readRegS < MEMWB.writeALUresult
MEMWB.readRegS < MEMWB.readALUresult
MEMWB.writeRegD != MEMWB.readRegT
MEMWB.writeRegD <= MEMWB.writeOffset
MEMWB.writeRegD <= MEMWB.writeWriteRegister
MEMWB.writeRegD != MEMWB.readWriteRegister
MEMWB.writeRegD < MEMWB.writeALUresult
MEMWB.writeRegD < MEMWB.readALUresult
MEMWB.readRegD != MEMWB.writeRegT
MEMWB.readRegD != MEMWB.writeOffset
MEMWB.readRegD != MEMWB.writeWriteRegister
MEMWB.readRegD < MEMWB.writeALUresult
MEMWB.readRegD < MEMWB.readALUresult
MEMWB.writeRegT != MEMWB.readRegT
MEMWB.writeRegT != MEMWB.readOffset
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT != MEMWB.readWriteRegister
MEMWB.writeRegT < MEMWB.writeALUresult
MEMWB.writeRegT < MEMWB.readALUresult
MEMWB.readRegT != MEMWB.writeOffset
MEMWB.readRegT != MEMWB.readOffset
MEMWB.readRegT != MEMWB.writeWriteRegister
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT != MEMWB.writeALUresult
MEMWB.readRegT < MEMWB.readALUresult
MEMWB.writeOffset != MEMWB.readOffset
MEMWB.writeOffset != MEMWB.readWriteRegister
MEMWB.writeOffset != MEMWB.writeALUresult
MEMWB.writeOffset != MEMWB.readALUresult
MEMWB.readOffset != MEMWB.writeWriteRegister
MEMWB.readOffset != MEMWB.readWriteRegister
MEMWB.readOffset != MEMWB.writeALUresult
MEMWB.readOffset != MEMWB.readALUresult
MEMWB.writeRegWrite <= MEMWB.readRegWrite
MEMWB.writeWriteRegister != MEMWB.readWriteRegister
MEMWB.writeWriteRegister < MEMWB.writeALUresult
MEMWB.writeWriteRegister < MEMWB.readALUresult
MEMWB.readWriteRegister != MEMWB.writeALUresult
MEMWB.readWriteRegister < MEMWB.readALUresult
===========================================================================
MEMWB.getWriteALUresult():::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeRegWrite >= MEMWB.readRegWrite
MEMWB.writeMemtoReg >= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteALUresult():::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == return
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeRegWrite >= MEMWB.readRegWrite
MEMWB.writeMemtoReg >= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteData():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteData():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == return
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteInstr():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteInstr():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == return
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteMemtoReg():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteMemtoReg():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == return
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteOffset():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeRegWrite >= MEMWB.readRegWrite
MEMWB.writeMemtoReg >= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteOffset():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == return
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeRegWrite >= MEMWB.readRegWrite
MEMWB.writeMemtoReg >= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteRegD():::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeRegWrite <= MEMWB.readRegWrite
MEMWB.writeMemtoReg <= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteRegD():::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == return
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeRegWrite <= MEMWB.readRegWrite
MEMWB.writeMemtoReg <= MEMWB.readMemtoReg
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteRegS():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteRegS():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == return
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteRegT():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteRegT():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == return
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteRegWrite():::ENTER
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteRegWrite():::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.writeData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == return
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.getWriteWriteRegister():::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.getWriteWriteRegister():::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == return
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadALUresult(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == arg0
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadALUresult(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(arg0)
MEMWB.readData <= orig(MEMWB.readALUresult)
MEMWB.readRegS <= orig(MEMWB.readALUresult)
MEMWB.writeRegD <= orig(MEMWB.readALUresult)
MEMWB.readRegD <= orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= orig(MEMWB.readALUresult)
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= orig(MEMWB.readALUresult)
===========================================================================
MEMWB.setReadData(int):::ENTER
MEMWB.writeData == arg0
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadData(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.readData == orig(arg0)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.readData >= orig(MEMWB.readData)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
MEMWB.writeALUresult >= orig(MEMWB.readData)
MEMWB.readALUresult >= orig(MEMWB.readData)
===========================================================================
MEMWB.setReadInstr(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == arg0
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadInstr(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(arg0)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadMemtoReg(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeMemtoReg == arg0
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadMemtoReg(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(arg0)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadOffset(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeOffset == arg0
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadOffset(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(arg0)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadRegD(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegD == arg0
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadRegD(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(arg0)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.writeALUresult >= orig(MEMWB.readRegD)
===========================================================================
MEMWB.setReadRegS(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == arg0
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadRegS(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(arg0)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.writeALUresult >= orig(MEMWB.readRegS)
===========================================================================
MEMWB.setReadRegT(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == arg0
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadRegT(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(arg0)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister >= orig(MEMWB.readRegT)
===========================================================================
MEMWB.setReadRegWrite(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegWrite == arg0
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadRegWrite(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(arg0)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setReadWriteRegister(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeWriteRegister == arg0
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setReadWriteRegister(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == MEMWB.readWriteRegister
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.writeWriteRegister == orig(arg0)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setWriteALUresult(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeALUresult == MEMWB.readALUresult
arg0 >= 0
MEMWB.readData <= arg0
MEMWB.writeRegS <= arg0
MEMWB.writeRegD <= arg0
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= arg0
MEMWB.readWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setWriteALUresult(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(arg0)
MEMWB.readALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteData(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeRegT == MEMWB.writeWriteRegister
MEMWB.readData one of { 0, 4, 8 }
MEMWB.writeInstr one of { -2129985540, -2129133568, -2125398000 }
MEMWB.readInstr one of { -2129133568, -1593704448, 19023904 }
MEMWB.writeRegS one of { 8, 10 }
MEMWB.readRegS one of { 8, 9 }
MEMWB.writeRegD one of { 0, 31 }
MEMWB.readRegD one of { 0, 9 }
MEMWB.writeRegT one of { 10, 17, 24 }
MEMWB.readRegT one of { 2, 24 }
MEMWB.writeOffset one of { -4, 0, 16 }
MEMWB.readOffset one of { 0, 18464 }
MEMWB.writeRegWrite == 1
MEMWB.writeMemtoReg == 1
MEMWB.readWriteRegister one of { 2, 9, 24 }
MEMWB.writeALUresult one of { 20, 260, 264 }
MEMWB.readALUresult one of { 264, 523 }
arg0 one of { 4, 8, 20 }
===========================================================================
MEMWB.setWriteData(int):::EXIT
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeData == orig(arg0)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.writeWriteRegister
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.writeWriteRegister)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.readData one of { 0, 4, 8 }
MEMWB.writeData one of { 4, 8, 20 }
MEMWB.writeInstr one of { -2129985540, -2129133568, -2125398000 }
MEMWB.readInstr one of { -2129133568, -1593704448, 19023904 }
MEMWB.writeRegS one of { 8, 10 }
MEMWB.readRegS one of { 8, 9 }
MEMWB.writeRegD one of { 0, 31 }
MEMWB.readRegD one of { 0, 9 }
MEMWB.writeRegT one of { 10, 17, 24 }
MEMWB.readRegT one of { 2, 24 }
MEMWB.writeOffset one of { -4, 0, 16 }
MEMWB.readOffset one of { 0, 18464 }
MEMWB.writeRegWrite == 1
MEMWB.writeMemtoReg == 1
MEMWB.readWriteRegister one of { 2, 9, 24 }
MEMWB.writeALUresult one of { 20, 260, 264 }
MEMWB.readALUresult one of { 264, 523 }
===========================================================================
MEMWB.setWriteInstr(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteInstr(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(arg0)
MEMWB.readInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteMemtoReg(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
arg0 one of { 0, 1 }
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteMemtoReg(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(arg0)
MEMWB.readMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteOffset(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteOffset(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == orig(arg0)
MEMWB.readOffset == orig(MEMWB.writeOffset)
MEMWB.readOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteRegD(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
arg0 >= 0
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
MEMWB.writeALUresult >= arg0
MEMWB.readALUresult >= arg0
===========================================================================
MEMWB.setWriteRegD(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(arg0)
MEMWB.readRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteRegS(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
arg0 >= 0
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
MEMWB.writeALUresult >= arg0
===========================================================================
MEMWB.setWriteRegS(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(arg0)
MEMWB.readRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteRegT(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
arg0 >= 0
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.writeWriteRegister >= arg0
MEMWB.readWriteRegister <= MEMWB.readALUresult
MEMWB.writeALUresult >= arg0
===========================================================================
MEMWB.setWriteRegT(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.readInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.readRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.readRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == orig(arg0)
MEMWB.readRegT == orig(MEMWB.writeRegT)
MEMWB.readRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.readMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readRegT <= MEMWB.readWriteRegister
MEMWB.readRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteRegWrite(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
arg0 one of { 0, 1 }
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteRegWrite(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == orig(arg0)
MEMWB.readRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.readRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.readALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegS <= MEMWB.readALUresult
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.readALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.readALUresult
===========================================================================
MEMWB.setWriteWriteRegister(int):::ENTER
MEMWB.readData == MEMWB.writeData
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeWriteRegister == MEMWB.readWriteRegister
MEMWB.writeALUresult == MEMWB.readALUresult
arg0 >= 0
MEMWB.writeRegT <= MEMWB.writeWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.writeWriteRegister <= MEMWB.writeALUresult
===========================================================================
MEMWB.setWriteWriteRegister(int):::EXIT
MEMWB.readData == MEMWB.writeData
MEMWB.readData == orig(MEMWB.readData)
MEMWB.readData == orig(MEMWB.writeData)
MEMWB.writeInstr == MEMWB.readInstr
MEMWB.writeInstr == orig(MEMWB.writeInstr)
MEMWB.writeInstr == orig(MEMWB.readInstr)
MEMWB.writeRegS == MEMWB.readRegS
MEMWB.writeRegS == orig(MEMWB.writeRegS)
MEMWB.writeRegS == orig(MEMWB.readRegS)
MEMWB.writeRegD == MEMWB.readRegD
MEMWB.writeRegD == orig(MEMWB.writeRegD)
MEMWB.writeRegD == orig(MEMWB.readRegD)
MEMWB.writeRegT == MEMWB.readRegT
MEMWB.writeRegT == orig(MEMWB.writeRegT)
MEMWB.writeRegT == orig(MEMWB.readRegT)
MEMWB.writeOffset == MEMWB.readOffset
MEMWB.writeOffset == orig(MEMWB.writeOffset)
MEMWB.writeOffset == orig(MEMWB.readOffset)
MEMWB.writeRegWrite == MEMWB.readRegWrite
MEMWB.writeRegWrite == orig(MEMWB.writeRegWrite)
MEMWB.writeRegWrite == orig(MEMWB.readRegWrite)
MEMWB.writeMemtoReg == MEMWB.readMemtoReg
MEMWB.writeMemtoReg == orig(MEMWB.writeMemtoReg)
MEMWB.writeMemtoReg == orig(MEMWB.readMemtoReg)
MEMWB.writeWriteRegister == orig(arg0)
MEMWB.readWriteRegister == orig(MEMWB.writeWriteRegister)
MEMWB.readWriteRegister == orig(MEMWB.readWriteRegister)
MEMWB.writeALUresult == MEMWB.readALUresult
MEMWB.writeALUresult == orig(MEMWB.writeALUresult)
MEMWB.writeALUresult == orig(MEMWB.readALUresult)
MEMWB.writeRegT <= MEMWB.readWriteRegister
MEMWB.writeRegT <= MEMWB.writeALUresult
MEMWB.readWriteRegister <= MEMWB.writeALUresult
===========================================================================
PipelineSimulator:::CLASS
PipelineSimulator.instructionCache[] == [-1593704448, -2129985540, 8591392, 19281952, 19023904, -2129133568, -2125398000, 6438946, 0, 0, 0, 0]
PipelineSimulator.mainMemory[] one of {}
PipelineSimulator.mainMemory[] elements >= 0
PipelineSimulator.regs[] elements >= 0
size(PipelineSimulator.instructionCache[]) == 12
size(PipelineSimulator.mainMemory[]) == 1024
size(PipelineSimulator.regs[]) == 32
PipelineSimulator.mainMemory[] < PipelineSimulator.regs[] (lexically)
PipelineSimulator.mainMemory[] <= PipelineSimulator.regs[] (lexically)
PipelineSimulator.mainMemory[] elements < size(PipelineSimulator.mainMemory[])-1
size(PipelineSimulator.regs[]) in PipelineSimulator.mainMemory[]
size(PipelineSimulator.regs[])-1 in PipelineSimulator.mainMemory[]
PipelineSimulator.regs[] elements < size(PipelineSimulator.mainMemory[])-1
===========================================================================
PipelineSimulator.Copy_write_to_read():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.Copy_write_to_read():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.EX_stage():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.EX_stage():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.ID_stage():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.ID_stage():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.IF_stage(int):::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
arg0 in PipelineSimulator.instructionCache[]
arg0 != size(PipelineSimulator.mainMemory[])
arg0 != size(PipelineSimulator.mainMemory[])-1
arg0 != size(PipelineSimulator.regs[])
arg0 != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.IF_stage(int):::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
orig(arg0) in PipelineSimulator.instructionCache[]
orig(arg0) != size(PipelineSimulator.mainMemory[])
orig(arg0) != size(PipelineSimulator.mainMemory[])-1
orig(arg0) != size(PipelineSimulator.regs[])
orig(arg0) != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.MEM_stage():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.MEM_stage():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
size(PipelineSimulator.mainMemory[]) == orig(size(PipelineSimulator.mainMemory[]))
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
PipelineSimulator.mainMemory[] >= orig(PipelineSimulator.mainMemory[]) (elementwise)
PipelineSimulator.regs[] > orig(PipelineSimulator.mainMemory[]) (lexically)
PipelineSimulator.regs[] >= orig(PipelineSimulator.mainMemory[]) (lexically)
orig(PipelineSimulator.mainMemory[]) elements < size(PipelineSimulator.mainMemory[])-1
size(PipelineSimulator.regs[]) in orig(PipelineSimulator.mainMemory[])
size(PipelineSimulator.regs[])-1 in orig(PipelineSimulator.mainMemory[])
===========================================================================
PipelineSimulator.Print_out_everything():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.Print_out_everything():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.WB_stage():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
===========================================================================
PipelineSimulator.WB_stage():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
size(PipelineSimulator.regs[]) == orig(size(PipelineSimulator.regs[]))
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
PipelineSimulator.mainMemory[] < orig(PipelineSimulator.regs[]) (lexically)
PipelineSimulator.mainMemory[] <= orig(PipelineSimulator.regs[]) (lexically)
orig(PipelineSimulator.regs[]) elements < size(PipelineSimulator.mainMemory[])-1
===========================================================================
PipelineSimulator.functionName(int):::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
arg0 >= 0
arg0 in PipelineSimulator.instructionCache[]
arg0 != size(PipelineSimulator.mainMemory[])
arg0 != size(PipelineSimulator.mainMemory[])-1
arg0 != size(PipelineSimulator.regs[])
arg0 != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.functionName(int):::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
return != null
return.toString one of { "", "add", "sub" }
orig(arg0) in PipelineSimulator.instructionCache[]
orig(arg0) != size(PipelineSimulator.mainMemory[])
orig(arg0) != size(PipelineSimulator.mainMemory[])-1
orig(arg0) != size(PipelineSimulator.regs[])
orig(arg0) != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.load(int):::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
arg0 in PipelineSimulator.instructionCache[]
arg0 != size(PipelineSimulator.mainMemory[])
arg0 != size(PipelineSimulator.mainMemory[])-1
arg0 != size(PipelineSimulator.regs[])
arg0 != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.load(int):::EXIT462
return == true
orig(arg0) one of { -2129985540, -2129133568, -2125398000 }
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
orig(arg0) < size(PipelineSimulator.mainMemory[])-1
orig(arg0) < size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.load(int):::EXIT462;condition="return == true"
===========================================================================
PipelineSimulator.load(int):::EXIT464
return == false
===========================================================================
PipelineSimulator.load(int):::EXIT464;condition="not(return == true)"
===========================================================================
PipelineSimulator.load(int):::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
(return == true)  <==>  (orig(arg0) one of { -2129985540, -2129133568, -2125398000 })
(return == true)  ==>  (PipelineSimulator.mainMemory[] elements > orig(arg0))
(return == true)  ==>  (PipelineSimulator.regs[] elements > orig(arg0))
(return == true)  ==>  (orig(arg0) < size(PipelineSimulator.mainMemory[])-1)
(return == true)  ==>  (orig(arg0) < size(PipelineSimulator.regs[])-1)
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
orig(arg0) in PipelineSimulator.instructionCache[]
orig(arg0) != size(PipelineSimulator.mainMemory[])
orig(arg0) != size(PipelineSimulator.mainMemory[])-1
orig(arg0) != size(PipelineSimulator.regs[])
orig(arg0) != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.load(int):::EXIT;condition="return == true"
return == true
orig(arg0) one of { -2129985540, -2129133568, -2125398000 }
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
orig(arg0) < size(PipelineSimulator.mainMemory[])-1
orig(arg0) < size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.load(int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
PipelineSimulator.main(java.lang.String[]):::ENTER
PipelineSimulator.mainMemory == PipelineSimulator.regs
PipelineSimulator.instructionCache == null
PipelineSimulator.mainMemory == null
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
PipelineSimulator.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory[] == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 258, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]
PipelineSimulator.regs has only one value
PipelineSimulator.regs[] == [0, 257, 258, 519, 260, 261, 262, 527, 261, 523, 4, 267, 268, 269, 270, 271, 272, 20, 274, 275, 276, 277, 278, 279, 8, 281, 282, 283, 284, 285, 286, 287]
arg0[] == []
arg0[].toString == []
===========================================================================
PipelineSimulator.opName(int):::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
arg0 in PipelineSimulator.instructionCache[]
PipelineSimulator.mainMemory[] elements > arg0
PipelineSimulator.regs[] elements > arg0
arg0 < size(PipelineSimulator.mainMemory[])-1
arg0 < size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.opName(int):::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
return != null
return.toString one of { "lb", "sb" }
orig(arg0) in PipelineSimulator.instructionCache[]
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
orig(arg0) < size(PipelineSimulator.mainMemory[])-1
orig(arg0) < size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.rType(int):::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
arg0 in PipelineSimulator.instructionCache[]
arg0 != size(PipelineSimulator.mainMemory[])
arg0 != size(PipelineSimulator.mainMemory[])-1
arg0 != size(PipelineSimulator.regs[])
arg0 != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.rType(int):::EXIT455
return == true
orig(arg0) >= 0
===========================================================================
PipelineSimulator.rType(int):::EXIT455;condition="return == true"
===========================================================================
PipelineSimulator.rType(int):::EXIT457
return == false
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
orig(arg0) < size(PipelineSimulator.mainMemory[])-1
orig(arg0) < size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.rType(int):::EXIT457;condition="not(return == true)"
===========================================================================
PipelineSimulator.rType(int):::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
(return == false)  ==>  (PipelineSimulator.mainMemory[] elements > orig(arg0))
(return == false)  ==>  (PipelineSimulator.regs[] elements > orig(arg0))
(return == false)  ==>  (orig(arg0) < size(PipelineSimulator.mainMemory[])-1)
(return == false)  ==>  (orig(arg0) < size(PipelineSimulator.regs[])-1)
(return == true)  <==>  (orig(arg0) >= 0)
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
orig(arg0) in PipelineSimulator.instructionCache[]
orig(arg0) != size(PipelineSimulator.mainMemory[])
orig(arg0) != size(PipelineSimulator.mainMemory[])-1
orig(arg0) != size(PipelineSimulator.regs[])
orig(arg0) != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.rType(int):::EXIT;condition="return == true"
return == true
orig(arg0) >= 0
===========================================================================
PipelineSimulator.rType(int):::EXIT;condition="not(return == true)"
return == false
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
orig(arg0) < size(PipelineSimulator.mainMemory[])-1
orig(arg0) < size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.setControlSignals():::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.mainMemory has only one value
PipelineSimulator.regs has only one value
===========================================================================
PipelineSimulator.setControlSignals():::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
PipelineSimulator.instructionCache has only one value
PipelineSimulator.mainMemory has only one value
PipelineSimulator.regs has only one value
===========================================================================
PipelineSimulator.store(int):::ENTER
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
arg0 in PipelineSimulator.instructionCache[]
arg0 != size(PipelineSimulator.mainMemory[])
arg0 != size(PipelineSimulator.mainMemory[])-1
arg0 != size(PipelineSimulator.regs[])
arg0 != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.store(int):::EXIT469
PipelineSimulator.regs[] == [0, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287]
PipelineSimulator.regs[] sorted by <
return == true
orig(arg0) == -1593704448
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
===========================================================================
PipelineSimulator.store(int):::EXIT469;condition="return == true"
===========================================================================
PipelineSimulator.store(int):::EXIT471
return == false
===========================================================================
PipelineSimulator.store(int):::EXIT471;condition="not(return == true)"
===========================================================================
PipelineSimulator.store(int):::EXIT
PipelineSimulator.instructionCache == orig(PipelineSimulator.instructionCache)
PipelineSimulator.instructionCache[] == orig(PipelineSimulator.instructionCache[])
PipelineSimulator.mainMemory == orig(PipelineSimulator.mainMemory)
PipelineSimulator.mainMemory[] == orig(PipelineSimulator.mainMemory[])
PipelineSimulator.regs == orig(PipelineSimulator.regs)
PipelineSimulator.regs[] == orig(PipelineSimulator.regs[])
(return == true)  ==>  (PipelineSimulator.mainMemory[] elements > orig(arg0))
(return == true)  ==>  (PipelineSimulator.regs[] == [0, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287])
(return == true)  ==>  (PipelineSimulator.regs[] elements > orig(arg0))
(return == true)  ==>  (PipelineSimulator.regs[] sorted by <)
(return == true)  ==>  (orig(arg0) < size(PipelineSimulator.mainMemory[])-1)
(return == true)  ==>  (orig(arg0) < size(PipelineSimulator.regs[])-1)
(return == true)  ==>  (orig(arg0) == -1593704448)
PipelineSimulator.instructionCache has only one value
PipelineSimulator.instructionCache != null
PipelineSimulator.mainMemory has only one value
PipelineSimulator.mainMemory != null
PipelineSimulator.regs has only one value
PipelineSimulator.regs != null
orig(arg0) in PipelineSimulator.instructionCache[]
orig(arg0) != size(PipelineSimulator.mainMemory[])
orig(arg0) != size(PipelineSimulator.mainMemory[])-1
orig(arg0) != size(PipelineSimulator.regs[])
orig(arg0) != size(PipelineSimulator.regs[])-1
===========================================================================
PipelineSimulator.store(int):::EXIT;condition="return == true"
PipelineSimulator.regs[] == [0, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287]
PipelineSimulator.regs[] sorted by <
return == true
orig(arg0) == -1593704448
PipelineSimulator.mainMemory[] elements > orig(arg0)
PipelineSimulator.regs[] elements > orig(arg0)
===========================================================================
PipelineSimulator.store(int):::EXIT;condition="not(return == true)"
return == false
Exiting Daikon.
