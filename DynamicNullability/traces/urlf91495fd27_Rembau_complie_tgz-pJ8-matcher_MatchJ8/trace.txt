Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

missing variables in newEnterExitRel:
  parent = matcher.MatchGroups$MatchGroup.MatchGroup(matcher.MatchGroups, int):::ENTER
  child = matcher.MatchGroups$MatchGroup.MatchGroup(matcher.MatchGroups, int):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@141eb85b
parent varinfos missing from parent_to_child_map:
   matcher.MatchGroups.this.mgs[arg1]
   matcher.MatchGroups.this.mgs[arg1-1]
   matcher.MatchGroups.this.en[arg1]
   matcher.MatchGroups.this.en[arg1-1]
rel.parent_to_child_map:
    matcher.MatchGroups.this => orig(matcher.MatchGroups.this)
    matcher.MatchGroups.this.group => orig(matcher.MatchGroups.this.group)
    matcher.MatchGroups.this.mgs => orig(matcher.MatchGroups.this.mgs)
    matcher.MatchGroups.this.mgs[..] => orig(matcher.MatchGroups.this.mgs[..])
    matcher.MatchGroups.this.mgs[..].getClass().getName() => orig(matcher.MatchGroups.this.mgs[..].getClass().getName())
    matcher.MatchGroups.this.en => orig(matcher.MatchGroups.this.en)
    matcher.MatchGroups.this.en[..] => orig(matcher.MatchGroups.this.en[..])
    matcher.MatchGroups.this.en[..].getClass().getName() => orig(matcher.MatchGroups.this.en[..].getClass().getName())
    matcher.MatchGroups.this.matchString => orig(matcher.MatchGroups.this.matchString)
    matcher.MatchGroups.this.matchString.toString => orig(matcher.MatchGroups.this.matchString.toString)
    arg1 => orig(arg1)
    size(matcher.MatchGroups.this.mgs[..]) => orig(size(matcher.MatchGroups.this.mgs[..]))
    size(matcher.MatchGroups.this.mgs[..])-1 => orig(size(matcher.MatchGroups.this.mgs[..]))-1
    size(matcher.MatchGroups.this.en[..]) => orig(size(matcher.MatchGroups.this.en[..]))
    size(matcher.MatchGroups.this.en[..])-1 => orig(size(matcher.MatchGroups.this.en[..]))-1
child.var_infos:
    this
    this.k
    this.startIndex
    this.endIndex
    this.startNewNode
    this.startNewNode[..]
    this.startNewNode[..].getClass().getName()
    this.endNewNode
    this.endNewNode[..]
    this.endNewNode[..].getClass().getName()
    this.canReachNode
    this.canReachNode[..]
    this.canReachNode[..].getClass().getName()
    matcher.MatchGroups.this
    matcher.MatchGroups.this.group
    matcher.MatchGroups.this.mgs
    matcher.MatchGroups.this.mgs[..]
    matcher.MatchGroups.this.mgs[..].getClass().getName()
    matcher.MatchGroups.this.en
    matcher.MatchGroups.this.en[..]
    matcher.MatchGroups.this.en[..].getClass().getName()
    matcher.MatchGroups.this.matchString
    matcher.MatchGroups.this.matchString.toString
    arg1
    orig(matcher.MatchGroups.this)
    orig(matcher.MatchGroups.this.group)
    orig(matcher.MatchGroups.this.mgs)
    orig(matcher.MatchGroups.this.mgs[..])
    orig(matcher.MatchGroups.this.mgs[..].getClass().getName())
    orig(matcher.MatchGroups.this.en)
    orig(matcher.MatchGroups.this.en[..])
    orig(matcher.MatchGroups.this.en[..].getClass().getName())
    orig(matcher.MatchGroups.this.matchString)
    orig(matcher.MatchGroups.this.matchString.toString)
    orig(arg1)
    size(this.startNewNode[..])
    size(this.startNewNode[..])-1
    size(this.endNewNode[..])
    size(this.endNewNode[..])-1
    size(this.canReachNode[..])
    size(this.canReachNode[..])-1
    size(matcher.MatchGroups.this.mgs[..])
    size(matcher.MatchGroups.this.mgs[..])-1
    size(matcher.MatchGroups.this.en[..])
    size(matcher.MatchGroups.this.en[..])-1
    orig(size(matcher.MatchGroups.this.mgs[..]))
    orig(size(matcher.MatchGroups.this.mgs[..]))-1
    orig(size(matcher.MatchGroups.this.en[..]))
    orig(size(matcher.MatchGroups.this.en[..]))-1
End of diagnostics for newEnterExitRel(matcher.MatchGroups$MatchGroup.MatchGroup(matcher.MatchGroups, int):::ENTER, matcher.MatchGroups$MatchGroup.MatchGroup(matcher.MatchGroups, int):::EXIT)
Warning: No non-obvious non-suppressed exclusive invariants found in regexpToNFA.MainClass.createNFA(regexpToNFA.Unit):::EXIT
===========================================================================
NFAToDNA.Dtran:::OBJECT
this.nodes == this.mark.nodes
this.nodes != null
this.mark != null
this.mark.id >= 1
this.mark.mark == true
this.tran != null
this.d != null
this.d.nodes != null
this.d.id >= 2
this.d.start == false
===========================================================================
NFAToDNA.Dtran.Dtran(java.util.TreeSet, NFAToDNA.NewNode, java.lang.String, NFAToDNA.NewNode):::ENTER
arg0 == arg1.nodes
arg0 != null
arg1 != null
arg1.id >= 1
arg1.mark == true
arg2 != null
arg3 != null
arg3.nodes != null
arg3.start == false
===========================================================================
NFAToDNA.Dtran.Dtran(java.util.TreeSet, NFAToDNA.NewNode, java.lang.String, NFAToDNA.NewNode):::EXIT
this.nodes == arg1.nodes
this.nodes == orig(arg0)
this.nodes == orig(arg1.nodes)
this.mark == orig(arg1)
this.mark.id == arg1.id
this.mark.mark == arg1.mark
this.mark.start == arg1.start
this.mark.end == arg1.end
this.tran == orig(arg2)
this.d == orig(arg3)
this.d.nodes == arg3.nodes
this.d.id == arg3.id
this.d.mark == arg3.mark
this.d.start == arg3.start
this.d.end == arg3.end
arg1.id == orig(arg1.id)
arg1.mark == orig(arg1.mark)
arg1.start == orig(arg1.start)
arg1.end == orig(arg1.end)
arg2.toString == orig(arg2.toString)
arg3.nodes == orig(arg3.nodes)
arg3.id == orig(arg3.id)
arg3.mark == orig(arg3.mark)
arg3.start == orig(arg3.start)
arg3.end == orig(arg3.end)
arg1.id >= 1
arg1.mark == true
arg3.nodes != null
arg3.start == false
===========================================================================
NFAToDNA.Dtran.getD():::ENTER
this.mark.mark == this.d.mark
===========================================================================
NFAToDNA.Dtran.getD():::EXIT
this.nodes == orig(this.nodes)
this.nodes == orig(this.mark.nodes)
this.mark == orig(this.mark)
this.mark.id == orig(this.mark.id)
this.mark.mark == return.mark
this.mark.start == orig(this.mark.start)
this.mark.end == orig(this.mark.end)
this.tran == orig(this.tran)
this.tran.toString == orig(this.tran.toString)
this.d == return
this.d.nodes == return.nodes
this.d.id == return.id
this.d.mark == return.mark
this.d.start == return.start
this.d.end == return.end
return == orig(this.d)
return.nodes == orig(this.d.nodes)
return.id == orig(this.d.id)
return.mark == orig(this.mark.mark)
return.mark == orig(this.d.mark)
return.start == orig(this.d.start)
return.end == orig(this.d.end)
return != null
return.nodes != null
return.mark == true
return.start == false
===========================================================================
NFAToDNA.Dtran.getMark():::ENTER
this.mark.mark == this.d.mark
this.mark.id < this.d.id
===========================================================================
NFAToDNA.Dtran.getMark():::EXIT
this.nodes == return.nodes
this.nodes == orig(this.nodes)
this.nodes == orig(this.mark.nodes)
this.mark == return
this.mark.id == return.id
this.mark.mark == return.mark
this.mark.start == return.start
this.mark.end == return.end
this.tran == orig(this.tran)
this.tran.toString == orig(this.tran.toString)
this.d == orig(this.d)
this.d.nodes == orig(this.d.nodes)
this.d.id == orig(this.d.id)
this.d.mark == return.mark
this.d.start == orig(this.d.start)
this.d.end == orig(this.d.end)
return == orig(this.mark)
return.id == orig(this.mark.id)
return.mark == orig(this.mark.mark)
return.mark == orig(this.d.mark)
return.start == orig(this.mark.start)
return.end == orig(this.mark.end)
return != null
return.id >= 1
return.mark == true
this.d.id > return.id
===========================================================================
NFAToDNA.Dtran.getTran():::ENTER
this.mark.mark == this.d.mark
this.mark.id < this.d.id
===========================================================================
NFAToDNA.Dtran.getTran():::EXIT
this.nodes == orig(this.nodes)
this.nodes == orig(this.mark.nodes)
this.mark == orig(this.mark)
this.mark.id == orig(this.mark.id)
this.mark.mark == this.d.mark
this.mark.mark == orig(this.mark.mark)
this.mark.mark == orig(this.d.mark)
this.mark.start == orig(this.mark.start)
this.mark.end == orig(this.mark.end)
this.tran == return
this.tran.toString == orig(this.tran.toString)
this.d == orig(this.d)
this.d.nodes == orig(this.d.nodes)
this.d.id == orig(this.d.id)
this.d.start == orig(this.d.start)
this.d.end == orig(this.d.end)
return == orig(this.tran)
return != null
this.mark.id < this.d.id
===========================================================================
NFAToDNA.NewNode:::OBJECT
this.nodes != null
this.id >= 1
===========================================================================
NFAToDNA.NewNode.NewNode(int):::ENTER
===========================================================================
NFAToDNA.NewNode.NewNode(int):::EXIT
this.id == orig(arg0)
this.mark == false
this.start == false
this.end == false
===========================================================================
NFAToDNA.NewNode.getId():::ENTER
this.mark == true
===========================================================================
NFAToDNA.NewNode.getId():::EXIT
this.nodes == orig(this.nodes)
this.id == return
this.mark == orig(this.mark)
this.start == orig(this.start)
this.end == orig(this.end)
return == orig(this.id)
this.mark == true
return >= 1
===========================================================================
NFAToDNA.NewNode.getMark():::ENTER
===========================================================================
NFAToDNA.NewNode.getMark():::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.mark == return
this.start == orig(this.start)
this.end == orig(this.end)
return == orig(this.mark)
===========================================================================
NFAToDNA.NewNode.getMark():::EXIT;condition="return == true"
return == true
===========================================================================
NFAToDNA.NewNode.getMark():::EXIT;condition="not(return == true)"
return == false
===========================================================================
NFAToDNA.NewNode.getNodes():::ENTER
this.mark == true
===========================================================================
NFAToDNA.NewNode.getNodes():::EXIT
this.nodes == return
this.id == orig(this.id)
this.mark == orig(this.mark)
this.start == orig(this.start)
this.end == orig(this.end)
return == orig(this.nodes)
this.mark == true
return != null
===========================================================================
NFAToDNA.NewNode.isEnd():::ENTER
this.mark == true
===========================================================================
NFAToDNA.NewNode.isEnd():::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.mark == orig(this.mark)
this.start == orig(this.start)
this.end == return
return == orig(this.end)
(return == false)  ==>  (this.id one of { 1, 11, 18 })
(return == true)  ==>  (this.start == false)
this.mark == true
===========================================================================
NFAToDNA.NewNode.isEnd():::EXIT;condition="return == true"
this.start == false
return == true
===========================================================================
NFAToDNA.NewNode.isEnd():::EXIT;condition="not(return == true)"
this.id one of { 1, 11, 18 }
return == false
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::ENTER
arg0 != null
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT48
return == false
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT48;condition="not(return == true)"
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT52
this.id >= 2
this.start == false
return == false
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT52;condition="not(return == true)"
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT56
this.nodes has only one value
this.id == 12
this.start == false
this.end == false
return == true
orig(this) has only one value
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT56;condition="return == true"
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.mark == orig(this.mark)
this.start == orig(this.start)
this.end == orig(this.end)
(return == false)  ==>  (this.id >= 1)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.end == false)
(return == true)  ==>  (this.id == 12)
(return == true)  ==>  (this.nodes has only one value)
(return == true)  ==>  (this.start == false)
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT;condition="return == true"
this.nodes has only one value
this.id == 12
this.start == false
this.end == false
return == true
orig(this) has only one value
===========================================================================
NFAToDNA.NewNode.isSame(java.util.TreeSet):::EXIT;condition="not(return == true)"
return == false
===========================================================================
NFAToDNA.NewNode.isStart():::ENTER
this.mark == true
===========================================================================
NFAToDNA.NewNode.isStart():::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.mark == orig(this.mark)
this.start == return
this.end == orig(this.end)
return == orig(this.start)
(this.id == 1)  <==>  (return == true)
(this.id == 1)  ==>  (orig(this) has only one value)
(this.id == 1)  ==>  (this.end == false)
(this.id == 1)  ==>  (this.nodes has only one value)
this.mark == true
===========================================================================
NFAToDNA.NewNode.isStart():::EXIT;condition="return == true"
this.nodes has only one value
this.id == 1
this.end == false
return == true
orig(this) has only one value
===========================================================================
NFAToDNA.NewNode.isStart():::EXIT;condition="not(return == true)"
return == false
===========================================================================
NFAToDNA.NewNode.mark():::ENTER
this.mark == false
===========================================================================
NFAToDNA.NewNode.mark():::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.start == orig(this.start)
this.end == orig(this.end)
this.mark == true
===========================================================================
NFAToDNA.NewNode.setEnd():::ENTER
this.mark == false
this.start == false
this.end == false
===========================================================================
NFAToDNA.NewNode.setEnd():::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.mark == orig(this.mark)
this.start == orig(this.start)
this.mark == false
this.start == false
this.end == true
===========================================================================
NFAToDNA.NewNode.setNodes(java.util.TreeSet):::ENTER
this.mark == false
this.start == false
arg0 != null
===========================================================================
NFAToDNA.NewNode.setNodes(java.util.TreeSet):::EXIT
this.nodes == orig(arg0)
this.id == orig(this.id)
this.mark == orig(this.mark)
this.start == orig(this.start)
this.end == orig(this.end)
this.mark == false
this.start == false
===========================================================================
NFAToDNA.NewNode.setStart():::ENTER
this has only one value
this.nodes has only one value
this.id == 1
this.mark == false
this.start == false
this.end == false
===========================================================================
NFAToDNA.NewNode.setStart():::EXIT
this.nodes == orig(this.nodes)
this.id == orig(this.id)
this.mark == orig(this.mark)
this.end == orig(this.end)
this.nodes has only one value
this.id == 1
this.mark == false
this.start == true
this.end == false
===========================================================================
NFAToDNA.ToDFA:::OBJECT
this has only one value
this.newNodes has only one value
this.newNodes != null
this.newNodes[] elements != null
this.newNodes[].getClass().getName() elements == NFAToDNA.NewNode.class
this.input has only one value
this.input != null
this.nodeList has only one value
this.nodeList != null
this.dtrans has only one value
this.dtrans != null
this.startNewNode.nodes has only one value
this.startNewNode.nodes != null
this.startNewNode.id == 1
this.startNewNode.mark == true
this.startNewNode.start == true
this.startNewNode.end == false
this.endNewNodes has only one value
this.endNewNodes != null
this.endNewNodes[] elements != null
this.endNewNodes[].getClass().getName() elements == NFAToDNA.NewNode.class
this.note > this.startNewNode.id
===========================================================================
NFAToDNA.ToDFA.ToDFA(java.util.Hashtable, java.util.TreeSet):::ENTER
arg0 has only one value
arg1 has only one value
===========================================================================
NFAToDNA.ToDFA.ToDFA(java.util.Hashtable, java.util.TreeSet):::EXIT
this.input == orig(arg1)
this.nodeList == orig(arg0)
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.addDtrans(java.util.TreeSet, NFAToDNA.NewNode, java.lang.String, NFAToDNA.NewNode):::ENTER
arg0 == arg1.nodes
this.startNewNode == null
arg0 != null
arg1 != null
arg1.id >= 1
arg1.mark == true
arg2 != null
arg3 != null
arg3.nodes != null
arg3.start == false
this.note > arg1.id
this.note > arg3.id
===========================================================================
NFAToDNA.ToDFA.addDtrans(java.util.TreeSet, NFAToDNA.NewNode, java.lang.String, NFAToDNA.NewNode):::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
arg1.nodes == orig(arg0)
arg1.nodes == orig(arg1.nodes)
arg1.id == orig(arg1.id)
arg1.mark == orig(arg1.mark)
arg1.start == orig(arg1.start)
arg1.end == orig(arg1.end)
arg2.toString == orig(arg2.toString)
arg3.nodes == orig(arg3.nodes)
arg3.id == orig(arg3.id)
arg3.mark == orig(arg3.mark)
arg3.start == orig(arg3.start)
arg3.end == orig(arg3.end)
this.startNewNode == null
arg1.nodes != null
arg1.id >= 1
arg1.mark == true
arg3.nodes != null
arg3.start == false
this.note > arg1.id
this.note > arg3.id
===========================================================================
NFAToDNA.ToDFA.closure(java.util.TreeSet):::ENTER
this.startNewNode == null
arg0 != null
===========================================================================
NFAToDNA.ToDFA.closure(java.util.TreeSet):::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
this.startNewNode == null
return != null
===========================================================================
NFAToDNA.ToDFA.getDtrans():::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.startNewNode != null
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.getDtrans():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == return
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
return == orig(this.dtrans)
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.startNewNode != null
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
return has only one value
return != null
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.getDtransByD(int):::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.startNewNode != null
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
this.note > arg0
this.startNewNode.id <= arg0
===========================================================================
NFAToDNA.ToDFA.getDtransByD(int):::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.startNewNode != null
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
return != null
return[] elements != null
return[].getClass().getName() elements == NFAToDNA.Dtran.class
return[].getClass().getName() one of { [], [NFAToDNA.Dtran] }
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
size(return[]) one of { 0, 1 }
this.note > orig(arg0)
this.startNewNode.id <= orig(arg0)
===========================================================================
NFAToDNA.ToDFA.getNewNode(java.util.TreeSet):::ENTER
this.startNewNode == null
arg0 != null
===========================================================================
NFAToDNA.ToDFA.getNewNode(java.util.TreeSet):::EXIT261
return has only one value
return != null
===========================================================================
NFAToDNA.ToDFA.getNewNode(java.util.TreeSet):::EXIT264
this.startNewNode == return
return == orig(this.startNewNode)
return == null
===========================================================================
NFAToDNA.ToDFA.getNewNode(java.util.TreeSet):::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
(return == null)  ==>  (this.startNewNode == return)
(return has only one value)  <==>  (return != null)
(return has only one value)  ==>  (return.nodes != null)
(return has only one value)  ==>  (return.nodes has only one value)
(return has only one value)  ==>  (this.note > return.id)
this.startNewNode == null
return.nodes has only one value
return.nodes != null
return.id == 12
return.start == false
return.end == false
this.note > return.id
===========================================================================
NFAToDNA.ToDFA.getNewNodes():::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.getNewNodes():::EXIT
this.newNodes == return
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
return == orig(this.newNodes)
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
return has only one value
return[] contains no nulls and has only one value, of length 32
return[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
return[].getClass().getName() elements == NFAToDNA.NewNode.class
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
size(return[]) == 32
===========================================================================
NFAToDNA.ToDFA.getNotMark():::ENTER
this.startNewNode == null
===========================================================================
NFAToDNA.ToDFA.getNotMark():::EXIT107
return != null
===========================================================================
NFAToDNA.ToDFA.getNotMark():::EXIT110
this.startNewNode == return
return == orig(this.startNewNode)
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
return == null
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.getNotMark():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
(return != null)  ==>  (return.nodes != null)
(return != null)  ==>  (this.note > return.id)
(return == null)  ==>  (size(this.endNewNodes[]) == 17)
(return == null)  ==>  (size(this.newNodes[]) == 32)
(return == null)  ==>  (this.endNewNodes[] contains no nulls and has only one value, of length 17)
(return == null)  ==>  (this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode])
(return == null)  ==>  (this.newNodes[] contains no nulls and has only one value, of length 32)
(return == null)  ==>  (this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode])
(return == null)  ==>  (this.note == 33)
(return == null)  ==>  (this.startNewNode == return)
this.startNewNode == null
return.nodes != null
return.mark == false
this.note > return.id
===========================================================================
NFAToDNA.ToDFA.getNote():::ENTER
this.startNewNode == null
===========================================================================
NFAToDNA.ToDFA.getNote():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
return == orig(this.note)
this.startNewNode == null
this.note - return - 1 == 0
===========================================================================
NFAToDNA.ToDFA.getStartNewNode():::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.getStartNewNode():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == return
this.startNewNode.nodes == return.nodes
this.startNewNode.id == return.id
this.startNewNode.mark == return.mark
this.startNewNode.start == return.start
this.startNewNode.end == return.end
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
return == orig(this.startNewNode)
return.nodes == orig(this.startNewNode.nodes)
return.id == orig(this.startNewNode.id)
return.mark == orig(this.startNewNode.mark)
return.start == orig(this.startNewNode.start)
return.end == orig(this.startNewNode.end)
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
return has only one value
return.nodes has only one value
return.id == 1
return.mark == true
return.start == true
return.end == false
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.handle():::ENTER
this.newNodes[] == []
this.newNodes[].getClass().getName() == []
this.note == 1
this.startNewNode == null
this.endNewNodes[] == []
this.endNewNodes[].getClass().getName() == []
===========================================================================
NFAToDNA.ToDFA.handle():::EXIT
this.newNodes == orig(this.newNodes)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode.id == orig(this.note)
this.endNewNodes == orig(this.endNewNodes)
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.move(java.util.TreeSet, java.lang.String):::ENTER
this.startNewNode == null
arg0 != null
arg1 != null
===========================================================================
NFAToDNA.ToDFA.move(java.util.TreeSet, java.lang.String):::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
arg1.toString == orig(arg1.toString)
this.startNewNode == null
return != null
===========================================================================
NFAToDNA.ToDFA.removeKey(java.util.TreeSet):::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeKey(java.util.TreeSet):::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeNotRecFormStart():::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeNotRecFormStart():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeNotRecToEnd():::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeNotRecToEnd():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeRedundancy():::ENTER
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
NFAToDNA.ToDFA.removeRedundancy():::EXIT
this.newNodes == orig(this.newNodes)
this.newNodes[] == orig(this.newNodes[])
this.note == orig(this.note)
this.input == orig(this.input)
this.nodeList == orig(this.nodeList)
this.dtrans == orig(this.dtrans)
this.startNewNode == orig(this.startNewNode)
this.startNewNode.nodes == orig(this.startNewNode.nodes)
this.startNewNode.id == orig(this.startNewNode.id)
this.startNewNode.mark == orig(this.startNewNode.mark)
this.startNewNode.start == orig(this.startNewNode.start)
this.startNewNode.end == orig(this.startNewNode.end)
this.endNewNodes == orig(this.endNewNodes)
this.endNewNodes[] == orig(this.endNewNodes[])
this.newNodes[] contains no nulls and has only one value, of length 32
this.newNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
this.note == 33
this.startNewNode has only one value
this.endNewNodes[] contains no nulls and has only one value, of length 17
this.endNewNodes[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
size(this.newNodes[]) == 32
size(this.endNewNodes[]) == 17
===========================================================================
matcher.Match:::OBJECT
this.startNode.mark == this.nowNode.mark
this.startNode.mark == this.lastNode.mark
this has only one value
this.dtrans has only one value
this.dtrans != null
this.startNode has only one value
this.startNode != null
this.startNode.nodes has only one value
this.startNode.nodes != null
this.startNode.id == 1
this.startNode.mark == true
this.startNode.start == true
this.startNode.end == false
this.nowNode != null
this.nowNode.nodes != null
this.nowNode.id >= 1
this.lastNode.nodes != null
this.lastNode.id >= 1
this.lastNode.mark == true
this.ma has only one value
this.ma != null
this.ma.sb != null
this.ma.mgs has only one value
this.ma.mgs != null
this.ma.mgs.group has only one value
this.ma.mgs.group != null
this.ma.mgs.mgs has only one value
this.ma.mgs.mgs != null
this.ma.mgs.mgs[] contains no nulls and has only one value, of length 15
this.ma.mgs.mgs[] elements != null
this.ma.mgs.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.ma.mgs.mgs[].getClass().getName() elements == matcher.MatchGroups.MatchGroup.class
this.ma.mgs.en has only one value
this.ma.mgs.en != null
this.ma.mgs.en[] contains no nulls and has only one value, of length 15
this.ma.mgs.en[] elements != null
this.ma.mgs.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
this.ma.mgs.en[].getClass().getName() elements == regexpToNFA.K.class
this.ma.length >= 0
this.rex has only one value
this.rex != null
this.rex.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
this.content.toString == "main() { int  sum=12,it=1; if (sum==1)  it++; else it=it+2; }"
this.chList[] == [109, 97, 105, 110, 40, 41, 32, 123, 32, 105, 110, 116, 32, 32, 115, 117, 109, 61, 49, 50, 44, 105, 116, 61, 49, 59, 32, 105, 102, 32, 40, 115, 117, 109, 61, 61, 49, 41, 32, 32, 105, 116, 43, 43, 59, 32, 101, 108, 115, 101, 32, 105, 116, 61, 105, 116, 43, 50, 59, 32, 125]
this.pointer >= 0
this.stack has only one value
this.stack != null
size(this.ma.mgs.mgs[]) == 15
size(this.ma.mgs.en[]) == 15
size(this.chList[]) == 61
this.startNode.id <= this.nowNode.id
this.startNode.id <= this.lastNode.id
this.pointer <= size(this.chList[])
===========================================================================
matcher.Match.Match(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
===========================================================================
matcher.Match.Match(java.lang.String):::EXIT
this.startNode == this.nowNode
this.startNode.nodes == this.nowNode.nodes
this.startNode.id == this.nowNode.id
this.startNode.start == this.nowNode.start
this.startNode.end == this.nowNode.end
this.rex == orig(arg0)
arg0.toString == orig(arg0.toString)
this.lastNode == null
this.ma.sb has only one value
this.ma.mgs.matchString == null
this.ma.length == 0
this.content == null
this.chList == null
this.pointer == 0
this.tran == null
arg0.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
===========================================================================
matcher.Match.find():::ENTER
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.nowNode.id > this.lastNode.id
this.pointer != size(this.chList[])-1
===========================================================================
matcher.Match.find():::EXIT69
this.startNode == this.lastNode
this.startNode == orig(this.lastNode)
this.startNode.nodes == this.lastNode.nodes
this.startNode.nodes == orig(this.lastNode.nodes)
this.startNode.id == this.lastNode.id
this.startNode.id == orig(this.lastNode.id)
this.startNode.start == this.lastNode.start
this.startNode.start == orig(this.lastNode.start)
this.startNode.end == this.lastNode.end
this.startNode.end == orig(this.lastNode.end)
this.nowNode.start == orig(this.nowNode.start)
this.nowNode.end == orig(this.nowNode.end)
this.ma.length == orig(this.ma.length)
this.nowNode.id one of { 13, 14 }
this.nowNode.start == false
this.nowNode.end == true
this.ma.mgs.matchString.toString one of { "{", "}" }
this.ma.length == 1
this.pointer one of { 8, 61 }
this.tran.toString one of { "{", "}" }
return == true
orig(this.nowNode.id) one of { 5, 8 }
orig(this.ma.mgs.matchString.toString) one of { ")", ";" }
orig(this.pointer) one of { 6, 59 }
orig(this.tran.toString) one of { ";", "\\)" }
this.chList[this.pointer-1] one of { 123, 125 }
this.chList[orig(this.pointer)] == 32
this.chList[orig(this.pointer)-1] one of { 41, 59 }
===========================================================================
matcher.Match.find():::EXIT69;condition="return == true"
===========================================================================
matcher.Match.find():::EXIT77
this.nowNode.start == false
this.nowNode.end == true
return == true
this.startNode.id < this.nowNode.id
this.nowNode.id > this.lastNode.id
this.nowNode.id != orig(this.lastNode.id)
this.ma.mgs.matchString.toString != orig(this.ma.mgs.matchString.toString)
this.pointer > orig(this.pointer)
this.pointer < size(this.chList[])-1
this.tran.toString != orig(this.tran.toString)
orig(this.pointer) < size(this.chList[])-1
this.chList[this.pointer] != this.chList[this.pointer-1]
===========================================================================
matcher.Match.find():::EXIT77;condition="return == true"
===========================================================================
matcher.Match.find():::EXIT92
this.startNode == this.nowNode
this.startNode == this.lastNode
this.startNode == orig(this.lastNode)
this.startNode.nodes == this.nowNode.nodes
this.startNode.nodes == this.lastNode.nodes
this.startNode.nodes == orig(this.lastNode.nodes)
this.startNode.id == this.nowNode.id
this.startNode.id == this.lastNode.id
this.startNode.id == orig(this.lastNode.id)
this.startNode.start == this.nowNode.start
this.startNode.start == this.lastNode.start
this.startNode.start == orig(this.lastNode.start)
this.startNode.end == this.nowNode.end
this.startNode.end == this.lastNode.end
this.startNode.end == orig(this.lastNode.end)
this.ma.mgs.matchString == orig(this.ma.mgs.matchString)
this.ma.mgs.matchString.toString == orig(this.ma.mgs.matchString.toString)
this.pointer == orig(this.pointer)
this.pointer == size(this.chList[])
this.pointer == orig(size(this.chList[]))
this.tran == orig(this.tran)
this.tran.toString == orig(this.tran.toString)
this.ma.sb has only one value
this.ma.mgs.matchString has only one value
this.ma.mgs.matchString.toString == "}"
this.ma.length == 0
this.pointer == 61
this.tran has only one value
this.tran.toString == "}"
return == false
orig(this.nowNode) has only one value
orig(this.nowNode.nodes) has only one value
orig(this.nowNode.id) == 14
orig(this.nowNode.start) == false
orig(this.nowNode.end) == true
orig(this.ma.sb) has only one value
orig(this.ma.length) == 1
this.chList[this.pointer-1] == 125
===========================================================================
matcher.Match.find():::EXIT92;condition="not(return == true)"
===========================================================================
matcher.Match.find():::EXIT
this.dtrans == orig(this.dtrans)
this.startNode == orig(this.startNode)
this.startNode.nodes == orig(this.startNode.nodes)
this.startNode.id == orig(this.startNode.id)
this.startNode.mark == orig(this.startNode.mark)
this.startNode.mark == orig(this.nowNode.mark)
this.startNode.mark == orig(this.lastNode.mark)
this.startNode.start == orig(this.startNode.start)
this.startNode.end == orig(this.startNode.end)
this.ma == orig(this.ma)
this.ma.mgs == orig(this.ma.mgs)
this.ma.mgs.group == orig(this.ma.mgs.group)
this.ma.mgs.mgs == orig(this.ma.mgs.mgs)
this.ma.mgs.mgs[] == orig(this.ma.mgs.mgs[])
this.ma.mgs.en == orig(this.ma.mgs.en)
this.ma.mgs.en[] == orig(this.ma.mgs.en[])
this.rex == orig(this.rex)
this.rex.toString == orig(this.rex.toString)
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.chList == orig(this.chList)
this.chList[] == orig(this.chList[])
this.stack == orig(this.stack)
(this.nowNode.id == 1)  <==>  (orig(this.pointer) == 61)
(this.nowNode.id == 1)  <==>  (return == false)
(this.nowNode.id == 1)  <==>  (this.ma.length == 0)
(this.nowNode.id == 1)  <==>  (this.ma.mgs.matchString.toString == orig(this.ma.mgs.matchString.toString))
(this.nowNode.id == 1)  <==>  (this.nowNode.end == false)
(this.nowNode.id == 1)  <==>  (this.nowNode.start == true)
(this.nowNode.id == 1)  <==>  (this.pointer == orig(this.pointer))
(this.nowNode.id == 1)  <==>  (this.startNode.id == this.nowNode.id)
(this.nowNode.id == 1)  <==>  (this.tran.toString == orig(this.tran.toString))
(this.nowNode.id == 1)  ==>  (orig(this.chList[this.pointer-1]) == 125)
(this.nowNode.id == 1)  ==>  (orig(this.lastNode) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.lastNode.end) == false)
(this.nowNode.id == 1)  ==>  (orig(this.lastNode.id) == 1)
(this.nowNode.id == 1)  ==>  (orig(this.lastNode.nodes) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.lastNode.start) == true)
(this.nowNode.id == 1)  ==>  (orig(this.ma.length) == 1)
(this.nowNode.id == 1)  ==>  (orig(this.ma.mgs.matchString) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.ma.mgs.matchString.toString) == "}")
(this.nowNode.id == 1)  ==>  (orig(this.ma.sb) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.nowNode) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.nowNode.end) == true)
(this.nowNode.id == 1)  ==>  (orig(this.nowNode.id) == 14)
(this.nowNode.id == 1)  ==>  (orig(this.nowNode.nodes) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.nowNode.start) == false)
(this.nowNode.id == 1)  ==>  (orig(this.tran) has only one value)
(this.nowNode.id == 1)  ==>  (orig(this.tran.toString) == "}")
(this.nowNode.id == 1)  ==>  (this.chList[orig(this.pointer)-1] == 125)
(this.nowNode.id == 1)  ==>  (this.chList[this.pointer-1] == 125)
(this.nowNode.id == 1)  ==>  (this.lastNode has only one value)
(this.nowNode.id == 1)  ==>  (this.lastNode.end == false)
(this.nowNode.id == 1)  ==>  (this.lastNode.id == 1)
(this.nowNode.id == 1)  ==>  (this.lastNode.nodes has only one value)
(this.nowNode.id == 1)  ==>  (this.lastNode.start == true)
(this.nowNode.id == 1)  ==>  (this.ma.mgs.matchString == orig(this.ma.mgs.matchString))
(this.nowNode.id == 1)  ==>  (this.ma.mgs.matchString has only one value)
(this.nowNode.id == 1)  ==>  (this.ma.mgs.matchString.toString == "}")
(this.nowNode.id == 1)  ==>  (this.ma.sb has only one value)
(this.nowNode.id == 1)  ==>  (this.nowNode has only one value)
(this.nowNode.id == 1)  ==>  (this.nowNode.nodes has only one value)
(this.nowNode.id == 1)  ==>  (this.pointer == 61)
(this.nowNode.id == 1)  ==>  (this.pointer == size(this.chList[]))
(this.nowNode.id == 1)  ==>  (this.startNode == orig(this.lastNode))
(this.nowNode.id == 1)  ==>  (this.startNode == this.lastNode)
(this.nowNode.id == 1)  ==>  (this.startNode == this.nowNode)
(this.nowNode.id == 1)  ==>  (this.startNode.end == orig(this.lastNode.end))
(this.nowNode.id == 1)  ==>  (this.startNode.end == this.lastNode.end)
(this.nowNode.id == 1)  ==>  (this.startNode.end == this.nowNode.end)
(this.nowNode.id == 1)  ==>  (this.startNode.id == orig(this.lastNode.id))
(this.nowNode.id == 1)  ==>  (this.startNode.id == this.lastNode.id)
(this.nowNode.id == 1)  ==>  (this.startNode.nodes == orig(this.lastNode.nodes))
(this.nowNode.id == 1)  ==>  (this.startNode.nodes == this.lastNode.nodes)
(this.nowNode.id == 1)  ==>  (this.startNode.nodes == this.nowNode.nodes)
(this.nowNode.id == 1)  ==>  (this.startNode.start == orig(this.lastNode.start))
(this.nowNode.id == 1)  ==>  (this.startNode.start == this.lastNode.start)
(this.nowNode.id == 1)  ==>  (this.startNode.start == this.nowNode.start)
(this.nowNode.id == 1)  ==>  (this.tran == orig(this.tran))
(this.nowNode.id == 1)  ==>  (this.tran has only one value)
(this.nowNode.id == 1)  ==>  (this.tran.toString == "}")
this.lastNode != null
this.ma.mgs.matchString != null
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.tran != null
this.startNode.id <= orig(this.nowNode.id)
this.startNode.id <= orig(this.lastNode.id)
this.nowNode.id >= this.lastNode.id
this.nowNode.id != orig(this.nowNode.id)
this.lastNode.id != orig(this.nowNode.id)
this.pointer >= orig(this.pointer)
this.pointer != size(this.chList[])-1
orig(this.pointer) <= size(this.chList[])
orig(this.pointer) != size(this.chList[])-1
===========================================================================
matcher.Match.find():::EXIT;condition="return == true"
this.nowNode.start == false
this.nowNode.end == true
return == true
this.startNode.id < this.nowNode.id
this.nowNode.id > this.lastNode.id
this.nowNode.id != orig(this.lastNode.id)
this.ma.mgs.matchString.toString != orig(this.ma.mgs.matchString.toString)
this.pointer > orig(this.pointer)
this.tran.toString != orig(this.tran.toString)
orig(this.pointer) < size(this.chList[])-1
===========================================================================
matcher.Match.find():::EXIT;condition="not(return == true)"
this.startNode == this.nowNode
this.startNode == this.lastNode
this.startNode == orig(this.lastNode)
this.startNode.nodes == this.nowNode.nodes
this.startNode.nodes == this.lastNode.nodes
this.startNode.nodes == orig(this.lastNode.nodes)
this.startNode.id == this.nowNode.id
this.startNode.id == this.lastNode.id
this.startNode.id == orig(this.lastNode.id)
this.startNode.start == this.nowNode.start
this.startNode.start == this.lastNode.start
this.startNode.start == orig(this.lastNode.start)
this.startNode.end == this.nowNode.end
this.startNode.end == this.lastNode.end
this.startNode.end == orig(this.lastNode.end)
this.ma.mgs.matchString == orig(this.ma.mgs.matchString)
this.ma.mgs.matchString.toString == orig(this.ma.mgs.matchString.toString)
this.pointer == orig(this.pointer)
this.pointer == size(this.chList[])
this.pointer == orig(size(this.chList[]))
this.tran == orig(this.tran)
this.tran.toString == orig(this.tran.toString)
this.ma.sb has only one value
this.ma.mgs.matchString has only one value
this.ma.mgs.matchString.toString == "}"
this.ma.length == 0
this.pointer == 61
this.tran has only one value
this.tran.toString == "}"
return == false
orig(this.nowNode) has only one value
orig(this.nowNode.nodes) has only one value
orig(this.nowNode.id) == 14
orig(this.nowNode.start) == false
orig(this.nowNode.end) == true
orig(this.ma.sb) has only one value
orig(this.ma.length) == 1
this.chList[this.pointer-1] == 125
===========================================================================
matcher.Match.getDtran():::ENTER
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.pointer <= size(this.chList[])-1
===========================================================================
matcher.Match.getDtran():::EXIT
this.dtrans == orig(this.dtrans)
this.startNode == orig(this.startNode)
this.startNode.nodes == orig(this.startNode.nodes)
this.startNode.id == orig(this.startNode.id)
this.startNode.mark == orig(this.startNode.mark)
this.startNode.mark == orig(this.nowNode.mark)
this.startNode.start == orig(this.startNode.start)
this.startNode.end == orig(this.startNode.end)
this.nowNode == orig(this.nowNode)
this.nowNode.nodes == orig(this.nowNode.nodes)
this.nowNode.id == orig(this.nowNode.id)
this.nowNode.start == orig(this.nowNode.start)
this.nowNode.end == orig(this.nowNode.end)
this.lastNode == orig(this.lastNode)
this.lastNode.nodes == orig(this.lastNode.nodes)
this.lastNode.id == orig(this.lastNode.id)
this.lastNode.mark == orig(this.lastNode.mark)
this.lastNode.start == orig(this.lastNode.start)
this.lastNode.end == orig(this.lastNode.end)
this.ma == orig(this.ma)
this.ma.sb == orig(this.ma.sb)
this.ma.mgs == orig(this.ma.mgs)
this.ma.mgs.group == orig(this.ma.mgs.group)
this.ma.mgs.mgs == orig(this.ma.mgs.mgs)
this.ma.mgs.mgs[] == orig(this.ma.mgs.mgs[])
this.ma.mgs.en == orig(this.ma.mgs.en)
this.ma.mgs.en[] == orig(this.ma.mgs.en[])
this.ma.mgs.matchString == orig(this.ma.mgs.matchString)
this.ma.mgs.matchString.toString == orig(this.ma.mgs.matchString.toString)
this.ma.length == orig(this.ma.length)
this.rex == orig(this.rex)
this.rex.toString == orig(this.rex.toString)
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.chList == orig(this.chList)
this.chList[] == orig(this.chList[])
this.pointer == orig(this.pointer)
this.tran == orig(this.tran)
this.tran.toString == orig(this.tran.toString)
this.stack == orig(this.stack)
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
return != null
return[] elements != null
return[].getClass().getName() elements == NFAToDNA.Dtran.class
this.pointer <= size(this.chList[])-1
===========================================================================
matcher.Match.group(int):::ENTER
this.nowNode.start == false
this.nowNode.end == true
this.lastNode != null
this.ma.mgs.matchString != null
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.tran != null
arg0 >= 1
this.startNode.id < this.nowNode.id
this.startNode.id <= arg0
this.nowNode.id > this.lastNode.id
this.pointer != size(this.chList[])-1
===========================================================================
matcher.Match.group(int):::EXIT
this.dtrans == orig(this.dtrans)
this.startNode == orig(this.startNode)
this.startNode.nodes == orig(this.startNode.nodes)
this.startNode.id == orig(this.startNode.id)
this.startNode.mark == orig(this.startNode.mark)
this.startNode.mark == orig(this.nowNode.mark)
this.startNode.mark == orig(this.lastNode.mark)
this.startNode.start == orig(this.startNode.start)
this.startNode.end == orig(this.startNode.end)
this.nowNode == orig(this.nowNode)
this.nowNode.nodes == orig(this.nowNode.nodes)
this.nowNode.id == orig(this.nowNode.id)
this.nowNode.start == orig(this.nowNode.start)
this.nowNode.end == orig(this.nowNode.end)
this.lastNode == orig(this.lastNode)
this.lastNode.nodes == orig(this.lastNode.nodes)
this.lastNode.id == orig(this.lastNode.id)
this.lastNode.start == orig(this.lastNode.start)
this.lastNode.end == orig(this.lastNode.end)
this.ma == orig(this.ma)
this.ma.sb == orig(this.ma.sb)
this.ma.mgs == orig(this.ma.mgs)
this.ma.mgs.group == orig(this.ma.mgs.group)
this.ma.mgs.mgs == orig(this.ma.mgs.mgs)
this.ma.mgs.mgs[] == orig(this.ma.mgs.mgs[])
this.ma.mgs.en == orig(this.ma.mgs.en)
this.ma.mgs.en[] == orig(this.ma.mgs.en[])
this.ma.mgs.matchString == orig(this.ma.mgs.matchString)
this.ma.mgs.matchString.toString == orig(this.ma.mgs.matchString.toString)
this.ma.length == orig(this.ma.length)
this.rex == orig(this.rex)
this.rex.toString == orig(this.rex.toString)
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.chList == orig(this.chList)
this.chList[] == orig(this.chList[])
this.pointer == orig(this.pointer)
this.tran == orig(this.tran)
this.tran.toString == orig(this.tran.toString)
this.stack == orig(this.stack)
this.nowNode.start == false
this.nowNode.end == true
this.lastNode != null
this.ma.mgs.matchString != null
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.tran != null
this.startNode.id < this.nowNode.id
this.startNode.id <= orig(arg0)
this.nowNode.id > this.lastNode.id
this.pointer != size(this.chList[])-1
===========================================================================
matcher.Match.isMatch(char, int):::ENTER
arg0 == this.chList[arg1]
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.pointer <= arg1
this.pointer <= size(this.chList[])-1
arg1 <= size(this.chList[])-1
===========================================================================
matcher.Match.isMatch(char, int):::EXIT
this.dtrans == orig(this.dtrans)
this.startNode == orig(this.startNode)
this.startNode.nodes == orig(this.startNode.nodes)
this.startNode.id == orig(this.startNode.id)
this.startNode.mark == orig(this.startNode.mark)
this.startNode.mark == orig(this.nowNode.mark)
this.startNode.mark == orig(this.lastNode.mark)
this.startNode.start == orig(this.startNode.start)
this.startNode.end == orig(this.startNode.end)
this.ma == orig(this.ma)
this.ma.sb == orig(this.ma.sb)
this.ma.mgs == orig(this.ma.mgs)
this.ma.mgs.group == orig(this.ma.mgs.group)
this.ma.mgs.mgs == orig(this.ma.mgs.mgs)
this.ma.mgs.mgs[] == orig(this.ma.mgs.mgs[])
this.ma.mgs.en == orig(this.ma.mgs.en)
this.ma.mgs.en[] == orig(this.ma.mgs.en[])
this.ma.mgs.matchString == orig(this.ma.mgs.matchString)
this.ma.mgs.matchString.toString == orig(this.ma.mgs.matchString.toString)
this.rex == orig(this.rex)
this.rex.toString == orig(this.rex.toString)
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.chList == orig(this.chList)
this.chList[] == orig(this.chList[])
this.stack == orig(this.stack)
orig(arg0) == this.chList[orig(arg1)]
orig(arg0) == orig(this.chList[post(arg1)])
this.lastNode != null
this.content has only one value
this.content != null
this.chList has only one value
this.chList != null
this.tran != null
return one of { 1, 2, 3 }
this.startNode.id <= orig(this.nowNode.id)
this.startNode.id <= orig(this.lastNode.id)
this.nowNode.id >= orig(this.nowNode.id)
this.ma.length >= orig(this.ma.length)
this.pointer >= orig(this.pointer)
orig(this.pointer) <= size(this.chList[])-1
orig(arg1) <= size(this.chList[])-1
===========================================================================
matcher.Match.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
matcher.Match.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
matcher.Match.match(java.lang.String):::ENTER
this.startNode == this.nowNode
this.startNode.nodes == this.nowNode.nodes
this.startNode.id == this.nowNode.id
this.startNode.start == this.nowNode.start
this.startNode.end == this.nowNode.end
this.lastNode == null
this.ma.sb has only one value
this.ma.mgs.matchString == null
this.ma.length == 0
this.content == null
this.chList == null
this.pointer == 0
this.tran == null
arg0 has only one value
arg0.toString == "main() { int  sum=12,it=1; if (sum==1)  it++; else it=it+2; }"
===========================================================================
matcher.Match.match(java.lang.String):::EXIT
this.dtrans == orig(this.dtrans)
this.startNode == this.nowNode
this.startNode == orig(this.startNode)
this.startNode == orig(this.nowNode)
this.startNode.nodes == this.nowNode.nodes
this.startNode.nodes == orig(this.startNode.nodes)
this.startNode.nodes == orig(this.nowNode.nodes)
this.startNode.id == this.nowNode.id
this.startNode.id == orig(this.startNode.id)
this.startNode.id == orig(this.nowNode.id)
this.startNode.mark == orig(this.startNode.mark)
this.startNode.mark == orig(this.nowNode.mark)
this.startNode.start == this.nowNode.start
this.startNode.start == orig(this.startNode.start)
this.startNode.start == orig(this.nowNode.start)
this.startNode.end == this.nowNode.end
this.startNode.end == orig(this.startNode.end)
this.startNode.end == orig(this.nowNode.end)
this.lastNode == orig(this.lastNode)
this.ma == orig(this.ma)
this.ma.sb == orig(this.ma.sb)
this.ma.mgs == orig(this.ma.mgs)
this.ma.mgs.group == orig(this.ma.mgs.group)
this.ma.mgs.mgs == orig(this.ma.mgs.mgs)
this.ma.mgs.mgs[] == orig(this.ma.mgs.mgs[])
this.ma.mgs.en == orig(this.ma.mgs.en)
this.ma.mgs.en[] == orig(this.ma.mgs.en[])
this.ma.mgs.matchString == orig(this.ma.mgs.matchString)
this.ma.length == orig(this.ma.length)
this.rex == orig(this.rex)
this.rex.toString == orig(this.rex.toString)
this.content == orig(arg0)
this.pointer == orig(this.pointer)
this.tran == orig(this.tran)
this.stack == orig(this.stack)
arg0.toString == orig(arg0.toString)
this.lastNode == null
this.ma.sb has only one value
this.ma.mgs.matchString == null
this.ma.length == 0
this.content has only one value
this.chList has only one value
this.pointer == 0
this.tran == null
arg0.toString == "main() { int  sum=12,it=1; if (sum==1)  it++; else it=it+2; }"
this.chList[this.pointer] == 109
===========================================================================
matcher.MatchAbout:::OBJECT
this has only one value
this.sb != null
this.mgs has only one value
this.mgs != null
this.mgs.group has only one value
this.mgs.group != null
this.mgs.mgs has only one value
this.mgs.mgs != null
this.mgs.mgs[] contains no nulls and has only one value, of length 15
this.mgs.mgs[] elements != null
this.mgs.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.mgs.mgs[].getClass().getName() elements == matcher.MatchGroups.MatchGroup.class
this.mgs.en has only one value
this.mgs.en != null
this.mgs.en[] contains no nulls and has only one value, of length 15
this.mgs.en[] elements != null
this.mgs.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
this.mgs.en[].getClass().getName() elements == regexpToNFA.K.class
this.length >= 0
size(this.mgs.mgs[]) == 15
size(this.mgs.en[]) == 15
===========================================================================
matcher.MatchAbout.MatchAbout(java.util.LinkedList):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 15
arg0[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
arg0[].getClass().getName() elements == regexpToNFA.K.class
size(arg0[]) == 15
===========================================================================
matcher.MatchAbout.MatchAbout(java.util.LinkedList):::EXIT
this.mgs.en == orig(arg0)
arg0[] == orig(arg0[])
this.sb has only one value
this.mgs.matchString == null
this.length == 0
arg0[] contains no nulls and has only one value, of length 15
arg0[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
arg0[].getClass().getName() elements == regexpToNFA.K.class
===========================================================================
matcher.MatchAbout.addCh(char, NFAToDNA.NewNode, NFAToDNA.NewNode, java.lang.String):::ENTER
arg1 != null
arg1.nodes != null
arg1.id >= 1
arg1.mark == true
arg2 != null
arg2.nodes != null
arg2.mark == true
arg2.start == false
arg3 != null
arg1.id < arg2.id
===========================================================================
matcher.MatchAbout.addCh(char, NFAToDNA.NewNode, NFAToDNA.NewNode, java.lang.String):::EXIT
this.sb == orig(this.sb)
this.mgs == orig(this.mgs)
this.mgs.group == orig(this.mgs.group)
this.mgs.mgs == orig(this.mgs.mgs)
this.mgs.mgs[] == orig(this.mgs.mgs[])
this.mgs.en == orig(this.mgs.en)
this.mgs.en[] == orig(this.mgs.en[])
this.mgs.matchString == orig(this.mgs.matchString)
this.mgs.matchString.toString == orig(this.mgs.matchString.toString)
arg1.nodes == orig(arg1.nodes)
arg1.id == orig(arg1.id)
arg1.mark == orig(arg1.mark)
arg1.start == orig(arg1.start)
arg1.end == orig(arg1.end)
arg2.nodes == orig(arg2.nodes)
arg2.id == orig(arg2.id)
arg2.mark == orig(arg2.mark)
arg2.start == orig(arg2.start)
arg2.end == orig(arg2.end)
arg3.toString == orig(arg3.toString)
arg1.nodes != null
arg1.id >= 1
arg1.mark == true
arg2.nodes != null
arg2.mark == true
arg2.start == false
this.length >= orig(this.length)
arg1.id < arg2.id
===========================================================================
matcher.MatchAbout.group(int):::ENTER
this.mgs.matchString != null
arg0 >= 1
===========================================================================
matcher.MatchAbout.group(int):::EXIT
this.sb == orig(this.sb)
this.mgs == orig(this.mgs)
this.mgs.group == orig(this.mgs.group)
this.mgs.mgs == orig(this.mgs.mgs)
this.mgs.mgs[] == orig(this.mgs.mgs[])
this.mgs.en == orig(this.mgs.en)
this.mgs.en[] == orig(this.mgs.en[])
this.mgs.matchString == orig(this.mgs.matchString)
this.mgs.matchString.toString == orig(this.mgs.matchString.toString)
this.length == orig(this.length)
this.mgs.matchString != null
===========================================================================
matcher.MatchAbout.handle(NFAToDNA.NewNode, NFAToDNA.NewNode, int):::ENTER
arg0 != null
arg0.nodes != null
arg0.id >= 1
arg0.mark == true
arg1 != null
arg1.nodes != null
arg1.mark == true
arg1.start == false
arg2 == 0
this.length >= arg2
arg0.id < arg1.id
===========================================================================
matcher.MatchAbout.handle(NFAToDNA.NewNode, NFAToDNA.NewNode, int):::EXIT
this.sb == orig(this.sb)
this.mgs == orig(this.mgs)
this.mgs.group == orig(this.mgs.group)
this.mgs.mgs == orig(this.mgs.mgs)
this.mgs.mgs[] == orig(this.mgs.mgs[])
this.mgs.en == orig(this.mgs.en)
this.mgs.en[] == orig(this.mgs.en[])
this.mgs.matchString == orig(this.mgs.matchString)
this.mgs.matchString.toString == orig(this.mgs.matchString.toString)
this.length == orig(this.length)
arg0.nodes == orig(arg0.nodes)
arg0.id == orig(arg0.id)
arg0.mark == orig(arg0.mark)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
arg1.nodes == orig(arg1.nodes)
arg1.id == orig(arg1.id)
arg1.mark == orig(arg1.mark)
arg1.start == orig(arg1.start)
arg1.end == orig(arg1.end)
arg0.nodes != null
arg0.id >= 1
arg0.mark == true
arg1.nodes != null
arg1.mark == true
arg1.start == false
this.length >= orig(arg2)
arg0.id < arg1.id
===========================================================================
matcher.MatchAbout.init():::ENTER
===========================================================================
matcher.MatchAbout.init():::EXIT
this.mgs == orig(this.mgs)
this.mgs.group == orig(this.mgs.group)
this.mgs.mgs == orig(this.mgs.mgs)
this.mgs.mgs[] == orig(this.mgs.mgs[])
this.mgs.en == orig(this.mgs.en)
this.mgs.en[] == orig(this.mgs.en[])
this.mgs.matchString == orig(this.mgs.matchString)
this.mgs.matchString.toString == orig(this.mgs.matchString.toString)
this.length == 0
this.length <= orig(this.length)
===========================================================================
matcher.MatchAbout.isLengthZero():::ENTER
===========================================================================
matcher.MatchAbout.isLengthZero():::EXIT
this.sb == orig(this.sb)
this.mgs == orig(this.mgs)
this.mgs.group == orig(this.mgs.group)
this.mgs.mgs == orig(this.mgs.mgs)
this.mgs.mgs[] == orig(this.mgs.mgs[])
this.mgs.en == orig(this.mgs.en)
this.mgs.en[] == orig(this.mgs.en[])
this.mgs.matchString == orig(this.mgs.matchString)
this.mgs.matchString.toString == orig(this.mgs.matchString.toString)
this.length == orig(this.length)
return == false
===========================================================================
matcher.MatchAbout.isLengthZero():::EXIT;condition="not(return == true)"
===========================================================================
matcher.MatchAbout.setString():::ENTER
===========================================================================
matcher.MatchAbout.setString():::EXIT
this.sb == orig(this.sb)
this.mgs == orig(this.mgs)
this.mgs.group == orig(this.mgs.group)
this.mgs.mgs == orig(this.mgs.mgs)
this.mgs.mgs[] == orig(this.mgs.mgs[])
this.mgs.en == orig(this.mgs.en)
this.mgs.en[] == orig(this.mgs.en[])
this.length == orig(this.length)
this.mgs.matchString != null
this.mgs.matchString.toString != orig(this.mgs.matchString.toString)
===========================================================================
matcher.MatchGroups$MatchGroup:::OBJECT
this.k >= 1
this.startIndex one of { -1, 0 }
this.endIndex != 0
this.endIndex >= -1
this.startNewNode != null
this.startNewNode[] elements has only one value
this.startNewNode[] elements != null
this.startNewNode[].getClass().getName() elements == java.lang.Integer.class
this.startNewNode[].getClass().getName() one of { [], [java.lang.Integer] }
this.endNewNode != null
this.endNewNode[] elements != null
this.endNewNode[].getClass().getName() elements == java.lang.Integer.class
this.canReachNode != null
this.canReachNode[] elements != null
this.canReachNode[].getClass().getName() elements == java.lang.Integer.class
matcher.MatchGroups.this has only one value
matcher.MatchGroups.this.group has only one value
matcher.MatchGroups.this.group != null
matcher.MatchGroups.this.mgs has only one value
matcher.MatchGroups.this.mgs != null
matcher.MatchGroups.this.mgs[] elements != null
matcher.MatchGroups.this.mgs[].getClass().getName() elements == matcher.MatchGroups.MatchGroup.class
matcher.MatchGroups.this.en has only one value
matcher.MatchGroups.this.en != null
matcher.MatchGroups.this.en[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.en[] elements != null
matcher.MatchGroups.this.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
matcher.MatchGroups.this.en[].getClass().getName() elements == regexpToNFA.K.class
size(this.startNewNode[]) one of { 0, 1 }
size(this.canReachNode[])-1 != 0
size(matcher.MatchGroups.this.en[]) == 15
this.startIndex % this.endIndex == 0
===========================================================================
matcher.MatchGroups$MatchGroup.MatchGroup(matcher.MatchGroups, int):::ENTER
matcher.MatchGroups.this has only one value
matcher.MatchGroups.this != null
matcher.MatchGroups.this.group has only one value
matcher.MatchGroups.this.group != null
matcher.MatchGroups.this.mgs has only one value
matcher.MatchGroups.this.mgs != null
matcher.MatchGroups.this.mgs[] elements != null
matcher.MatchGroups.this.mgs[].getClass().getName() elements == matcher.MatchGroups.MatchGroup.class
matcher.MatchGroups.this.en has only one value
matcher.MatchGroups.this.en != null
matcher.MatchGroups.this.en[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.en[] elements != null
matcher.MatchGroups.this.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
matcher.MatchGroups.this.en[].getClass().getName() elements == regexpToNFA.K.class
matcher.MatchGroups.this.matchString == null
size(matcher.MatchGroups.this.en[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.MatchGroup(matcher.MatchGroups, int):::EXIT
this.k == orig(arg1)
this.startIndex == this.endIndex
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
this.startIndex == -1
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
matcher.MatchGroups.this.matchString == null
===========================================================================
matcher.MatchGroups$MatchGroup.getString(java.lang.String):::ENTER
matcher.MatchGroups.this.matchString == arg0
this.k >= 2
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
this.endNewNode[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
matcher.MatchGroups.this.matchString != null
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4 }
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.getString(java.lang.String):::EXIT111
matcher.MatchGroups.this.matchString == return
return == orig(matcher.MatchGroups.this.matchString)
return == orig(arg0)
this.startIndex == 0
return != null
this.startIndex < this.endIndex
===========================================================================
matcher.MatchGroups$MatchGroup.getString(java.lang.String):::EXIT113
this.endIndex == -1
return == null
this.startIndex >= this.endIndex
===========================================================================
matcher.MatchGroups$MatchGroup.getString(java.lang.String):::EXIT
this.k == orig(this.k)
this.startIndex == orig(this.startIndex)
this.endIndex == orig(this.endIndex)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(arg0)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
arg0.toString == orig(arg0.toString)
(this.endIndex == -1)  <==>  (return == null)
(this.endIndex == -1)  <==>  (this.startIndex >= this.endIndex)
(this.endIndex == -1)  ==>  (this.startIndex one of { -1, 0 })
this.k >= 2
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
this.endNewNode[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
orig(arg0) != null
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4 }
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.init():::ENTER
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.init():::EXIT
this.k == orig(this.k)
this.startIndex == this.endIndex
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
this.startIndex == -1
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
this.startIndex <= orig(this.startIndex)
this.startIndex <= orig(this.endIndex)
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::ENTER
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT72
return == true
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT72;condition="return == true"
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT74
this.k >= 2
this.endIndex one of { -1, 1 }
this.endNewNode[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
return == false
size(this.endNewNode[]) one of { 1, 4 }
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT74;condition="not(return == true)"
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT
this.k == orig(this.k)
this.startIndex == orig(this.startIndex)
this.endIndex == orig(this.endIndex)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
(return == false)  ==>  (size(this.endNewNode[]) one of { 1, 4 })
(return == false)  ==>  (this.endIndex one of { -1, 1 })
(return == false)  ==>  (this.endNewNode[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] })
(return == false)  ==>  (this.k >= 2)
(return == true)  ==>  (size(this.endNewNode[]) one of { 1, 4, 17 })
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT;condition="return == true"
return == true
===========================================================================
matcher.MatchGroups$MatchGroup.isCanReach(int):::EXIT;condition="not(return == true)"
this.k >= 2
this.endIndex one of { -1, 1 }
this.endNewNode[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
return == false
size(this.endNewNode[]) one of { 1, 4 }
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::ENTER
this.endIndex one of { -1, 1 }
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT90
this.startIndex == 0
return == true
this.k != orig(arg0)
this.startIndex != this.endIndex
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT90;condition="return == true"
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT92
return == false
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT92;condition="not(return == true)"
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT
this.k == orig(this.k)
this.startIndex == orig(this.startIndex)
this.endIndex == orig(this.endIndex)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
(return == false)  ==>  (this.startIndex one of { -1, 0 })
(return == true)  ==>  (this.k != orig(arg0))
(return == true)  ==>  (this.startIndex != this.endIndex)
(return == true)  ==>  (this.startIndex == 0)
this.endIndex one of { -1, 1 }
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT;condition="return == true"
this.startIndex == 0
return == true
this.k != orig(arg0)
this.startIndex != this.endIndex
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetEndIndex(int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::ENTER
this.endIndex one of { -1, 1 }
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
arg0 >= 1
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT84
this.startIndex == this.endIndex
this.startIndex == orig(this.endIndex)
this.startIndex == -1
return == true
orig(arg0) == 1
this.k >= orig(arg0)
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT84;condition="return == true"
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT86
return == false
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT86;condition="not(return == true)"
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT
this.k == orig(this.k)
this.startIndex == orig(this.startIndex)
this.endIndex == orig(this.endIndex)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
(return == false)  ==>  (this.endIndex one of { -1, 1 })
(return == false)  ==>  (this.startIndex one of { -1, 0 })
(return == true)  <==>  (orig(arg0) == 1)
(return == true)  ==>  (this.endIndex == -1)
(return == true)  ==>  (this.k >= orig(arg0))
(return == true)  ==>  (this.startIndex == -1)
(return == true)  ==>  (this.startIndex == this.endIndex)
this.endIndex one of { -1, 1 }
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT;condition="return == true"
this.startIndex == this.endIndex
this.startIndex == orig(this.endIndex)
this.startIndex == -1
return == true
orig(arg0) == 1
this.k >= orig(arg0)
===========================================================================
matcher.MatchGroups$MatchGroup.isCanSetStartIndex(int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
matcher.MatchGroups$MatchGroup.setEndIndex(int):::ENTER
this.startIndex == 0
this.endIndex one of { -1, 1 }
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
this.startIndex != this.endIndex
this.startIndex < arg0
arg0 % this.endIndex == 0
this.endIndex < arg0
===========================================================================
matcher.MatchGroups$MatchGroup.setEndIndex(int):::EXIT
this.k == orig(this.k)
this.startIndex == orig(this.startIndex)
this.endIndex == orig(arg0)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
this.startIndex == 0
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
this.startIndex < this.endIndex
this.startIndex != orig(this.endIndex)
this.endIndex % orig(this.endIndex) == 0
this.endIndex > orig(this.endIndex)
===========================================================================
matcher.MatchGroups$MatchGroup.setNode(java.util.LinkedList, java.util.LinkedList, java.util.LinkedList):::ENTER
this.startIndex == this.endIndex
this.startIndex == -1
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
matcher.MatchGroups.this.matchString == null
arg0 != null
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Integer]
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) == 1
size(arg1[]) one of { 1, 4, 17 }
size(arg2[]) >= 2
===========================================================================
matcher.MatchGroups$MatchGroup.setNode(java.util.LinkedList, java.util.LinkedList, java.util.LinkedList):::EXIT
this.k == orig(this.k)
this.startIndex == this.endIndex
this.startIndex == orig(this.startIndex)
this.startIndex == orig(this.endIndex)
this.startNewNode == orig(arg0)
this.endNewNode == orig(arg1)
this.canReachNode == orig(arg2)
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
size(this.startNewNode[])-1 == orig(size(this.startNewNode[]))
this.startIndex == -1
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.matchString == null
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Integer]
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.Integer.class
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(this.endNewNode[])-1 >= orig(size(this.endNewNode[]))
size(this.canReachNode[])-1 > orig(size(this.canReachNode[]))
===========================================================================
matcher.MatchGroups$MatchGroup.setStartIndex(int):::ENTER
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
this.startIndex <= arg0
===========================================================================
matcher.MatchGroups$MatchGroup.setStartIndex(int):::EXIT
this.k == orig(this.k)
this.endIndex == orig(this.endIndex)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
matcher.MatchGroups.this == orig(matcher.MatchGroups.this)
matcher.MatchGroups.this.group == orig(matcher.MatchGroups.this.group)
matcher.MatchGroups.this.mgs == orig(matcher.MatchGroups.this.mgs)
matcher.MatchGroups.this.mgs[] == orig(matcher.MatchGroups.this.mgs[])
matcher.MatchGroups.this.en == orig(matcher.MatchGroups.this.en)
matcher.MatchGroups.this.en[] == orig(matcher.MatchGroups.this.en[])
matcher.MatchGroups.this.matchString == orig(matcher.MatchGroups.this.matchString)
matcher.MatchGroups.this.matchString.toString == orig(matcher.MatchGroups.this.matchString.toString)
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
matcher.MatchGroups.this.mgs[] contains no nulls and has only one value, of length 15
matcher.MatchGroups.this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(matcher.MatchGroups.this.mgs[]) == 15
this.startIndex >= orig(this.startIndex)
this.startIndex <= orig(arg0)
orig(this.startIndex) % this.endIndex == 0
===========================================================================
matcher.MatchGroups:::OBJECT
this has only one value
this.group has only one value
this.group != null
this.mgs has only one value
this.mgs != null
this.mgs[] elements != null
this.mgs[].getClass().getName() elements == matcher.MatchGroups.MatchGroup.class
this.mgs[].getClass().getName() one of { [], [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup] }
this.en has only one value
this.en != null
this.en[] contains no nulls and has only one value, of length 15
this.en[] elements != null
this.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
this.en[].getClass().getName() elements == regexpToNFA.K.class
size(this.mgs[]) one of { 0, 15 }
size(this.mgs[])-1 != 0
size(this.en[]) == 15
===========================================================================
matcher.MatchGroups.MatchGroups(java.util.LinkedList):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 15
arg0[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
arg0[].getClass().getName() elements == regexpToNFA.K.class
size(arg0[]) == 15
===========================================================================
matcher.MatchGroups.MatchGroups(java.util.LinkedList):::EXIT
this.en == orig(arg0)
arg0[] == orig(arg0[])
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.matchString == null
arg0[] contains no nulls and has only one value, of length 15
arg0[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
arg0[].getClass().getName() elements == regexpToNFA.K.class
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.firstHandle():::ENTER
this.mgs[] == []
this.mgs[].getClass().getName() == []
this.matchString == null
===========================================================================
matcher.MatchGroups.firstHandle():::EXIT
this.group == orig(this.group)
this.mgs == orig(this.mgs)
this.en == orig(this.en)
this.en[] == orig(this.en[])
this.matchString == orig(this.matchString)
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.matchString == null
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.group(int):::ENTER
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.matchString != null
arg0 >= 2
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.group(int):::EXIT
this.group == orig(this.group)
this.mgs == orig(this.mgs)
this.mgs[] == orig(this.mgs[])
this.en == orig(this.en)
this.en[] == orig(this.en[])
this.matchString == orig(this.matchString)
this.matchString.toString == orig(this.matchString.toString)
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.matchString != null
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.handle(int, int, int):::ENTER
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
arg0 >= 1
arg2 >= 0
size(this.mgs[]) == 15
arg0 < arg1
===========================================================================
matcher.MatchGroups.handle(int, int, int):::EXIT
this.group == orig(this.group)
this.mgs == orig(this.mgs)
this.mgs[] == orig(this.mgs[])
this.en == orig(this.en)
this.en[] == orig(this.en[])
this.matchString == orig(this.matchString)
this.matchString.toString == orig(this.matchString.toString)
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.init():::ENTER
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.init():::EXIT
this.group == orig(this.group)
this.mgs == orig(this.mgs)
this.mgs[] == orig(this.mgs[])
this.en == orig(this.en)
this.en[] == orig(this.en[])
this.matchString == orig(this.matchString)
this.matchString.toString == orig(this.matchString.toString)
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.setMatchString(java.lang.String):::ENTER
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
arg0 != null
size(this.mgs[]) == 15
===========================================================================
matcher.MatchGroups.setMatchString(java.lang.String):::EXIT
this.group == orig(this.group)
this.mgs == orig(this.mgs)
this.mgs[] == orig(this.mgs[])
this.en == orig(this.en)
this.en[] == orig(this.en[])
this.matchString == orig(arg0)
arg0.toString == orig(arg0.toString)
this.mgs[] contains no nulls and has only one value, of length 15
this.mgs[].getClass().getName() == [matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup, matcher.MatchGroups.MatchGroup]
this.matchString != null
size(this.mgs[]) == 15
this.matchString.toString != orig(this.matchString.toString)
===========================================================================
matcher.Recall:::OBJECT
this.nowNode == this.d.mark
this.nowNode.nodes == this.d.nodes
this.nowNode.nodes == this.d.mark.nodes
this.nowNode.id == this.d.mark.id
this.nowNode.mark == this.lastNode.mark
this.nowNode.mark == this.d.mark.mark
this.nowNode.start == this.d.mark.start
this.nowNode.end == this.d.mark.end
this.index >= 0
this.nowNode != null
this.nowNode.nodes != null
this.nowNode.id >= 1
this.nowNode.mark == true
this.lastNode.nodes != null
this.lastNode.id >= 1
this.lastNode.mark == true
this.d != null
this.d.tran != null
this.d.d != null
this.d.d.nodes != null
this.d.d.mark == true
this.d.d.start == false
this.nowNode.id < this.d.d.id
this.lastNode.id != this.d.d.id
===========================================================================
matcher.Recall.Recall(int, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.Dtran, char):::ENTER
arg1 == arg3.mark
arg1.nodes == arg3.nodes
arg1.nodes == arg3.mark.nodes
arg1.id == arg3.mark.id
arg1.mark == arg2.mark
arg1.mark == arg3.mark.mark
arg1.start == arg3.mark.start
arg1.end == arg3.mark.end
arg1 != null
arg1.nodes != null
arg1.id >= 1
arg1.mark == true
arg2.nodes != null
arg2.id >= 1
arg2.mark == true
arg3 != null
arg3.tran != null
arg3.d != null
arg3.d.nodes != null
arg3.d.mark == true
arg3.d.start == false
arg1.id < arg3.d.id
arg2.id != arg3.d.id
===========================================================================
matcher.Recall.Recall(int, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.Dtran, char):::EXIT
this.index == orig(arg0)
this.nowNode == arg3.mark
this.nowNode == orig(arg1)
this.nowNode == orig(arg3.mark)
this.nowNode.nodes == arg1.nodes
this.nowNode.id == arg1.id
this.nowNode.mark == arg1.mark
this.nowNode.start == arg1.start
this.nowNode.end == arg1.end
this.lastNode == orig(arg2)
this.lastNode.nodes == arg2.nodes
this.lastNode.id == arg2.id
this.lastNode.mark == arg2.mark
this.lastNode.start == arg2.start
this.lastNode.end == arg2.end
this.d == orig(arg3)
this.d.nodes == arg1.nodes
this.d.mark.nodes == arg1.nodes
this.d.mark.id == arg1.id
this.d.mark.mark == arg1.mark
this.d.mark.start == arg1.start
this.d.mark.end == arg1.end
this.d.tran == arg3.tran
this.d.d == arg3.d
this.d.d.nodes == arg3.d.nodes
this.d.d.id == arg3.d.id
this.d.d.mark == arg3.d.mark
this.d.d.start == arg3.d.start
this.d.d.end == arg3.d.end
this.ch == orig(arg4)
arg1.nodes == arg3.nodes
arg1.nodes == arg3.mark.nodes
arg1.nodes == orig(arg1.nodes)
arg1.nodes == orig(arg3.nodes)
arg1.nodes == orig(arg3.mark.nodes)
arg1.id == arg3.mark.id
arg1.id == orig(arg1.id)
arg1.id == orig(arg3.mark.id)
arg1.mark == arg2.mark
arg1.mark == arg3.mark.mark
arg1.mark == orig(arg1.mark)
arg1.mark == orig(arg3.mark.mark)
arg1.start == arg3.mark.start
arg1.start == orig(arg1.start)
arg1.start == orig(arg3.mark.start)
arg1.end == arg3.mark.end
arg1.end == orig(arg1.end)
arg1.end == orig(arg3.mark.end)
arg2.nodes == orig(arg2.nodes)
arg2.id == orig(arg2.id)
arg2.mark == orig(arg2.mark)
arg2.start == orig(arg2.start)
arg2.end == orig(arg2.end)
arg3.tran == orig(arg3.tran)
arg3.tran.toString == orig(arg3.tran.toString)
arg3.d == orig(arg3.d)
arg3.d.nodes == orig(arg3.d.nodes)
arg3.d.id == orig(arg3.d.id)
arg3.d.mark == orig(arg3.d.mark)
arg3.d.start == orig(arg3.d.start)
arg3.d.end == orig(arg3.d.end)
arg1.nodes != null
arg1.id >= 1
arg1.mark == true
arg2.nodes != null
arg2.id >= 1
arg2.mark == true
arg3.tran != null
arg3.d != null
arg3.d.nodes != null
arg3.d.mark == true
arg3.d.start == false
arg1.id < arg3.d.id
arg2.id != arg3.d.id
===========================================================================
matcher.Recall.getCh():::ENTER
this.nowNode == this.lastNode
this.nowNode.nodes == this.lastNode.nodes
this.nowNode.id == this.lastNode.id
this.nowNode.start == this.lastNode.start
this.nowNode.end == this.lastNode.end
this.index one of { 7, 60 }
this.nowNode has only one value
this.nowNode.nodes has only one value
this.nowNode.id == 1
this.nowNode.start == true
this.nowNode.end == false
this.d.tran.toString one of { "{", "}" }
this.d.d.id one of { 13, 14 }
this.d.d.end == true
this.ch one of { 123, 125 }
===========================================================================
matcher.Recall.getCh():::EXIT
this.index == orig(this.index)
this.nowNode == this.lastNode
this.nowNode == orig(this.nowNode)
this.nowNode == orig(this.lastNode)
this.nowNode == orig(this.d.mark)
this.nowNode.nodes == this.lastNode.nodes
this.nowNode.nodes == orig(this.nowNode.nodes)
this.nowNode.nodes == orig(this.lastNode.nodes)
this.nowNode.nodes == orig(this.d.nodes)
this.nowNode.nodes == orig(this.d.mark.nodes)
this.nowNode.id == this.lastNode.id
this.nowNode.id == orig(this.nowNode.id)
this.nowNode.id == orig(this.lastNode.id)
this.nowNode.id == orig(this.d.mark.id)
this.nowNode.mark == orig(this.nowNode.mark)
this.nowNode.mark == orig(this.lastNode.mark)
this.nowNode.mark == orig(this.d.mark.mark)
this.nowNode.start == this.lastNode.start
this.nowNode.start == orig(this.nowNode.start)
this.nowNode.start == orig(this.lastNode.start)
this.nowNode.start == orig(this.d.mark.start)
this.nowNode.end == this.lastNode.end
this.nowNode.end == orig(this.nowNode.end)
this.nowNode.end == orig(this.lastNode.end)
this.nowNode.end == orig(this.d.mark.end)
this.d == orig(this.d)
this.d.tran == orig(this.d.tran)
this.d.tran.toString == orig(this.d.tran.toString)
this.d.d == orig(this.d.d)
this.d.d.nodes == orig(this.d.d.nodes)
this.d.d.id == orig(this.d.d.id)
this.d.d.mark == orig(this.d.d.mark)
this.d.d.start == orig(this.d.d.start)
this.d.d.end == orig(this.d.d.end)
this.ch == return
return == orig(this.ch)
this.index one of { 7, 60 }
this.nowNode has only one value
this.nowNode.nodes has only one value
this.nowNode.id == 1
this.nowNode.start == true
this.nowNode.end == false
this.d.tran.toString one of { "{", "}" }
this.d.d.id one of { 13, 14 }
this.d.d.end == true
return one of { 123, 125 }
===========================================================================
matcher.Recall.getDtran():::ENTER
===========================================================================
matcher.Recall.getDtran():::EXIT
this.index == orig(this.index)
this.nowNode == return.mark
this.nowNode == orig(this.nowNode)
this.nowNode == orig(this.d.mark)
this.nowNode.nodes == return.nodes
this.nowNode.id == return.mark.id
this.nowNode.id == orig(this.nowNode.id)
this.nowNode.id == orig(this.d.mark.id)
this.nowNode.mark == return.mark.mark
this.nowNode.mark == orig(this.nowNode.mark)
this.nowNode.mark == orig(this.d.mark.mark)
this.nowNode.start == return.mark.start
this.nowNode.start == orig(this.nowNode.start)
this.nowNode.start == orig(this.d.mark.start)
this.nowNode.end == return.mark.end
this.nowNode.end == orig(this.nowNode.end)
this.nowNode.end == orig(this.d.mark.end)
this.lastNode == orig(this.lastNode)
this.lastNode.nodes == orig(this.lastNode.nodes)
this.lastNode.id == orig(this.lastNode.id)
this.lastNode.mark == orig(this.lastNode.mark)
this.lastNode.start == orig(this.lastNode.start)
this.lastNode.end == orig(this.lastNode.end)
this.d == return
this.d.nodes == return.nodes
this.d.mark.nodes == return.nodes
this.d.tran == return.tran
this.d.tran.toString == orig(this.d.tran.toString)
this.d.d == return.d
this.d.d.nodes == return.d.nodes
this.d.d.id == return.d.id
this.d.d.mark == return.d.mark
this.d.d.start == return.d.start
this.d.d.end == return.d.end
this.ch == orig(this.ch)
return == orig(this.d)
return.nodes == return.mark.nodes
return.nodes == orig(this.nowNode.nodes)
return.nodes == orig(this.d.nodes)
return.nodes == orig(this.d.mark.nodes)
return.tran == orig(this.d.tran)
return.d == orig(this.d.d)
return.d.nodes == orig(this.d.d.nodes)
return.d.id == orig(this.d.d.id)
return.d.mark == orig(this.d.d.mark)
return.d.start == orig(this.d.d.start)
return.d.end == orig(this.d.d.end)
return != null
return.nodes != null
return.tran != null
return.d != null
return.d.nodes != null
return.d.mark == true
return.d.start == false
this.nowNode.id < return.d.id
this.lastNode.id != return.d.id
===========================================================================
matcher.Recall.getIndex():::ENTER
this.nowNode == this.lastNode
this.nowNode.nodes == this.lastNode.nodes
this.nowNode.id == this.lastNode.id
this.nowNode.start == this.lastNode.start
this.nowNode.end == this.lastNode.end
this.index one of { 7, 60 }
this.nowNode has only one value
this.nowNode.nodes has only one value
this.nowNode.id == 1
this.nowNode.start == true
this.nowNode.end == false
this.d.tran.toString one of { "{", "}" }
this.d.d.id one of { 13, 14 }
this.d.d.end == true
this.ch one of { 123, 125 }
===========================================================================
matcher.Recall.getIndex():::EXIT
this.index == return
this.nowNode == this.lastNode
this.nowNode == orig(this.nowNode)
this.nowNode == orig(this.lastNode)
this.nowNode == orig(this.d.mark)
this.nowNode.nodes == this.lastNode.nodes
this.nowNode.nodes == orig(this.nowNode.nodes)
this.nowNode.nodes == orig(this.lastNode.nodes)
this.nowNode.nodes == orig(this.d.nodes)
this.nowNode.nodes == orig(this.d.mark.nodes)
this.nowNode.id == this.lastNode.id
this.nowNode.id == orig(this.nowNode.id)
this.nowNode.id == orig(this.lastNode.id)
this.nowNode.id == orig(this.d.mark.id)
this.nowNode.mark == orig(this.nowNode.mark)
this.nowNode.mark == orig(this.lastNode.mark)
this.nowNode.mark == orig(this.d.mark.mark)
this.nowNode.start == this.lastNode.start
this.nowNode.start == orig(this.nowNode.start)
this.nowNode.start == orig(this.lastNode.start)
this.nowNode.start == orig(this.d.mark.start)
this.nowNode.end == this.lastNode.end
this.nowNode.end == orig(this.nowNode.end)
this.nowNode.end == orig(this.lastNode.end)
this.nowNode.end == orig(this.d.mark.end)
this.d == orig(this.d)
this.d.tran == orig(this.d.tran)
this.d.tran.toString == orig(this.d.tran.toString)
this.d.d == orig(this.d.d)
this.d.d.nodes == orig(this.d.d.nodes)
this.d.d.id == orig(this.d.d.id)
this.d.d.mark == orig(this.d.d.mark)
this.d.d.start == orig(this.d.d.start)
this.d.d.end == orig(this.d.d.end)
this.ch == orig(this.ch)
return == orig(this.index)
this.nowNode has only one value
this.nowNode.nodes has only one value
this.nowNode.id == 1
this.nowNode.start == true
this.nowNode.end == false
this.d.tran.toString one of { "{", "}" }
this.d.d.id one of { 13, 14 }
this.d.d.end == true
this.ch one of { 123, 125 }
return one of { 7, 60 }
===========================================================================
matcher.Recall.getNowNode():::ENTER
this.nowNode == this.lastNode
this.nowNode.nodes == this.lastNode.nodes
this.nowNode.id == this.lastNode.id
this.nowNode.start == this.lastNode.start
this.nowNode.end == this.lastNode.end
this.index one of { 7, 60 }
this.nowNode has only one value
this.nowNode.nodes has only one value
this.nowNode.id == 1
this.nowNode.start == true
this.nowNode.end == false
this.d.tran.toString one of { "{", "}" }
this.d.d.id one of { 13, 14 }
this.d.d.end == true
this.ch one of { 123, 125 }
===========================================================================
matcher.Recall.getNowNode():::EXIT
this.index == orig(this.index)
this.nowNode == return
this.nowNode.nodes == return.nodes
this.nowNode.id == return.id
this.nowNode.mark == return.mark
this.nowNode.start == return.start
this.nowNode.end == return.end
this.lastNode == return
this.lastNode.nodes == return.nodes
this.lastNode.id == return.id
this.lastNode.mark == return.mark
this.lastNode.start == return.start
this.lastNode.end == return.end
this.d == orig(this.d)
this.d.nodes == return.nodes
this.d.mark == return
this.d.mark.nodes == return.nodes
this.d.mark.id == return.id
this.d.mark.mark == return.mark
this.d.mark.start == return.start
this.d.mark.end == return.end
this.d.tran == orig(this.d.tran)
this.d.tran.toString == orig(this.d.tran.toString)
this.d.d == orig(this.d.d)
this.d.d.nodes == orig(this.d.d.nodes)
this.d.d.id == orig(this.d.d.id)
this.d.d.mark == orig(this.d.d.mark)
this.d.d.start == orig(this.d.d.start)
this.d.d.end == orig(this.d.d.end)
this.ch == orig(this.ch)
return == orig(this.nowNode)
return == orig(this.lastNode)
return == orig(this.d.mark)
return.nodes == orig(this.nowNode.nodes)
return.nodes == orig(this.lastNode.nodes)
return.nodes == orig(this.d.nodes)
return.nodes == orig(this.d.mark.nodes)
return.id == orig(this.nowNode.id)
return.id == orig(this.lastNode.id)
return.id == orig(this.d.mark.id)
return.mark == orig(this.nowNode.mark)
return.mark == orig(this.lastNode.mark)
return.mark == orig(this.d.mark.mark)
return.start == orig(this.nowNode.start)
return.start == orig(this.lastNode.start)
return.start == orig(this.d.mark.start)
return.end == orig(this.nowNode.end)
return.end == orig(this.lastNode.end)
return.end == orig(this.d.mark.end)
this.index one of { 7, 60 }
this.d.tran.toString one of { "{", "}" }
this.d.d.id one of { 13, 14 }
this.d.d.end == true
this.ch one of { 123, 125 }
return has only one value
return.nodes has only one value
return.id == 1
return.mark == true
return.start == true
return.end == false
===========================================================================
regexpToNFA.K:::OBJECT
this.unit.father.tranChar == this.unit.tranChar
this.unit != null
this.unit.start >= 1
this.unit.end >= 2
this.unit.nextUnit == null
this.unit.father.start == 1
this.unit.father.end == 2
this.unit.father.nextUnit == null
this.unit.father.father == null
this.unit.father.innerFirstUnit has only one value
this.unit.father.innerFirstUnit != null
this.unit.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.unit.father.innerFirstUnit[] elements != null
this.unit.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unit.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.unit.father.tranChar has only one value
this.unit.father.tranChar != null
this.unit.father.tranChar.toString == ""
this.unit.father.state == 0
this.unit.innerFirstUnit != null
this.unit.innerFirstUnit[] elements != null
this.unit.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.unit.tranChar has only one value
this.unit.tranChar != null
this.unit.tranChar.toString == ""
this.unit.state == 0
this.k >= 0
this.startNewNode != null
this.startNewNode[] elements has only one value
this.startNewNode[] elements != null
this.startNewNode[].getClass().getName() elements == java.lang.Integer.class
this.startNewNode[].getClass().getName() one of { [], [java.lang.Integer] }
this.endNewNode != null
this.endNewNode[] elements != null
this.endNewNode[].getClass().getName() elements == java.lang.Integer.class
this.canReachNode != null
this.canReachNode[] elements != null
this.canReachNode[].getClass().getName() elements == java.lang.Integer.class
size(this.unit.father.innerFirstUnit[]) == 14
size(this.unit.innerFirstUnit[]) one of { 1, 4, 14 }
size(this.startNewNode[]) one of { 0, 1 }
this.unit.start - this.unit.end + 1 == 0
this.unit.start > this.unit.father.start
this.unit.start > this.unit.father.end
this.unit.start >= this.k
this.unit.end > this.unit.father.start
this.unit.end % this.unit.father.end == 0
this.unit.end > this.unit.father.end
this.unit.end > this.k
this.unit.father.start != this.k
===========================================================================
regexpToNFA.K.K(regexpToNFA.Unit):::ENTER
arg0.father.tranChar == arg0.tranChar
arg0 != null
arg0.nextUnit == null
arg0.father.start == 1
arg0.father.end == 2
arg0.father.nextUnit == null
arg0.father.father == null
arg0.father.innerFirstUnit has only one value
arg0.father.innerFirstUnit != null
arg0.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar has only one value
arg0.father.tranChar != null
arg0.father.tranChar.toString == ""
arg0.father.state == 0
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] elements != null
arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.tranChar has only one value
arg0.tranChar != null
arg0.tranChar.toString == ""
arg0.state == 0
size(arg0.father.innerFirstUnit[]) == 14
size(arg0.innerFirstUnit[]) one of { 1, 4, 14 }
arg0.start - arg0.end + 1 == 0
arg0.start > arg0.father.start
arg0.start > arg0.father.end
arg0.end > arg0.father.start
arg0.end % arg0.father.end == 0
arg0.end > arg0.father.end
===========================================================================
regexpToNFA.K.K(regexpToNFA.Unit):::EXIT
this.unit == orig(arg0)
this.unit.start == arg0.start
this.unit.end == arg0.end
this.unit.father == arg0.father
this.unit.father.start == arg0.father.start
this.unit.father.end == arg0.father.end
this.unit.father.innerFirstUnit == arg0.father.innerFirstUnit
this.unit.father.tranChar == arg0.father.tranChar
this.unit.father.state == arg0.father.state
this.unit.innerFirstUnit == arg0.innerFirstUnit
this.unit.tranChar == arg0.tranChar
this.unit.state == arg0.state
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
arg0.nextUnit == orig(arg0.nextUnit)
arg0.father == orig(arg0.father)
arg0.father.start == orig(arg0.father.start)
arg0.father.end == orig(arg0.father.end)
arg0.father.nextUnit == orig(arg0.father.nextUnit)
arg0.father.father == orig(arg0.father.father)
arg0.father.innerFirstUnit == orig(arg0.father.innerFirstUnit)
arg0.father.innerFirstUnit[] == orig(arg0.father.innerFirstUnit[])
arg0.father.tranChar == arg0.tranChar
arg0.father.tranChar == orig(arg0.father.tranChar)
arg0.father.tranChar.toString == orig(arg0.father.tranChar.toString)
arg0.father.state == orig(arg0.father.state)
arg0.innerFirstUnit == orig(arg0.innerFirstUnit)
arg0.innerFirstUnit[] == orig(arg0.innerFirstUnit[])
arg0.tranChar == orig(arg0.tranChar)
arg0.tranChar.toString == orig(arg0.tranChar.toString)
arg0.state == orig(arg0.state)
this.k == 0
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
arg0.nextUnit == null
arg0.father.start == 1
arg0.father.end == 2
arg0.father.nextUnit == null
arg0.father.father == null
arg0.father.innerFirstUnit has only one value
arg0.father.innerFirstUnit != null
arg0.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar has only one value
arg0.father.tranChar != null
arg0.father.tranChar.toString == ""
arg0.father.state == 0
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] elements != null
arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.tranChar has only one value
arg0.tranChar != null
arg0.tranChar.toString == ""
arg0.state == 0
size(arg0.father.innerFirstUnit[]) == 14
size(arg0.innerFirstUnit[]) one of { 1, 4, 14 }
this.k < arg0.start
this.k < arg0.end
arg0.start - arg0.end + 1 == 0
arg0.start > arg0.father.start
arg0.start > arg0.father.end
arg0.end > arg0.father.start
arg0.end % arg0.father.end == 0
arg0.end > arg0.father.end
===========================================================================
regexpToNFA.K.addCanReachNode(NFAToDNA.NewNode):::ENTER
this.k >= 1
arg0 != null
arg0.nodes != null
arg0.id >= 1
arg0.mark == true
this.unit.father.start < this.k
this.unit.father.start <= arg0.id
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.addCanReachNode(NFAToDNA.NewNode):::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
arg0.nodes == orig(arg0.nodes)
arg0.id == orig(arg0.id)
arg0.mark == orig(arg0.mark)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
size(this.canReachNode[])-1 == orig(size(this.canReachNode[]))
this.k >= 1
arg0.nodes != null
arg0.id >= 1
arg0.mark == true
size(this.canReachNode[]) >= 1
this.unit.father.start < this.k
this.unit.father.start <= arg0.id
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.addEndNewNode(NFAToDNA.NewNode):::ENTER
this.k >= 1
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
arg0 != null
arg0.nodes != null
arg0.mark == true
arg0.start == false
arg0.end == true
size(this.startNewNode[]) == 1
size(this.canReachNode[]) >= 2
this.unit.start != arg0.id
this.unit.father.start < this.k
this.unit.father.start < arg0.id
this.unit.father.end <= this.k
this.unit.father.end <= arg0.id
this.k != arg0.id
===========================================================================
regexpToNFA.K.addEndNewNode(NFAToDNA.NewNode):::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
arg0.nodes == orig(arg0.nodes)
arg0.id == orig(arg0.id)
arg0.mark == orig(arg0.mark)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
size(this.endNewNode[])-1 == orig(size(this.endNewNode[]))
this.k >= 1
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
arg0.nodes != null
arg0.mark == true
arg0.start == false
arg0.end == true
size(this.startNewNode[]) == 1
size(this.endNewNode[]) >= 1
size(this.canReachNode[]) >= 2
this.unit.start != arg0.id
this.unit.father.start < this.k
this.unit.father.start < arg0.id
this.unit.father.end <= this.k
this.unit.father.end <= arg0.id
this.k != arg0.id
===========================================================================
regexpToNFA.K.addStartNewNode(NFAToDNA.NewNode):::ENTER
this.unit.father.start == arg0.id
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] contains no nulls and has only one value, of length 1
this.canReachNode[] elements has only one value
this.canReachNode[].getClass().getName() == [java.lang.Integer]
arg0 has only one value
arg0 != null
arg0.nodes has only one value
arg0.nodes != null
arg0.id == 1
arg0.mark == true
arg0.start == true
arg0.end == false
size(this.canReachNode[]) == 1
this.unit.start >= arg0.id
this.unit.end > arg0.id
this.unit.father.start < this.k
this.unit.father.end <= this.k
this.k >= arg0.id
===========================================================================
regexpToNFA.K.addStartNewNode(NFAToDNA.NewNode):::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == arg0.id
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
arg0.nodes == orig(arg0.nodes)
arg0.id == orig(arg0.id)
arg0.mark == orig(arg0.mark)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
size(this.startNewNode[])-1 == orig(size(this.startNewNode[]))
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] contains no nulls and has only one value, of length 1
this.canReachNode[] elements has only one value
this.canReachNode[].getClass().getName() == [java.lang.Integer]
arg0.nodes has only one value
arg0.nodes != null
arg0.id == 1
arg0.mark == true
arg0.start == true
arg0.end == false
size(this.startNewNode[]) == 1
size(this.canReachNode[]) == 1
this.unit.start >= arg0.id
this.unit.end > arg0.id
this.unit.father.start < this.k
this.unit.father.end <= this.k
this.k >= arg0.id
===========================================================================
regexpToNFA.K.getCanReach(java.util.Hashtable):::ENTER
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
arg0 has only one value
arg0 != null
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getCanReach(java.util.Hashtable):::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getCanReachNode():::ENTER
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getCanReachNode():::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == return
this.canReachNode[] == orig(this.canReachNode[])
return == orig(this.canReachNode)
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(return[]) >= 2
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getEndNewNode():::ENTER
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getEndNewNode():::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == return
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
return == orig(this.endNewNode)
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(return[]) one of { 1, 4, 17 }
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getK():::ENTER
this.k >= 1
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getK():::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == return
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
return == orig(this.k)
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
return >= 1
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
this.unit.start >= return
this.unit.end > return
this.unit.father.start < return
this.unit.father.end <= return
===========================================================================
regexpToNFA.K.getStartNewNode():::ENTER
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.getStartNewNode():::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == return
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
return == orig(this.startNewNode)
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [java.lang.Integer]
return[].getClass().getName() elements == java.lang.Integer.class
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
size(return[]) == 1
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.handle(java.util.LinkedList, java.util.Hashtable):::ENTER
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
arg0 has only one value
arg0 != null
arg0[] contains no nulls and has only one value, of length 32
arg0[] elements != null
arg0[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
arg0[].getClass().getName() elements == NFAToDNA.NewNode.class
arg1 has only one value
arg1 != null
size(arg0[]) == 32
this.unit.father.start < this.k
this.unit.father.end <= this.k
===========================================================================
regexpToNFA.K.handle(java.util.LinkedList, java.util.Hashtable):::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(this.k)
this.startNewNode == orig(this.startNewNode)
this.endNewNode == orig(this.endNewNode)
this.canReachNode == orig(this.canReachNode)
arg0[] == orig(arg0[])
size(this.startNewNode[])-1 == orig(size(this.startNewNode[]))
this.startNewNode[] contains no nulls and has only one value, of length 1
this.startNewNode[].getClass().getName() == [java.lang.Integer]
arg0[] contains no nulls and has only one value, of length 32
arg0[] elements != null
arg0[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
arg0[].getClass().getName() elements == NFAToDNA.NewNode.class
size(this.startNewNode[]) == 1
size(this.endNewNode[]) one of { 1, 4, 17 }
size(this.canReachNode[]) >= 2
this.unit.father.start < this.k
this.unit.father.end <= this.k
size(this.endNewNode[])-1 >= orig(size(this.endNewNode[]))
size(this.canReachNode[])-1 > orig(size(this.canReachNode[]))
===========================================================================
regexpToNFA.K.setK(int):::ENTER
this.k == 0
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
this.unit.start > this.k
this.unit.start >= arg0
this.unit.end > arg0
this.unit.father.start < arg0
this.unit.father.end <= arg0
this.k < arg0
===========================================================================
regexpToNFA.K.setK(int):::EXIT
this.unit == orig(this.unit)
this.unit.start == orig(this.unit.start)
this.unit.end == orig(this.unit.end)
this.unit.nextUnit == orig(this.unit.nextUnit)
this.unit.father == orig(this.unit.father)
this.unit.father.start == orig(this.unit.father.start)
this.unit.father.end == orig(this.unit.father.end)
this.unit.father.nextUnit == orig(this.unit.father.nextUnit)
this.unit.father.father == orig(this.unit.father.father)
this.unit.father.innerFirstUnit == orig(this.unit.father.innerFirstUnit)
this.unit.father.innerFirstUnit[] == orig(this.unit.father.innerFirstUnit[])
this.unit.father.tranChar == orig(this.unit.father.tranChar)
this.unit.father.tranChar.toString == orig(this.unit.father.tranChar.toString)
this.unit.father.state == orig(this.unit.father.state)
this.unit.innerFirstUnit == orig(this.unit.innerFirstUnit)
this.unit.innerFirstUnit[] == orig(this.unit.innerFirstUnit[])
this.unit.tranChar == orig(this.unit.tranChar)
this.unit.tranChar.toString == orig(this.unit.tranChar.toString)
this.unit.state == orig(this.unit.state)
this.k == orig(arg0)
this.startNewNode == orig(this.startNewNode)
this.startNewNode[] == orig(this.startNewNode[])
this.endNewNode == orig(this.endNewNode)
this.endNewNode[] == orig(this.endNewNode[])
this.canReachNode == orig(this.canReachNode)
this.canReachNode[] == orig(this.canReachNode[])
this.startNewNode[] == []
this.startNewNode[].getClass().getName() == []
this.endNewNode[] == []
this.endNewNode[].getClass().getName() == []
this.canReachNode[] == []
this.canReachNode[].getClass().getName() == []
this.unit.start > orig(this.k)
this.unit.end > orig(this.k)
this.unit.father.start < this.k
this.unit.father.end <= this.k
this.k > orig(this.k)
===========================================================================
regexpToNFA.MainClass:::OBJECT
this has only one value
this.regexp != null
this.regexp.toString one of { "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))", "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)" }
this.firstUnit.start == 1
this.firstUnit.end == 2
this.firstUnit.nextUnit == null
this.firstUnit.father == null
this.firstUnit.innerFirstUnit has only one value
this.firstUnit.innerFirstUnit != null
this.firstUnit.innerFirstUnit[] elements != null
this.firstUnit.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.firstUnit.tranChar has only one value
this.firstUnit.tranChar != null
this.firstUnit.tranChar.toString == ""
this.firstUnit.state == 0
this.unitList has only one value
this.unitList != null
this.unitList[] elements != null
this.unitList[].getClass().getName() elements == regexpToNFA.Unit.class
this.transferList has only one value
this.transferList != null
this.transferList[] elements != null
this.transferList[].getClass().getName() elements == regexpToNFA.Transfer.class
this.nodeList has only one value
this.nodeList != null
this.inputChar has only one value
this.inputChar != null
this.handledUnit has only one value
this.handledUnit != null
this.handledUnit[] elements != null
this.handledUnit[].getClass().getName() elements == java.lang.Integer.class
this.i >= 0
this.note > this.firstUnit.start
this.note > this.firstUnit.end
===========================================================================
regexpToNFA.MainClass.MainClass(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
===========================================================================
regexpToNFA.MainClass.MainClass(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] contains no nulls and has only one value, of length 117
this.transferList[].getClass().getName() == [regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer]
this.handledUnit[] contains no nulls and has only one value, of length 51
this.handledUnit[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.i == 166
arg0.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(this.transferList[]) == 117
size(this.handledUnit[]) == 51
===========================================================================
regexpToNFA.MainClass.addNodeOfNode(int, int, java.lang.String):::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
arg0 >= 1
arg1 >= 2
arg2 != null
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
this.note > arg0
this.note > arg1
this.firstUnit.start <= arg0
this.firstUnit.start < arg1
this.firstUnit.end != arg0
this.firstUnit.end <= arg1
arg0 != arg1
===========================================================================
regexpToNFA.MainClass.addNodeOfNode(int, int, java.lang.String):::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
arg2.toString == orig(arg2.toString)
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
this.note > orig(arg0)
this.note > orig(arg1)
this.firstUnit.start <= orig(arg0)
this.firstUnit.start < orig(arg1)
this.firstUnit.end != orig(arg0)
this.firstUnit.end <= orig(arg1)
===========================================================================
regexpToNFA.MainClass.createNFA():::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
===========================================================================
regexpToNFA.MainClass.createNFA():::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.i == orig(this.i)
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] contains no nulls and has only one value, of length 117
this.transferList[].getClass().getName() == [regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer]
this.handledUnit[] contains no nulls and has only one value, of length 51
this.handledUnit[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(this.transferList[]) == 117
size(this.handledUnit[]) == 51
===========================================================================
regexpToNFA.MainClass.createNFA(regexpToNFA.Unit):::ENTER
this.firstUnit.tranChar == arg0.father.tranChar
this.firstUnit.state == arg0.father.state
this.firstUnit.state == arg0.state
arg0.nextUnit.father == arg0.father
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
arg0 != null
arg0.nextUnit.father != null
arg0.nextUnit.innerFirstUnit != null
arg0.nextUnit.innerFirstUnit[] == []
arg0.nextUnit.innerFirstUnit[].getClass().getName() == []
arg0.nextUnit.tranChar != null
arg0.nextUnit.state == 0
arg0.father.start >= 1
arg0.father.end >= 2
arg0.father.nextUnit == null
arg0.father.innerFirstUnit != null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar has only one value
arg0.father.tranChar != null
arg0.father.tranChar.toString == ""
arg0.father.state == 0
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] elements != null
arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.tranChar != null
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(arg0.father.innerFirstUnit[]) one of { 1, 4, 14 }
this.note > arg0.start
this.note > arg0.end
this.note > arg0.nextUnit.start
this.note > arg0.nextUnit.end
this.note > arg0.father.start
this.note > arg0.father.end
this.firstUnit.start <= arg0.start
this.firstUnit.start < arg0.end
this.firstUnit.start < arg0.nextUnit.start
this.firstUnit.start < arg0.nextUnit.end
this.firstUnit.start <= arg0.father.start
this.firstUnit.start < arg0.father.end
this.firstUnit.end != arg0.start
arg0.end % this.firstUnit.end == 0
this.firstUnit.end <= arg0.end
this.firstUnit.end < arg0.nextUnit.start
arg0.nextUnit.end % this.firstUnit.end == 0
this.firstUnit.end < arg0.nextUnit.end
this.firstUnit.end != arg0.father.start
arg0.father.end % this.firstUnit.end == 0
this.firstUnit.end <= arg0.father.end
arg0.start - arg0.end + 1 == 0
arg0.start - arg0.nextUnit.start + 2 == 0
arg0.start - arg0.nextUnit.end + 3 == 0
arg0.start > arg0.father.start
arg0.start > arg0.father.end
arg0.end - arg0.nextUnit.start + 1 == 0
arg0.end - arg0.nextUnit.end + 2 == 0
arg0.end > arg0.father.start
arg0.end > arg0.father.end
arg0.nextUnit.start - arg0.nextUnit.end + 1 == 0
arg0.nextUnit.start > arg0.father.start
arg0.nextUnit.start > arg0.father.end
arg0.nextUnit.end > arg0.father.start
arg0.nextUnit.end > arg0.father.end
arg0.father.start - arg0.father.end + 1 == 0
===========================================================================
regexpToNFA.MainClass.createNFA(regexpToNFA.Unit):::EXIT172
this.firstUnit.tranChar == orig(arg0.father.tranChar)
this.transferList[] == orig(this.transferList[])
this.handledUnit[] == orig(this.handledUnit[])
arg0.state == orig(arg0.father.state)
arg0.father != null
size(arg0.innerFirstUnit[]) one of { 0, 1, 4 }
this.firstUnit.start < arg0.start
this.firstUnit.end < arg0.start
this.firstUnit.end < arg0.end
arg0.nextUnit.start - arg0.father.start - 4 == 0
arg0.nextUnit.start - arg0.father.end - 3 == 0
arg0.nextUnit.end - arg0.father.start - 5 == 0
arg0.nextUnit.end - arg0.father.end - 4 == 0
===========================================================================
regexpToNFA.MainClass.createNFA(regexpToNFA.Unit):::EXIT204
size(this.transferList[])-1 > orig(size(this.transferList[]))
size(this.handledUnit[])-1 >= orig(size(this.handledUnit[]))
===========================================================================
regexpToNFA.MainClass.createNFA(regexpToNFA.Unit):::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == arg0.father.tranChar
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == arg0.state
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.i == orig(this.i)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
arg0.nextUnit == orig(arg0.nextUnit)
arg0.nextUnit.start == orig(arg0.nextUnit.start)
arg0.nextUnit.end == orig(arg0.nextUnit.end)
arg0.nextUnit.nextUnit == orig(arg0.nextUnit.nextUnit)
arg0.nextUnit.father == arg0.father
arg0.nextUnit.father == orig(arg0.nextUnit.father)
arg0.nextUnit.innerFirstUnit == orig(arg0.nextUnit.innerFirstUnit)
arg0.nextUnit.innerFirstUnit[] == orig(arg0.nextUnit.innerFirstUnit[])
arg0.nextUnit.tranChar == orig(arg0.nextUnit.tranChar)
arg0.nextUnit.tranChar.toString == orig(arg0.nextUnit.tranChar.toString)
arg0.nextUnit.state == orig(arg0.nextUnit.state)
arg0.father == orig(arg0.father)
arg0.father.start == orig(arg0.father.start)
arg0.father.end == orig(arg0.father.end)
arg0.father.nextUnit == orig(arg0.father.nextUnit)
arg0.father.father == orig(arg0.father.father)
arg0.father.innerFirstUnit == orig(arg0.father.innerFirstUnit)
arg0.father.innerFirstUnit[] == orig(arg0.father.innerFirstUnit[])
arg0.father.tranChar == orig(arg0.father.tranChar)
arg0.father.tranChar.toString == orig(arg0.father.tranChar.toString)
arg0.father.state == arg0.state
arg0.father.state == orig(arg0.father.state)
arg0.innerFirstUnit == orig(arg0.innerFirstUnit)
arg0.innerFirstUnit[] == orig(arg0.innerFirstUnit[])
arg0.tranChar == orig(arg0.tranChar)
arg0.tranChar.toString == orig(arg0.tranChar.toString)
arg0.state == orig(this.firstUnit.state)
arg0.state == orig(arg0.state)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (arg0.father != null)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (arg0.nextUnit.end - arg0.father.end - 4 == 0)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (arg0.nextUnit.end - arg0.father.start - 5 == 0)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (arg0.nextUnit.start - arg0.father.end - 3 == 0)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (arg0.nextUnit.start - arg0.father.start - 4 == 0)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (size(arg0.innerFirstUnit[]) one of { 0, 1, 4 })
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (this.firstUnit.end < arg0.end)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (this.firstUnit.end < arg0.start)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (this.firstUnit.start < arg0.start)
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (this.handledUnit[] == orig(this.handledUnit[]))
(size(this.transferList[]) == orig(size(this.transferList[])))  ==>  (this.transferList[] == orig(this.transferList[]))
(size(this.transferList[])-1 > orig(size(this.transferList[])))  <==>  (size(this.handledUnit[])-1 >= orig(size(this.handledUnit[])))
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
arg0.nextUnit.father != null
arg0.nextUnit.innerFirstUnit != null
arg0.nextUnit.innerFirstUnit[] == []
arg0.nextUnit.innerFirstUnit[].getClass().getName() == []
arg0.nextUnit.tranChar != null
arg0.nextUnit.state == 0
arg0.father.start >= 1
arg0.father.end >= 2
arg0.father.nextUnit == null
arg0.father.innerFirstUnit != null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar has only one value
arg0.father.tranChar != null
arg0.father.tranChar.toString == ""
arg0.father.state == 0
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] elements != null
arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.tranChar != null
arg0.state == 0
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(arg0.father.innerFirstUnit[]) one of { 1, 4, 14 }
this.note > arg0.start
this.note > arg0.end
this.note > arg0.nextUnit.start
this.note > arg0.nextUnit.end
this.note > arg0.father.start
this.note > arg0.father.end
this.firstUnit.start <= arg0.start
this.firstUnit.start < arg0.end
this.firstUnit.start < arg0.nextUnit.start
this.firstUnit.start < arg0.nextUnit.end
this.firstUnit.start <= arg0.father.start
this.firstUnit.start < arg0.father.end
this.firstUnit.end != arg0.start
arg0.end % this.firstUnit.end == 0
this.firstUnit.end <= arg0.end
this.firstUnit.end < arg0.nextUnit.start
arg0.nextUnit.end % this.firstUnit.end == 0
this.firstUnit.end < arg0.nextUnit.end
this.firstUnit.end != arg0.father.start
arg0.father.end % this.firstUnit.end == 0
this.firstUnit.end <= arg0.father.end
arg0.start - arg0.end + 1 == 0
arg0.start - arg0.nextUnit.start + 2 == 0
arg0.start - arg0.nextUnit.end + 3 == 0
arg0.start > arg0.father.start
arg0.start > arg0.father.end
arg0.end - arg0.nextUnit.start + 1 == 0
arg0.end - arg0.nextUnit.end + 2 == 0
arg0.end > arg0.father.start
arg0.end > arg0.father.end
arg0.nextUnit.start - arg0.nextUnit.end + 1 == 0
arg0.nextUnit.start > arg0.father.start
arg0.nextUnit.start > arg0.father.end
arg0.nextUnit.end > arg0.father.start
arg0.nextUnit.end > arg0.father.end
arg0.father.start - arg0.father.end + 1 == 0
size(this.transferList[]) >= orig(size(this.transferList[]))
size(this.transferList[])-1 != orig(size(this.transferList[]))
size(this.transferList[])-1 >= orig(size(this.transferList[]))-1
size(this.handledUnit[]) >= orig(size(this.handledUnit[]))
size(this.handledUnit[])-1 >= orig(size(this.handledUnit[]))-1
===========================================================================
regexpToNFA.MainClass.getInputChar():::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] contains no nulls and has only one value, of length 117
this.transferList[].getClass().getName() == [regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer]
this.handledUnit[] contains no nulls and has only one value, of length 51
this.handledUnit[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(this.transferList[]) == 117
size(this.handledUnit[]) == 51
===========================================================================
regexpToNFA.MainClass.getInputChar():::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == orig(this.nodeList)
this.inputChar == return
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
return == orig(this.inputChar)
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] contains no nulls and has only one value, of length 117
this.transferList[].getClass().getName() == [regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer]
this.handledUnit[] contains no nulls and has only one value, of length 51
this.handledUnit[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.i == 166
return has only one value
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(this.transferList[]) == 117
size(this.handledUnit[]) == 51
===========================================================================
regexpToNFA.MainClass.getNodeList():::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] contains no nulls and has only one value, of length 117
this.transferList[].getClass().getName() == [regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer]
this.handledUnit[] contains no nulls and has only one value, of length 51
this.handledUnit[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(this.transferList[]) == 117
size(this.handledUnit[]) == 51
===========================================================================
regexpToNFA.MainClass.getNodeList():::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == return
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
return == orig(this.nodeList)
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] contains no nulls and has only one value, of length 117
this.transferList[].getClass().getName() == [regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer, regexpToNFA.Transfer]
this.handledUnit[] contains no nulls and has only one value, of length 51
this.handledUnit[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.i == 166
return has only one value
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(this.transferList[]) == 117
size(this.handledUnit[]) == 51
===========================================================================
regexpToNFA.MainClass.getNowNum():::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
===========================================================================
regexpToNFA.MainClass.getNowNum():::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
return == orig(this.note)
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
this.note - return - 1 == 0
this.firstUnit.start < return
this.firstUnit.end < return
===========================================================================
regexpToNFA.MainClass.h(int, int):::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
arg0 >= 1
arg1 >= 2
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
this.note > arg0
this.note > arg1
this.firstUnit.start <= arg0
this.firstUnit.start < arg1
this.firstUnit.end != arg0
this.firstUnit.end <= arg1
arg0 != arg1
===========================================================================
regexpToNFA.MainClass.h(int, int):::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
size(this.transferList[])-1 == orig(size(this.transferList[]))
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
this.note > orig(arg0)
this.note > orig(arg1)
this.firstUnit.start <= orig(arg0)
this.firstUnit.start < orig(arg1)
this.firstUnit.end != orig(arg0)
this.firstUnit.end <= orig(arg1)
===========================================================================
regexpToNFA.MainClass.h(int, int, java.lang.String):::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
arg0 >= 1
arg1 >= 2
arg2 != null
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
this.note > arg0
this.note > arg1
this.firstUnit.start <= arg0
this.firstUnit.start < arg1
this.firstUnit.end != arg0
this.firstUnit.end <= arg1
arg0 != arg1
===========================================================================
regexpToNFA.MainClass.h(int, int, java.lang.String):::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.innerFirstUnit[] == orig(this.firstUnit.innerFirstUnit[])
this.firstUnit.tranChar == orig(this.firstUnit.tranChar)
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == orig(this.firstUnit.state)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
arg2.toString == orig(arg2.toString)
size(this.transferList[])-1 == orig(size(this.transferList[]))
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit != null
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
this.note > orig(arg0)
this.note > orig(arg1)
this.firstUnit.start <= orig(arg0)
this.firstUnit.start < orig(arg1)
this.firstUnit.end != orig(arg0)
this.firstUnit.end <= orig(arg1)
===========================================================================
regexpToNFA.MainClass.handle():::ENTER
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 1
this.firstUnit == null
this.unitList[] == []
this.unitList[].getClass().getName() == []
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
this.i == 0
===========================================================================
regexpToNFA.MainClass.handle():::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.firstUnit.start == orig(this.note)
this.unitList == orig(this.unitList)
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.note == 103
this.firstUnit has only one value
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
this.i == 166
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
===========================================================================
regexpToNFA.MainClass.handle(regexpToNFA.Unit, regexpToNFA.Unit, int, int):::ENTER
this.firstUnit.start == arg0.father.start
this.firstUnit.end == arg0.father.end
this.firstUnit.innerFirstUnit == arg0.father.innerFirstUnit
this.firstUnit.tranChar == arg0.father.tranChar
this.firstUnit.tranChar == arg0.tranChar
this.firstUnit.tranChar == arg1.father.tranChar
this.firstUnit.state == arg0.father.state
this.firstUnit.state == arg0.state
this.firstUnit.state == arg1.father.state
arg0 == arg1.father
arg0.start == arg1.father.start
arg0.end == arg1.father.end
arg0.father == arg1.father.father
arg0.father.tranChar == arg1.father.tranChar
arg0.father.state == arg1.father.state
arg0.innerFirstUnit == arg1.father.innerFirstUnit
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
arg0.start >= 1
arg0.end >= 2
arg0.nextUnit == null
arg0.father.start == 1
arg0.father.end == 2
arg0.father.nextUnit == null
arg0.father.father == null
arg0.father.innerFirstUnit has only one value
arg0.father.innerFirstUnit != null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar has only one value
arg0.father.tranChar != null
arg0.father.tranChar.toString == ""
arg0.father.state == 0
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] elements != null
arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.tranChar.toString == ""
arg1.nextUnit == null
arg1.father != null
arg1.father.start >= 1
arg1.father.end >= 2
arg1.father.nextUnit == null
arg1.father.innerFirstUnit != null
arg1.father.innerFirstUnit[] elements != null
arg1.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg1.father.tranChar has only one value
arg1.father.tranChar != null
arg1.father.tranChar.toString == ""
arg1.father.state == 0
arg1.innerFirstUnit != null
arg1.innerFirstUnit[] elements != null
arg1.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg1.innerFirstUnit[].getClass().getName() one of { [], [regexpToNFA.Unit] }
arg1.tranChar != null
arg1.state == 0
arg2 one of { 0, 1 }
arg3 one of { 0, 1 }
size(arg1.father.innerFirstUnit[]) >= 1
size(arg1.innerFirstUnit[]) one of { 0, 1 }
this.note > arg0.start
this.note > arg0.end
this.note > arg0.father.start
this.note > arg0.father.end
this.note > arg1.start
this.note > arg1.end
this.note > arg1.father.start
this.note > arg1.father.end
this.firstUnit.start <= arg0.start
this.firstUnit.start < arg0.end
this.firstUnit.start < arg1.start
this.firstUnit.start < arg1.end
this.firstUnit.start <= arg1.father.start
this.firstUnit.start < arg1.father.end
this.firstUnit.end != arg0.start
arg0.end % this.firstUnit.end == 0
this.firstUnit.end <= arg0.end
this.firstUnit.end < arg1.start
arg1.end % this.firstUnit.end == 0
this.firstUnit.end < arg1.end
this.firstUnit.end != arg1.father.start
arg1.father.end % this.firstUnit.end == 0
this.firstUnit.end <= arg1.father.end
arg0.start - arg0.end + 1 == 0
arg0.start > arg0.father.start
arg0.start > arg0.father.end
arg0.start < arg1.start
arg0.start < arg1.end
arg0.start - arg1.father.end + 1 == 0
arg0.end > arg0.father.start
arg0.end % arg0.father.end == 0
arg0.end > arg0.father.end
arg0.end < arg1.start
arg0.end < arg1.end
arg0.end - arg1.father.start - 1 == 0
arg0.father.start < arg1.start
arg0.father.start < arg1.end
arg0.father.start < arg1.father.start
arg0.father.start < arg1.father.end
arg0.father.end < arg1.start
arg0.father.end < arg1.end
arg1.end % arg0.father.end == 0
arg0.father.end < arg1.father.start
arg0.father.end < arg1.father.end
arg1.father.end % arg0.father.end == 0
arg1.start - arg1.end + 1 == 0
arg1.start > arg1.father.start
arg1.start > arg1.father.end
arg1.end > arg1.father.start
arg1.end > arg1.father.end
arg1.father.start - arg1.father.end + 1 == 0
===========================================================================
regexpToNFA.MainClass.handle(regexpToNFA.Unit, regexpToNFA.Unit, int, int):::EXIT142
this.firstUnit == orig(this.firstUnit)
this.firstUnit.state == arg0.state
return.father != null
size(return.innerFirstUnit[]) one of { 0, 1, 4 }
this.firstUnit.start < return.start
this.firstUnit.end < return.start
this.firstUnit.end < return.end
===========================================================================
regexpToNFA.MainClass.handle(regexpToNFA.Unit, regexpToNFA.Unit, int, int):::EXIT156
this.firstUnit == return
this.firstUnit.start == return.start
this.firstUnit.end == return.end
this.firstUnit.innerFirstUnit == return.innerFirstUnit
this.firstUnit.tranChar == return.tranChar
return.father == orig(this.firstUnit)
return.father == orig(arg1)
this.note == 103
this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.unitList[] contains no nulls and has only one value, of length 51
this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
this.i == 166
return has only one value
return.start == 1
return.end == 2
return.father == null
return.innerFirstUnit has only one value
return.innerFirstUnit[] contains no nulls and has only one value, of length 14
return.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return.tranChar has only one value
return.tranChar.toString == ""
orig(this.unitList[]) == []
orig(this.unitList[].getClass().getName()) == []
orig(this.i) == 0
orig(arg2) == 0
orig(arg3) == 0
size(this.firstUnit.innerFirstUnit[]) == 14
size(this.unitList[]) == 51
size(return.innerFirstUnit[]) == 14
===========================================================================
regexpToNFA.MainClass.handle(regexpToNFA.Unit, regexpToNFA.Unit, int, int):::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.firstUnit.start == arg0.father.start
this.firstUnit.start == orig(this.firstUnit.start)
this.firstUnit.end == arg0.father.end
this.firstUnit.end == orig(this.firstUnit.end)
this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit)
this.firstUnit.father == orig(this.firstUnit.father)
this.firstUnit.innerFirstUnit == arg0.father.innerFirstUnit
this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
this.firstUnit.tranChar == arg0.father.tranChar
this.firstUnit.tranChar == arg0.tranChar
this.firstUnit.tranChar == arg1.father.tranChar
this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString)
this.firstUnit.state == return.state
this.unitList == orig(this.unitList)
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
arg0.start == arg1.father.start
arg0.start == return.father.start
arg0.start == orig(arg0.start)
arg0.end == arg1.father.end
arg0.end == return.father.end
arg0.end == orig(arg0.end)
arg0.nextUnit == orig(arg0.nextUnit)
arg0.father == arg1.father.father
arg0.father == return.father.father
arg0.father == orig(arg0.father)
arg0.father.start == orig(this.firstUnit.start)
arg0.father.start == orig(arg0.father.start)
arg0.father.end == orig(this.firstUnit.end)
arg0.father.end == orig(arg0.father.end)
arg0.father.nextUnit == orig(arg0.father.nextUnit)
arg0.father.father == orig(arg0.father.father)
arg0.father.innerFirstUnit == orig(this.firstUnit.innerFirstUnit)
arg0.father.innerFirstUnit == orig(arg0.father.innerFirstUnit)
arg0.father.innerFirstUnit[] == orig(arg0.father.innerFirstUnit[])
arg0.father.tranChar == arg0.tranChar
arg0.father.tranChar == arg1.father.tranChar
arg0.father.tranChar == orig(arg0.father.tranChar)
arg0.father.tranChar.toString == orig(arg0.father.tranChar.toString)
arg0.father.state == arg0.state
arg0.father.state == arg1.nextUnit.state
arg0.father.state == arg1.father.state
arg0.father.state == return.state
arg0.father.state == orig(arg0.father.state)
arg0.innerFirstUnit == arg1.father.innerFirstUnit
arg0.innerFirstUnit == return.father.innerFirstUnit
arg0.innerFirstUnit == orig(arg0.innerFirstUnit)
arg0.tranChar == arg1.father.tranChar
arg0.tranChar == return.father.tranChar
arg0.tranChar == orig(this.firstUnit.tranChar)
arg0.tranChar == orig(arg0.tranChar)
arg0.tranChar.toString == orig(arg0.tranChar.toString)
arg0.state == arg1.nextUnit.state
arg0.state == arg1.father.state
arg0.state == return.father.state
arg0.state == return.state
arg0.state == orig(this.firstUnit.state)
arg0.state == orig(arg0.state)
arg1.start == orig(arg1.start)
arg1.end == orig(arg1.end)
arg1.nextUnit.start == return.start
arg1.nextUnit.end == return.end
arg1.nextUnit.father == arg1.father
arg1.nextUnit.father == return.father
arg1.nextUnit.innerFirstUnit == return.innerFirstUnit
arg1.nextUnit.tranChar == return.tranChar
arg1.nextUnit.state == arg1.father.state
arg1.nextUnit.state == return.state
arg1.father == return.father
arg1.father == orig(arg1.father)
arg1.father.start == orig(arg1.father.start)
arg1.father.end == orig(arg1.father.end)
arg1.father.nextUnit == orig(arg1.father.nextUnit)
arg1.father.father == orig(arg1.father.father)
arg1.father.innerFirstUnit == orig(arg1.father.innerFirstUnit)
arg1.father.tranChar == orig(arg1.father.tranChar)
arg1.father.tranChar.toString == orig(arg1.father.tranChar.toString)
arg1.father.state == return.state
arg1.father.state == orig(arg1.father.state)
arg1.innerFirstUnit == orig(arg1.innerFirstUnit)
arg1.innerFirstUnit[] == orig(arg1.innerFirstUnit[])
arg1.tranChar == orig(arg1.tranChar)
arg1.tranChar.toString == orig(arg1.tranChar.toString)
arg1.state == orig(arg1.state)
return.start == orig(this.note)
return.father == orig(arg0)
(return.father != null)  <==>  (orig(this.firstUnit) != null)
(return.father != null)  <==>  (orig(this.firstUnit) has only one value)
(return.father != null)  <==>  (size(return.innerFirstUnit[]) one of { 0, 1, 4 })
(return.father != null)  <==>  (this.firstUnit.end < return.end)
(return.father != null)  <==>  (this.firstUnit.end < return.start)
(return.father != null)  <==>  (this.firstUnit.start < return.start)
(return.father != null)  ==>  (arg0.end % arg0.father.end == 0)
(return.father != null)  ==>  (arg0.end % orig(this.firstUnit.end) == 0)
(return.father != null)  ==>  (arg0.end % this.firstUnit.end == 0)
(return.father != null)  ==>  (arg0.end - arg1.father.start - 1 == 0)
(return.father != null)  ==>  (arg0.end < arg1.end)
(return.father != null)  ==>  (arg0.end < arg1.nextUnit.end)
(return.father != null)  ==>  (arg0.end < arg1.nextUnit.start)
(return.father != null)  ==>  (arg0.end < arg1.start)
(return.father != null)  ==>  (arg0.end < return.end)
(return.father != null)  ==>  (arg0.end < return.start)
(return.father != null)  ==>  (arg0.end == arg1.father.end)
(return.father != null)  ==>  (arg0.end > arg0.father.end)
(return.father != null)  ==>  (arg0.end > arg0.father.start)
(return.father != null)  ==>  (arg0.end > orig(this.firstUnit.start))
(return.father != null)  ==>  (arg0.end >= 2)
(return.father != null)  ==>  (arg0.end >= orig(this.firstUnit.end))
(return.father != null)  ==>  (arg0.father == arg1.father.father)
(return.father != null)  ==>  (arg0.father.end < arg1.end)
(return.father != null)  ==>  (arg0.father.end < arg1.father.end)
(return.father != null)  ==>  (arg0.father.end < arg1.father.start)
(return.father != null)  ==>  (arg0.father.end < arg1.nextUnit.end)
(return.father != null)  ==>  (arg0.father.end < arg1.nextUnit.start)
(return.father != null)  ==>  (arg0.father.end < arg1.start)
(return.father != null)  ==>  (arg0.father.end < return.end)
(return.father != null)  ==>  (arg0.father.end < return.start)
(return.father != null)  ==>  (arg0.father.father == null)
(return.father != null)  ==>  (arg0.father.innerFirstUnit != null)
(return.father != null)  ==>  (arg0.father.innerFirstUnit == orig(this.firstUnit.innerFirstUnit))
(return.father != null)  ==>  (arg0.father.innerFirstUnit has only one value)
(return.father != null)  ==>  (arg0.father.innerFirstUnit[] elements != null)
(return.father != null)  ==>  (arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (arg0.father.nextUnit == null)
(return.father != null)  ==>  (arg0.father.start < arg1.end)
(return.father != null)  ==>  (arg0.father.start < arg1.father.end)
(return.father != null)  ==>  (arg0.father.start < arg1.father.start)
(return.father != null)  ==>  (arg0.father.start < arg1.nextUnit.end)
(return.father != null)  ==>  (arg0.father.start < arg1.nextUnit.start)
(return.father != null)  ==>  (arg0.father.start < arg1.start)
(return.father != null)  ==>  (arg0.father.start < return.end)
(return.father != null)  ==>  (arg0.father.start < return.start)
(return.father != null)  ==>  (arg0.father.tranChar != null)
(return.father != null)  ==>  (arg0.father.tranChar == arg0.tranChar)
(return.father != null)  ==>  (arg0.father.tranChar == arg1.father.tranChar)
(return.father != null)  ==>  (arg0.father.tranChar has only one value)
(return.father != null)  ==>  (arg0.father.tranChar.toString == "")
(return.father != null)  ==>  (arg0.innerFirstUnit != null)
(return.father != null)  ==>  (arg0.innerFirstUnit == arg1.father.innerFirstUnit)
(return.father != null)  ==>  (arg0.innerFirstUnit[] elements != null)
(return.father != null)  ==>  (arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (arg0.nextUnit == null)
(return.father != null)  ==>  (arg0.start != orig(this.firstUnit.end))
(return.father != null)  ==>  (arg0.start - arg0.end + 1 == 0)
(return.father != null)  ==>  (arg0.start - arg1.father.end + 1 == 0)
(return.father != null)  ==>  (arg0.start < arg1.end)
(return.father != null)  ==>  (arg0.start < arg1.nextUnit.end)
(return.father != null)  ==>  (arg0.start < arg1.nextUnit.start)
(return.father != null)  ==>  (arg0.start < arg1.start)
(return.father != null)  ==>  (arg0.start < return.end)
(return.father != null)  ==>  (arg0.start < return.start)
(return.father != null)  ==>  (arg0.start == arg1.father.start)
(return.father != null)  ==>  (arg0.start > arg0.father.end)
(return.father != null)  ==>  (arg0.start > arg0.father.start)
(return.father != null)  ==>  (arg0.start >= 1)
(return.father != null)  ==>  (arg0.start >= orig(this.firstUnit.start))
(return.father != null)  ==>  (arg0.tranChar != null)
(return.father != null)  ==>  (arg0.tranChar == arg1.father.tranChar)
(return.father != null)  ==>  (arg0.tranChar has only one value)
(return.father != null)  ==>  (arg0.tranChar.toString == "")
(return.father != null)  ==>  (arg1.end % arg0.father.end == 0)
(return.father != null)  ==>  (arg1.end % orig(this.firstUnit.end) == 0)
(return.father != null)  ==>  (arg1.end % this.firstUnit.end == 0)
(return.father != null)  ==>  (arg1.end - arg1.nextUnit.end + 2 == 0)
(return.father != null)  ==>  (arg1.end - arg1.nextUnit.start + 1 == 0)
(return.father != null)  ==>  (arg1.end < return.end)
(return.father != null)  ==>  (arg1.end < return.start)
(return.father != null)  ==>  (arg1.end > arg1.father.end)
(return.father != null)  ==>  (arg1.end > arg1.father.start)
(return.father != null)  ==>  (arg1.end > orig(this.firstUnit.end))
(return.father != null)  ==>  (arg1.end > orig(this.firstUnit.start))
(return.father != null)  ==>  (arg1.father != null)
(return.father != null)  ==>  (arg1.father == return.father)
(return.father != null)  ==>  (arg1.father.end % arg0.father.end == 0)
(return.father != null)  ==>  (arg1.father.end % orig(this.firstUnit.end) == 0)
(return.father != null)  ==>  (arg1.father.end % this.firstUnit.end == 0)
(return.father != null)  ==>  (arg1.father.end < return.end)
(return.father != null)  ==>  (arg1.father.end < return.start)
(return.father != null)  ==>  (arg1.father.end > orig(this.firstUnit.start))
(return.father != null)  ==>  (arg1.father.end >= 2)
(return.father != null)  ==>  (arg1.father.end >= orig(this.firstUnit.end))
(return.father != null)  ==>  (arg1.father.innerFirstUnit != null)
(return.father != null)  ==>  (arg1.father.innerFirstUnit[] elements != null)
(return.father != null)  ==>  (arg1.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (arg1.father.nextUnit == null)
(return.father != null)  ==>  (arg1.father.start != orig(this.firstUnit.end))
(return.father != null)  ==>  (arg1.father.start - arg1.father.end + 1 == 0)
(return.father != null)  ==>  (arg1.father.start < return.end)
(return.father != null)  ==>  (arg1.father.start < return.start)
(return.father != null)  ==>  (arg1.father.start >= 1)
(return.father != null)  ==>  (arg1.father.start >= orig(this.firstUnit.start))
(return.father != null)  ==>  (arg1.father.tranChar != null)
(return.father != null)  ==>  (arg1.father.tranChar has only one value)
(return.father != null)  ==>  (arg1.father.tranChar.toString == "")
(return.father != null)  ==>  (arg1.innerFirstUnit != null)
(return.father != null)  ==>  (arg1.innerFirstUnit[] elements != null)
(return.father != null)  ==>  (arg1.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (arg1.innerFirstUnit[].getClass().getName() one of { [], [regexpToNFA.Unit] })
(return.father != null)  ==>  (arg1.nextUnit.end % arg0.father.end == 0)
(return.father != null)  ==>  (arg1.nextUnit.end % orig(this.firstUnit.end) == 0)
(return.father != null)  ==>  (arg1.nextUnit.end % this.firstUnit.end == 0)
(return.father != null)  ==>  (arg1.nextUnit.end - return.start - 1 == 0)
(return.father != null)  ==>  (arg1.nextUnit.end == return.end)
(return.father != null)  ==>  (arg1.nextUnit.end > arg1.father.end)
(return.father != null)  ==>  (arg1.nextUnit.end > arg1.father.start)
(return.father != null)  ==>  (arg1.nextUnit.end > orig(this.firstUnit.end))
(return.father != null)  ==>  (arg1.nextUnit.end > orig(this.firstUnit.start))
(return.father != null)  ==>  (arg1.nextUnit.father != null)
(return.father != null)  ==>  (arg1.nextUnit.father == arg1.father)
(return.father != null)  ==>  (arg1.nextUnit.father == return.father)
(return.father != null)  ==>  (arg1.nextUnit.innerFirstUnit != null)
(return.father != null)  ==>  (arg1.nextUnit.innerFirstUnit == return.innerFirstUnit)
(return.father != null)  ==>  (arg1.nextUnit.innerFirstUnit[] == [])
(return.father != null)  ==>  (arg1.nextUnit.innerFirstUnit[].getClass().getName() == [])
(return.father != null)  ==>  (arg1.nextUnit.nextUnit == null)
(return.father != null)  ==>  (arg1.nextUnit.start - arg1.nextUnit.end + 1 == 0)
(return.father != null)  ==>  (arg1.nextUnit.start - return.end + 1 == 0)
(return.father != null)  ==>  (arg1.nextUnit.start == return.start)
(return.father != null)  ==>  (arg1.nextUnit.start > arg1.father.end)
(return.father != null)  ==>  (arg1.nextUnit.start > arg1.father.start)
(return.father != null)  ==>  (arg1.nextUnit.start > orig(this.firstUnit.end))
(return.father != null)  ==>  (arg1.nextUnit.start > orig(this.firstUnit.start))
(return.father != null)  ==>  (arg1.nextUnit.tranChar != null)
(return.father != null)  ==>  (arg1.nextUnit.tranChar == return.tranChar)
(return.father != null)  ==>  (arg1.start - arg1.end + 1 == 0)
(return.father != null)  ==>  (arg1.start - arg1.nextUnit.end + 3 == 0)
(return.father != null)  ==>  (arg1.start - arg1.nextUnit.start + 2 == 0)
(return.father != null)  ==>  (arg1.start < return.end)
(return.father != null)  ==>  (arg1.start < return.start)
(return.father != null)  ==>  (arg1.start > arg1.father.end)
(return.father != null)  ==>  (arg1.start > arg1.father.start)
(return.father != null)  ==>  (arg1.start > orig(this.firstUnit.end))
(return.father != null)  ==>  (arg1.start > orig(this.firstUnit.start))
(return.father != null)  ==>  (arg1.tranChar != null)
(return.father != null)  ==>  (arg2 one of { 0, 1 })
(return.father != null)  ==>  (orig(arg0.innerFirstUnit[]) elements != null)
(return.father != null)  ==>  (orig(arg0.innerFirstUnit[].getClass().getName()) elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (orig(arg1.father.innerFirstUnit[]) elements != null)
(return.father != null)  ==>  (orig(arg1.father.innerFirstUnit[].getClass().getName()) elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (orig(arg1.nextUnit) == null)
(return.father != null)  ==>  (orig(arg2) one of { 0, 1 })
(return.father != null)  ==>  (orig(arg3) one of { 0, 1 })
(return.father != null)  ==>  (orig(size(arg1.father.innerFirstUnit[])) >= 1)
(return.father != null)  ==>  (orig(this.firstUnit.father) == null)
(return.father != null)  ==>  (orig(this.firstUnit.innerFirstUnit) != null)
(return.father != null)  ==>  (orig(this.firstUnit.innerFirstUnit) has only one value)
(return.father != null)  ==>  (orig(this.firstUnit.innerFirstUnit[]) elements != null)
(return.father != null)  ==>  (orig(this.firstUnit.innerFirstUnit[].getClass().getName()) elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (orig(this.firstUnit.nextUnit) == null)
(return.father != null)  ==>  (orig(this.firstUnit.tranChar.toString) == "")
(return.father != null)  ==>  (orig(this.unitList[].getClass().getName()) elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (return.end % arg0.father.end == 0)
(return.father != null)  ==>  (return.end % orig(this.firstUnit.end) == 0)
(return.father != null)  ==>  (return.end > orig(this.firstUnit.end))
(return.father != null)  ==>  (return.end > orig(this.firstUnit.start))
(return.father != null)  ==>  (return.father.innerFirstUnit[] elements != null)
(return.father != null)  ==>  (return.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class)
(return.father != null)  ==>  (return.father.nextUnit == null)
(return.father != null)  ==>  (return.father.tranChar.toString == "")
(return.father != null)  ==>  (return.start - return.end + 1 == 0)
(return.father != null)  ==>  (return.start > orig(this.firstUnit.end))
(return.father != null)  ==>  (return.start > orig(this.firstUnit.start))
(return.father != null)  ==>  (size(arg0.innerFirstUnit[]) >= 1)
(return.father != null)  ==>  (size(arg0.innerFirstUnit[]) >= orig(size(arg0.innerFirstUnit[])))
(return.father != null)  ==>  (size(arg0.innerFirstUnit[])-1 <= orig(size(arg0.innerFirstUnit[])))
(return.father != null)  ==>  (size(arg0.innerFirstUnit[])-1 >= orig(size(arg0.innerFirstUnit[]))-1)
(return.father != null)  ==>  (size(arg1.father.innerFirstUnit[]) >= 1)
(return.father != null)  ==>  (size(arg1.father.innerFirstUnit[]) >= orig(size(arg1.father.innerFirstUnit[])))
(return.father != null)  ==>  (size(arg1.father.innerFirstUnit[])-1 % orig(size(arg1.father.innerFirstUnit[])) == 0)
(return.father != null)  ==>  (size(arg1.father.innerFirstUnit[])-1 <= orig(size(arg1.father.innerFirstUnit[])))
(return.father != null)  ==>  (size(arg1.father.innerFirstUnit[])-1 >= orig(size(arg1.father.innerFirstUnit[]))-1)
(return.father != null)  ==>  (size(arg1.innerFirstUnit[]) one of { 0, 1 })
(return.father != null)  ==>  (size(return.father.innerFirstUnit[]) >= 1)
(return.father != null)  ==>  (size(this.firstUnit.innerFirstUnit[]) >= 1)
(return.father != null)  ==>  (size(this.firstUnit.innerFirstUnit[]) >= orig(size(this.firstUnit.innerFirstUnit[])))
(return.father != null)  ==>  (size(this.firstUnit.innerFirstUnit[])-1 <= orig(size(this.firstUnit.innerFirstUnit[])))
(return.father != null)  ==>  (size(this.firstUnit.innerFirstUnit[])-1 >= orig(size(this.firstUnit.innerFirstUnit[]))-1)
(return.father != null)  ==>  (this.firstUnit == orig(this.firstUnit))
(return.father != null)  ==>  (this.firstUnit.end != arg0.start)
(return.father != null)  ==>  (this.firstUnit.end != arg1.father.start)
(return.father != null)  ==>  (this.firstUnit.end < arg1.end)
(return.father != null)  ==>  (this.firstUnit.end < arg1.nextUnit.end)
(return.father != null)  ==>  (this.firstUnit.end < arg1.nextUnit.start)
(return.father != null)  ==>  (this.firstUnit.end < arg1.start)
(return.father != null)  ==>  (this.firstUnit.end <= arg0.end)
(return.father != null)  ==>  (this.firstUnit.end <= arg1.father.end)
(return.father != null)  ==>  (this.firstUnit.father == orig(this.firstUnit.father))
(return.father != null)  ==>  (this.firstUnit.innerFirstUnit == arg0.father.innerFirstUnit)
(return.father != null)  ==>  (this.firstUnit.innerFirstUnit == orig(this.firstUnit.innerFirstUnit))
(return.father != null)  ==>  (this.firstUnit.nextUnit == orig(this.firstUnit.nextUnit))
(return.father != null)  ==>  (this.firstUnit.start < arg0.end)
(return.father != null)  ==>  (this.firstUnit.start < arg1.end)
(return.father != null)  ==>  (this.firstUnit.start < arg1.father.end)
(return.father != null)  ==>  (this.firstUnit.start < arg1.nextUnit.end)
(return.father != null)  ==>  (this.firstUnit.start < arg1.nextUnit.start)
(return.father != null)  ==>  (this.firstUnit.start < arg1.start)
(return.father != null)  ==>  (this.firstUnit.start <= arg0.start)
(return.father != null)  ==>  (this.firstUnit.start <= arg1.father.start)
(return.father != null)  ==>  (this.firstUnit.tranChar == arg0.father.tranChar)
(return.father != null)  ==>  (this.firstUnit.tranChar == arg0.tranChar)
(return.father != null)  ==>  (this.firstUnit.tranChar == arg1.father.tranChar)
(return.father != null)  ==>  (this.firstUnit.tranChar.toString == orig(this.firstUnit.tranChar.toString))
(return.father != null)  ==>  (this.note - arg1.nextUnit.end - 1 == 0)
(return.father != null)  ==>  (this.note - arg1.nextUnit.start - 2 == 0)
(return.father != null)  ==>  (this.note > arg0.end)
(return.father != null)  ==>  (this.note > arg0.father.end)
(return.father != null)  ==>  (this.note > arg0.father.start)
(return.father != null)  ==>  (this.note > arg0.start)
(return.father != null)  ==>  (this.note > arg1.end)
(return.father != null)  ==>  (this.note > arg1.father.end)
(return.father != null)  ==>  (this.note > arg1.father.start)
(return.father != null)  ==>  (this.note > arg1.start)
(return.father != null)  ==>  (this.note > orig(this.firstUnit.end))
(return.father != null)  ==>  (this.note > orig(this.firstUnit.start))
(return.start == 1)  <==>  (orig(this.firstUnit) == null)
(return.start == 1)  <==>  (orig(this.i) == 0)
(return.start == 1)  <==>  (return.end == 2)
(return.start == 1)  <==>  (return.father == null)
(return.start == 1)  <==>  (size(return.innerFirstUnit[]) == 14)
(return.start == 1)  <==>  (this.firstUnit.end == return.end)
(return.start == 1)  <==>  (this.firstUnit.start == return.start)
(return.start == 1)  ==>  (arg2 == 0)
(return.start == 1)  ==>  (arg2 == orig(arg2))
(return.start == 1)  ==>  (orig(arg1) == null)
(return.start == 1)  ==>  (orig(arg2) == 0)
(return.start == 1)  ==>  (orig(arg3) == 0)
(return.start == 1)  ==>  (orig(this.unitList[]) == [])
(return.start == 1)  ==>  (orig(this.unitList[].getClass().getName()) == [])
(return.start == 1)  ==>  (return has only one value)
(return.start == 1)  ==>  (return.father == orig(arg1))
(return.start == 1)  ==>  (return.father == orig(this.firstUnit))
(return.start == 1)  ==>  (return.innerFirstUnit has only one value)
(return.start == 1)  ==>  (return.innerFirstUnit[] contains no nulls and has only one value, of length 14)
(return.start == 1)  ==>  (return.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit])
(return.start == 1)  ==>  (return.tranChar has only one value)
(return.start == 1)  ==>  (return.tranChar.toString == "")
(return.start == 1)  ==>  (size(this.firstUnit.innerFirstUnit[]) == 14)
(return.start == 1)  ==>  (size(this.unitList[]) == 51)
(return.start == 1)  ==>  (this.firstUnit == return)
(return.start == 1)  ==>  (this.firstUnit.innerFirstUnit == return.innerFirstUnit)
(return.start == 1)  ==>  (this.firstUnit.innerFirstUnit[] contains no nulls and has only one value, of length 14)
(return.start == 1)  ==>  (this.firstUnit.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit])
(return.start == 1)  ==>  (this.firstUnit.tranChar == return.tranChar)
(return.start == 1)  ==>  (this.i == 166)
(return.start == 1)  ==>  (this.note == 103)
(return.start == 1)  ==>  (this.unitList[] contains no nulls and has only one value, of length 51)
(return.start == 1)  ==>  (this.unitList[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit])
this.regexp has only one value
this.regexp.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
this.firstUnit has only one value
this.firstUnit != null
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
arg0.start >= 1
arg0.end >= 2
arg0.nextUnit == null
arg0.father.start == 1
arg0.father.end == 2
arg0.father.nextUnit == null
arg0.father.father == null
arg0.father.innerFirstUnit has only one value
arg0.father.innerFirstUnit != null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar has only one value
arg0.father.tranChar != null
arg0.father.tranChar.toString == ""
arg0.father.state == 0
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] elements != null
arg0.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.tranChar has only one value
arg0.tranChar != null
arg0.tranChar.toString == ""
arg0.state == 0
arg1.nextUnit.nextUnit == null
arg1.nextUnit.father != null
arg1.nextUnit.innerFirstUnit != null
arg1.nextUnit.innerFirstUnit[] == []
arg1.nextUnit.innerFirstUnit[].getClass().getName() == []
arg1.nextUnit.tranChar != null
arg1.nextUnit.state == 0
arg1.father != null
arg1.father.start >= 1
arg1.father.end >= 2
arg1.father.nextUnit == null
arg1.father.innerFirstUnit != null
arg1.father.innerFirstUnit[] elements != null
arg1.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg1.father.tranChar has only one value
arg1.father.tranChar != null
arg1.father.tranChar.toString == ""
arg1.father.state == 0
arg1.innerFirstUnit != null
arg1.innerFirstUnit[] elements != null
arg1.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg1.innerFirstUnit[].getClass().getName() one of { [], [regexpToNFA.Unit] }
arg1.tranChar != null
arg1.state == 0
return != null
return.nextUnit == null
return.father.nextUnit == null
return.father.innerFirstUnit[] elements != null
return.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
return.father.tranChar.toString == ""
return.innerFirstUnit != null
return.innerFirstUnit[] elements != null
return.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
return.tranChar != null
return.state == 0
size(this.firstUnit.innerFirstUnit[]) >= 1
size(arg0.innerFirstUnit[]) >= 1
size(arg1.father.innerFirstUnit[]) >= 1
size(arg1.innerFirstUnit[]) one of { 0, 1 }
size(return.father.innerFirstUnit[]) >= 1
this.note > arg0.start
this.note > arg0.end
this.note > arg0.father.start
this.note > arg0.father.end
this.note > arg1.start
this.note > arg1.end
this.note - arg1.nextUnit.start - 2 == 0
this.note - arg1.nextUnit.end - 1 == 0
this.note > arg1.father.start
this.note > arg1.father.end
this.note > return.start
this.note > return.end
this.note > orig(this.firstUnit.start)
this.note > orig(this.firstUnit.end)
this.firstUnit.start <= arg0.start
this.firstUnit.start < arg0.end
this.firstUnit.start < arg1.start
this.firstUnit.start < arg1.end
this.firstUnit.start < arg1.nextUnit.start
this.firstUnit.start < arg1.nextUnit.end
this.firstUnit.start <= arg1.father.start
this.firstUnit.start < arg1.father.end
this.firstUnit.start <= return.start
this.firstUnit.start < return.end
this.firstUnit.end != arg0.start
arg0.end % this.firstUnit.end == 0
this.firstUnit.end <= arg0.end
this.firstUnit.end < arg1.start
arg1.end % this.firstUnit.end == 0
this.firstUnit.end < arg1.end
this.firstUnit.end < arg1.nextUnit.start
arg1.nextUnit.end % this.firstUnit.end == 0
this.firstUnit.end < arg1.nextUnit.end
this.firstUnit.end != arg1.father.start
arg1.father.end % this.firstUnit.end == 0
this.firstUnit.end <= arg1.father.end
this.firstUnit.end != return.start
return.end % this.firstUnit.end == 0
this.firstUnit.end <= return.end
this.i > orig(this.i)
arg0.start - arg0.end + 1 == 0
arg0.start > arg0.father.start
arg0.start > arg0.father.end
arg0.start < arg1.start
arg0.start < arg1.end
arg0.start < arg1.nextUnit.start
arg0.start < arg1.nextUnit.end
arg0.start - arg1.father.end + 1 == 0
arg0.start < return.start
arg0.start < return.end
arg0.start >= orig(this.firstUnit.start)
arg0.start != orig(this.firstUnit.end)
arg0.end > arg0.father.start
arg0.end % arg0.father.end == 0
arg0.end > arg0.father.end
arg0.end < arg1.start
arg0.end < arg1.end
arg0.end < arg1.nextUnit.start
arg0.end < arg1.nextUnit.end
arg0.end - arg1.father.start - 1 == 0
arg0.end < return.start
arg0.end < return.end
arg0.end > orig(this.firstUnit.start)
arg0.end % orig(this.firstUnit.end) == 0
arg0.end >= orig(this.firstUnit.end)
arg0.father.start < arg1.start
arg0.father.start < arg1.end
arg0.father.start < arg1.nextUnit.start
arg0.father.start < arg1.nextUnit.end
arg0.father.start < arg1.father.start
arg0.father.start < arg1.father.end
arg0.father.start < return.start
arg0.father.start < return.end
arg0.father.end < arg1.start
arg0.father.end < arg1.end
arg1.end % arg0.father.end == 0
arg0.father.end < arg1.nextUnit.start
arg0.father.end < arg1.nextUnit.end
arg1.nextUnit.end % arg0.father.end == 0
arg0.father.end < arg1.father.start
arg0.father.end < arg1.father.end
arg1.father.end % arg0.father.end == 0
arg0.father.end < return.start
arg0.father.end < return.end
return.end % arg0.father.end == 0
arg1.start - arg1.end + 1 == 0
arg1.start - arg1.nextUnit.start + 2 == 0
arg1.start - arg1.nextUnit.end + 3 == 0
arg1.start > arg1.father.start
arg1.start > arg1.father.end
arg1.start < return.start
arg1.start < return.end
arg1.start > orig(this.firstUnit.start)
arg1.start > orig(this.firstUnit.end)
arg1.end - arg1.nextUnit.start + 1 == 0
arg1.end - arg1.nextUnit.end + 2 == 0
arg1.end > arg1.father.start
arg1.end > arg1.father.end
arg1.end < return.start
arg1.end < return.end
arg1.end > orig(this.firstUnit.start)
arg1.end % orig(this.firstUnit.end) == 0
arg1.end > orig(this.firstUnit.end)
arg1.nextUnit.start - arg1.nextUnit.end + 1 == 0
arg1.nextUnit.start > arg1.father.start
arg1.nextUnit.start > arg1.father.end
arg1.nextUnit.start - return.end + 1 == 0
arg1.nextUnit.start > orig(this.firstUnit.start)
arg1.nextUnit.start > orig(this.firstUnit.end)
arg1.nextUnit.end > arg1.father.start
arg1.nextUnit.end > arg1.father.end
arg1.nextUnit.end - return.start - 1 == 0
arg1.nextUnit.end > orig(this.firstUnit.start)
arg1.nextUnit.end % orig(this.firstUnit.end) == 0
arg1.nextUnit.end > orig(this.firstUnit.end)
arg1.father.start - arg1.father.end + 1 == 0
arg1.father.start < return.start
arg1.father.start < return.end
arg1.father.start >= orig(this.firstUnit.start)
arg1.father.start != orig(this.firstUnit.end)
arg1.father.end < return.start
arg1.father.end < return.end
arg1.father.end > orig(this.firstUnit.start)
arg1.father.end % orig(this.firstUnit.end) == 0
arg1.father.end >= orig(this.firstUnit.end)
return.start - return.end + 1 == 0
return.start > orig(this.firstUnit.start)
return.start > orig(this.firstUnit.end)
return.end > orig(this.firstUnit.start)
return.end % orig(this.firstUnit.end) == 0
return.end > orig(this.firstUnit.end)
size(this.firstUnit.innerFirstUnit[]) >= orig(size(this.firstUnit.innerFirstUnit[]))
size(this.firstUnit.innerFirstUnit[])-1 <= orig(size(this.firstUnit.innerFirstUnit[]))
size(this.firstUnit.innerFirstUnit[])-1 >= orig(size(this.firstUnit.innerFirstUnit[]))-1
size(this.unitList[])-1 >= orig(size(this.unitList[]))
size(arg0.innerFirstUnit[]) >= orig(size(arg0.innerFirstUnit[]))
size(arg0.innerFirstUnit[])-1 <= orig(size(arg0.innerFirstUnit[]))
size(arg0.innerFirstUnit[])-1 >= orig(size(arg0.innerFirstUnit[]))-1
size(arg1.father.innerFirstUnit[]) >= orig(size(arg1.father.innerFirstUnit[]))
size(arg1.father.innerFirstUnit[])-1 % orig(size(arg1.father.innerFirstUnit[])) == 0
size(arg1.father.innerFirstUnit[])-1 <= orig(size(arg1.father.innerFirstUnit[]))
size(arg1.father.innerFirstUnit[])-1 >= orig(size(arg1.father.innerFirstUnit[]))-1
===========================================================================
regexpToNFA.MainClass.initRegexp():::ENTER
this.regexp has only one value
this.regexp.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
this.note == 1
this.firstUnit == null
this.unitList[] == []
this.unitList[].getClass().getName() == []
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
this.i == 0
===========================================================================
regexpToNFA.MainClass.initRegexp():::EXIT
this.regexp == orig(this.regexp)
this.regexp.toString == orig(this.regexp.toString)
this.note == orig(this.note)
this.firstUnit == orig(this.firstUnit)
this.unitList == orig(this.unitList)
this.unitList[] == orig(this.unitList[])
this.transferList == orig(this.transferList)
this.transferList[] == orig(this.transferList[])
this.nodeList == orig(this.nodeList)
this.inputChar == orig(this.inputChar)
this.handledUnit == orig(this.handledUnit)
this.handledUnit[] == orig(this.handledUnit[])
this.i == orig(this.i)
this.regexp has only one value
this.regexp.toString == "(\\bmain\\c)|(\\()|(\\))|(,)|(;)|(==)|(\\+\\+)|({)|(})|(\\bint\\c)|(\\bif\\c)|(\\belse\\c)|(=)|(\\+|-|\\*|/)"
this.note == 1
this.firstUnit == null
this.unitList[] == []
this.unitList[].getClass().getName() == []
this.transferList[] == []
this.transferList[].getClass().getName() == []
this.handledUnit[] == []
this.handledUnit[].getClass().getName() == []
this.i == 0
return has only one value
return.toString == "((\\b)(m)(a)(i)(n)(\\c))|((\\())|((\\)))|((,))|((;))|((=)(=))|((\\+)(\\+))|(({))|((}))|((\\b)(i)(n)(t)(\\c))|((\\b)(i)(f)(\\c))|((\\b)(e)(l)(s)(e)(\\c))|((=))|((\\+)|(-)|(\\*)|(/))"
===========================================================================
regexpToNFA.ManagerK:::CLASS
regexpToNFA.ManagerK.en has only one value
regexpToNFA.ManagerK.en != null
regexpToNFA.ManagerK.en[] elements != null
regexpToNFA.ManagerK.en[].getClass().getName() elements == regexpToNFA.K.class
===========================================================================
regexpToNFA.ManagerK.addUnit(regexpToNFA.K):::ENTER
arg0 != null
arg0.unit != null
arg0.unit.nextUnit == null
arg0.unit.innerFirstUnit != null
arg0.unit.innerFirstUnit[] elements != null
arg0.unit.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.unit.tranChar has only one value
arg0.unit.tranChar != null
arg0.unit.tranChar.toString == ""
arg0.unit.state == 0
arg0.k == 0
arg0.startNewNode != null
arg0.startNewNode[] == []
arg0.startNewNode[].getClass().getName() == []
arg0.endNewNode != null
arg0.endNewNode[] == []
arg0.endNewNode[].getClass().getName() == []
arg0.canReachNode != null
arg0.canReachNode[] == []
arg0.canReachNode[].getClass().getName() == []
size(arg0.unit.innerFirstUnit[]) one of { 1, 4, 14 }
regexpToNFA.ManagerK.count_k > arg0.k
arg0.unit.start - arg0.unit.end + 1 == 0
===========================================================================
regexpToNFA.ManagerK.addUnit(regexpToNFA.K):::EXIT
regexpToNFA.ManagerK.en == orig(regexpToNFA.ManagerK.en)
arg0.unit == orig(arg0.unit)
arg0.unit.start == orig(arg0.unit.start)
arg0.unit.end == orig(arg0.unit.end)
arg0.unit.nextUnit == orig(arg0.unit.nextUnit)
arg0.unit.father == orig(arg0.unit.father)
arg0.unit.innerFirstUnit == orig(arg0.unit.innerFirstUnit)
arg0.unit.innerFirstUnit[] == orig(arg0.unit.innerFirstUnit[])
arg0.unit.tranChar == orig(arg0.unit.tranChar)
arg0.unit.tranChar.toString == orig(arg0.unit.tranChar.toString)
arg0.unit.state == orig(arg0.unit.state)
arg0.k == orig(regexpToNFA.ManagerK.count_k)
arg0.startNewNode == orig(arg0.startNewNode)
arg0.startNewNode[] == orig(arg0.startNewNode[])
arg0.endNewNode == orig(arg0.endNewNode)
arg0.endNewNode[] == orig(arg0.endNewNode[])
arg0.canReachNode == orig(arg0.canReachNode)
arg0.canReachNode[] == orig(arg0.canReachNode[])
size(regexpToNFA.ManagerK.en[])-1 == orig(size(regexpToNFA.ManagerK.en[]))
arg0.unit != null
arg0.unit.nextUnit == null
arg0.unit.innerFirstUnit != null
arg0.unit.innerFirstUnit[] elements != null
arg0.unit.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.unit.tranChar has only one value
arg0.unit.tranChar != null
arg0.unit.tranChar.toString == ""
arg0.unit.state == 0
arg0.startNewNode != null
arg0.startNewNode[] == []
arg0.startNewNode[].getClass().getName() == []
arg0.endNewNode != null
arg0.endNewNode[] == []
arg0.endNewNode[].getClass().getName() == []
arg0.canReachNode != null
arg0.canReachNode[] == []
arg0.canReachNode[].getClass().getName() == []
size(arg0.unit.innerFirstUnit[]) one of { 1, 4, 14 }
regexpToNFA.ManagerK.count_k - arg0.k - 1 == 0
regexpToNFA.ManagerK.count_k > orig(arg0.k)
arg0.unit.start - arg0.unit.end + 1 == 0
arg0.k > orig(arg0.k)
===========================================================================
regexpToNFA.ManagerK.getEn():::ENTER
regexpToNFA.ManagerK.count_k == 16
regexpToNFA.ManagerK.en[] contains no nulls and has only one value, of length 15
regexpToNFA.ManagerK.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
size(regexpToNFA.ManagerK.en[]) == 15
===========================================================================
regexpToNFA.ManagerK.getEn():::EXIT
regexpToNFA.ManagerK.count_k == orig(regexpToNFA.ManagerK.count_k)
regexpToNFA.ManagerK.en == return
regexpToNFA.ManagerK.en == orig(regexpToNFA.ManagerK.en)
regexpToNFA.ManagerK.en[] == orig(regexpToNFA.ManagerK.en[])
regexpToNFA.ManagerK.count_k == 16
regexpToNFA.ManagerK.en[] contains no nulls and has only one value, of length 15
regexpToNFA.ManagerK.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
return[] contains no nulls and has only one value, of length 15
return[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
return[].getClass().getName() elements == regexpToNFA.K.class
size(regexpToNFA.ManagerK.en[]) == 15
size(return[]) == 15
===========================================================================
regexpToNFA.ManagerK.handle(java.util.LinkedList, java.util.Hashtable):::ENTER
regexpToNFA.ManagerK.count_k == 16
regexpToNFA.ManagerK.en[] contains no nulls and has only one value, of length 15
regexpToNFA.ManagerK.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 32
arg0[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
arg0[].getClass().getName() elements == NFAToDNA.NewNode.class
arg1 has only one value
size(regexpToNFA.ManagerK.en[]) == 15
size(arg0[]) == 32
===========================================================================
regexpToNFA.ManagerK.handle(java.util.LinkedList, java.util.Hashtable):::EXIT
regexpToNFA.ManagerK.count_k == orig(regexpToNFA.ManagerK.count_k)
regexpToNFA.ManagerK.en == orig(regexpToNFA.ManagerK.en)
regexpToNFA.ManagerK.en[] == orig(regexpToNFA.ManagerK.en[])
arg0[] == orig(arg0[])
regexpToNFA.ManagerK.count_k == 16
regexpToNFA.ManagerK.en[] contains no nulls and has only one value, of length 15
regexpToNFA.ManagerK.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
arg0[] contains no nulls and has only one value, of length 32
arg0[].getClass().getName() == [NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode, NFAToDNA.NewNode]
arg0[].getClass().getName() elements == NFAToDNA.NewNode.class
size(regexpToNFA.ManagerK.en[]) == 15
===========================================================================
regexpToNFA.ManagerK.printK():::ENTER
regexpToNFA.ManagerK.count_k == 16
regexpToNFA.ManagerK.en[] contains no nulls and has only one value, of length 15
regexpToNFA.ManagerK.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
size(regexpToNFA.ManagerK.en[]) == 15
===========================================================================
regexpToNFA.ManagerK.printK():::EXIT
regexpToNFA.ManagerK.count_k == orig(regexpToNFA.ManagerK.count_k)
regexpToNFA.ManagerK.en == orig(regexpToNFA.ManagerK.en)
regexpToNFA.ManagerK.en[] == orig(regexpToNFA.ManagerK.en[])
regexpToNFA.ManagerK.count_k == 16
regexpToNFA.ManagerK.en[] contains no nulls and has only one value, of length 15
regexpToNFA.ManagerK.en[].getClass().getName() == [regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K, regexpToNFA.K]
size(regexpToNFA.ManagerK.en[]) == 15
===========================================================================
regexpToNFA.Node:::OBJECT
this.value >= 1
this.enableReachValues != null
===========================================================================
regexpToNFA.Node.Node(int):::ENTER
===========================================================================
regexpToNFA.Node.Node(int):::EXIT
this.value == orig(arg0)
===========================================================================
regexpToNFA.Node.addEnableReachValue(int, java.lang.String):::ENTER
arg0 >= 2
arg1 != null
this.value != arg0
===========================================================================
regexpToNFA.Node.addEnableReachValue(int, java.lang.String):::EXIT
this.value == orig(this.value)
this.enableReachValues == orig(this.enableReachValues)
arg1.toString == orig(arg1.toString)
this.value != orig(arg0)
===========================================================================
regexpToNFA.Node.getEnableReachValues():::ENTER
===========================================================================
regexpToNFA.Node.getEnableReachValues():::EXIT
this.value == orig(this.value)
this.enableReachValues == return
return == orig(this.enableReachValues)
return != null
===========================================================================
regexpToNFA.Node.getNodeMove(java.lang.String):::ENTER
arg0 != null
===========================================================================
regexpToNFA.Node.getNodeMove(java.lang.String):::EXIT
this.value == orig(this.value)
this.enableReachValues == orig(this.enableReachValues)
arg0.toString == orig(arg0.toString)
return != null
===========================================================================
regexpToNFA.Node.getValue():::ENTER
this has only one value
this.value == 1
this.enableReachValues has only one value
===========================================================================
regexpToNFA.Node.getValue():::EXIT
this.value == return
this.enableReachValues == orig(this.enableReachValues)
return == orig(this.value)
this.enableReachValues has only one value
return == 1
===========================================================================
regexpToNFA.Syntax:::CLASS
regexpToNFA.Syntax.closure == 42
regexpToNFA.Syntax.positiveClosure == 43
regexpToNFA.Syntax.or == 124
regexpToNFA.Syntax.transMean == 92
regexpToNFA.Syntax.keyChar has only one value
regexpToNFA.Syntax.keyChar != null
regexpToNFA.Syntax.keyChar[] == [42, 43, 40, 41, 124, 40, 41, 63]
regexpToNFA.Syntax.includeLeft == 91
regexpToNFA.Syntax.includeRight == 93
regexpToNFA.Syntax.lastChar >= 0
regexpToNFA.Syntax.nextChar >= 0
regexpToNFA.Syntax.noPlace has only one value
regexpToNFA.Syntax.noPlace != null
regexpToNFA.Syntax.noPlace.getClass().getName() == java.lang.String[].class
regexpToNFA.Syntax.noPlace[] contains no nulls and has only one value, of length 2
regexpToNFA.Syntax.noPlace[] elements != null
regexpToNFA.Syntax.noPlace[].getClass().getName() == [java.lang.String, java.lang.String]
regexpToNFA.Syntax.noPlace[].getClass().getName() elements == java.lang.String.class
regexpToNFA.Syntax.noPlace[].toString == [\b, \c]
regexpToNFA.Syntax.noPlace[].toString elements one of { "\\b", "\\c" }
regexpToNFA.Syntax.keyCharForS has only one value
regexpToNFA.Syntax.keyCharForS != null
regexpToNFA.Syntax.keyCharForS[] == [45]
regexpToNFA.Syntax.keyCharForS[] elements == 45
size(regexpToNFA.Syntax.keyChar[]) == 8
size(regexpToNFA.Syntax.noPlace[]) == 2
size(regexpToNFA.Syntax.keyCharForS[]) == 1
regexpToNFA.Syntax.transMean != regexpToNFA.Syntax.lastChar
regexpToNFA.Syntax.includeLeft != regexpToNFA.Syntax.lastChar
===========================================================================
regexpToNFA.Syntax.isIncludeLeft(char):::ENTER
regexpToNFA.Syntax.lastChar == 0
regexpToNFA.Syntax.nextChar == 0
regexpToNFA.Syntax.transMean != arg0
regexpToNFA.Syntax.keyChar[] elements > regexpToNFA.Syntax.lastChar
regexpToNFA.Syntax.includeLeft != arg0
regexpToNFA.Syntax.lastChar < arg0
===========================================================================
regexpToNFA.Syntax.isIncludeLeft(char):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.nextChar == orig(regexpToNFA.Syntax.nextChar)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
regexpToNFA.Syntax.lastChar == 0
regexpToNFA.Syntax.nextChar == 0
return == false
regexpToNFA.Syntax.transMean != orig(arg0)
regexpToNFA.Syntax.keyChar[] elements > regexpToNFA.Syntax.lastChar
regexpToNFA.Syntax.includeLeft != orig(arg0)
regexpToNFA.Syntax.lastChar < orig(arg0)
===========================================================================
regexpToNFA.Syntax.isIncludeLeft(char):::EXIT;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::ENTER
regexpToNFA.Syntax.includeLeft != arg0
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT53
return == true
regexpToNFA.Syntax.transMean != orig(arg0)
orig(arg0) in regexpToNFA.Syntax.keyChar[]
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT53;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT56
return == false
regexpToNFA.Syntax.lastChar != orig(arg0)
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT56;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.nextChar == orig(regexpToNFA.Syntax.nextChar)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
(return == false)  ==>  (regexpToNFA.Syntax.lastChar != orig(arg0))
(return == true)  ==>  (orig(arg0) in regexpToNFA.Syntax.keyChar[])
(return == true)  ==>  (regexpToNFA.Syntax.transMean != orig(arg0))
regexpToNFA.Syntax.includeLeft != orig(arg0)
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT;condition="return == true"
return == true
regexpToNFA.Syntax.transMean != orig(arg0)
orig(arg0) in regexpToNFA.Syntax.keyChar[]
===========================================================================
regexpToNFA.Syntax.isKeyWord(char):::EXIT;condition="not(return == true)"
return == false
regexpToNFA.Syntax.lastChar != orig(arg0)
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::ENTER
arg0 != null
regexpToNFA.Syntax.transMean != arg1
regexpToNFA.Syntax.includeLeft != arg1
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT115
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT115;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT115;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT79
(return == true)  ==>  (arg0.toString one of { "\\(", "\\)", "\\+" })
(return == true)  ==>  (orig(arg1) in regexpToNFA.Syntax.keyChar[])
(return == true)  ==>  (orig(arg1) one of { 40, 41, 43 })
(return == true)  ==>  (regexpToNFA.Syntax.includeLeft > orig(arg1))
(return == true)  ==>  (regexpToNFA.Syntax.transMean > orig(arg1))
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT79;condition="return == true"
arg0.toString one of { "\\(", "\\)", "\\+" }
orig(arg1) one of { 40, 41, 43 }
regexpToNFA.Syntax.transMean > orig(arg1)
orig(arg1) in regexpToNFA.Syntax.keyChar[]
regexpToNFA.Syntax.includeLeft > orig(arg1)
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT79;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT93
regexpToNFA.Syntax.lastChar == 0
regexpToNFA.Syntax.nextChar == 97
arg0.toString == "\\b"
return == true
orig(arg0) has only one value
orig(arg1) == 109
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT93;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT95
(return == false)  ==>  (regexpToNFA.Syntax.lastChar != orig(arg1))
arg0.toString == "\\b"
orig(arg0) has only one value
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT95;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT95;condition="not(return == true)"
regexpToNFA.Syntax.lastChar != orig(arg1)
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT99
arg0.toString == "\\c"
return == true
orig(arg0) has only one value
orig(arg1) one of { 32, 40 }
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT99;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.nextChar == orig(regexpToNFA.Syntax.nextChar)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
arg0.toString == orig(arg0.toString)
regexpToNFA.Syntax.transMean != orig(arg1)
regexpToNFA.Syntax.includeLeft != orig(arg1)
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT;condition="return == true"
return == true
===========================================================================
regexpToNFA.Syntax.isMatch(java.lang.String, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::ENTER
arg0 one of { 48, 65, 97 }
arg1 one of { 57, 90, 122 }
regexpToNFA.Syntax.transMean != arg0
regexpToNFA.Syntax.transMean != arg1
regexpToNFA.Syntax.transMean != arg2
regexpToNFA.Syntax.includeLeft != arg0
regexpToNFA.Syntax.includeLeft != arg1
regexpToNFA.Syntax.includeLeft != arg2
regexpToNFA.Syntax.lastChar != arg0
regexpToNFA.Syntax.lastChar != arg1
regexpToNFA.Syntax.lastChar >= arg2
arg0 < arg1
arg0 != arg2
arg1 != arg2
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT132
regexpToNFA.Syntax.lastChar == orig(arg2)
return == true
orig(arg0) one of { 48, 97 }
orig(arg1) one of { 57, 122 }
regexpToNFA.Syntax.lastChar > orig(arg0)
regexpToNFA.Syntax.lastChar < orig(arg1)
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT132;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT134
return == false
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT134;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.nextChar == orig(regexpToNFA.Syntax.nextChar)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
(return == false)  ==>  (orig(arg0) one of { 48, 65, 97 })
(return == false)  ==>  (orig(arg1) one of { 57, 90, 122 })
(return == true)  ==>  (orig(arg0) < orig(arg2))
(return == true)  ==>  (orig(arg0) one of { 48, 97 })
(return == true)  ==>  (orig(arg1) > orig(arg2))
(return == true)  ==>  (orig(arg1) one of { 57, 122 })
(return == true)  ==>  (regexpToNFA.Syntax.lastChar < orig(arg1))
(return == true)  ==>  (regexpToNFA.Syntax.lastChar == orig(arg2))
(return == true)  ==>  (regexpToNFA.Syntax.lastChar > orig(arg0))
regexpToNFA.Syntax.transMean != orig(arg0)
regexpToNFA.Syntax.transMean != orig(arg1)
regexpToNFA.Syntax.transMean != orig(arg2)
regexpToNFA.Syntax.includeLeft != orig(arg0)
regexpToNFA.Syntax.includeLeft != orig(arg1)
regexpToNFA.Syntax.includeLeft != orig(arg2)
regexpToNFA.Syntax.lastChar != orig(arg0)
regexpToNFA.Syntax.lastChar != orig(arg1)
regexpToNFA.Syntax.lastChar >= orig(arg2)
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT;condition="return == true"
regexpToNFA.Syntax.lastChar == orig(arg2)
return == true
orig(arg0) one of { 48, 97 }
orig(arg1) one of { 57, 122 }
regexpToNFA.Syntax.lastChar > orig(arg0)
regexpToNFA.Syntax.lastChar < orig(arg1)
===========================================================================
regexpToNFA.Syntax.isMatchScope(char, char, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::ENTER
arg0 != null
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT34
arg0.toString one of { "\\b", "\\c" }
return == true
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT34;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT37
return == false
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT37;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.nextChar == orig(regexpToNFA.Syntax.nextChar)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
arg0.toString == orig(arg0.toString)
(return == true)  ==>  (arg0.toString one of { "\\b", "\\c" })
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT;condition="return == true"
arg0.toString one of { "\\b", "\\c" }
return == true
===========================================================================
regexpToNFA.Syntax.isNoPlace(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::ENTER
regexpToNFA.Syntax.lastChar == 0
regexpToNFA.Syntax.nextChar == 0
regexpToNFA.Syntax.keyChar[] elements > regexpToNFA.Syntax.lastChar
regexpToNFA.Syntax.includeLeft != arg0
regexpToNFA.Syntax.lastChar < arg0
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT65
regexpToNFA.Syntax.transMean == orig(arg0)
return == true
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT65;condition="return == true"
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT67
return == false
regexpToNFA.Syntax.transMean != orig(arg0)
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT67;condition="not(return == true)"
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.nextChar == orig(regexpToNFA.Syntax.nextChar)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
(return == false)  <==>  (regexpToNFA.Syntax.transMean != orig(arg0))
(return == true)  <==>  (regexpToNFA.Syntax.transMean == orig(arg0))
(return == true)  ==>  (orig(arg0) == 92)
(return == true)  ==>  (regexpToNFA.Syntax.includeLeft < orig(arg0))
regexpToNFA.Syntax.lastChar == 0
regexpToNFA.Syntax.nextChar == 0
regexpToNFA.Syntax.keyChar[] elements > regexpToNFA.Syntax.lastChar
regexpToNFA.Syntax.includeLeft != orig(arg0)
regexpToNFA.Syntax.lastChar < orig(arg0)
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT;condition="return == true"
regexpToNFA.Syntax.transMean == orig(arg0)
return == true
===========================================================================
regexpToNFA.Syntax.isThransMean(char):::EXIT;condition="not(return == true)"
return == false
regexpToNFA.Syntax.transMean != orig(arg0)
===========================================================================
regexpToNFA.Syntax.setLastNext(char, char):::ENTER
regexpToNFA.Syntax.transMean != arg0
regexpToNFA.Syntax.includeLeft != arg0
===========================================================================
regexpToNFA.Syntax.setLastNext(char, char):::EXIT
regexpToNFA.Syntax.closure == orig(regexpToNFA.Syntax.closure)
regexpToNFA.Syntax.positiveClosure == orig(regexpToNFA.Syntax.positiveClosure)
regexpToNFA.Syntax.or == orig(regexpToNFA.Syntax.or)
regexpToNFA.Syntax.transMean == orig(regexpToNFA.Syntax.transMean)
regexpToNFA.Syntax.keyChar == orig(regexpToNFA.Syntax.keyChar)
regexpToNFA.Syntax.keyChar[] == orig(regexpToNFA.Syntax.keyChar[])
regexpToNFA.Syntax.includeLeft == orig(regexpToNFA.Syntax.includeLeft)
regexpToNFA.Syntax.includeRight == orig(regexpToNFA.Syntax.includeRight)
regexpToNFA.Syntax.lastChar == orig(arg0)
regexpToNFA.Syntax.nextChar == orig(arg1)
regexpToNFA.Syntax.noPlace == orig(regexpToNFA.Syntax.noPlace)
regexpToNFA.Syntax.noPlace.getClass().getName() == orig(regexpToNFA.Syntax.noPlace.getClass().getName())
regexpToNFA.Syntax.noPlace[] == orig(regexpToNFA.Syntax.noPlace[])
regexpToNFA.Syntax.keyCharForS == orig(regexpToNFA.Syntax.keyCharForS)
regexpToNFA.Syntax.keyCharForS[] == orig(regexpToNFA.Syntax.keyCharForS[])
regexpToNFA.Syntax.transMean != orig(regexpToNFA.Syntax.lastChar)
regexpToNFA.Syntax.includeLeft != orig(regexpToNFA.Syntax.lastChar)
===========================================================================
regexpToNFA.Transfer:::OBJECT
this.start >= 1
this.end >= 2
this.ch != null
this.start != this.end
===========================================================================
regexpToNFA.Transfer.Transfer(int, int, java.lang.String):::ENTER
arg0 >= 1
arg1 >= 2
arg2 != null
arg0 != arg1
===========================================================================
regexpToNFA.Transfer.Transfer(int, int, java.lang.String):::EXIT
this.start == orig(arg0)
this.end == orig(arg1)
this.ch == orig(arg2)
arg2.toString == orig(arg2.toString)
===========================================================================
regexpToNFA.Unit:::OBJECT
this.nextUnit.nextUnit.father == this.nextUnit.father
this.nextUnit.nextUnit.father == this.father
this.nextUnit.father == this.father
this.nextUnit.father.start == this.father.start
this.nextUnit.father.end == this.father.end
this.nextUnit.father.father == this.father.father
this.nextUnit.father.innerFirstUnit == this.father.innerFirstUnit
this.nextUnit.father.tranChar == this.father.father.tranChar
this.nextUnit.father.tranChar == this.father.tranChar
this.nextUnit.father.state == this.father.state
this.father.father.tranChar == this.father.tranChar
this.start >= 1
this.end >= 2
this.nextUnit.nextUnit.father != null
this.nextUnit.nextUnit.innerFirstUnit != null
this.nextUnit.nextUnit.innerFirstUnit[] == []
this.nextUnit.nextUnit.innerFirstUnit[].getClass().getName() == []
this.nextUnit.nextUnit.tranChar != null
this.nextUnit.nextUnit.state == 0
this.nextUnit.father != null
this.nextUnit.father.nextUnit == null
this.nextUnit.father.father has only one value
this.nextUnit.father.father != null
this.nextUnit.father.innerFirstUnit != null
this.nextUnit.father.innerFirstUnit[] elements != null
this.nextUnit.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit]
this.nextUnit.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.nextUnit.father.tranChar has only one value
this.nextUnit.father.tranChar != null
this.nextUnit.father.tranChar.toString == ""
this.nextUnit.father.state == 0
this.nextUnit.innerFirstUnit != null
this.nextUnit.innerFirstUnit[] == []
this.nextUnit.innerFirstUnit[].getClass().getName() == []
this.nextUnit.tranChar != null
this.nextUnit.state == 0
this.father.start >= 1
this.father.end >= 2
this.father.nextUnit == null
this.father.father.start == 1
this.father.father.end == 2
this.father.father.nextUnit == null
this.father.father.father == null
this.father.father.innerFirstUnit has only one value
this.father.father.innerFirstUnit != null
this.father.father.innerFirstUnit[] elements != null
this.father.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.father.father.tranChar has only one value
this.father.father.tranChar != null
this.father.father.tranChar.toString == ""
this.father.father.state == 0
this.father.innerFirstUnit != null
this.father.innerFirstUnit[] elements != null
this.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.father.tranChar has only one value
this.father.tranChar != null
this.father.tranChar.toString == ""
this.father.state == 0
this.innerFirstUnit != null
this.innerFirstUnit[] elements != null
this.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
this.tranChar != null
this.state == 0
size(this.nextUnit.father.innerFirstUnit[]) == 1
this.start - this.end + 1 == 0
this.start - this.nextUnit.start + 2 == 0
this.start - this.nextUnit.end + 3 == 0
this.start - this.nextUnit.nextUnit.start + 4 == 0
this.start - this.nextUnit.nextUnit.end + 5 == 0
this.start > this.nextUnit.father.start
this.start > this.nextUnit.father.end
this.start > this.father.start
this.start > this.father.end
this.start > this.father.father.start
this.start > this.father.father.end
this.end - this.nextUnit.start + 1 == 0
this.end - this.nextUnit.end + 2 == 0
this.end - this.nextUnit.nextUnit.start + 3 == 0
this.end - this.nextUnit.nextUnit.end + 4 == 0
this.end > this.nextUnit.father.start
this.end > this.nextUnit.father.end
this.end > this.father.start
this.end > this.father.end
this.end > this.father.father.start
this.end % this.father.father.end == 0
this.end > this.father.father.end
this.nextUnit.start - this.nextUnit.end + 1 == 0
this.nextUnit.start - this.nextUnit.nextUnit.start + 2 == 0
this.nextUnit.start - this.nextUnit.nextUnit.end + 3 == 0
this.nextUnit.start > this.nextUnit.father.start
this.nextUnit.start > this.nextUnit.father.end
this.nextUnit.start > this.father.start
this.nextUnit.start > this.father.end
this.nextUnit.start > this.father.father.start
this.nextUnit.start > this.father.father.end
this.nextUnit.end - this.nextUnit.nextUnit.start + 1 == 0
this.nextUnit.end - this.nextUnit.nextUnit.end + 2 == 0
this.nextUnit.end > this.nextUnit.father.start
this.nextUnit.end > this.nextUnit.father.end
this.nextUnit.end > this.father.start
this.nextUnit.end > this.father.end
this.nextUnit.end > this.father.father.start
this.nextUnit.end % this.father.father.end == 0
this.nextUnit.end > this.father.father.end
this.nextUnit.nextUnit.start - this.nextUnit.nextUnit.end + 1 == 0
this.nextUnit.nextUnit.start > this.nextUnit.father.start
this.nextUnit.nextUnit.start > this.nextUnit.father.end
this.nextUnit.nextUnit.start > this.father.start
this.nextUnit.nextUnit.start > this.father.end
this.nextUnit.nextUnit.start > this.father.father.start
this.nextUnit.nextUnit.start > this.father.father.end
this.nextUnit.nextUnit.end > this.nextUnit.father.start
this.nextUnit.nextUnit.end > this.nextUnit.father.end
this.nextUnit.nextUnit.end > this.father.start
this.nextUnit.nextUnit.end > this.father.end
this.nextUnit.nextUnit.end > this.father.father.start
this.nextUnit.nextUnit.end % this.father.father.end == 0
this.nextUnit.nextUnit.end > this.father.father.end
this.nextUnit.father.start - this.nextUnit.father.end + 1 == 0
this.nextUnit.father.start - this.father.end + 1 == 0
this.nextUnit.father.start > this.father.father.start
this.nextUnit.father.start > this.father.father.end
this.nextUnit.father.end - this.father.start - 1 == 0
this.nextUnit.father.end > this.father.father.start
this.nextUnit.father.end % this.father.father.end == 0
this.nextUnit.father.end > this.father.father.end
this.father.start - this.father.end + 1 == 0
this.father.start > this.father.father.start
this.father.start > this.father.father.end
this.father.end > this.father.father.start
this.father.end % this.father.father.end == 0
this.father.end > this.father.father.end
===========================================================================
regexpToNFA.Unit.Unit(int, int, regexpToNFA.Unit):::ENTER
arg2.father.tranChar == arg2.tranChar
arg2.start >= 1
arg2.end >= 2
arg2.nextUnit == null
arg2.father.start == 1
arg2.father.end == 2
arg2.father.nextUnit == null
arg2.father.father == null
arg2.father.innerFirstUnit has only one value
arg2.father.innerFirstUnit != null
arg2.father.innerFirstUnit[] elements != null
arg2.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg2.father.tranChar has only one value
arg2.father.tranChar != null
arg2.father.tranChar.toString == ""
arg2.father.state == 0
arg2.innerFirstUnit != null
arg2.innerFirstUnit[] elements != null
arg2.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg2.tranChar has only one value
arg2.tranChar != null
arg2.tranChar.toString == ""
arg2.state == 0
arg0 - arg1 + 1 == 0
arg0 > arg2.start
arg0 > arg2.end
arg0 > arg2.father.start
arg0 > arg2.father.end
arg1 > arg2.start
arg1 > arg2.end
arg1 > arg2.father.start
arg1 % arg2.father.end == 0
arg1 > arg2.father.end
arg2.start - arg2.end + 1 == 0
arg2.start > arg2.father.start
arg2.start > arg2.father.end
arg2.end > arg2.father.start
arg2.end % arg2.father.end == 0
arg2.end > arg2.father.end
===========================================================================
regexpToNFA.Unit.Unit(int, int, regexpToNFA.Unit):::EXIT
this.start == orig(arg0)
this.end == orig(arg1)
this.father == orig(arg2)
this.father.start == arg2.start
this.father.end == arg2.end
this.father.father == arg2.father
this.father.father.start == arg2.father.start
this.father.father.end == arg2.father.end
this.father.father.innerFirstUnit == arg2.father.innerFirstUnit
this.father.father.tranChar == arg2.father.tranChar
this.father.father.state == arg2.father.state
this.father.innerFirstUnit == arg2.innerFirstUnit
this.father.tranChar == arg2.tranChar
this.father.state == arg2.state
this.tranChar == arg2.father.tranChar
this.tranChar == arg2.tranChar
arg2.start == orig(arg2.start)
arg2.end == orig(arg2.end)
arg2.nextUnit == orig(arg2.nextUnit)
arg2.father == orig(arg2.father)
arg2.father.start == orig(arg2.father.start)
arg2.father.end == orig(arg2.father.end)
arg2.father.nextUnit == orig(arg2.father.nextUnit)
arg2.father.father == orig(arg2.father.father)
arg2.father.innerFirstUnit == orig(arg2.father.innerFirstUnit)
arg2.father.innerFirstUnit[] == orig(arg2.father.innerFirstUnit[])
arg2.father.tranChar == arg2.tranChar
arg2.father.tranChar == orig(arg2.father.tranChar)
arg2.father.tranChar.toString == orig(arg2.father.tranChar.toString)
arg2.father.state == orig(arg2.father.state)
arg2.innerFirstUnit == orig(arg2.innerFirstUnit)
arg2.innerFirstUnit[] == orig(arg2.innerFirstUnit[])
arg2.tranChar == orig(arg2.tranChar)
arg2.tranChar.toString == orig(arg2.tranChar.toString)
arg2.state == orig(arg2.state)
this.nextUnit == null
this.innerFirstUnit[] == []
this.innerFirstUnit[].getClass().getName() == []
this.tranChar has only one value
this.tranChar.toString == ""
arg2.start >= 1
arg2.end >= 2
arg2.nextUnit == null
arg2.father.start == 1
arg2.father.end == 2
arg2.father.nextUnit == null
arg2.father.father == null
arg2.father.innerFirstUnit has only one value
arg2.father.innerFirstUnit != null
arg2.father.innerFirstUnit[] elements != null
arg2.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg2.father.tranChar has only one value
arg2.father.tranChar != null
arg2.father.tranChar.toString == ""
arg2.father.state == 0
arg2.innerFirstUnit != null
arg2.innerFirstUnit[] elements != null
arg2.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg2.tranChar has only one value
arg2.tranChar != null
arg2.tranChar.toString == ""
arg2.state == 0
this.start > arg2.start
this.start > arg2.end
this.start > arg2.father.start
this.start > arg2.father.end
this.end > arg2.start
this.end > arg2.end
this.end > arg2.father.start
this.end % arg2.father.end == 0
this.end > arg2.father.end
arg2.start - arg2.end + 1 == 0
arg2.start > arg2.father.start
arg2.start > arg2.father.end
arg2.end > arg2.father.start
arg2.end % arg2.father.end == 0
arg2.end > arg2.father.end
===========================================================================
regexpToNFA.Unit.addInnerFirstUnit(regexpToNFA.Unit):::ENTER
this == arg0.father
this.start == arg0.father.start
this.end == arg0.father.end
this.father == arg0.father.father
this.father.tranChar == this.tranChar
this.innerFirstUnit == arg0.father.innerFirstUnit
this.tranChar == arg0.father.tranChar
this.tranChar == arg0.tranChar
this.state == arg0.father.state
this.nextUnit == null
this.father.start == 1
this.father.end == 2
this.father.father == null
this.father.innerFirstUnit has only one value
this.tranChar has only one value
this.tranChar.toString == ""
arg0 != null
arg0.nextUnit == null
arg0.father != null
arg0.father.nextUnit == null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar.toString == ""
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] == []
arg0.innerFirstUnit[].getClass().getName() == []
arg0.tranChar.toString == ""
arg0.state == 0
this.start < arg0.start
this.start < arg0.end
this.end % this.father.end == 0
this.end < arg0.start
this.end < arg0.end
this.father.start < arg0.start
this.father.start < arg0.end
this.father.end < arg0.start
arg0.end % this.father.end == 0
this.father.end < arg0.end
arg0.start - arg0.end + 1 == 0
===========================================================================
regexpToNFA.Unit.addInnerFirstUnit(regexpToNFA.Unit):::EXIT
this.start == arg0.father.start
this.start == orig(this.start)
this.start == orig(arg0.father.start)
this.end == arg0.father.end
this.end == orig(this.end)
this.end == orig(arg0.father.end)
this.nextUnit == orig(this.nextUnit)
this.father == arg0.father.father
this.father == orig(this.father)
this.father == orig(arg0.father.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == this.tranChar
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == arg0.father.innerFirstUnit
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit == orig(arg0.father.innerFirstUnit)
this.tranChar == arg0.father.tranChar
this.tranChar == arg0.tranChar
this.tranChar == orig(this.tranChar)
this.tranChar == orig(arg0.father.tranChar)
this.tranChar == orig(arg0.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == arg0.father.state
this.state == orig(this.state)
this.state == orig(arg0.father.state)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
arg0.nextUnit == orig(arg0.nextUnit)
arg0.father == orig(this)
arg0.father == orig(arg0.father)
arg0.father.nextUnit == orig(arg0.father.nextUnit)
arg0.father.tranChar.toString == orig(arg0.father.tranChar.toString)
arg0.innerFirstUnit == orig(arg0.innerFirstUnit)
arg0.innerFirstUnit[] == orig(arg0.innerFirstUnit[])
arg0.tranChar.toString == orig(arg0.tranChar.toString)
arg0.state == orig(arg0.state)
size(this.innerFirstUnit[])-1 == orig(size(this.innerFirstUnit[]))
size(arg0.father.innerFirstUnit[])-1 == orig(size(arg0.father.innerFirstUnit[]))
this.nextUnit == null
this.father.start == 1
this.father.end == 2
this.father.father == null
this.father.innerFirstUnit has only one value
this.tranChar has only one value
this.tranChar.toString == ""
arg0.nextUnit == null
arg0.father != null
arg0.father.nextUnit == null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar.toString == ""
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] == []
arg0.innerFirstUnit[].getClass().getName() == []
arg0.tranChar.toString == ""
arg0.state == 0
size(this.innerFirstUnit[]) >= 1
size(arg0.father.innerFirstUnit[]) >= 1
this.start < arg0.start
this.start < arg0.end
this.end % this.father.end == 0
this.end < arg0.start
this.end < arg0.end
this.father.start < arg0.start
this.father.start < arg0.end
this.father.end < arg0.start
arg0.end % this.father.end == 0
this.father.end < arg0.end
arg0.start - arg0.end + 1 == 0
===========================================================================
regexpToNFA.Unit.getEnd():::ENTER
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getEnd():::EXIT
this.start == orig(this.start)
this.end == return
this.nextUnit == orig(this.nextUnit)
this.nextUnit.start == orig(this.nextUnit.start)
this.nextUnit.end == orig(this.nextUnit.end)
this.nextUnit.nextUnit == orig(this.nextUnit.nextUnit)
this.nextUnit.nextUnit.start == orig(this.nextUnit.nextUnit.start)
this.nextUnit.nextUnit.end == orig(this.nextUnit.nextUnit.end)
this.nextUnit.nextUnit.nextUnit == orig(this.nextUnit.nextUnit.nextUnit)
this.nextUnit.nextUnit.father == orig(this.nextUnit.nextUnit.father)
this.nextUnit.nextUnit.innerFirstUnit == orig(this.nextUnit.nextUnit.innerFirstUnit)
this.nextUnit.nextUnit.innerFirstUnit[] == orig(this.nextUnit.nextUnit.innerFirstUnit[])
this.nextUnit.nextUnit.tranChar == orig(this.nextUnit.nextUnit.tranChar)
this.nextUnit.nextUnit.tranChar.toString == orig(this.nextUnit.nextUnit.tranChar.toString)
this.nextUnit.nextUnit.state == orig(this.nextUnit.nextUnit.state)
this.nextUnit.father == orig(this.nextUnit.father)
this.nextUnit.father.start == orig(this.nextUnit.father.start)
this.nextUnit.father.end == orig(this.nextUnit.father.end)
this.nextUnit.father.nextUnit == orig(this.nextUnit.father.nextUnit)
this.nextUnit.father.father == orig(this.nextUnit.father.father)
this.nextUnit.father.innerFirstUnit == orig(this.nextUnit.father.innerFirstUnit)
this.nextUnit.father.innerFirstUnit[] == orig(this.nextUnit.father.innerFirstUnit[])
this.nextUnit.father.tranChar == orig(this.nextUnit.father.tranChar)
this.nextUnit.father.tranChar.toString == orig(this.nextUnit.father.tranChar.toString)
this.nextUnit.father.state == orig(this.nextUnit.father.state)
this.nextUnit.innerFirstUnit == orig(this.nextUnit.innerFirstUnit)
this.nextUnit.innerFirstUnit[] == orig(this.nextUnit.innerFirstUnit[])
this.nextUnit.tranChar == orig(this.nextUnit.tranChar)
this.nextUnit.tranChar.toString == orig(this.nextUnit.tranChar.toString)
this.nextUnit.state == orig(this.nextUnit.state)
this.father == orig(this.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == orig(this.father.father.tranChar)
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
return == orig(this.end)
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return >= 2
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
this.start - return + 1 == 0
this.nextUnit.start - return - 1 == 0
this.nextUnit.end - return - 2 == 0
this.nextUnit.nextUnit.start - return - 3 == 0
this.nextUnit.nextUnit.end - return - 4 == 0
this.nextUnit.father.start < return
this.nextUnit.father.end < return
this.father.start < return
this.father.end < return
this.father.father.start < return
return % this.father.father.end == 0
this.father.father.end < return
===========================================================================
regexpToNFA.Unit.getFather():::ENTER
this.nextUnit == null
this.father != null
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
size(this.innerFirstUnit[]) one of { 0, 1, 4 }
===========================================================================
regexpToNFA.Unit.getFather():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == orig(this.nextUnit)
this.father == return
this.father.start == return.start
this.father.end == return.end
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == return.father
this.father.father.start == return.father.start
this.father.father.end == return.father.end
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == return.father.innerFirstUnit
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == return.father.tranChar
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == return.father.state
this.father.innerFirstUnit == return.innerFirstUnit
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == return.tranChar
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == return.state
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
return == orig(this.father)
return.start == orig(this.father.start)
return.end == orig(this.father.end)
return.father == orig(this.father.father)
return.father.start == orig(this.father.father.start)
return.father.end == orig(this.father.father.end)
return.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
return.father.tranChar == return.tranChar
return.father.tranChar == orig(this.father.father.tranChar)
return.father.state == orig(this.father.father.state)
return.innerFirstUnit == orig(this.father.innerFirstUnit)
return.tranChar == orig(this.father.tranChar)
return.state == orig(this.father.state)
this.nextUnit == null
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return != null
return.start >= 1
return.end >= 2
return.nextUnit == null
return.father.start == 1
return.father.end == 2
return.father.nextUnit == null
return.father.father == null
return.father.innerFirstUnit has only one value
return.father.innerFirstUnit != null
return.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
return.father.innerFirstUnit[] elements != null
return.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
return.father.tranChar has only one value
return.father.tranChar != null
return.father.tranChar.toString == ""
return.father.state == 0
return.innerFirstUnit != null
return.innerFirstUnit[] elements != null
return.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
return.tranChar has only one value
return.tranChar != null
return.tranChar.toString == ""
return.state == 0
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
size(this.innerFirstUnit[]) one of { 0, 1, 4 }
size(return.father.innerFirstUnit[]) == 14
size(return.innerFirstUnit[]) one of { 1, 4, 14 }
this.start > return.start
this.start > return.end
this.start > return.father.start
this.start > return.father.end
this.end > return.start
this.end > return.end
this.end > return.father.start
this.end % return.father.end == 0
this.end > return.father.end
return.start - return.end + 1 == 0
return.start > return.father.start
return.start > return.father.end
return.end > return.father.start
return.end % return.father.end == 0
return.end > return.father.end
===========================================================================
regexpToNFA.Unit.getInnerFirstUnit():::ENTER
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getInnerFirstUnit():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == orig(this.nextUnit)
this.nextUnit.start == orig(this.nextUnit.start)
this.nextUnit.end == orig(this.nextUnit.end)
this.nextUnit.nextUnit == orig(this.nextUnit.nextUnit)
this.nextUnit.nextUnit.start == orig(this.nextUnit.nextUnit.start)
this.nextUnit.nextUnit.end == orig(this.nextUnit.nextUnit.end)
this.nextUnit.nextUnit.nextUnit == orig(this.nextUnit.nextUnit.nextUnit)
this.nextUnit.nextUnit.father == orig(this.nextUnit.nextUnit.father)
this.nextUnit.nextUnit.innerFirstUnit == orig(this.nextUnit.nextUnit.innerFirstUnit)
this.nextUnit.nextUnit.innerFirstUnit[] == orig(this.nextUnit.nextUnit.innerFirstUnit[])
this.nextUnit.nextUnit.tranChar == orig(this.nextUnit.nextUnit.tranChar)
this.nextUnit.nextUnit.tranChar.toString == orig(this.nextUnit.nextUnit.tranChar.toString)
this.nextUnit.nextUnit.state == orig(this.nextUnit.nextUnit.state)
this.nextUnit.father == orig(this.nextUnit.father)
this.nextUnit.father.start == orig(this.nextUnit.father.start)
this.nextUnit.father.end == orig(this.nextUnit.father.end)
this.nextUnit.father.nextUnit == orig(this.nextUnit.father.nextUnit)
this.nextUnit.father.father == orig(this.nextUnit.father.father)
this.nextUnit.father.innerFirstUnit == orig(this.nextUnit.father.innerFirstUnit)
this.nextUnit.father.innerFirstUnit[] == orig(this.nextUnit.father.innerFirstUnit[])
this.nextUnit.father.tranChar == orig(this.nextUnit.father.tranChar)
this.nextUnit.father.tranChar.toString == orig(this.nextUnit.father.tranChar.toString)
this.nextUnit.father.state == orig(this.nextUnit.father.state)
this.nextUnit.innerFirstUnit == orig(this.nextUnit.innerFirstUnit)
this.nextUnit.innerFirstUnit[] == orig(this.nextUnit.innerFirstUnit[])
this.nextUnit.tranChar == orig(this.nextUnit.tranChar)
this.nextUnit.tranChar.toString == orig(this.nextUnit.tranChar.toString)
this.nextUnit.state == orig(this.nextUnit.state)
this.father == orig(this.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == orig(this.father.father.tranChar)
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == return
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
return == orig(this.innerFirstUnit)
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return != null
return[] elements != null
return[].getClass().getName() elements == regexpToNFA.Unit.class
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getNextUnit():::ENTER
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getNextUnit():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == return
this.nextUnit.start == return.start
this.nextUnit.end == return.end
this.nextUnit.nextUnit == return.nextUnit
this.nextUnit.nextUnit.start == return.nextUnit.start
this.nextUnit.nextUnit.end == return.nextUnit.end
this.nextUnit.nextUnit.nextUnit == return.nextUnit.nextUnit
this.nextUnit.nextUnit.father == return.nextUnit.father
this.nextUnit.nextUnit.innerFirstUnit == return.nextUnit.innerFirstUnit
this.nextUnit.nextUnit.innerFirstUnit[] == orig(this.nextUnit.nextUnit.innerFirstUnit[])
this.nextUnit.nextUnit.tranChar == return.nextUnit.tranChar
this.nextUnit.nextUnit.tranChar.toString == orig(this.nextUnit.nextUnit.tranChar.toString)
this.nextUnit.nextUnit.state == return.nextUnit.state
this.nextUnit.father == return.father
this.nextUnit.father.start == return.father.start
this.nextUnit.father.end == return.father.end
this.nextUnit.father.nextUnit == orig(this.nextUnit.father.nextUnit)
this.nextUnit.father.father == return.father.father
this.nextUnit.father.innerFirstUnit == return.father.innerFirstUnit
this.nextUnit.father.innerFirstUnit[] == orig(this.nextUnit.father.innerFirstUnit[])
this.nextUnit.father.tranChar == return.father.tranChar
this.nextUnit.father.tranChar.toString == orig(this.nextUnit.father.tranChar.toString)
this.nextUnit.father.state == return.father.state
this.nextUnit.innerFirstUnit == return.innerFirstUnit
this.nextUnit.innerFirstUnit[] == orig(this.nextUnit.innerFirstUnit[])
this.nextUnit.tranChar == return.tranChar
this.nextUnit.tranChar.toString == orig(this.nextUnit.tranChar.toString)
this.nextUnit.state == return.state
this.father == return.nextUnit.father
this.father == return.father
this.father == orig(this.father)
this.father.start == return.father.start
this.father.start == orig(this.father.start)
this.father.end == return.father.end
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == return.father.father
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == return.father.tranChar
this.father.father.tranChar == orig(this.father.father.tranChar)
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == return.father.innerFirstUnit
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == return.father.tranChar
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == return.father.state
this.father.state == orig(this.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
return == orig(this.nextUnit)
return.start == orig(this.nextUnit.start)
return.end == orig(this.nextUnit.end)
return.nextUnit == orig(this.nextUnit.nextUnit)
return.nextUnit.start == orig(this.nextUnit.nextUnit.start)
return.nextUnit.end == orig(this.nextUnit.nextUnit.end)
return.nextUnit.nextUnit == orig(this.nextUnit.nextUnit.nextUnit)
return.nextUnit.father == return.father
return.nextUnit.father == orig(this.nextUnit.nextUnit.father)
return.nextUnit.innerFirstUnit == orig(this.nextUnit.nextUnit.innerFirstUnit)
return.nextUnit.tranChar == orig(this.nextUnit.nextUnit.tranChar)
return.nextUnit.state == orig(this.nextUnit.nextUnit.state)
return.father == orig(this.nextUnit.father)
return.father.start == orig(this.nextUnit.father.start)
return.father.end == orig(this.nextUnit.father.end)
return.father.father == orig(this.nextUnit.father.father)
return.father.innerFirstUnit == orig(this.nextUnit.father.innerFirstUnit)
return.father.tranChar == orig(this.nextUnit.father.tranChar)
return.father.state == orig(this.nextUnit.father.state)
return.innerFirstUnit == orig(this.nextUnit.innerFirstUnit)
return.tranChar == orig(this.nextUnit.tranChar)
return.state == orig(this.nextUnit.state)
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return.nextUnit.father != null
return.nextUnit.innerFirstUnit != null
return.nextUnit.innerFirstUnit[] == []
return.nextUnit.innerFirstUnit[].getClass().getName() == []
return.nextUnit.tranChar != null
return.nextUnit.state == 0
return.father != null
return.father.nextUnit == null
return.father.father has only one value
return.father.father != null
return.father.innerFirstUnit != null
return.father.innerFirstUnit[] elements != null
return.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit]
return.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
return.father.tranChar has only one value
return.father.tranChar != null
return.father.tranChar.toString == ""
return.father.state == 0
return.innerFirstUnit != null
return.innerFirstUnit[] == []
return.innerFirstUnit[].getClass().getName() == []
return.tranChar != null
return.state == 0
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
size(return.father.innerFirstUnit[]) == 1
this.start - return.start + 2 == 0
this.start - return.end + 3 == 0
this.start - return.nextUnit.start + 4 == 0
this.start - return.nextUnit.end + 5 == 0
this.start > return.father.start
this.start > return.father.end
this.end - return.start + 1 == 0
this.end - return.end + 2 == 0
this.end - return.nextUnit.start + 3 == 0
this.end - return.nextUnit.end + 4 == 0
this.end > return.father.start
this.end > return.father.end
this.father.start < return.start
this.father.start < return.end
this.father.start < return.nextUnit.start
this.father.start < return.nextUnit.end
this.father.start - return.father.end + 1 == 0
this.father.end < return.start
this.father.end < return.end
this.father.end < return.nextUnit.start
this.father.end < return.nextUnit.end
this.father.end - return.father.start - 1 == 0
this.father.father.start < return.start
this.father.father.start < return.end
this.father.father.start < return.nextUnit.start
this.father.father.start < return.nextUnit.end
this.father.father.start < return.father.start
this.father.father.start < return.father.end
this.father.father.end < return.start
return.end % this.father.father.end == 0
this.father.father.end < return.end
this.father.father.end < return.nextUnit.start
return.nextUnit.end % this.father.father.end == 0
this.father.father.end < return.nextUnit.end
this.father.father.end < return.father.start
return.father.end % this.father.father.end == 0
this.father.father.end < return.father.end
return.start - return.end + 1 == 0
return.start - return.nextUnit.start + 2 == 0
return.start - return.nextUnit.end + 3 == 0
return.start > return.father.start
return.start > return.father.end
return.end - return.nextUnit.start + 1 == 0
return.end - return.nextUnit.end + 2 == 0
return.end > return.father.start
return.end > return.father.end
return.nextUnit.start - return.nextUnit.end + 1 == 0
return.nextUnit.start > return.father.start
return.nextUnit.start > return.father.end
return.nextUnit.end > return.father.start
return.nextUnit.end > return.father.end
return.father.start - return.father.end + 1 == 0
===========================================================================
regexpToNFA.Unit.getStart():::ENTER
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getStart():::EXIT
this.start == return
this.end == orig(this.end)
this.nextUnit == orig(this.nextUnit)
this.nextUnit.start == orig(this.nextUnit.start)
this.nextUnit.end == orig(this.nextUnit.end)
this.nextUnit.nextUnit == orig(this.nextUnit.nextUnit)
this.nextUnit.nextUnit.start == orig(this.nextUnit.nextUnit.start)
this.nextUnit.nextUnit.end == orig(this.nextUnit.nextUnit.end)
this.nextUnit.nextUnit.nextUnit == orig(this.nextUnit.nextUnit.nextUnit)
this.nextUnit.nextUnit.father == orig(this.nextUnit.nextUnit.father)
this.nextUnit.nextUnit.innerFirstUnit == orig(this.nextUnit.nextUnit.innerFirstUnit)
this.nextUnit.nextUnit.innerFirstUnit[] == orig(this.nextUnit.nextUnit.innerFirstUnit[])
this.nextUnit.nextUnit.tranChar == orig(this.nextUnit.nextUnit.tranChar)
this.nextUnit.nextUnit.tranChar.toString == orig(this.nextUnit.nextUnit.tranChar.toString)
this.nextUnit.nextUnit.state == orig(this.nextUnit.nextUnit.state)
this.nextUnit.father == orig(this.nextUnit.father)
this.nextUnit.father.start == orig(this.nextUnit.father.start)
this.nextUnit.father.end == orig(this.nextUnit.father.end)
this.nextUnit.father.nextUnit == orig(this.nextUnit.father.nextUnit)
this.nextUnit.father.father == orig(this.nextUnit.father.father)
this.nextUnit.father.innerFirstUnit == orig(this.nextUnit.father.innerFirstUnit)
this.nextUnit.father.innerFirstUnit[] == orig(this.nextUnit.father.innerFirstUnit[])
this.nextUnit.father.tranChar == orig(this.nextUnit.father.tranChar)
this.nextUnit.father.tranChar.toString == orig(this.nextUnit.father.tranChar.toString)
this.nextUnit.father.state == orig(this.nextUnit.father.state)
this.nextUnit.innerFirstUnit == orig(this.nextUnit.innerFirstUnit)
this.nextUnit.innerFirstUnit[] == orig(this.nextUnit.innerFirstUnit[])
this.nextUnit.tranChar == orig(this.nextUnit.tranChar)
this.nextUnit.tranChar.toString == orig(this.nextUnit.tranChar.toString)
this.nextUnit.state == orig(this.nextUnit.state)
this.father == orig(this.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == orig(this.father.father.tranChar)
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
return == orig(this.start)
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return >= 1
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
this.end - return - 1 == 0
this.nextUnit.start - return - 2 == 0
this.nextUnit.end - return - 3 == 0
this.nextUnit.nextUnit.start - return - 4 == 0
this.nextUnit.nextUnit.end - return - 5 == 0
this.nextUnit.father.start < return
this.nextUnit.father.end < return
this.father.start < return
this.father.end < return
this.father.father.start < return
this.father.father.end < return
===========================================================================
regexpToNFA.Unit.getState():::ENTER
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getState():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == orig(this.nextUnit)
this.nextUnit.start == orig(this.nextUnit.start)
this.nextUnit.end == orig(this.nextUnit.end)
this.nextUnit.nextUnit == orig(this.nextUnit.nextUnit)
this.nextUnit.nextUnit.start == orig(this.nextUnit.nextUnit.start)
this.nextUnit.nextUnit.end == orig(this.nextUnit.nextUnit.end)
this.nextUnit.nextUnit.nextUnit == orig(this.nextUnit.nextUnit.nextUnit)
this.nextUnit.nextUnit.father == orig(this.nextUnit.nextUnit.father)
this.nextUnit.nextUnit.innerFirstUnit == orig(this.nextUnit.nextUnit.innerFirstUnit)
this.nextUnit.nextUnit.innerFirstUnit[] == orig(this.nextUnit.nextUnit.innerFirstUnit[])
this.nextUnit.nextUnit.tranChar == orig(this.nextUnit.nextUnit.tranChar)
this.nextUnit.nextUnit.tranChar.toString == orig(this.nextUnit.nextUnit.tranChar.toString)
this.nextUnit.nextUnit.state == orig(this.nextUnit.nextUnit.state)
this.nextUnit.father == orig(this.nextUnit.father)
this.nextUnit.father.start == orig(this.nextUnit.father.start)
this.nextUnit.father.end == orig(this.nextUnit.father.end)
this.nextUnit.father.nextUnit == orig(this.nextUnit.father.nextUnit)
this.nextUnit.father.father == orig(this.nextUnit.father.father)
this.nextUnit.father.innerFirstUnit == orig(this.nextUnit.father.innerFirstUnit)
this.nextUnit.father.innerFirstUnit[] == orig(this.nextUnit.father.innerFirstUnit[])
this.nextUnit.father.tranChar == orig(this.nextUnit.father.tranChar)
this.nextUnit.father.tranChar.toString == orig(this.nextUnit.father.tranChar.toString)
this.nextUnit.father.state == orig(this.nextUnit.father.state)
this.nextUnit.innerFirstUnit == orig(this.nextUnit.innerFirstUnit)
this.nextUnit.innerFirstUnit[] == orig(this.nextUnit.innerFirstUnit[])
this.nextUnit.tranChar == orig(this.nextUnit.tranChar)
this.nextUnit.tranChar.toString == orig(this.nextUnit.tranChar.toString)
this.nextUnit.state == orig(this.nextUnit.state)
this.father == orig(this.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == orig(this.father.father.tranChar)
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == return
return == orig(this.state)
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return == 0
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getTranChar():::ENTER
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.getTranChar():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == orig(this.nextUnit)
this.nextUnit.start == orig(this.nextUnit.start)
this.nextUnit.end == orig(this.nextUnit.end)
this.nextUnit.nextUnit == orig(this.nextUnit.nextUnit)
this.nextUnit.nextUnit.start == orig(this.nextUnit.nextUnit.start)
this.nextUnit.nextUnit.end == orig(this.nextUnit.nextUnit.end)
this.nextUnit.nextUnit.nextUnit == orig(this.nextUnit.nextUnit.nextUnit)
this.nextUnit.nextUnit.father == orig(this.nextUnit.nextUnit.father)
this.nextUnit.nextUnit.innerFirstUnit == orig(this.nextUnit.nextUnit.innerFirstUnit)
this.nextUnit.nextUnit.innerFirstUnit[] == orig(this.nextUnit.nextUnit.innerFirstUnit[])
this.nextUnit.nextUnit.tranChar == orig(this.nextUnit.nextUnit.tranChar)
this.nextUnit.nextUnit.tranChar.toString == orig(this.nextUnit.nextUnit.tranChar.toString)
this.nextUnit.nextUnit.state == orig(this.nextUnit.nextUnit.state)
this.nextUnit.father == orig(this.nextUnit.father)
this.nextUnit.father.start == orig(this.nextUnit.father.start)
this.nextUnit.father.end == orig(this.nextUnit.father.end)
this.nextUnit.father.nextUnit == orig(this.nextUnit.father.nextUnit)
this.nextUnit.father.father == orig(this.nextUnit.father.father)
this.nextUnit.father.innerFirstUnit == orig(this.nextUnit.father.innerFirstUnit)
this.nextUnit.father.innerFirstUnit[] == orig(this.nextUnit.father.innerFirstUnit[])
this.nextUnit.father.tranChar == orig(this.nextUnit.father.tranChar)
this.nextUnit.father.tranChar.toString == orig(this.nextUnit.father.tranChar.toString)
this.nextUnit.father.state == orig(this.nextUnit.father.state)
this.nextUnit.innerFirstUnit == orig(this.nextUnit.innerFirstUnit)
this.nextUnit.innerFirstUnit[] == orig(this.nextUnit.innerFirstUnit[])
this.nextUnit.tranChar == orig(this.nextUnit.tranChar)
this.nextUnit.tranChar.toString == orig(this.nextUnit.tranChar.toString)
this.nextUnit.state == orig(this.nextUnit.state)
this.father == orig(this.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == orig(this.father.father.tranChar)
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == return
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
return == orig(this.tranChar)
this.father.father.innerFirstUnit[] contains no nulls and has only one value, of length 14
this.father.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit, regexpToNFA.Unit]
return != null
size(this.father.father.innerFirstUnit[]) == 14
size(this.father.innerFirstUnit[]) one of { 1, 4, 14 }
===========================================================================
regexpToNFA.Unit.setNextUnit(regexpToNFA.Unit):::ENTER
this.father == arg0.father
this.father.start == arg0.father.start
this.father.end == arg0.father.end
this.father.father == arg0.father.father
this.father.innerFirstUnit == arg0.father.innerFirstUnit
this.father.tranChar == arg0.father.tranChar
this.father.tranChar == arg0.tranChar
this.father.state == arg0.father.state
this.nextUnit == null
this.father != null
this.father.father has only one value
this.father.father != null
this.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit]
this.innerFirstUnit[] == []
this.innerFirstUnit[].getClass().getName() == []
arg0 != null
arg0.nextUnit == null
arg0.father.nextUnit == null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit]
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar.toString == ""
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] == []
arg0.innerFirstUnit[].getClass().getName() == []
arg0.tranChar.toString == ""
arg0.state == 0
size(this.father.innerFirstUnit[]) == 1
size(arg0.father.innerFirstUnit[]) == 1
this.start - arg0.start + 2 == 0
this.start - arg0.end + 3 == 0
this.end - arg0.start + 1 == 0
this.end - arg0.end + 2 == 0
this.father.start < arg0.start
this.father.start < arg0.end
this.father.end < arg0.start
this.father.end < arg0.end
this.father.father.start < arg0.start
this.father.father.start < arg0.end
this.father.father.end < arg0.start
arg0.end % this.father.father.end == 0
this.father.father.end < arg0.end
arg0.start - arg0.end + 1 == 0
===========================================================================
regexpToNFA.Unit.setNextUnit(regexpToNFA.Unit):::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == orig(arg0)
this.nextUnit.start == arg0.start
this.nextUnit.end == arg0.end
this.nextUnit.father.tranChar == arg0.tranChar
this.nextUnit.innerFirstUnit == arg0.innerFirstUnit
this.nextUnit.tranChar == arg0.tranChar
this.nextUnit.state == arg0.state
this.father == arg0.father
this.father == orig(this.father)
this.father == orig(arg0.father)
this.father.start == arg0.father.start
this.father.start == orig(this.father.start)
this.father.start == orig(arg0.father.start)
this.father.end == arg0.father.end
this.father.end == orig(this.father.end)
this.father.end == orig(arg0.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == arg0.father.father
this.father.father == orig(this.father.father)
this.father.father == orig(arg0.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar == arg0.tranChar
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == arg0.father.innerFirstUnit
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit == orig(arg0.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == arg0.tranChar
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == arg0.father.state
this.father.state == orig(this.father.state)
this.father.state == orig(arg0.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.tranChar == orig(this.tranChar)
this.tranChar.toString == orig(this.tranChar.toString)
this.state == orig(this.state)
arg0.start == orig(arg0.start)
arg0.end == orig(arg0.end)
arg0.nextUnit == orig(arg0.nextUnit)
arg0.father.nextUnit == orig(arg0.father.nextUnit)
arg0.father.innerFirstUnit[] == orig(arg0.father.innerFirstUnit[])
arg0.father.tranChar == arg0.tranChar
arg0.father.tranChar.toString == orig(arg0.father.tranChar.toString)
arg0.innerFirstUnit == orig(arg0.innerFirstUnit)
arg0.innerFirstUnit[] == orig(arg0.innerFirstUnit[])
arg0.tranChar == orig(this.father.father.tranChar)
arg0.tranChar == orig(this.father.tranChar)
arg0.tranChar == orig(arg0.father.tranChar)
arg0.tranChar == orig(arg0.tranChar)
arg0.tranChar.toString == orig(arg0.tranChar.toString)
arg0.state == orig(arg0.state)
this.nextUnit != null
this.nextUnit.nextUnit == null
this.nextUnit.tranChar.toString == ""
this.father != null
this.father.father has only one value
this.father.father != null
this.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit]
this.innerFirstUnit[] == []
this.innerFirstUnit[].getClass().getName() == []
arg0.nextUnit == null
arg0.father.nextUnit == null
arg0.father.innerFirstUnit[] elements != null
arg0.father.innerFirstUnit[].getClass().getName() == [regexpToNFA.Unit]
arg0.father.innerFirstUnit[].getClass().getName() elements == regexpToNFA.Unit.class
arg0.father.tranChar.toString == ""
arg0.innerFirstUnit != null
arg0.innerFirstUnit[] == []
arg0.innerFirstUnit[].getClass().getName() == []
arg0.tranChar has only one value
arg0.tranChar != null
arg0.tranChar.toString == ""
arg0.state == 0
size(this.father.innerFirstUnit[]) == 1
size(arg0.father.innerFirstUnit[]) == 1
this.start - arg0.start + 2 == 0
this.start - arg0.end + 3 == 0
this.end - arg0.start + 1 == 0
this.end - arg0.end + 2 == 0
this.father.start < arg0.start
this.father.start < arg0.end
this.father.end < arg0.start
this.father.end < arg0.end
this.father.father.start < arg0.start
this.father.father.start < arg0.end
this.father.father.end < arg0.start
arg0.end % this.father.father.end == 0
this.father.father.end < arg0.end
arg0.start - arg0.end + 1 == 0
===========================================================================
regexpToNFA.Unit.setTranChar(char):::ENTER
this.nextUnit == null
this.father != null
this.father.father has only one value
this.father.father != null
this.innerFirstUnit[] == []
this.innerFirstUnit[].getClass().getName() == []
this.tranChar.toString one of { "", "\\" }
===========================================================================
regexpToNFA.Unit.setTranChar(char):::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.nextUnit == orig(this.nextUnit)
this.father == orig(this.father)
this.father.start == orig(this.father.start)
this.father.end == orig(this.father.end)
this.father.nextUnit == orig(this.father.nextUnit)
this.father.father == orig(this.father.father)
this.father.father.start == orig(this.father.father.start)
this.father.father.end == orig(this.father.father.end)
this.father.father.nextUnit == orig(this.father.father.nextUnit)
this.father.father.father == orig(this.father.father.father)
this.father.father.innerFirstUnit == orig(this.father.father.innerFirstUnit)
this.father.father.innerFirstUnit[] == orig(this.father.father.innerFirstUnit[])
this.father.father.tranChar.toString == orig(this.father.father.tranChar.toString)
this.father.father.state == orig(this.father.father.state)
this.father.innerFirstUnit == orig(this.father.innerFirstUnit)
this.father.innerFirstUnit[] == orig(this.father.innerFirstUnit[])
this.father.tranChar == orig(this.father.father.tranChar)
this.father.tranChar == orig(this.father.tranChar)
this.father.tranChar.toString == orig(this.father.tranChar.toString)
this.father.state == orig(this.father.state)
this.innerFirstUnit == orig(this.innerFirstUnit)
this.innerFirstUnit[] == orig(this.innerFirstUnit[])
this.state == orig(this.state)
this.nextUnit == null
this.father != null
this.father.father has only one value
this.father.father != null
this.innerFirstUnit[] == []
this.innerFirstUnit[].getClass().getName() == []
this.tranChar.toString > orig(this.tranChar.toString)
Exiting Daikon.
