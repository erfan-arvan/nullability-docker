Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 2 times.  Unmatched entries are ignored!
Unterminated calls:
  test.simples.Test.main(java.lang.String[]) : 1 invocation
  test.simples.Test.xml2Service() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

missing variables in newEnterExitRel:
  parent = org.jczh.appliedxml.Serializer$1.(org.jczh.appliedxml.Serializer):::ENTER
  child = org.jczh.appliedxml.Serializer$1.(org.jczh.appliedxml.Serializer):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@3282806f
parent varinfos missing from parent_to_child_map:
   org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[org.jczh.appliedxml.Serializer.this.formatter.indent]
   org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[org.jczh.appliedxml.Serializer.this.formatter.indent-1]
   org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[org.jczh.appliedxml.Serializer.this.formatter.indent]
   org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[org.jczh.appliedxml.Serializer.this.formatter.indent-1]
rel.parent_to_child_map:
    org.jczh.appliedxml.Serializer.this => orig(org.jczh.appliedxml.Serializer.this)
    org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired => orig(org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.context => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.context)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..] => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName())
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName())
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName())
    org.jczh.appliedxml.Serializer.this.elementConstructorManager => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager)
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.context => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.context)
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys)
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..] => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName())
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy => orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy)
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName())
    org.jczh.appliedxml.Serializer.this.classNamingStrategy => orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy)
    org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName())
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix => orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix)
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString => orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString)
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix => orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix)
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString => orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString)
    org.jczh.appliedxml.Serializer.this.formatter => orig(org.jczh.appliedxml.Serializer.this.formatter)
    org.jczh.appliedxml.Serializer.this.formatter.prolog => orig(org.jczh.appliedxml.Serializer.this.formatter.prolog)
    org.jczh.appliedxml.Serializer.this.formatter.prolog.toString => orig(org.jczh.appliedxml.Serializer.this.formatter.prolog.toString)
    org.jczh.appliedxml.Serializer.this.formatter.indent => orig(org.jczh.appliedxml.Serializer.this.formatter.indent)
    org.jczh.appliedxml.Serializer.this.associatedWithSuperClass => orig(org.jczh.appliedxml.Serializer.this.associatedWithSuperClass)
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]) => orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])-1 => orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))-1
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]) => orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])-1 => orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))-1
child.var_infos:
    this
    org.jczh.appliedxml.Serializer.this
    org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired
    org.jczh.appliedxml.Serializer.this.typeAdapterManager
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.context
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName()
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName()
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName()
    org.jczh.appliedxml.Serializer.this.elementConstructorManager
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.context
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName()
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName()
    org.jczh.appliedxml.Serializer.this.classNamingStrategy
    org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName()
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString
    org.jczh.appliedxml.Serializer.this.formatter
    org.jczh.appliedxml.Serializer.this.formatter.prolog
    org.jczh.appliedxml.Serializer.this.formatter.prolog.toString
    org.jczh.appliedxml.Serializer.this.formatter.indent
    org.jczh.appliedxml.Serializer.this.associatedWithSuperClass
    orig(org.jczh.appliedxml.Serializer.this)
    orig(org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.context)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager)
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.context)
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys)
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy)
    orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy)
    orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix)
    orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString)
    orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix)
    orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString)
    orig(org.jczh.appliedxml.Serializer.this.formatter)
    orig(org.jczh.appliedxml.Serializer.this.formatter.prolog)
    orig(org.jczh.appliedxml.Serializer.this.formatter.prolog.toString)
    orig(org.jczh.appliedxml.Serializer.this.formatter.indent)
    orig(org.jczh.appliedxml.Serializer.this.associatedWithSuperClass)
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])-1
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])-1
    orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))
    orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))-1
    orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))
    orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))-1
End of diagnostics for newEnterExitRel(org.jczh.appliedxml.Serializer$1.(org.jczh.appliedxml.Serializer):::ENTER, org.jczh.appliedxml.Serializer$1.(org.jczh.appliedxml.Serializer):::EXIT)
missing variables in newEnterExitRel:
  parent = org.jczh.appliedxml.Serializer$2.(org.jczh.appliedxml.Serializer):::ENTER
  child = org.jczh.appliedxml.Serializer$2.(org.jczh.appliedxml.Serializer):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@4407b019
parent varinfos missing from parent_to_child_map:
   org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[org.jczh.appliedxml.Serializer.this.formatter.indent]
   org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[org.jczh.appliedxml.Serializer.this.formatter.indent-1]
   org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[org.jczh.appliedxml.Serializer.this.formatter.indent]
   org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[org.jczh.appliedxml.Serializer.this.formatter.indent-1]
rel.parent_to_child_map:
    org.jczh.appliedxml.Serializer.this => orig(org.jczh.appliedxml.Serializer.this)
    org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired => orig(org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.context => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.context)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..] => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName())
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName())
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache)
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName())
    org.jczh.appliedxml.Serializer.this.elementConstructorManager => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager)
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.context => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.context)
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys)
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..] => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName())
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy => orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy)
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName())
    org.jczh.appliedxml.Serializer.this.classNamingStrategy => orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy)
    org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName() => orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName())
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix => orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix)
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString => orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString)
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix => orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix)
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString => orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString)
    org.jczh.appliedxml.Serializer.this.formatter => orig(org.jczh.appliedxml.Serializer.this.formatter)
    org.jczh.appliedxml.Serializer.this.formatter.prolog => orig(org.jczh.appliedxml.Serializer.this.formatter.prolog)
    org.jczh.appliedxml.Serializer.this.formatter.prolog.toString => orig(org.jczh.appliedxml.Serializer.this.formatter.prolog.toString)
    org.jczh.appliedxml.Serializer.this.formatter.indent => orig(org.jczh.appliedxml.Serializer.this.formatter.indent)
    org.jczh.appliedxml.Serializer.this.associatedWithSuperClass => orig(org.jczh.appliedxml.Serializer.this.associatedWithSuperClass)
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]) => orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])-1 => orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))-1
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]) => orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])-1 => orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))-1
child.var_infos:
    this
    org.jczh.appliedxml.Serializer.this
    org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired
    org.jczh.appliedxml.Serializer.this.typeAdapterManager
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.context
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName()
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName()
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache
    org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName()
    org.jczh.appliedxml.Serializer.this.elementConstructorManager
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.context
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]
    org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName()
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy
    org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName()
    org.jczh.appliedxml.Serializer.this.classNamingStrategy
    org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName()
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix
    org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix
    org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString
    org.jczh.appliedxml.Serializer.this.formatter
    org.jczh.appliedxml.Serializer.this.formatter.prolog
    org.jczh.appliedxml.Serializer.this.formatter.prolog.toString
    org.jczh.appliedxml.Serializer.this.formatter.indent
    org.jczh.appliedxml.Serializer.this.associatedWithSuperClass
    orig(org.jczh.appliedxml.Serializer.this)
    orig(org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.context)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..].getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache)
    orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager)
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.context)
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys)
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])
    orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..].getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy)
    orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy)
    orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy.getClass().getName())
    orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix)
    orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix.toString)
    orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix)
    orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix.toString)
    orig(org.jczh.appliedxml.Serializer.this.formatter)
    orig(org.jczh.appliedxml.Serializer.this.formatter.prolog)
    orig(org.jczh.appliedxml.Serializer.this.formatter.prolog.toString)
    orig(org.jczh.appliedxml.Serializer.this.formatter.indent)
    orig(org.jczh.appliedxml.Serializer.this.associatedWithSuperClass)
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])
    size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..])-1
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])
    size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..])-1
    orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))
    orig(size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[..]))-1
    orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))
    orig(size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[..]))-1
End of diagnostics for newEnterExitRel(org.jczh.appliedxml.Serializer$2.(org.jczh.appliedxml.Serializer):::ENTER, org.jczh.appliedxml.Serializer$2.(org.jczh.appliedxml.Serializer):::EXIT)
===========================================================================
com.google.gsoncode.internal.$Gson$Preconditions.checkArgument(boolean):::ENTER
arg0 == true
===========================================================================
com.google.gsoncode.internal.$Gson$Preconditions.checkArgument(boolean):::EXIT
===========================================================================
com.google.gsoncode.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):::ENTER
arg0 != null
===========================================================================
com.google.gsoncode.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):::EXIT
return == orig(arg0)
return.getClass().getName() == orig(arg0.getClass().getName())
return != null
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl:::CLASS
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl:::OBJECT
this.ownerType == null
this.rawType != null
this.rawType.getClass().getName() == java.lang.Class.class
this.typeArguments != null
this.typeArguments.getClass().getName() == java.lang.reflect.Type[].class
this.typeArguments[] elements != null
this.typeArguments[].getClass().getName() == [java.lang.Class]
this.typeArguments[].getClass().getName() elements == java.lang.Class.class
size(this.typeArguments[]) == 1
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.ParameterizedTypeImpl(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]):::ENTER
arg0 == null
arg1.getClass().getName() == java.lang.Class.class
arg2.getClass().getName() == java.lang.reflect.Type[].class
size(arg2[]) == 1
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.ParameterizedTypeImpl(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]):::EXIT
arg2[] == orig(arg2[])
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.getActualTypeArguments():::ENTER
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.getActualTypeArguments():::EXIT
this.ownerType == orig(this.ownerType)
this.rawType == orig(this.rawType)
this.rawType.getClass().getName() == orig(this.rawType.getClass().getName())
this.typeArguments == orig(this.typeArguments)
this.typeArguments.getClass().getName() == orig(this.typeArguments.getClass().getName())
this.typeArguments[] == orig(this.typeArguments[])
return.getClass().getName() == java.lang.reflect.Type[].class
size(return[]) == 1
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.getRawType():::ENTER
this.rawType has only one value
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.getRawType():::EXIT
this.ownerType == orig(this.ownerType)
this.rawType == orig(this.rawType)
this.rawType.getClass().getName() == orig(this.rawType.getClass().getName())
this.typeArguments == orig(this.typeArguments)
this.typeArguments.getClass().getName() == orig(this.typeArguments.getClass().getName())
this.typeArguments[] == orig(this.typeArguments[])
this.rawType has only one value
return has only one value
return.getClass().getName() == java.lang.Class.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.hashCode():::ENTER
this.rawType has only one value
===========================================================================
com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.hashCode():::EXIT
this.ownerType == orig(this.ownerType)
this.rawType == orig(this.rawType)
this.rawType.getClass().getName() == orig(this.rawType.getClass().getName())
this.typeArguments == orig(this.typeArguments)
this.typeArguments.getClass().getName() == orig(this.typeArguments.getClass().getName())
this.typeArguments[] == orig(this.typeArguments[])
this.rawType has only one value
return one of { 1495103565, 1997890746, 2014548636 }
===========================================================================
com.google.gsoncode.internal.$Gson$Types:::CLASS
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY has only one value
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == java.lang.reflect.Type[].class
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == []
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[].getClass().getName() == []
===========================================================================
com.google.gsoncode.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):::ENTER
arg0 != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != arg0.getClass().getName()
===========================================================================
com.google.gsoncode.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):::EXIT95
return == orig(arg0)
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == java.lang.Class.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):::EXIT99
return.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
orig(arg0.getClass().getName()) == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != return.getClass().getName()
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
com.google.gsoncode.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type):::ENTER
arg0.getClass().getName() == java.lang.Class.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
===========================================================================
com.google.gsoncode.internal.$Gson$Types.declaringClassOf(java.lang.reflect.TypeVariable):::ENTER
arg0.getClass().getName() == sun.reflect.generics.reflectiveObjects.TypeVariableImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.declaringClassOf(java.lang.reflect.TypeVariable):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
===========================================================================
com.google.gsoncode.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg0.getClass().getName() == java.lang.Class.class
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != arg0.getClass().getName()
===========================================================================
com.google.gsoncode.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT160
===========================================================================
com.google.gsoncode.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT160;condition="return == true"
===========================================================================
com.google.gsoncode.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return == true
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
com.google.gsoncode.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT;condition="return == true"
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class):::ENTER
arg0.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
arg1 has only one value
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class):::EXIT293
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return.getClass().getName() == java.lang.Class.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::ENTER
arg0 != null
arg1 != null
arg2 != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != arg0.getClass().getName()
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::EXIT227
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
orig(arg1) has only one value
orig(arg2) has only one value
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::EXIT235
return.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::EXIT237
return has only one value
return.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
orig(arg0.getClass().getName()) == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
orig(arg1) has only one value
orig(arg2) has only one value
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != return.getClass().getName()
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getRawType(java.lang.reflect.Type):::ENTER
arg0 != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != arg0.getClass().getName()
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getRawType(java.lang.reflect.Type):::EXIT119
orig(arg0.getClass().getName()) == java.lang.Class.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getRawType(java.lang.reflect.Type):::EXIT129
return has only one value
orig(arg0.getClass().getName()) == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getRawType(java.lang.reflect.Type):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::ENTER
arg0.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
arg1 has only one value
arg2 has only one value
===========================================================================
com.google.gsoncode.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.hashCodeOrZero(java.lang.Object):::ENTER
arg0 == null
===========================================================================
com.google.gsoncode.internal.$Gson$Types.hashCodeOrZero(java.lang.Object):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
return == 0
===========================================================================
com.google.gsoncode.internal.$Gson$Types.indexOf(java.lang.Object[], java.lang.Object):::ENTER
arg0.getClass().getName() == java.lang.reflect.TypeVariable[].class
arg1.getClass().getName() == sun.reflect.generics.reflectiveObjects.TypeVariableImpl.class
size(arg0[]) == 1
===========================================================================
com.google.gsoncode.internal.$Gson$Types.indexOf(java.lang.Object[], java.lang.Object):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
arg0[] == orig(arg0[])
return == 0
===========================================================================
com.google.gsoncode.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]):::ENTER
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == arg2.getClass().getName()
arg0 == null
arg1 has only one value
arg1.getClass().getName() == java.lang.Class.class
size(arg2[]) == 1
===========================================================================
com.google.gsoncode.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(arg2.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
arg2[] == orig(arg2[])
return.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type):::ENTER
arg0 != null
arg1 != null
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != arg0.getClass().getName()
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != arg2.getClass().getName()
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type):::EXIT365
orig(arg2.getClass().getName()) == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type):::EXIT388
return.getClass().getName() == java.lang.Class.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != return.getClass().getName()
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != orig(arg0.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() != orig(arg2.getClass().getName())
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable):::ENTER
arg0.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
arg1 has only one value
arg2.getClass().getName() == sun.reflect.generics.reflectiveObjects.TypeVariableImpl.class
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable):::EXIT404
===========================================================================
com.google.gsoncode.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable):::EXIT
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY)
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName() == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY.getClass().getName())
com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[] == orig(com.google.gsoncode.internal.$Gson$Types.EMPTY_TYPE_ARRAY[])
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor$3:::OBJECT
com.google.gsoncode.internal.ConstructorConstructor.this has only one value
com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators has only one value
com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor$3.(com.google.gsoncode.internal.ConstructorConstructor, java.lang.reflect.Constructor):::ENTER
com.google.gsoncode.internal.ConstructorConstructor.this has only one value
com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators has only one value
com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor$3.(com.google.gsoncode.internal.ConstructorConstructor, java.lang.reflect.Constructor):::EXIT
com.google.gsoncode.internal.ConstructorConstructor.this == orig(com.google.gsoncode.internal.ConstructorConstructor.this)
com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators == orig(com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators)
com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators.getClass().getName() == orig(com.google.gsoncode.internal.ConstructorConstructor.this.instanceCreators.getClass().getName())
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor:::OBJECT
this has only one value
this.instanceCreators has only one value
this.instanceCreators != null
this.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.ConstructorConstructor():::EXIT
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.get(com.google.gsoncode.internal.TypeToken):::ENTER
this.instanceCreators.getClass().getName() != arg0.type.getClass().getName()
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.get(com.google.gsoncode.internal.TypeToken):::EXIT83
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.get(com.google.gsoncode.internal.TypeToken):::EXIT
this.instanceCreators == orig(this.instanceCreators)
this.instanceCreators.getClass().getName() == orig(this.instanceCreators.getClass().getName())
arg0.rawType == orig(arg0.rawType)
arg0.type == orig(arg0.type)
arg0.type.getClass().getName() == orig(arg0.type.getClass().getName())
arg0.hashCode == orig(arg0.hashCode)
return.getClass().getName() == com.google.gsoncode.internal.ConstructorConstructor$3.class
this.instanceCreators.getClass().getName() != arg0.type.getClass().getName()
this.instanceCreators.getClass().getName() != return.getClass().getName()
arg0.type.getClass().getName() != return.getClass().getName()
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.newDefaultConstructor(java.lang.Class):::ENTER
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.newDefaultConstructor(java.lang.Class):::EXIT101
===========================================================================
com.google.gsoncode.internal.ConstructorConstructor.newDefaultConstructor(java.lang.Class):::EXIT
this.instanceCreators == orig(this.instanceCreators)
this.instanceCreators.getClass().getName() == orig(this.instanceCreators.getClass().getName())
return.getClass().getName() == com.google.gsoncode.internal.ConstructorConstructor$3.class
this.instanceCreators.getClass().getName() != return.getClass().getName()
===========================================================================
com.google.gsoncode.internal.TypeToken:::OBJECT
this.rawType != null
this.type != null
===========================================================================
com.google.gsoncode.internal.TypeToken.TypeToken(java.lang.reflect.Type):::ENTER
arg0 != null
===========================================================================
com.google.gsoncode.internal.TypeToken.TypeToken(java.lang.reflect.Type):::EXIT
===========================================================================
com.google.gsoncode.internal.TypeToken.equals(java.lang.Object):::ENTER
this.type.getClass().getName() == java.lang.Class.class
this.hashCode one of { 349885916, 1007805637 }
arg0.getClass().getName() == com.google.gsoncode.internal.TypeToken.class
this.type.getClass().getName() != arg0.getClass().getName()
===========================================================================
com.google.gsoncode.internal.TypeToken.equals(java.lang.Object):::EXIT
this.rawType == orig(this.rawType)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
this.hashCode == orig(this.hashCode)
this.type.getClass().getName() == java.lang.Class.class
this.hashCode one of { 349885916, 1007805637 }
return == true
this.type.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
com.google.gsoncode.internal.TypeToken.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.google.gsoncode.internal.TypeToken.get(java.lang.reflect.Type):::ENTER
arg0 != null
===========================================================================
com.google.gsoncode.internal.TypeToken.get(java.lang.reflect.Type):::EXIT
return != null
return.rawType != null
return.type != null
===========================================================================
com.google.gsoncode.internal.TypeToken.getRawType():::ENTER
===========================================================================
com.google.gsoncode.internal.TypeToken.getRawType():::EXIT
this.rawType == return
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
this.hashCode == orig(this.hashCode)
return == orig(this.rawType)
return != null
===========================================================================
com.google.gsoncode.internal.TypeToken.getType():::ENTER
===========================================================================
com.google.gsoncode.internal.TypeToken.getType():::EXIT
this.rawType == orig(this.rawType)
this.type == return
this.type.getClass().getName() == return.getClass().getName()
this.hashCode == orig(this.hashCode)
return == orig(this.type)
return.getClass().getName() == orig(this.type.getClass().getName())
return != null
===========================================================================
com.google.gsoncode.internal.TypeToken.hashCode():::ENTER
===========================================================================
com.google.gsoncode.internal.TypeToken.hashCode():::EXIT
this.rawType == orig(this.rawType)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
this.hashCode == orig(this.hashCode)
===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.prefix():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.prefix():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
return.toString == ""
===========================================================================
com.sun.proxy.$Proxy2.reference():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.reference():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
return.toString == "httt://wwww.baidu.com"
===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m1 != null
com.sun.proxy.$Proxy3.m4 has only one value
com.sun.proxy.$Proxy3.m4 != null
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m3 != null
com.sun.proxy.$Proxy3.m5 has only one value
com.sun.proxy.$Proxy3.m5 != null
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m2 != null
com.sun.proxy.$Proxy3.m6 has only one value
com.sun.proxy.$Proxy3.m6 != null
com.sun.proxy.$Proxy3.m0 has only one value
com.sun.proxy.$Proxy3.m0 != null
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy3.name():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.name():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
return.toString == ""
===========================================================================
com.sun.proxy.$Proxy3.prefix():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.prefix():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
return.toString == ""
===========================================================================
com.sun.proxy.$Proxy3.required():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.required():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return == true
===========================================================================
com.sun.proxy.$Proxy3.required():::EXIT;condition="return == true"
===========================================================================
org.jczh.appliedxml.ArrayTypeAdapterFactory:::OBJECT
this has only one value
this.container == null
===========================================================================
org.jczh.appliedxml.ArrayTypeAdapterFactory.ArrayTypeAdapterFactory():::EXIT
===========================================================================
org.jczh.appliedxml.ArrayTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.ArrayTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT39
===========================================================================
org.jczh.appliedxml.ArrayTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.container == orig(this.container)
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter:::OBJECT
this.itemName.toString one of { "Exam", "ExamType", "Subject" }
this.context has only one value
this.context.nullValueSerializeRequired == false
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager.context has only one value
this.context.typeAdapterManager.constructorConstructor has only one value
this.context.typeAdapterManager.factories has only one value
this.context.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.context.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.context.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.context.typeAdapterManager.calls has only one value
this.context.typeAdapterManager.typeTokenCache has only one value
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.context.elementConstructorManager has only one value
this.context.elementConstructorManager.context has only one value
this.context.elementConstructorManager.factorys has only one value
this.context.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
this.context.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
this.context.fieldNamingStrategy has only one value
this.context.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.context.classNamingStrategy has only one value
this.context.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.context.defaultElementPrefix == null
this.context.defaultAttributePrefix == null
this.context.formatter has only one value
this.context.formatter.prolog == null
this.context.formatter.indent == 4
this.context.associatedWithSuperClass == true
this.elementType.getClass().getName() == java.lang.Class.class
this.elementTypeAdapter.getClass().getName() == org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.class
this.constructor.getClass().getName() == com.google.gsoncode.internal.ConstructorConstructor$3.class
org.jczh.appliedxml.CollectionTypeAdapterFactory.this has only one value
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor has only one value
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators has only one value
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.container == null
size(this.context.typeAdapterManager.factories[]) == 35
size(this.context.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter.Adapter(org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.Serializer, java.lang.reflect.Type, org.jczh.appliedxml.TypeAdapter, com.google.gsoncode.internal.ObjectConstructor, org.jczh.appliedxml.ContainerDefine):::ENTER
org.jczh.appliedxml.CollectionTypeAdapterFactory.this has only one value
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor has only one value
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators has only one value
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.container == null
arg1 has only one value
arg1.nullValueSerializeRequired == false
arg1.typeAdapterManager has only one value
arg1.typeAdapterManager.context has only one value
arg1.typeAdapterManager.constructorConstructor has only one value
arg1.typeAdapterManager.factories has only one value
arg1.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg1.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg1.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg1.typeAdapterManager.calls has only one value
arg1.typeAdapterManager.typeTokenCache has only one value
arg1.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg1.elementConstructorManager has only one value
arg1.elementConstructorManager.context has only one value
arg1.elementConstructorManager.factorys has only one value
arg1.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg1.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg1.fieldNamingStrategy has only one value
arg1.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg1.classNamingStrategy has only one value
arg1.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg1.defaultElementPrefix == null
arg1.defaultAttributePrefix == null
arg1.formatter has only one value
arg1.formatter.prolog == null
arg1.formatter.indent == 4
arg1.associatedWithSuperClass == true
arg2.getClass().getName() == java.lang.Class.class
arg3.getClass().getName() == org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.class
arg4.getClass().getName() == com.google.gsoncode.internal.ConstructorConstructor$3.class
arg5 == null
size(arg1.typeAdapterManager.factories[]) == 35
size(arg1.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter.Adapter(org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.Serializer, java.lang.reflect.Type, org.jczh.appliedxml.TypeAdapter, com.google.gsoncode.internal.ObjectConstructor, org.jczh.appliedxml.ContainerDefine):::EXIT
org.jczh.appliedxml.CollectionTypeAdapterFactory.this == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this)
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor)
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators)
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.container == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.container)
arg1.nullValueSerializeRequired == orig(arg1.nullValueSerializeRequired)
arg1.typeAdapterManager == orig(arg1.typeAdapterManager)
arg1.typeAdapterManager.context == orig(arg1.typeAdapterManager.context)
arg1.typeAdapterManager.constructorConstructor == orig(arg1.typeAdapterManager.constructorConstructor)
arg1.typeAdapterManager.factories == orig(arg1.typeAdapterManager.factories)
arg1.typeAdapterManager.factories[] == orig(arg1.typeAdapterManager.factories[])
arg1.typeAdapterManager.factories.getClass().getName() == orig(arg1.typeAdapterManager.factories.getClass().getName())
arg1.typeAdapterManager.calls == orig(arg1.typeAdapterManager.calls)
arg1.typeAdapterManager.typeTokenCache == orig(arg1.typeAdapterManager.typeTokenCache)
arg1.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg1.typeAdapterManager.typeTokenCache.getClass().getName())
arg1.elementConstructorManager == orig(arg1.elementConstructorManager)
arg1.elementConstructorManager.context == orig(arg1.elementConstructorManager.context)
arg1.elementConstructorManager.factorys == orig(arg1.elementConstructorManager.factorys)
arg1.elementConstructorManager.factorys[] == orig(arg1.elementConstructorManager.factorys[])
arg1.fieldNamingStrategy == orig(arg1.fieldNamingStrategy)
arg1.fieldNamingStrategy.getClass().getName() == orig(arg1.fieldNamingStrategy.getClass().getName())
arg1.classNamingStrategy == orig(arg1.classNamingStrategy)
arg1.classNamingStrategy.getClass().getName() == orig(arg1.classNamingStrategy.getClass().getName())
arg1.defaultElementPrefix == orig(arg1.defaultElementPrefix)
arg1.defaultAttributePrefix == orig(arg1.defaultAttributePrefix)
arg1.formatter == orig(arg1.formatter)
arg1.formatter.prolog == orig(arg1.formatter.prolog)
arg1.formatter.indent == orig(arg1.formatter.indent)
arg1.associatedWithSuperClass == orig(arg1.associatedWithSuperClass)
arg1.nullValueSerializeRequired == false
arg1.typeAdapterManager has only one value
arg1.typeAdapterManager.context has only one value
arg1.typeAdapterManager.constructorConstructor has only one value
arg1.typeAdapterManager.factories has only one value
arg1.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg1.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg1.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg1.typeAdapterManager.calls has only one value
arg1.typeAdapterManager.typeTokenCache has only one value
arg1.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg1.elementConstructorManager has only one value
arg1.elementConstructorManager.context has only one value
arg1.elementConstructorManager.factorys has only one value
arg1.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg1.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg1.fieldNamingStrategy has only one value
arg1.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg1.classNamingStrategy has only one value
arg1.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg1.defaultElementPrefix == null
arg1.defaultAttributePrefix == null
arg1.formatter has only one value
arg1.formatter.prolog == null
arg1.formatter.indent == 4
arg1.associatedWithSuperClass == true
size(arg1.typeAdapterManager.factories[]) == 35
size(arg1.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter.write(org.jczh.appliedxml.XmlWriter, java.util.Collection):::ENTER
arg0 has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count == 8
arg0.indenter.index == 2
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
arg1.getClass().getName() == java.util.ArrayList.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter.write(org.jczh.appliedxml.XmlWriter, java.util.Collection):::EXIT
this.itemName == orig(this.itemName)
this.itemName.toString == orig(this.itemName.toString)
this.context == orig(this.context)
this.context.nullValueSerializeRequired == orig(this.context.nullValueSerializeRequired)
this.context.typeAdapterManager == orig(this.context.typeAdapterManager)
this.context.typeAdapterManager.context == orig(this.context.typeAdapterManager.context)
this.context.typeAdapterManager.constructorConstructor == orig(this.context.typeAdapterManager.constructorConstructor)
this.context.typeAdapterManager.factories == orig(this.context.typeAdapterManager.factories)
this.context.typeAdapterManager.factories[] == orig(this.context.typeAdapterManager.factories[])
this.context.typeAdapterManager.factories.getClass().getName() == orig(this.context.typeAdapterManager.factories.getClass().getName())
this.context.typeAdapterManager.calls == orig(this.context.typeAdapterManager.calls)
this.context.typeAdapterManager.typeTokenCache == orig(this.context.typeAdapterManager.typeTokenCache)
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.context.typeAdapterManager.typeTokenCache.getClass().getName())
this.context.elementConstructorManager == orig(this.context.elementConstructorManager)
this.context.elementConstructorManager.context == orig(this.context.elementConstructorManager.context)
this.context.elementConstructorManager.factorys == orig(this.context.elementConstructorManager.factorys)
this.context.elementConstructorManager.factorys[] == orig(this.context.elementConstructorManager.factorys[])
this.context.fieldNamingStrategy == orig(this.context.fieldNamingStrategy)
this.context.fieldNamingStrategy.getClass().getName() == orig(this.context.fieldNamingStrategy.getClass().getName())
this.context.classNamingStrategy == orig(this.context.classNamingStrategy)
this.context.classNamingStrategy.getClass().getName() == orig(this.context.classNamingStrategy.getClass().getName())
this.context.defaultElementPrefix == orig(this.context.defaultElementPrefix)
this.context.defaultAttributePrefix == orig(this.context.defaultAttributePrefix)
this.context.formatter == orig(this.context.formatter)
this.context.formatter.prolog == orig(this.context.formatter.prolog)
this.context.formatter.indent == orig(this.context.formatter.indent)
this.context.associatedWithSuperClass == orig(this.context.associatedWithSuperClass)
this.elementType == orig(this.elementType)
this.elementType.getClass().getName() == orig(this.elementType.getClass().getName())
this.elementTypeAdapter == orig(this.elementTypeAdapter)
this.elementTypeAdapter.getClass().getName() == orig(this.elementTypeAdapter.getClass().getName())
this.constructor == orig(this.constructor)
this.constructor.getClass().getName() == orig(this.constructor.getClass().getName())
org.jczh.appliedxml.CollectionTypeAdapterFactory.this == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this)
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor)
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators)
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.CollectionTypeAdapterFactory.this.container == orig(org.jczh.appliedxml.CollectionTypeAdapterFactory.this.container)
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.buffer == orig(arg0.buffer)
arg0.buffer.text == orig(arg0.buffer.text)
arg0.indenter == orig(arg0.indenter)
arg0.indenter.cache == orig(arg0.indenter.cache)
arg0.indenter.indent == orig(arg0.indenter.indent)
arg0.indenter.count == orig(arg0.indenter.count)
arg0.indenter.index == orig(arg0.indenter.index)
arg0.result == orig(arg0.result)
arg0.result.getClass().getName() == orig(arg0.result.getClass().getName())
arg0.prolog == orig(arg0.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count == 8
arg0.indenter.index == 2
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory:::OBJECT
this has only one value
this.constructorConstructor has only one value
this.constructorConstructor != null
this.constructorConstructor.instanceCreators has only one value
this.constructorConstructor.instanceCreators != null
this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
this.container == null
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory.CollectionTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor):::ENTER
arg0 has only one value
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory.CollectionTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor):::EXIT
this.constructorConstructor == orig(arg0)
this.constructorConstructor.instanceCreators == arg0.instanceCreators
this.constructorConstructor.instanceCreators.getClass().getName() == arg0.instanceCreators.getClass().getName()
arg0.instanceCreators == orig(arg0.instanceCreators)
arg0.instanceCreators.getClass().getName() == orig(arg0.instanceCreators.getClass().getName())
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
this.constructorConstructor == arg0.typeAdapterManager.constructorConstructor
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT35
arg1.type.getClass().getName() == java.lang.Class.class
return == null
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT44
arg1.rawType has only one value
arg1.type.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class
arg1.hashCode one of { 1495103565, 1997890746, 2014548636 }
===========================================================================
org.jczh.appliedxml.CollectionTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.constructorConstructor == arg0.typeAdapterManager.constructorConstructor
this.constructorConstructor == orig(this.constructorConstructor)
this.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
this.constructorConstructor.instanceCreators == orig(this.constructorConstructor.instanceCreators)
this.constructorConstructor.instanceCreators.getClass().getName() == orig(this.constructorConstructor.instanceCreators.getClass().getName())
this.container == orig(this.container)
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
(arg1.type.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class)  ==>  (arg1.hashCode one of { 1495103565, 1997890746, 2014548636 })
(arg1.type.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class)  ==>  (arg1.rawType has only one value)
(arg1.type.getClass().getName() == com.google.gsoncode.internal.$Gson$Types$ParameterizedTypeImpl.class)  ==>  (return.getClass().getName() == org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter.class)
(arg1.type.getClass().getName() == java.lang.Class.class)  <==>  (return == null)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return.getClass().getName() == org.jczh.appliedxml.CollectionTypeAdapterFactory$Adapter.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.DateTypeAdapter$1:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.DateTypeAdapter$1.():::EXIT
===========================================================================
org.jczh.appliedxml.DateTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.DateTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.DocumentTreeBuilderFactory:::OBJECT
this.context == this.context.typeAdapterManager.context
this has only one value
this.context has only one value
this.context.nullValueSerializeRequired == true
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager.constructorConstructor has only one value
this.context.typeAdapterManager.factories has only one value
this.context.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.context.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.context.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.context.typeAdapterManager.calls has only one value
this.context.typeAdapterManager.typeTokenCache has only one value
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.context.elementConstructorManager == null
this.context.fieldNamingStrategy == null
this.context.classNamingStrategy == null
this.context.defaultElementPrefix == null
this.context.defaultAttributePrefix == null
this.context.formatter == null
this.context.associatedWithSuperClass == true
this.unSerializablePacketPrefixs has only one value
this.unSerializablePacketPrefixs.getClass().getName() == java.lang.String[].class
this.unSerializablePacketPrefixs[] contains no nulls and has only one value, of length 6
this.unSerializablePacketPrefixs[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.unSerializablePacketPrefixs[].getClass().getName() elements == java.lang.String.class
this.unSerializablePacketPrefixs[].toString == [java, javax, android, com.sun, org.apache, com.google]
size(this.context.typeAdapterManager.factories[]) == 35
size(this.unSerializablePacketPrefixs[]) == 6
===========================================================================
org.jczh.appliedxml.DocumentTreeBuilderFactory.DocumentTreeBuilderFactory(org.jczh.appliedxml.Serializer):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == true
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager == null
arg0.fieldNamingStrategy == null
arg0.classNamingStrategy == null
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter == null
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
===========================================================================
org.jczh.appliedxml.DocumentTreeBuilderFactory.DocumentTreeBuilderFactory(org.jczh.appliedxml.Serializer):::EXIT
this.context == arg0.typeAdapterManager.context
this.context == orig(arg0)
this.context == orig(arg0.typeAdapterManager.context)
this.context.nullValueSerializeRequired == arg0.nullValueSerializeRequired
this.context.typeAdapterManager == arg0.typeAdapterManager
this.context.typeAdapterManager.constructorConstructor == arg0.typeAdapterManager.constructorConstructor
this.context.typeAdapterManager.factories == arg0.typeAdapterManager.factories
this.context.typeAdapterManager.factories.getClass().getName() == arg0.typeAdapterManager.factories.getClass().getName()
this.context.typeAdapterManager.calls == arg0.typeAdapterManager.calls
this.context.typeAdapterManager.typeTokenCache == arg0.typeAdapterManager.typeTokenCache
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.context.associatedWithSuperClass == arg0.associatedWithSuperClass
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg0.nullValueSerializeRequired == true
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager == null
arg0.fieldNamingStrategy == null
arg0.classNamingStrategy == null
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter == null
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
===========================================================================
org.jczh.appliedxml.Element$Namespace:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == ""
this.reference has only one value
this.reference.toString == "httt://wwww.baidu.com"
===========================================================================
org.jczh.appliedxml.Element$Namespace.Namespace(java.lang.String, java.lang.String):::ENTER
arg0 has only one value
arg0.toString == ""
arg1 has only one value
arg1.toString == "httt://wwww.baidu.com"
===========================================================================
org.jczh.appliedxml.Element$Namespace.Namespace(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString == ""
arg1.toString == "httt://wwww.baidu.com"
===========================================================================
org.jczh.appliedxml.Element$Namespace.getPrefix():::ENTER
===========================================================================
org.jczh.appliedxml.Element$Namespace.getPrefix():::EXIT
this.prefix == orig(this.prefix)
this.prefix.toString == orig(this.prefix.toString)
this.reference == orig(this.reference)
this.reference.toString == orig(this.reference.toString)
return has only one value
return.toString == ""
===========================================================================
org.jczh.appliedxml.Element$Namespace.getReference():::ENTER
===========================================================================
org.jczh.appliedxml.Element$Namespace.getReference():::EXIT
this.prefix == orig(this.prefix)
this.prefix.toString == orig(this.prefix.toString)
this.reference == orig(this.reference)
this.reference.toString == orig(this.reference.toString)
return has only one value
return.toString == "httt://wwww.baidu.com"
===========================================================================
org.jczh.appliedxml.ElementConstructorManager$CollectionElementFactory:::OBJECT
this has only one value
org.jczh.appliedxml.ElementConstructorManager.this has only one value
org.jczh.appliedxml.ElementConstructorManager.this.context has only one value
org.jczh.appliedxml.ElementConstructorManager.this.context.nullValueSerializeRequired == true
org.jczh.appliedxml.ElementConstructorManager.this.context.typeAdapterManager has only one value
org.jczh.appliedxml.ElementConstructorManager.this.context.elementConstructorManager == null
org.jczh.appliedxml.ElementConstructorManager.this.context.fieldNamingStrategy == null
org.jczh.appliedxml.ElementConstructorManager.this.context.classNamingStrategy == null
org.jczh.appliedxml.ElementConstructorManager.this.context.defaultElementPrefix == null
org.jczh.appliedxml.ElementConstructorManager.this.context.defaultAttributePrefix == null
org.jczh.appliedxml.ElementConstructorManager.this.context.formatter == null
org.jczh.appliedxml.ElementConstructorManager.this.context.associatedWithSuperClass == true
org.jczh.appliedxml.ElementConstructorManager.this.factorys has only one value
org.jczh.appliedxml.ElementConstructorManager.this.factorys[] == []
org.jczh.appliedxml.ElementConstructorManager.this.factorys[].getClass().getName() == []
===========================================================================
org.jczh.appliedxml.ElementConstructorManager$CollectionElementFactory.CollectionElementFactory(org.jczh.appliedxml.ElementConstructorManager):::ENTER
org.jczh.appliedxml.ElementConstructorManager.this has only one value
org.jczh.appliedxml.ElementConstructorManager.this.context has only one value
org.jczh.appliedxml.ElementConstructorManager.this.context.nullValueSerializeRequired == true
org.jczh.appliedxml.ElementConstructorManager.this.context.typeAdapterManager has only one value
org.jczh.appliedxml.ElementConstructorManager.this.context.elementConstructorManager == null
org.jczh.appliedxml.ElementConstructorManager.this.context.fieldNamingStrategy == null
org.jczh.appliedxml.ElementConstructorManager.this.context.classNamingStrategy == null
org.jczh.appliedxml.ElementConstructorManager.this.context.defaultElementPrefix == null
org.jczh.appliedxml.ElementConstructorManager.this.context.defaultAttributePrefix == null
org.jczh.appliedxml.ElementConstructorManager.this.context.formatter == null
org.jczh.appliedxml.ElementConstructorManager.this.context.associatedWithSuperClass == true
org.jczh.appliedxml.ElementConstructorManager.this.factorys has only one value
org.jczh.appliedxml.ElementConstructorManager.this.factorys[] == []
org.jczh.appliedxml.ElementConstructorManager.this.factorys[].getClass().getName() == []
===========================================================================
org.jczh.appliedxml.ElementConstructorManager$CollectionElementFactory.CollectionElementFactory(org.jczh.appliedxml.ElementConstructorManager):::EXIT
org.jczh.appliedxml.ElementConstructorManager.this == orig(org.jczh.appliedxml.ElementConstructorManager.this)
org.jczh.appliedxml.ElementConstructorManager.this.context == orig(org.jczh.appliedxml.ElementConstructorManager.this.context)
org.jczh.appliedxml.ElementConstructorManager.this.context.nullValueSerializeRequired == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.nullValueSerializeRequired)
org.jczh.appliedxml.ElementConstructorManager.this.context.typeAdapterManager == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.typeAdapterManager)
org.jczh.appliedxml.ElementConstructorManager.this.context.elementConstructorManager == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.elementConstructorManager)
org.jczh.appliedxml.ElementConstructorManager.this.context.fieldNamingStrategy == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.fieldNamingStrategy)
org.jczh.appliedxml.ElementConstructorManager.this.context.classNamingStrategy == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.classNamingStrategy)
org.jczh.appliedxml.ElementConstructorManager.this.context.defaultElementPrefix == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.defaultElementPrefix)
org.jczh.appliedxml.ElementConstructorManager.this.context.defaultAttributePrefix == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.defaultAttributePrefix)
org.jczh.appliedxml.ElementConstructorManager.this.context.formatter == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.formatter)
org.jczh.appliedxml.ElementConstructorManager.this.context.associatedWithSuperClass == orig(org.jczh.appliedxml.ElementConstructorManager.this.context.associatedWithSuperClass)
org.jczh.appliedxml.ElementConstructorManager.this.factorys == orig(org.jczh.appliedxml.ElementConstructorManager.this.factorys)
org.jczh.appliedxml.ElementConstructorManager.this.factorys[] == orig(org.jczh.appliedxml.ElementConstructorManager.this.factorys[])
===========================================================================
org.jczh.appliedxml.ElementConstructorManager:::OBJECT
this.context == this.context.typeAdapterManager.context
this has only one value
this.context has only one value
this.context.nullValueSerializeRequired == true
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager.constructorConstructor has only one value
this.context.typeAdapterManager.factories has only one value
this.context.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.context.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.context.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.context.typeAdapterManager.calls has only one value
this.context.typeAdapterManager.typeTokenCache has only one value
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.context.elementConstructorManager == null
this.context.fieldNamingStrategy == null
this.context.classNamingStrategy == null
this.context.defaultElementPrefix == null
this.context.defaultAttributePrefix == null
this.context.formatter == null
this.context.associatedWithSuperClass == true
this.factorys has only one value
this.factorys[] contains no nulls and has only one value, of length 2
this.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
size(this.context.typeAdapterManager.factories[]) == 35
size(this.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ElementConstructorManager.ElementConstructorManager(org.jczh.appliedxml.Serializer):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == true
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager == null
arg0.fieldNamingStrategy == null
arg0.classNamingStrategy == null
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter == null
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
===========================================================================
org.jczh.appliedxml.ElementConstructorManager.ElementConstructorManager(org.jczh.appliedxml.Serializer):::EXIT
this.context == arg0.typeAdapterManager.context
this.context == orig(arg0)
this.context == orig(arg0.typeAdapterManager.context)
this.context.nullValueSerializeRequired == arg0.nullValueSerializeRequired
this.context.typeAdapterManager == arg0.typeAdapterManager
this.context.typeAdapterManager.constructorConstructor == arg0.typeAdapterManager.constructorConstructor
this.context.typeAdapterManager.factories == arg0.typeAdapterManager.factories
this.context.typeAdapterManager.factories.getClass().getName() == arg0.typeAdapterManager.factories.getClass().getName()
this.context.typeAdapterManager.calls == arg0.typeAdapterManager.calls
this.context.typeAdapterManager.typeTokenCache == arg0.typeAdapterManager.typeTokenCache
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.context.associatedWithSuperClass == arg0.associatedWithSuperClass
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg0.nullValueSerializeRequired == true
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager == null
arg0.fieldNamingStrategy == null
arg0.classNamingStrategy == null
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter == null
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
===========================================================================
org.jczh.appliedxml.Excluder:::CLASS
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName()
org.jczh.appliedxml.Excluder.DEFAULT has only one value
org.jczh.appliedxml.Excluder.DEFAULT != null
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == 136
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == true
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies has only one value
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies != null
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == []
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[].getClass().getName() == []
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies has only one value
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies != null
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == []
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[].getClass().getName() == []
===========================================================================
org.jczh.appliedxml.Excluder:::OBJECT
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.serializationStrategies.getClass().getName()
this.serializationStrategies == this.deserializationStrategies
this.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
this has only one value
this.modifiers == 136
this.serializeInnerClasses == true
this.serializationStrategies has only one value
this.serializationStrategies != null
this.serializationStrategies[] == []
this.serializationStrategies[].getClass().getName() == []
this.serializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
this.deserializationStrategies[] == []
this.deserializationStrategies[].getClass().getName() == []
===========================================================================
org.jczh.appliedxml.Excluder.Excluder():::EXIT
===========================================================================
org.jczh.appliedxml.Excluder.excludeClass(java.lang.Class, boolean):::ENTER
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
arg0 != null
===========================================================================
org.jczh.appliedxml.Excluder.excludeClass(java.lang.Class, boolean):::EXIT127
===========================================================================
org.jczh.appliedxml.Excluder.excludeClass(java.lang.Class, boolean):::EXIT127;condition="not(return == true)"
===========================================================================
org.jczh.appliedxml.Excluder.excludeClass(java.lang.Class, boolean):::EXIT
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == orig(org.jczh.appliedxml.Excluder.DEFAULT.modifiers)
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[])
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[])
this.modifiers == orig(this.modifiers)
this.serializeInnerClasses == orig(this.serializeInnerClasses)
this.serializationStrategies == orig(this.serializationStrategies)
this.serializationStrategies == orig(this.deserializationStrategies)
this.serializationStrategies[] == orig(this.serializationStrategies[])
this.deserializationStrategies[] == orig(this.deserializationStrategies[])
return == false
===========================================================================
org.jczh.appliedxml.Excluder.excludeClass(java.lang.Class, boolean):::EXIT;condition="not(return == true)"
===========================================================================
org.jczh.appliedxml.Excluder.excludeField(java.lang.reflect.Field, boolean):::ENTER
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
arg0 != null
===========================================================================
org.jczh.appliedxml.Excluder.excludeField(java.lang.reflect.Field, boolean):::EXIT103
===========================================================================
org.jczh.appliedxml.Excluder.excludeField(java.lang.reflect.Field, boolean):::EXIT103;condition="not(return == true)"
===========================================================================
org.jczh.appliedxml.Excluder.excludeField(java.lang.reflect.Field, boolean):::EXIT
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == orig(org.jczh.appliedxml.Excluder.DEFAULT.modifiers)
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[])
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[])
this.modifiers == orig(this.modifiers)
this.serializeInnerClasses == orig(this.serializeInnerClasses)
this.serializationStrategies == orig(this.serializationStrategies)
this.serializationStrategies == orig(this.deserializationStrategies)
this.serializationStrategies[] == orig(this.serializationStrategies[])
this.deserializationStrategies[] == orig(this.deserializationStrategies[])
return == false
===========================================================================
org.jczh.appliedxml.Excluder.excludeField(java.lang.reflect.Field, boolean):::EXIT;condition="not(return == true)"
===========================================================================
org.jczh.appliedxml.Excluder.isAnonymousOrLocal(java.lang.Class):::ENTER
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
arg0 != null
===========================================================================
org.jczh.appliedxml.Excluder.isAnonymousOrLocal(java.lang.Class):::EXIT
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == orig(org.jczh.appliedxml.Excluder.DEFAULT.modifiers)
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[])
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.deserializationStrategies.getClass().getName()
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[])
this.modifiers == orig(this.modifiers)
this.serializeInnerClasses == orig(this.serializeInnerClasses)
this.serializationStrategies == orig(this.serializationStrategies)
this.serializationStrategies == orig(this.deserializationStrategies)
this.serializationStrategies[] == orig(this.serializationStrategies[])
this.deserializationStrategies[] == orig(this.deserializationStrategies[])
return == false
===========================================================================
org.jczh.appliedxml.Excluder.isAnonymousOrLocal(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.jczh.appliedxml.Format:::OBJECT
this.prolog == null
this.indent one of { 0, 4 }
===========================================================================
org.jczh.appliedxml.Format.Format(int):::ENTER
arg0 one of { 0, 4 }
===========================================================================
org.jczh.appliedxml.Format.Format(int):::EXIT
this.indent == orig(arg0)
===========================================================================
org.jczh.appliedxml.Format.Format(int, java.lang.String):::ENTER
arg0 one of { 0, 4 }
arg1 == null
===========================================================================
org.jczh.appliedxml.Format.Format(int, java.lang.String):::EXIT
this.indent == orig(arg0)
===========================================================================
org.jczh.appliedxml.Format.getIndent():::ENTER
this has only one value
this.indent == 4
===========================================================================
org.jczh.appliedxml.Format.getIndent():::EXIT
this.prolog == orig(this.prolog)
this.indent == orig(this.indent)
this.indent == 4
return == 4
===========================================================================
org.jczh.appliedxml.Format.getProlog():::ENTER
this has only one value
this.indent == 4
===========================================================================
org.jczh.appliedxml.Format.getProlog():::EXIT
this.prolog == orig(this.prolog)
this.indent == orig(this.indent)
this.indent == 4
return == null
===========================================================================
org.jczh.appliedxml.Indenter$Cache:::OBJECT
this has only one value
this.list has only one value
this.list != null
this.list.getClass().getName() == java.lang.String[].class
this.count >= 0
size(this.list[]) == 16
===========================================================================
org.jczh.appliedxml.Indenter$Cache.Cache(int):::ENTER
arg0 == 16
===========================================================================
org.jczh.appliedxml.Indenter$Cache.Cache(int):::EXIT
this.list[] contains only nulls and has only one value, of length 16
this.list[] elements == null
this.list[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.list[].getClass().getName() elements == null
this.list[].toString == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.list[].toString elements == null
this.count == 0
===========================================================================
org.jczh.appliedxml.Indenter$Cache.get(int):::ENTER
===========================================================================
org.jczh.appliedxml.Indenter$Cache.get(int):::EXIT257
===========================================================================
org.jczh.appliedxml.Indenter$Cache.get(int):::EXIT
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.list[] == orig(this.list[])
this.count == orig(this.count)
===========================================================================
org.jczh.appliedxml.Indenter$Cache.set(int, java.lang.String):::ENTER
this.count one of { 0, 1, 2 }
===========================================================================
org.jczh.appliedxml.Indenter$Cache.set(int, java.lang.String):::EXIT
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
arg1.toString == orig(arg1.toString)
size(this.list[]) == orig(size(this.list[]))
===========================================================================
org.jczh.appliedxml.Indenter$Cache.size():::ENTER
===========================================================================
org.jczh.appliedxml.Indenter$Cache.size():::EXIT
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.list[] == orig(this.list[])
this.count == orig(this.count)
===========================================================================
org.jczh.appliedxml.Indenter:::OBJECT
this has only one value
this.cache has only one value
this.cache != null
this.cache.list has only one value
this.cache.list != null
this.cache.list.getClass().getName() == java.lang.String[].class
this.cache.count >= 0
this.indent == 4
this.count >= 0
this.index >= 0
size(this.cache.list[]) == 16
===========================================================================
org.jczh.appliedxml.Indenter.Indenter(org.jczh.appliedxml.Format):::ENTER
arg0 has only one value
arg0.prolog == null
arg0.indent == 4
===========================================================================
org.jczh.appliedxml.Indenter.Indenter(org.jczh.appliedxml.Format):::EXIT
arg0.prolog == orig(arg0.prolog)
arg0.indent == orig(arg0.indent)
this.cache.list[] contains only nulls and has only one value, of length 16
this.cache.list[] elements == null
this.cache.list[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].getClass().getName() elements == null
this.cache.list[].toString == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString elements == null
this.cache.count == 0
this.count == 0
this.index == 0
arg0.prolog == null
arg0.indent == 4
===========================================================================
org.jczh.appliedxml.Indenter.Indenter(org.jczh.appliedxml.Format, int):::ENTER
arg0 has only one value
arg0.prolog == null
arg0.indent == 4
arg1 == 16
===========================================================================
org.jczh.appliedxml.Indenter.Indenter(org.jczh.appliedxml.Format, int):::EXIT
arg0.prolog == orig(arg0.prolog)
arg0.indent == orig(arg0.indent)
this.cache.list[] contains only nulls and has only one value, of length 16
this.cache.list[] elements == null
this.cache.list[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].getClass().getName() elements == null
this.cache.list[].toString == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString elements == null
this.cache.count == 0
this.count == 0
this.index == 0
arg0.prolog == null
arg0.indent == 4
===========================================================================
org.jczh.appliedxml.Indenter.create():::ENTER
this.cache.count one of { 0, 1, 2 }
===========================================================================
org.jczh.appliedxml.Indenter.create():::EXIT181
this.count one of { 4, 8, 12 }
this.index one of { 2, 3, 4 }
return.toString one of { "\n    ", "\n        ", "\n            " }
===========================================================================
org.jczh.appliedxml.Indenter.create():::EXIT183
this.cache.list[] contains only nulls and has only one value, of length 16
this.cache.list[] elements == null
this.cache.list[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].getClass().getName() elements == null
this.cache.list[].toString == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString elements == null
this.cache.count == 0
this.count == 0
this.index == 1
return has only one value
return.toString == "\n"
===========================================================================
org.jczh.appliedxml.Indenter.create():::EXIT
this.cache == orig(this.cache)
this.cache.list == orig(this.cache.list)
this.cache.list.getClass().getName() == orig(this.cache.list.getClass().getName())
this.cache.list[] == orig(this.cache.list[])
this.cache.count == orig(this.cache.count)
this.indent == orig(this.indent)
this.count == orig(this.count)
this.index == orig(this.index)
(this.count == 0)  <==>  (return.toString == "\n")
(this.count == 0)  <==>  (this.index == 1)
(this.count == 0)  ==>  (return has only one value)
(this.count == 0)  ==>  (this.cache.count == 0)
(this.count == 0)  ==>  (this.cache.list[] contains only nulls and has only one value, of length 16)
(this.count == 0)  ==>  (this.cache.list[] elements == null)
(this.count == 0)  ==>  (this.cache.list[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(this.count == 0)  ==>  (this.cache.list[].getClass().getName() elements == null)
(this.count == 0)  ==>  (this.cache.list[].toString == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(this.count == 0)  ==>  (this.cache.list[].toString elements == null)
(this.count one of { 4, 8, 12 })  <==>  (return.toString one of { "\n    ", "\n        ", "\n            " })
(this.count one of { 4, 8, 12 })  <==>  (this.index one of { 2, 3, 4 })
(this.count one of { 4, 8, 12 })  ==>  (this.cache.count one of { 0, 1, 2 })
this.cache.count one of { 0, 1, 2 }
===========================================================================
org.jczh.appliedxml.Indenter.indent(int):::ENTER
arg0 >= 0
===========================================================================
org.jczh.appliedxml.Indenter.indent(int):::EXIT159
this.cache.count one of { 1, 2, 3 }
===========================================================================
org.jczh.appliedxml.Indenter.indent(int):::EXIT162
this.cache.count == orig(this.cache.count)
this.cache.list[] has only one value, of length 16
this.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString elements one of { null, "\n" }
this.cache.count == 0
this.count == 0
this.index == 1
return has only one value
return.toString == ""
orig(this.cache.list[]) contains only nulls and has only one value, of length 16
orig(this.cache.list[]) elements == null
orig(this.cache.list[].getClass().getName()) == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
orig(this.cache.list[].getClass().getName()) elements == null
orig(this.cache.list[].toString) == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
orig(this.cache.list[].toString) elements == null
orig(arg0) == 0
===========================================================================
org.jczh.appliedxml.Indenter.indent(int):::EXIT
this.cache == orig(this.cache)
this.cache.list == orig(this.cache.list)
this.cache.list.getClass().getName() == orig(this.cache.list.getClass().getName())
this.indent == orig(this.indent)
this.count == orig(this.count)
this.index == orig(this.index)
size(this.cache.list[]) == orig(size(this.cache.list[]))
(this.cache.count == 0)  <==>  (this.count == 0)
(this.cache.count == 0)  ==>  (orig(arg0) == 0)
(this.cache.count == 0)  ==>  (orig(this.cache.count) == 0)
(this.cache.count == 0)  ==>  (orig(this.cache.list[]) contains only nulls and has only one value, of length 16)
(this.cache.count == 0)  ==>  (orig(this.cache.list[]) elements == null)
(this.cache.count == 0)  ==>  (orig(this.cache.list[].getClass().getName()) == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(this.cache.count == 0)  ==>  (orig(this.cache.list[].getClass().getName()) elements == null)
(this.cache.count == 0)  ==>  (orig(this.cache.list[].toString) == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(this.cache.count == 0)  ==>  (orig(this.cache.list[].toString) elements == null)
(this.cache.count == 0)  ==>  (return has only one value)
(this.cache.count == 0)  ==>  (return.toString == "")
(this.cache.count == 0)  ==>  (this.cache.count == orig(this.cache.count))
(this.cache.count == 0)  ==>  (this.cache.list[] has only one value, of length 16)
(this.cache.count == 0)  ==>  (this.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(this.cache.count == 0)  ==>  (this.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(this.cache.count == 0)  ==>  (this.cache.list[].toString elements one of { null, "\n" })
(this.cache.count == 0)  ==>  (this.index == 1)
return != null
this.cache.list[].toString >= orig(this.cache.list[].toString) (lexically)
this.cache.count >= orig(this.cache.count)
===========================================================================
org.jczh.appliedxml.Indenter.pop():::ENTER
this.cache.list[] has only one value, of length 16
this.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.count == 3
===========================================================================
org.jczh.appliedxml.Indenter.pop():::EXIT
this.cache == orig(this.cache)
this.cache.list == orig(this.cache.list)
this.cache.list.getClass().getName() == orig(this.cache.list.getClass().getName())
this.cache.list[] == orig(this.cache.list[])
this.cache.count == orig(this.cache.count)
this.indent == orig(this.indent)
this.cache.list[] has only one value, of length 16
this.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.cache.count == 3
return != null
this.count - orig(this.count) + 4 == 0
this.index - orig(this.index) + 1 == 0
===========================================================================
org.jczh.appliedxml.Indenter.push():::ENTER
===========================================================================
org.jczh.appliedxml.Indenter.push():::EXIT
this.cache == orig(this.cache)
this.cache.list == orig(this.cache.list)
this.cache.list.getClass().getName() == orig(this.cache.list.getClass().getName())
this.indent == orig(this.indent)
size(this.cache.list[]) == orig(size(this.cache.list[]))
return != null
this.cache.list[].toString >= orig(this.cache.list[].toString) (lexically)
this.cache.count >= orig(this.cache.count)
this.count - orig(this.count) - 4 == 0
this.index - orig(this.index) - 1 == 0
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory:::OBJECT
this has only one value
this.constructorConstructor has only one value
this.constructorConstructor.instanceCreators has only one value
this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
this.container == null
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.MapTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor):::ENTER
arg0 has only one value
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.MapTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor):::EXIT
this.constructorConstructor == orig(arg0)
this.constructorConstructor.instanceCreators == arg0.instanceCreators
this.constructorConstructor.instanceCreators.getClass().getName() == arg0.instanceCreators.getClass().getName()
arg0.instanceCreators == orig(arg0.instanceCreators)
arg0.instanceCreators.getClass().getName() == orig(arg0.instanceCreators.getClass().getName())
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.MapTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor, org.jczh.appliedxml.ContainerDefine):::ENTER
arg0 has only one value
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
arg1 == null
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.MapTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor, org.jczh.appliedxml.ContainerDefine):::EXIT
this.constructorConstructor == orig(arg0)
this.constructorConstructor.instanceCreators == arg0.instanceCreators
this.constructorConstructor.instanceCreators.getClass().getName() == arg0.instanceCreators.getClass().getName()
arg0.instanceCreators == orig(arg0.instanceCreators)
arg0.instanceCreators.getClass().getName() == orig(arg0.instanceCreators.getClass().getName())
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
this.constructorConstructor == arg0.typeAdapterManager.constructorConstructor
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.type.getClass().getName() == java.lang.Class.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT36
===========================================================================
org.jczh.appliedxml.MapTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.constructorConstructor == arg0.typeAdapterManager.constructorConstructor
this.constructorConstructor == orig(this.constructorConstructor)
this.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
this.constructorConstructor.instanceCreators == orig(this.constructorConstructor.instanceCreators)
this.constructorConstructor.instanceCreators.getClass().getName() == orig(this.constructorConstructor.instanceCreators.getClass().getName())
this.container == orig(this.container)
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.type.getClass().getName() == java.lang.Class.class
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.Mode:::OBJECT
===========================================================================
org.jczh.appliedxml.Mode.Mode(java.lang.String, int):::ENTER
arg0.toString one of { "DATA", "ESCAPE", "INHERIT" }
arg1 one of { 0, 1, 2 }
===========================================================================
org.jczh.appliedxml.Mode.Mode(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "DATA", "ESCAPE", "INHERIT" }
===========================================================================
org.jczh.appliedxml.ObjectTypeAdapter$1:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.ObjectTypeAdapter$1.():::EXIT
===========================================================================
org.jczh.appliedxml.ObjectTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.ObjectTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT14
===========================================================================
org.jczh.appliedxml.ObjectTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.OutputBuffer:::OBJECT
this has only one value
this.text has only one value
this.text != null
===========================================================================
org.jczh.appliedxml.OutputBuffer.OutputBuffer():::EXIT
===========================================================================
org.jczh.appliedxml.OutputBuffer.append(char):::ENTER
arg0 one of { 60, 62 }
===========================================================================
org.jczh.appliedxml.OutputBuffer.append(char):::EXIT
this.text == orig(this.text)
===========================================================================
org.jczh.appliedxml.OutputBuffer.append(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jczh.appliedxml.OutputBuffer.append(java.lang.String):::EXIT
this.text == orig(this.text)
arg0.toString == orig(arg0.toString)
===========================================================================
org.jczh.appliedxml.OutputBuffer.clear():::ENTER
===========================================================================
org.jczh.appliedxml.OutputBuffer.clear():::EXIT
this.text == orig(this.text)
===========================================================================
org.jczh.appliedxml.OutputBuffer.write(java.io.Writer):::ENTER
arg0 has only one value
arg0 != null
arg0.getClass().getName() == java.io.BufferedWriter.class
===========================================================================
org.jczh.appliedxml.OutputBuffer.write(java.io.Writer):::EXIT
this.text == orig(this.text)
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter:::OBJECT
this.constructor != null
this.constructor.getClass().getName() == com.google.gsoncode.internal.ConstructorConstructor$3.class
this.boundFields != null
this.boundFields.getClass().getName() == java.util.LinkedHashMap.class
this.boundAttrs != null
this.boundAttrs.getClass().getName() == java.util.LinkedHashMap.class
this.context has only one value
this.context != null
this.context.nullValueSerializeRequired == false
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager != null
this.context.typeAdapterManager.context has only one value
this.context.typeAdapterManager.context != null
this.context.typeAdapterManager.constructorConstructor has only one value
this.context.typeAdapterManager.constructorConstructor != null
this.context.typeAdapterManager.factories has only one value
this.context.typeAdapterManager.factories != null
this.context.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.context.typeAdapterManager.factories[] elements != null
this.context.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.context.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.context.typeAdapterManager.calls has only one value
this.context.typeAdapterManager.calls != null
this.context.typeAdapterManager.typeTokenCache has only one value
this.context.typeAdapterManager.typeTokenCache != null
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.context.elementConstructorManager has only one value
this.context.elementConstructorManager != null
this.context.elementConstructorManager.context has only one value
this.context.elementConstructorManager.context != null
this.context.elementConstructorManager.factorys has only one value
this.context.elementConstructorManager.factorys != null
this.context.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
this.context.elementConstructorManager.factorys[] elements != null
this.context.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
this.context.fieldNamingStrategy has only one value
this.context.fieldNamingStrategy != null
this.context.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.context.classNamingStrategy has only one value
this.context.classNamingStrategy != null
this.context.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.context.defaultElementPrefix == null
this.context.defaultAttributePrefix == null
this.context.formatter has only one value
this.context.formatter != null
this.context.formatter.prolog == null
this.context.formatter.indent == 4
this.context.associatedWithSuperClass == true
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor != null
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators != null
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder != null
org.jczh.appliedxml.Excluder.DEFAULT has only one value
org.jczh.appliedxml.Excluder.DEFAULT != null
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers == 136
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses == true
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies != null
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[] == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[].getClass().getName() == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies != null
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[] == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[].getClass().getName() == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
size(this.context.typeAdapterManager.factories[]) == 35
size(this.context.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.Adapter(org.jczh.appliedxml.ReflectiveTypeAdapterFactory, org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder has only one value
org.jczh.appliedxml.Excluder.DEFAULT has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers == 136
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses == true
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[] == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[].getClass().getName() == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies has only one value
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[] == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[].getClass().getName() == []
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
arg1 has only one value
arg1.nullValueSerializeRequired == false
arg1.typeAdapterManager has only one value
arg1.typeAdapterManager.context has only one value
arg1.typeAdapterManager.constructorConstructor has only one value
arg1.typeAdapterManager.factories has only one value
arg1.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg1.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg1.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg1.typeAdapterManager.calls has only one value
arg1.typeAdapterManager.typeTokenCache has only one value
arg1.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg1.elementConstructorManager has only one value
arg1.elementConstructorManager.context has only one value
arg1.elementConstructorManager.factorys has only one value
arg1.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg1.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg1.fieldNamingStrategy has only one value
arg1.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg1.classNamingStrategy has only one value
arg1.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg1.defaultElementPrefix == null
arg1.defaultAttributePrefix == null
arg1.formatter has only one value
arg1.formatter.prolog == null
arg1.formatter.indent == 4
arg1.associatedWithSuperClass == true
arg2.type.getClass().getName() == java.lang.Class.class
size(arg1.typeAdapterManager.factories[]) == 35
size(arg1.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.Adapter(org.jczh.appliedxml.ReflectiveTypeAdapterFactory, org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder)
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[] == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[])
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName())
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[] == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[])
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName())
arg1.nullValueSerializeRequired == orig(arg1.nullValueSerializeRequired)
arg1.typeAdapterManager == orig(arg1.typeAdapterManager)
arg1.typeAdapterManager.context == orig(arg1.typeAdapterManager.context)
arg1.typeAdapterManager.constructorConstructor == orig(arg1.typeAdapterManager.constructorConstructor)
arg1.typeAdapterManager.factories == orig(arg1.typeAdapterManager.factories)
arg1.typeAdapterManager.factories[] == orig(arg1.typeAdapterManager.factories[])
arg1.typeAdapterManager.factories.getClass().getName() == orig(arg1.typeAdapterManager.factories.getClass().getName())
arg1.typeAdapterManager.calls == orig(arg1.typeAdapterManager.calls)
arg1.typeAdapterManager.typeTokenCache == orig(arg1.typeAdapterManager.typeTokenCache)
arg1.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg1.typeAdapterManager.typeTokenCache.getClass().getName())
arg1.elementConstructorManager == orig(arg1.elementConstructorManager)
arg1.elementConstructorManager.context == orig(arg1.elementConstructorManager.context)
arg1.elementConstructorManager.factorys == orig(arg1.elementConstructorManager.factorys)
arg1.elementConstructorManager.factorys[] == orig(arg1.elementConstructorManager.factorys[])
arg1.fieldNamingStrategy == orig(arg1.fieldNamingStrategy)
arg1.fieldNamingStrategy.getClass().getName() == orig(arg1.fieldNamingStrategy.getClass().getName())
arg1.classNamingStrategy == orig(arg1.classNamingStrategy)
arg1.classNamingStrategy.getClass().getName() == orig(arg1.classNamingStrategy.getClass().getName())
arg1.defaultElementPrefix == orig(arg1.defaultElementPrefix)
arg1.defaultAttributePrefix == orig(arg1.defaultAttributePrefix)
arg1.formatter == orig(arg1.formatter)
arg1.formatter.prolog == orig(arg1.formatter.prolog)
arg1.formatter.indent == orig(arg1.formatter.indent)
arg1.associatedWithSuperClass == orig(arg1.associatedWithSuperClass)
arg2.rawType == orig(arg2.rawType)
arg2.type == orig(arg2.type)
arg2.type.getClass().getName() == orig(arg2.type.getClass().getName())
arg2.hashCode == orig(arg2.hashCode)
arg1.nullValueSerializeRequired == false
arg1.typeAdapterManager has only one value
arg1.typeAdapterManager.context has only one value
arg1.typeAdapterManager.constructorConstructor has only one value
arg1.typeAdapterManager.factories has only one value
arg1.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg1.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg1.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg1.typeAdapterManager.calls has only one value
arg1.typeAdapterManager.typeTokenCache has only one value
arg1.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg1.elementConstructorManager has only one value
arg1.elementConstructorManager.context has only one value
arg1.elementConstructorManager.factorys has only one value
arg1.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg1.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg1.fieldNamingStrategy has only one value
arg1.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg1.classNamingStrategy has only one value
arg1.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg1.defaultElementPrefix == null
arg1.defaultAttributePrefix == null
arg1.formatter has only one value
arg1.formatter.prolog == null
arg1.formatter.indent == 4
arg1.associatedWithSuperClass == true
arg2.type.getClass().getName() == java.lang.Class.class
size(arg1.typeAdapterManager.factories[]) == 35
size(arg1.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.getBoundFields(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.type.getClass().getName() == java.lang.Class.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.getBoundFields(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT302
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.getBoundFields(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.constructor == orig(this.constructor)
this.constructor.getClass().getName() == orig(this.constructor.getClass().getName())
this.boundFields == orig(this.boundFields)
this.boundFields.getClass().getName() == orig(this.boundFields.getClass().getName())
this.boundAttrs == orig(this.boundAttrs)
this.boundAttrs.getClass().getName() == orig(this.boundAttrs.getClass().getName())
this.context == orig(this.context)
this.context.nullValueSerializeRequired == orig(this.context.nullValueSerializeRequired)
this.context.typeAdapterManager == orig(this.context.typeAdapterManager)
this.context.typeAdapterManager.context == orig(this.context.typeAdapterManager.context)
this.context.typeAdapterManager.constructorConstructor == orig(this.context.typeAdapterManager.constructorConstructor)
this.context.typeAdapterManager.factories == orig(this.context.typeAdapterManager.factories)
this.context.typeAdapterManager.factories[] == orig(this.context.typeAdapterManager.factories[])
this.context.typeAdapterManager.factories.getClass().getName() == orig(this.context.typeAdapterManager.factories.getClass().getName())
this.context.typeAdapterManager.calls == orig(this.context.typeAdapterManager.calls)
this.context.typeAdapterManager.typeTokenCache == orig(this.context.typeAdapterManager.typeTokenCache)
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.context.typeAdapterManager.typeTokenCache.getClass().getName())
this.context.elementConstructorManager == orig(this.context.elementConstructorManager)
this.context.elementConstructorManager.context == orig(this.context.elementConstructorManager.context)
this.context.elementConstructorManager.factorys == orig(this.context.elementConstructorManager.factorys)
this.context.elementConstructorManager.factorys[] == orig(this.context.elementConstructorManager.factorys[])
this.context.fieldNamingStrategy == orig(this.context.fieldNamingStrategy)
this.context.fieldNamingStrategy.getClass().getName() == orig(this.context.fieldNamingStrategy.getClass().getName())
this.context.classNamingStrategy == orig(this.context.classNamingStrategy)
this.context.classNamingStrategy.getClass().getName() == orig(this.context.classNamingStrategy.getClass().getName())
this.context.defaultElementPrefix == orig(this.context.defaultElementPrefix)
this.context.defaultAttributePrefix == orig(this.context.defaultAttributePrefix)
this.context.formatter == orig(this.context.formatter)
this.context.formatter.prolog == orig(this.context.formatter.prolog)
this.context.formatter.indent == orig(this.context.formatter.indent)
this.context.associatedWithSuperClass == orig(this.context.associatedWithSuperClass)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder)
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[] == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[])
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName())
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[] == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[])
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName())
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0.typeAdapterManager.context)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0.elementConstructorManager.context)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.write(org.jczh.appliedxml.XmlWriter, java.lang.Object):::ENTER
arg0 has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count one of { 4, 12 }
arg0.indenter.index one of { 1, 3 }
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.write(org.jczh.appliedxml.XmlWriter, java.lang.Object):::EXIT
this.constructor == orig(this.constructor)
this.constructor.getClass().getName() == orig(this.constructor.getClass().getName())
this.boundFields == orig(this.boundFields)
this.boundFields.getClass().getName() == orig(this.boundFields.getClass().getName())
this.boundAttrs == orig(this.boundAttrs)
this.boundAttrs.getClass().getName() == orig(this.boundAttrs.getClass().getName())
this.context == orig(this.context)
this.context.nullValueSerializeRequired == orig(this.context.nullValueSerializeRequired)
this.context.typeAdapterManager == orig(this.context.typeAdapterManager)
this.context.typeAdapterManager.context == orig(this.context.typeAdapterManager.context)
this.context.typeAdapterManager.constructorConstructor == orig(this.context.typeAdapterManager.constructorConstructor)
this.context.typeAdapterManager.factories == orig(this.context.typeAdapterManager.factories)
this.context.typeAdapterManager.factories[] == orig(this.context.typeAdapterManager.factories[])
this.context.typeAdapterManager.factories.getClass().getName() == orig(this.context.typeAdapterManager.factories.getClass().getName())
this.context.typeAdapterManager.calls == orig(this.context.typeAdapterManager.calls)
this.context.typeAdapterManager.typeTokenCache == orig(this.context.typeAdapterManager.typeTokenCache)
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.context.typeAdapterManager.typeTokenCache.getClass().getName())
this.context.elementConstructorManager == orig(this.context.elementConstructorManager)
this.context.elementConstructorManager.context == orig(this.context.elementConstructorManager.context)
this.context.elementConstructorManager.factorys == orig(this.context.elementConstructorManager.factorys)
this.context.elementConstructorManager.factorys[] == orig(this.context.elementConstructorManager.factorys[])
this.context.fieldNamingStrategy == orig(this.context.fieldNamingStrategy)
this.context.fieldNamingStrategy.getClass().getName() == orig(this.context.fieldNamingStrategy.getClass().getName())
this.context.classNamingStrategy == orig(this.context.classNamingStrategy)
this.context.classNamingStrategy.getClass().getName() == orig(this.context.classNamingStrategy.getClass().getName())
this.context.defaultElementPrefix == orig(this.context.defaultElementPrefix)
this.context.defaultAttributePrefix == orig(this.context.defaultAttributePrefix)
this.context.formatter == orig(this.context.formatter)
this.context.formatter.prolog == orig(this.context.formatter.prolog)
this.context.formatter.indent == orig(this.context.formatter.indent)
this.context.associatedWithSuperClass == orig(this.context.associatedWithSuperClass)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder)
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.modifiers)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializeInnerClasses)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[] == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies[])
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.serializationStrategies.getClass().getName())
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies)
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[] == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies[])
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.ReflectiveTypeAdapterFactory.this.excluder.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.buffer == orig(arg0.buffer)
arg0.buffer.text == orig(arg0.buffer.text)
arg0.indenter == orig(arg0.indenter)
arg0.indenter.cache == orig(arg0.indenter.cache)
arg0.indenter.indent == orig(arg0.indenter.indent)
arg0.indenter.count == orig(arg0.indenter.count)
arg0.indenter.index == orig(arg0.indenter.index)
arg0.result == orig(arg0.result)
arg0.result.getClass().getName() == orig(arg0.result.getClass().getName())
arg0.prolog == orig(arg0.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count one of { 4, 12 }
arg0.indenter.index one of { 1, 3 }
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$BoundField:::OBJECT
this.name != null
this.prefix == null
this.fieldType != null
this.fieldType.rawType != null
this.fieldType.type != null
this.field != null
this.containerDefine == null
this.typeAdapter != null
this.namespaces == null
this.serialized == true
this.deserialized == true
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$BoundField.BoundField(org.jczh.appliedxml.Serializer, java.lang.reflect.Field, com.google.gsoncode.internal.TypeToken, boolean, boolean):::ENTER
arg0 has only one value
arg0 != null
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.context != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.context != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1 != null
arg2 != null
arg2.rawType != null
arg2.type != null
arg3 == true
arg4 == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$BoundField.BoundField(org.jczh.appliedxml.Serializer, java.lang.reflect.Field, com.google.gsoncode.internal.TypeToken, boolean, boolean):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0.typeAdapterManager.context)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0.elementConstructorManager.context)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg2.rawType == orig(arg2.rawType)
arg2.type == orig(arg2.type)
arg2.type.getClass().getName() == orig(arg2.type.getClass().getName())
arg2.hashCode == orig(arg2.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.context != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.context != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg2.rawType != null
arg2.type != null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$BoundField.get(java.lang.Object):::ENTER
arg0 != null
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory$BoundField.get(java.lang.Object):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.prefix == orig(this.prefix)
this.fieldType == orig(this.fieldType)
this.fieldType.rawType == orig(this.fieldType.rawType)
this.fieldType.type == orig(this.fieldType.type)
this.fieldType.type.getClass().getName() == orig(this.fieldType.type.getClass().getName())
this.fieldType.hashCode == orig(this.fieldType.hashCode)
this.isElement == orig(this.isElement)
this.isAttribute == orig(this.isAttribute)
this.isRequired == orig(this.isRequired)
this.field == orig(this.field)
this.containerDefine == orig(this.containerDefine)
this.typeAdapter == orig(this.typeAdapter)
this.typeAdapter.getClass().getName() == orig(this.typeAdapter.getClass().getName())
this.namespaces == orig(this.namespaces)
this.serialized == orig(this.serialized)
this.deserialized == orig(this.deserialized)
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory:::OBJECT
this.excluder == org.jczh.appliedxml.Excluder.DEFAULT
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName()
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.excluder.serializationStrategies.getClass().getName()
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == this.excluder.deserializationStrategies.getClass().getName()
this.excluder.serializationStrategies == this.excluder.deserializationStrategies
this has only one value
this.constructorConstructor has only one value
this.constructorConstructor != null
this.constructorConstructor.instanceCreators has only one value
this.constructorConstructor.instanceCreators != null
this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
org.jczh.appliedxml.Excluder.DEFAULT has only one value
org.jczh.appliedxml.Excluder.DEFAULT != null
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == 136
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == true
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies has only one value
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies != null
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == []
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[].getClass().getName() == []
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == java.util.Collections$EmptyList.class
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == []
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[].getClass().getName() == []
this.excluder.modifiers == 136
this.excluder.serializeInnerClasses == true
this.excluder.serializationStrategies has only one value
this.excluder.serializationStrategies != null
this.excluder.serializationStrategies[] == []
this.excluder.serializationStrategies[].getClass().getName() == []
this.excluder.deserializationStrategies[] == []
this.excluder.deserializationStrategies[].getClass().getName() == []
this.constructorConstructor.instanceCreators.getClass().getName() != org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName()
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.ReflectiveTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor):::ENTER
arg0 has only one value
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.ReflectiveTypeAdapterFactory(com.google.gsoncode.internal.ConstructorConstructor):::EXIT
this.constructorConstructor == orig(arg0)
this.constructorConstructor.instanceCreators == arg0.instanceCreators
this.constructorConstructor.instanceCreators.getClass().getName() == arg0.instanceCreators.getClass().getName()
arg0.instanceCreators == orig(arg0.instanceCreators)
arg0.instanceCreators.getClass().getName() == orig(arg0.instanceCreators.getClass().getName())
arg0.instanceCreators has only one value
arg0.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.checkFieldSerialialbe(java.lang.reflect.Field, boolean):::ENTER
arg0 != null
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.checkFieldSerialialbe(java.lang.reflect.Field, boolean):::EXIT
this.constructorConstructor == orig(this.constructorConstructor)
this.constructorConstructor.instanceCreators == orig(this.constructorConstructor.instanceCreators)
this.constructorConstructor.instanceCreators.getClass().getName() == orig(this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT == orig(this.excluder)
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == orig(org.jczh.appliedxml.Excluder.DEFAULT.modifiers)
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[])
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.excluder.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.excluder.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[])
this.excluder.modifiers == orig(this.excluder.modifiers)
this.excluder.serializeInnerClasses == orig(this.excluder.serializeInnerClasses)
this.excluder.serializationStrategies == orig(this.excluder.serializationStrategies)
this.excluder.serializationStrategies == orig(this.excluder.deserializationStrategies)
this.excluder.serializationStrategies[] == orig(this.excluder.serializationStrategies[])
this.excluder.deserializationStrategies[] == orig(this.excluder.deserializationStrategies[])
return == true
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.checkFieldSerialialbe(java.lang.reflect.Field, boolean):::EXIT;condition="return == true"
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.type.getClass().getName() == java.lang.Class.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT52
===========================================================================
org.jczh.appliedxml.ReflectiveTypeAdapterFactory.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.constructorConstructor == orig(this.constructorConstructor)
this.constructorConstructor.instanceCreators == orig(this.constructorConstructor.instanceCreators)
this.constructorConstructor.instanceCreators.getClass().getName() == orig(this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT == orig(this.excluder)
org.jczh.appliedxml.Excluder.DEFAULT == orig(org.jczh.appliedxml.Excluder.DEFAULT)
org.jczh.appliedxml.Excluder.DEFAULT.modifiers == orig(org.jczh.appliedxml.Excluder.DEFAULT.modifiers)
org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializeInnerClasses)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies)
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies[])
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.excluder.serializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.serializationStrategies.getClass().getName() == orig(this.excluder.deserializationStrategies.getClass().getName())
org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[] == orig(org.jczh.appliedxml.Excluder.DEFAULT.deserializationStrategies[])
this.excluder.modifiers == orig(this.excluder.modifiers)
this.excluder.serializeInnerClasses == orig(this.excluder.serializeInnerClasses)
this.excluder.serializationStrategies == orig(this.excluder.serializationStrategies)
this.excluder.serializationStrategies == orig(this.excluder.deserializationStrategies)
this.excluder.serializationStrategies[] == orig(this.excluder.serializationStrategies[])
this.excluder.deserializationStrategies[] == orig(this.excluder.deserializationStrategies[])
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0.typeAdapterManager.context)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0.elementConstructorManager.context)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.type.getClass().getName() == java.lang.Class.class
return.getClass().getName() == org.jczh.appliedxml.ReflectiveTypeAdapterFactory$Adapter.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.Serializer$1:::OBJECT
org.jczh.appliedxml.Serializer.this == org.jczh.appliedxml.Serializer.this.typeAdapterManager.context
org.jczh.appliedxml.Serializer.this.typeAdapterManager.context == org.jczh.appliedxml.Serializer.this.elementConstructorManager.context
this has only one value
org.jczh.appliedxml.Serializer.this has only one value
org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired == true
org.jczh.appliedxml.Serializer.this.typeAdapterManager has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.context has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
org.jczh.appliedxml.Serializer.this.elementConstructorManager has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy == null
org.jczh.appliedxml.Serializer.this.classNamingStrategy == null
org.jczh.appliedxml.Serializer.this.defaultElementPrefix == null
org.jczh.appliedxml.Serializer.this.defaultAttributePrefix == null
org.jczh.appliedxml.Serializer.this.formatter == null
org.jczh.appliedxml.Serializer.this.associatedWithSuperClass == true
size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[]) == 35
size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.Serializer$1.(org.jczh.appliedxml.Serializer):::ENTER
org.jczh.appliedxml.Serializer.this == org.jczh.appliedxml.Serializer.this.typeAdapterManager.context
org.jczh.appliedxml.Serializer.this == org.jczh.appliedxml.Serializer.this.elementConstructorManager.context
org.jczh.appliedxml.Serializer.this has only one value
org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired == true
org.jczh.appliedxml.Serializer.this.typeAdapterManager has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
org.jczh.appliedxml.Serializer.this.elementConstructorManager has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy == null
org.jczh.appliedxml.Serializer.this.classNamingStrategy == null
org.jczh.appliedxml.Serializer.this.defaultElementPrefix == null
org.jczh.appliedxml.Serializer.this.defaultAttributePrefix == null
org.jczh.appliedxml.Serializer.this.formatter == null
org.jczh.appliedxml.Serializer.this.associatedWithSuperClass == true
size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[]) == 35
size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.Serializer$1.(org.jczh.appliedxml.Serializer):::EXIT
org.jczh.appliedxml.Serializer.this == orig(org.jczh.appliedxml.Serializer.this)
org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired == orig(org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired)
org.jczh.appliedxml.Serializer.this.typeAdapterManager == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.context == orig(org.jczh.appliedxml.Serializer.this)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[] == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[])
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName())
org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName())
org.jczh.appliedxml.Serializer.this.elementConstructorManager == orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager)
org.jczh.appliedxml.Serializer.this.elementConstructorManager.context == orig(org.jczh.appliedxml.Serializer.this)
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys == orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys)
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[] == orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[])
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy == orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy)
org.jczh.appliedxml.Serializer.this.classNamingStrategy == orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy)
org.jczh.appliedxml.Serializer.this.defaultElementPrefix == orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix)
org.jczh.appliedxml.Serializer.this.defaultAttributePrefix == orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix)
org.jczh.appliedxml.Serializer.this.formatter == orig(org.jczh.appliedxml.Serializer.this.formatter)
org.jczh.appliedxml.Serializer.this.associatedWithSuperClass == orig(org.jczh.appliedxml.Serializer.this.associatedWithSuperClass)
===========================================================================
org.jczh.appliedxml.Serializer$2:::OBJECT
org.jczh.appliedxml.Serializer.this == org.jczh.appliedxml.Serializer.this.typeAdapterManager.context
org.jczh.appliedxml.Serializer.this.typeAdapterManager.context == org.jczh.appliedxml.Serializer.this.elementConstructorManager.context
this has only one value
org.jczh.appliedxml.Serializer.this has only one value
org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired == true
org.jczh.appliedxml.Serializer.this.typeAdapterManager has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.context has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
org.jczh.appliedxml.Serializer.this.elementConstructorManager has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy has only one value
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
org.jczh.appliedxml.Serializer.this.classNamingStrategy == null
org.jczh.appliedxml.Serializer.this.defaultElementPrefix == null
org.jczh.appliedxml.Serializer.this.defaultAttributePrefix == null
org.jczh.appliedxml.Serializer.this.formatter == null
org.jczh.appliedxml.Serializer.this.associatedWithSuperClass == true
size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[]) == 35
size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.Serializer$2.(org.jczh.appliedxml.Serializer):::ENTER
org.jczh.appliedxml.Serializer.this == org.jczh.appliedxml.Serializer.this.typeAdapterManager.context
org.jczh.appliedxml.Serializer.this == org.jczh.appliedxml.Serializer.this.elementConstructorManager.context
org.jczh.appliedxml.Serializer.this has only one value
org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired == true
org.jczh.appliedxml.Serializer.this.typeAdapterManager has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache has only one value
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
org.jczh.appliedxml.Serializer.this.elementConstructorManager has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys has only one value
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy has only one value
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
org.jczh.appliedxml.Serializer.this.classNamingStrategy == null
org.jczh.appliedxml.Serializer.this.defaultElementPrefix == null
org.jczh.appliedxml.Serializer.this.defaultAttributePrefix == null
org.jczh.appliedxml.Serializer.this.formatter == null
org.jczh.appliedxml.Serializer.this.associatedWithSuperClass == true
size(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[]) == 35
size(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.Serializer$2.(org.jczh.appliedxml.Serializer):::EXIT
org.jczh.appliedxml.Serializer.this == orig(org.jczh.appliedxml.Serializer.this)
org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired == orig(org.jczh.appliedxml.Serializer.this.nullValueSerializeRequired)
org.jczh.appliedxml.Serializer.this.typeAdapterManager == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.context == orig(org.jczh.appliedxml.Serializer.this)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.constructorConstructor)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[] == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories[])
org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName() == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.factories.getClass().getName())
org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.calls)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache)
org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(org.jczh.appliedxml.Serializer.this.typeAdapterManager.typeTokenCache.getClass().getName())
org.jczh.appliedxml.Serializer.this.elementConstructorManager == orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager)
org.jczh.appliedxml.Serializer.this.elementConstructorManager.context == orig(org.jczh.appliedxml.Serializer.this)
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys == orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys)
org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[] == orig(org.jczh.appliedxml.Serializer.this.elementConstructorManager.factorys[])
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy == orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy)
org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName() == orig(org.jczh.appliedxml.Serializer.this.fieldNamingStrategy.getClass().getName())
org.jczh.appliedxml.Serializer.this.classNamingStrategy == orig(org.jczh.appliedxml.Serializer.this.classNamingStrategy)
org.jczh.appliedxml.Serializer.this.defaultElementPrefix == orig(org.jczh.appliedxml.Serializer.this.defaultElementPrefix)
org.jczh.appliedxml.Serializer.this.defaultAttributePrefix == orig(org.jczh.appliedxml.Serializer.this.defaultAttributePrefix)
org.jczh.appliedxml.Serializer.this.formatter == orig(org.jczh.appliedxml.Serializer.this.formatter)
org.jczh.appliedxml.Serializer.this.associatedWithSuperClass == orig(org.jczh.appliedxml.Serializer.this.associatedWithSuperClass)
===========================================================================
org.jczh.appliedxml.Serializer:::OBJECT
this == this.typeAdapterManager.context
this.nullValueSerializeRequired == this.typeAdapterManager.context.nullValueSerializeRequired
this.nullValueSerializeRequired == this.elementConstructorManager.context.nullValueSerializeRequired
this.typeAdapterManager == this.typeAdapterManager.context.typeAdapterManager
this.typeAdapterManager == this.elementConstructorManager.context.typeAdapterManager
this.typeAdapterManager.context == this.elementConstructorManager.context
this.typeAdapterManager.context.elementConstructorManager == this.elementConstructorManager
this.typeAdapterManager.context.fieldNamingStrategy == this.fieldNamingStrategy
this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName() == this.fieldNamingStrategy.getClass().getName()
this.typeAdapterManager.context.classNamingStrategy == this.classNamingStrategy
this.typeAdapterManager.context.classNamingStrategy.getClass().getName() == this.classNamingStrategy.getClass().getName()
this.typeAdapterManager.context.formatter == this.formatter
this.typeAdapterManager.context.associatedWithSuperClass == this.associatedWithSuperClass
this.elementConstructorManager == this.elementConstructorManager.context.elementConstructorManager
this.elementConstructorManager.context.fieldNamingStrategy == this.fieldNamingStrategy
this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName() == this.fieldNamingStrategy.getClass().getName()
this.elementConstructorManager.context.classNamingStrategy == this.classNamingStrategy
this.elementConstructorManager.context.classNamingStrategy.getClass().getName() == this.classNamingStrategy.getClass().getName()
this.elementConstructorManager.context.formatter == this.formatter
this.elementConstructorManager.context.associatedWithSuperClass == this.associatedWithSuperClass
this has only one value
this.typeAdapterManager has only one value
this.typeAdapterManager != null
this.typeAdapterManager.context has only one value
this.typeAdapterManager.context != null
this.typeAdapterManager.context.defaultElementPrefix == null
this.typeAdapterManager.context.defaultAttributePrefix == null
this.typeAdapterManager.constructorConstructor has only one value
this.typeAdapterManager.constructorConstructor != null
this.typeAdapterManager.constructorConstructor.instanceCreators has only one value
this.typeAdapterManager.constructorConstructor.instanceCreators != null
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
this.typeAdapterManager.factories has only one value
this.typeAdapterManager.factories != null
this.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.typeAdapterManager.factories[] elements != null
this.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.typeAdapterManager.calls has only one value
this.typeAdapterManager.calls != null
this.typeAdapterManager.typeTokenCache has only one value
this.typeAdapterManager.typeTokenCache != null
this.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.elementConstructorManager has only one value
this.elementConstructorManager != null
this.elementConstructorManager.context.defaultElementPrefix == null
this.elementConstructorManager.context.defaultAttributePrefix == null
this.elementConstructorManager.factorys has only one value
this.elementConstructorManager.factorys != null
this.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
this.elementConstructorManager.factorys[] elements != null
this.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
this.fieldNamingStrategy != null
this.classNamingStrategy != null
this.defaultElementPrefix == null
this.defaultAttributePrefix == null
this.formatter != null
this.formatter.prolog == null
this.formatter.indent one of { 0, 4 }
this.associatedWithSuperClass == true
size(this.typeAdapterManager.factories[]) == 35
size(this.elementConstructorManager.factorys[]) == 2
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != this.typeAdapterManager.factories.getClass().getName()
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != this.typeAdapterManager.typeTokenCache.getClass().getName()
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != this.fieldNamingStrategy.getClass().getName()
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != this.classNamingStrategy.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != this.typeAdapterManager.typeTokenCache.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != this.fieldNamingStrategy.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != this.classNamingStrategy.getClass().getName()
this.typeAdapterManager.typeTokenCache.getClass().getName() != this.fieldNamingStrategy.getClass().getName()
this.typeAdapterManager.typeTokenCache.getClass().getName() != this.classNamingStrategy.getClass().getName()
this.fieldNamingStrategy.getClass().getName() != this.classNamingStrategy.getClass().getName()
===========================================================================
org.jczh.appliedxml.Serializer.Serializer():::EXIT
this.nullValueSerializeRequired == true
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
this.formatter has only one value
this.formatter.indent == 0
===========================================================================
org.jczh.appliedxml.Serializer.getAdapter(com.google.gsoncode.internal.TypeToken):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
arg0 != null
arg0.rawType != null
arg0.type != null
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != arg0.type.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != arg0.type.getClass().getName()
this.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.type.getClass().getName()
this.fieldNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.classNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.Serializer.getAdapter(com.google.gsoncode.internal.TypeToken):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
arg0.rawType == orig(arg0.rawType)
arg0.type == orig(arg0.type)
arg0.type.getClass().getName() == orig(arg0.type.getClass().getName())
arg0.hashCode == orig(arg0.hashCode)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
arg0.rawType != null
arg0.type != null
return != null
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != arg0.type.getClass().getName()
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != return.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != arg0.type.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != return.getClass().getName()
this.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.type.getClass().getName()
this.typeAdapterManager.typeTokenCache.getClass().getName() != return.getClass().getName()
this.fieldNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.fieldNamingStrategy.getClass().getName() != return.getClass().getName()
this.classNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.classNamingStrategy.getClass().getName() != return.getClass().getName()
arg0.type.getClass().getName() != return.getClass().getName()
===========================================================================
org.jczh.appliedxml.Serializer.getClassNamingStrategy():::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.getClassNamingStrategy():::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.classNamingStrategy.getClass().getName() == return.getClass().getName()
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.classNamingStrategy.getClass().getName() == return.getClass().getName()
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == return.getClass().getName()
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
return.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
return.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
return.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.formatter has only one value
this.formatter.indent == 4
return has only one value
return.getClass().getName() == test.simples.Test$1.class
===========================================================================
org.jczh.appliedxml.Serializer.getDefaultAttributePrefix():::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.getDefaultAttributePrefix():::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return == null
===========================================================================
org.jczh.appliedxml.Serializer.getDefaultElementPrefix():::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.getDefaultElementPrefix():::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return == null
===========================================================================
org.jczh.appliedxml.Serializer.getFieldNamingStrategy():::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.getFieldNamingStrategy():::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName() == return.getClass().getName()
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName() == return.getClass().getName()
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == return.getClass().getName()
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
return.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
return.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
return.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return has only one value
return != null
return.getClass().getName() == test.simples.Test$2.class
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() != return.getClass().getName()
this.typeAdapterManager.factories.getClass().getName() != return.getClass().getName()
this.typeAdapterManager.typeTokenCache.getClass().getName() != return.getClass().getName()
this.classNamingStrategy.getClass().getName() != return.getClass().getName()
===========================================================================
org.jczh.appliedxml.Serializer.isAssociatedWithSuperClass():::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.isAssociatedWithSuperClass():::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return == true
===========================================================================
org.jczh.appliedxml.Serializer.isAssociatedWithSuperClass():::EXIT;condition="return == true"
===========================================================================
org.jczh.appliedxml.Serializer.isNullValueSerializeRequired():::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.isNullValueSerializeRequired():::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return == false
===========================================================================
org.jczh.appliedxml.Serializer.isNullValueSerializeRequired():::EXIT;condition="not(return == true)"
===========================================================================
org.jczh.appliedxml.Serializer.setClassNamingStrategy(org.jczh.appliedxml.ClassNamingStrategy):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
this.formatter has only one value
this.formatter.indent == 4
arg0 has only one value
arg0.getClass().getName() == test.simples.Test$1.class
===========================================================================
org.jczh.appliedxml.Serializer.setClassNamingStrategy(org.jczh.appliedxml.ClassNamingStrategy):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(arg0)
this.classNamingStrategy.getClass().getName() == orig(arg0.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.setFieldNamingStrategy(org.jczh.appliedxml.FieldNamingStrategy):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
arg0 has only one value
arg0.getClass().getName() == test.simples.Test$2.class
===========================================================================
org.jczh.appliedxml.Serializer.setFieldNamingStrategy(org.jczh.appliedxml.FieldNamingStrategy):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(arg0)
this.fieldNamingStrategy.getClass().getName() == orig(arg0.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.setFormatted(boolean):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
this.formatter has only one value
this.formatter.indent == 0
arg0 == true
===========================================================================
org.jczh.appliedxml.Serializer.setFormatted(boolean):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter.prolog == orig(this.formatter.prolog)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.Serializer.setNullValueSerializeRequired(boolean):::ENTER
this.nullValueSerializeRequired == true
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
this.formatter has only one value
this.formatter.indent == 0
arg0 == false
===========================================================================
org.jczh.appliedxml.Serializer.setNullValueSerializeRequired(boolean):::EXIT
this.nullValueSerializeRequired == orig(arg0)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
this.formatter has only one value
this.formatter.indent == 0
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
arg0 has only one value
arg0.getClass().getName() == test.simples.Service.class
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return has only one value
return.toString == "<Service xmlns=\"httt://wwww.baidu.com\" no=\"123\" errno=\"123\" ver=\"234\">\n    <Exams>\n        <Exam>\n            <ID>55555</ID>\n            <ExamTypeID>0x2222</ExamTypeID>\n            <ExamName>ExamName-XXX</ExamName>\n        </Exam>\n        <Exam>\n            <ID>11111</ID>\n            <ExamTypeID>0x1111</ExamTypeID>\n            <ExamName>ExamName-XXX1</ExamName>\n        </Exam>\n    </Exams>\n    <ExamTypes>\n        <ExamType>\n            <ID>0x111</ID>\n            <DictName>DictName</DictName>\n        </ExamType>\n        <ExamType>\n            <ID>0x1112</ID>\n            <DictName>DictName2</DictName>\n        </ExamType>\n    </ExamTypes>\n    <Subjects>\n        <Subject>\n            <ID>subjectid</ID>\n        </Subject>\n    </Subjects>\n</Service>"
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object, java.lang.reflect.Type):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
arg0 has only one value
arg0.getClass().getName() == test.simples.Service.class
arg1 has only one value
arg1.getClass().getName() == java.lang.Class.class
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object, java.lang.reflect.Type):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
return has only one value
return.toString == "<Service xmlns=\"httt://wwww.baidu.com\" no=\"123\" errno=\"123\" ver=\"234\">\n    <Exams>\n        <Exam>\n            <ID>55555</ID>\n            <ExamTypeID>0x2222</ExamTypeID>\n            <ExamName>ExamName-XXX</ExamName>\n        </Exam>\n        <Exam>\n            <ID>11111</ID>\n            <ExamTypeID>0x1111</ExamTypeID>\n            <ExamName>ExamName-XXX1</ExamName>\n        </Exam>\n    </Exams>\n    <ExamTypes>\n        <ExamType>\n            <ID>0x111</ID>\n            <DictName>DictName</DictName>\n        </ExamType>\n        <ExamType>\n            <ID>0x1112</ID>\n            <DictName>DictName2</DictName>\n        </ExamType>\n    </ExamTypes>\n    <Subjects>\n        <Subject>\n            <ID>subjectid</ID>\n        </Subject>\n    </Subjects>\n</Service>"
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object, java.lang.reflect.Type, java.io.Writer):::ENTER
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
arg0 has only one value
arg0.getClass().getName() == test.simples.Service.class
arg1 has only one value
arg1.getClass().getName() == java.lang.Class.class
arg2 has only one value
arg2.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object, java.lang.reflect.Type, java.io.Writer):::EXIT130
===========================================================================
org.jczh.appliedxml.Serializer.toXml(java.lang.Object, java.lang.reflect.Type, java.io.Writer):::EXIT
this.nullValueSerializeRequired == orig(this.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.typeAdapterManager.context.nullValueSerializeRequired)
this.nullValueSerializeRequired == orig(this.elementConstructorManager.context.nullValueSerializeRequired)
this.typeAdapterManager == orig(this.typeAdapterManager)
this.typeAdapterManager == orig(this.typeAdapterManager.context.typeAdapterManager)
this.typeAdapterManager == orig(this.elementConstructorManager.context.typeAdapterManager)
this.typeAdapterManager.context == orig(this)
this.typeAdapterManager.context == orig(this.typeAdapterManager.context)
this.typeAdapterManager.context == orig(this.elementConstructorManager.context)
this.typeAdapterManager.context.defaultElementPrefix == orig(this.typeAdapterManager.context.defaultElementPrefix)
this.typeAdapterManager.context.defaultAttributePrefix == orig(this.typeAdapterManager.context.defaultAttributePrefix)
this.typeAdapterManager.constructorConstructor == orig(this.typeAdapterManager.constructorConstructor)
this.typeAdapterManager.constructorConstructor.instanceCreators == orig(this.typeAdapterManager.constructorConstructor.instanceCreators)
this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName() == orig(this.typeAdapterManager.constructorConstructor.instanceCreators.getClass().getName())
this.typeAdapterManager.factories == orig(this.typeAdapterManager.factories)
this.typeAdapterManager.factories[] == orig(this.typeAdapterManager.factories[])
this.typeAdapterManager.factories.getClass().getName() == orig(this.typeAdapterManager.factories.getClass().getName())
this.typeAdapterManager.calls == orig(this.typeAdapterManager.calls)
this.typeAdapterManager.typeTokenCache == orig(this.typeAdapterManager.typeTokenCache)
this.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.typeAdapterManager.typeTokenCache.getClass().getName())
this.elementConstructorManager == orig(this.typeAdapterManager.context.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager)
this.elementConstructorManager == orig(this.elementConstructorManager.context.elementConstructorManager)
this.elementConstructorManager.context.defaultElementPrefix == orig(this.elementConstructorManager.context.defaultElementPrefix)
this.elementConstructorManager.context.defaultAttributePrefix == orig(this.elementConstructorManager.context.defaultAttributePrefix)
this.elementConstructorManager.factorys == orig(this.elementConstructorManager.factorys)
this.elementConstructorManager.factorys[] == orig(this.elementConstructorManager.factorys[])
this.fieldNamingStrategy == orig(this.typeAdapterManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.elementConstructorManager.context.fieldNamingStrategy)
this.fieldNamingStrategy == orig(this.fieldNamingStrategy)
this.fieldNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.fieldNamingStrategy.getClass().getName())
this.fieldNamingStrategy.getClass().getName() == orig(this.fieldNamingStrategy.getClass().getName())
this.classNamingStrategy == orig(this.typeAdapterManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.elementConstructorManager.context.classNamingStrategy)
this.classNamingStrategy == orig(this.classNamingStrategy)
this.classNamingStrategy.getClass().getName() == orig(this.typeAdapterManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.elementConstructorManager.context.classNamingStrategy.getClass().getName())
this.classNamingStrategy.getClass().getName() == orig(this.classNamingStrategy.getClass().getName())
this.defaultElementPrefix == orig(this.defaultElementPrefix)
this.defaultAttributePrefix == orig(this.defaultAttributePrefix)
this.formatter == orig(this.typeAdapterManager.context.formatter)
this.formatter == orig(this.elementConstructorManager.context.formatter)
this.formatter == orig(this.formatter)
this.formatter.prolog == orig(this.formatter.prolog)
this.formatter.indent == orig(this.formatter.indent)
this.associatedWithSuperClass == orig(this.typeAdapterManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.elementConstructorManager.context.associatedWithSuperClass)
this.associatedWithSuperClass == orig(this.associatedWithSuperClass)
this.nullValueSerializeRequired == false
this.fieldNamingStrategy has only one value
this.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.classNamingStrategy has only one value
this.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.formatter has only one value
this.formatter.indent == 4
===========================================================================
org.jczh.appliedxml.SqlDateTypeAdapter$1:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.SqlDateTypeAdapter$1.():::EXIT
===========================================================================
org.jczh.appliedxml.SqlDateTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.SqlDateTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TimeTypeAdapter$1:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TimeTypeAdapter$1.():::EXIT
===========================================================================
org.jczh.appliedxml.TimeTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TimeTypeAdapter$1.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapter:::OBJECT
===========================================================================
org.jczh.appliedxml.TypeAdapter.TypeAdapter():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$1:::OBJECT
org.jczh.appliedxml.TypeAdapterManager.this == org.jczh.appliedxml.TypeAdapterManager.this.context.typeAdapterManager
this has only one value
org.jczh.appliedxml.TypeAdapterManager.this has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context.nullValueSerializeRequired == false
org.jczh.appliedxml.TypeAdapterManager.this.context.typeAdapterManager has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context.elementConstructorManager has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context.fieldNamingStrategy has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
org.jczh.appliedxml.TypeAdapterManager.this.context.classNamingStrategy has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
org.jczh.appliedxml.TypeAdapterManager.this.context.defaultElementPrefix == null
org.jczh.appliedxml.TypeAdapterManager.this.context.defaultAttributePrefix == null
org.jczh.appliedxml.TypeAdapterManager.this.context.formatter has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context.associatedWithSuperClass == true
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor.instanceCreators has only one value
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
org.jczh.appliedxml.TypeAdapterManager.this.factories has only one value
org.jczh.appliedxml.TypeAdapterManager.this.factories[].getClass().getName() one of { [], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory] }
org.jczh.appliedxml.TypeAdapterManager.this.factories.getClass().getName() == java.util.ArrayList.class
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
size(org.jczh.appliedxml.TypeAdapterManager.this.factories[]) one of { 0, 35 }
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$1.(org.jczh.appliedxml.TypeAdapterManager):::ENTER
org.jczh.appliedxml.TypeAdapterManager.this has only one value
org.jczh.appliedxml.TypeAdapterManager.this.context == null
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor == null
org.jczh.appliedxml.TypeAdapterManager.this.factories has only one value
org.jczh.appliedxml.TypeAdapterManager.this.factories[] == []
org.jczh.appliedxml.TypeAdapterManager.this.factories[].getClass().getName() == []
org.jczh.appliedxml.TypeAdapterManager.this.factories.getClass().getName() == java.util.ArrayList.class
org.jczh.appliedxml.TypeAdapterManager.this.calls == null
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache == null
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$1.(org.jczh.appliedxml.TypeAdapterManager):::EXIT
org.jczh.appliedxml.TypeAdapterManager.this == orig(org.jczh.appliedxml.TypeAdapterManager.this)
org.jczh.appliedxml.TypeAdapterManager.this.context == orig(org.jczh.appliedxml.TypeAdapterManager.this.context)
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor == orig(org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor)
org.jczh.appliedxml.TypeAdapterManager.this.factories == orig(org.jczh.appliedxml.TypeAdapterManager.this.factories)
org.jczh.appliedxml.TypeAdapterManager.this.factories[] == orig(org.jczh.appliedxml.TypeAdapterManager.this.factories[])
org.jczh.appliedxml.TypeAdapterManager.this.calls == orig(org.jczh.appliedxml.TypeAdapterManager.this.calls)
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache == orig(org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache)
org.jczh.appliedxml.TypeAdapterManager.this.context == null
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor == null
org.jczh.appliedxml.TypeAdapterManager.this.factories[] == []
org.jczh.appliedxml.TypeAdapterManager.this.factories[].getClass().getName() == []
org.jczh.appliedxml.TypeAdapterManager.this.calls == null
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache == null
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$1.initialValue():::ENTER
org.jczh.appliedxml.TypeAdapterManager.this.context has only one value
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor has only one value
org.jczh.appliedxml.TypeAdapterManager.this.factories[] contains no nulls and has only one value, of length 35
org.jczh.appliedxml.TypeAdapterManager.this.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
org.jczh.appliedxml.TypeAdapterManager.this.calls has only one value
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache has only one value
size(org.jczh.appliedxml.TypeAdapterManager.this.factories[]) == 35
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$1.initialValue():::EXIT
org.jczh.appliedxml.TypeAdapterManager.this == orig(org.jczh.appliedxml.TypeAdapterManager.this)
org.jczh.appliedxml.TypeAdapterManager.this.context == orig(org.jczh.appliedxml.TypeAdapterManager.this.context)
org.jczh.appliedxml.TypeAdapterManager.this.context.nullValueSerializeRequired == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.nullValueSerializeRequired)
org.jczh.appliedxml.TypeAdapterManager.this.context.typeAdapterManager == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.typeAdapterManager)
org.jczh.appliedxml.TypeAdapterManager.this.context.elementConstructorManager == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.elementConstructorManager)
org.jczh.appliedxml.TypeAdapterManager.this.context.fieldNamingStrategy == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.fieldNamingStrategy)
org.jczh.appliedxml.TypeAdapterManager.this.context.fieldNamingStrategy.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.fieldNamingStrategy.getClass().getName())
org.jczh.appliedxml.TypeAdapterManager.this.context.classNamingStrategy == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.classNamingStrategy)
org.jczh.appliedxml.TypeAdapterManager.this.context.classNamingStrategy.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.classNamingStrategy.getClass().getName())
org.jczh.appliedxml.TypeAdapterManager.this.context.defaultElementPrefix == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.defaultElementPrefix)
org.jczh.appliedxml.TypeAdapterManager.this.context.defaultAttributePrefix == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.defaultAttributePrefix)
org.jczh.appliedxml.TypeAdapterManager.this.context.formatter == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.formatter)
org.jczh.appliedxml.TypeAdapterManager.this.context.associatedWithSuperClass == orig(org.jczh.appliedxml.TypeAdapterManager.this.context.associatedWithSuperClass)
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor == orig(org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor)
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor.instanceCreators == orig(org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor.instanceCreators)
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor.instanceCreators.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor.instanceCreators.getClass().getName())
org.jczh.appliedxml.TypeAdapterManager.this.factories == orig(org.jczh.appliedxml.TypeAdapterManager.this.factories)
org.jczh.appliedxml.TypeAdapterManager.this.factories[] == orig(org.jczh.appliedxml.TypeAdapterManager.this.factories[])
org.jczh.appliedxml.TypeAdapterManager.this.factories.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapterManager.this.factories.getClass().getName())
org.jczh.appliedxml.TypeAdapterManager.this.calls == orig(org.jczh.appliedxml.TypeAdapterManager.this.calls)
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache == orig(org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache)
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache.getClass().getName())
org.jczh.appliedxml.TypeAdapterManager.this.context has only one value
org.jczh.appliedxml.TypeAdapterManager.this.constructorConstructor has only one value
org.jczh.appliedxml.TypeAdapterManager.this.factories[] contains no nulls and has only one value, of length 35
org.jczh.appliedxml.TypeAdapterManager.this.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
org.jczh.appliedxml.TypeAdapterManager.this.calls has only one value
org.jczh.appliedxml.TypeAdapterManager.this.typeTokenCache has only one value
return has only one value
return.getClass().getName() == java.util.HashMap.class
size(org.jczh.appliedxml.TypeAdapterManager.this.factories[]) == 35
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$FutureTypeAdapter:::OBJECT
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$FutureTypeAdapter.FutureTypeAdapter():::EXIT
this.delegate == null
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$FutureTypeAdapter.setDelegate(org.jczh.appliedxml.TypeAdapter):::ENTER
this.delegate == null
===========================================================================
org.jczh.appliedxml.TypeAdapterManager$FutureTypeAdapter.setDelegate(org.jczh.appliedxml.TypeAdapter):::EXIT
this.delegate.getClass().getName() == orig(arg0.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapterManager:::OBJECT
this.context == this.context.typeAdapterManager.context
this.context.typeAdapterManager.context == this.context.elementConstructorManager.context
this.context.typeAdapterManager.constructorConstructor == this.constructorConstructor
this.context.typeAdapterManager.factories == this.factories
this.context.typeAdapterManager.factories.getClass().getName() == this.factories.getClass().getName()
this.context.typeAdapterManager.calls == this.calls
this.context.typeAdapterManager.typeTokenCache == this.typeTokenCache
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == this.typeTokenCache.getClass().getName()
this has only one value
this.context has only one value
this.context != null
this.context.typeAdapterManager.context has only one value
this.context.typeAdapterManager.context != null
this.context.typeAdapterManager.constructorConstructor has only one value
this.context.typeAdapterManager.constructorConstructor != null
this.context.typeAdapterManager.factories has only one value
this.context.typeAdapterManager.factories != null
this.context.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.context.typeAdapterManager.factories[] elements != null
this.context.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.context.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.context.typeAdapterManager.calls has only one value
this.context.typeAdapterManager.calls != null
this.context.typeAdapterManager.typeTokenCache has only one value
this.context.typeAdapterManager.typeTokenCache != null
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.context.elementConstructorManager.factorys has only one value
this.context.elementConstructorManager.factorys != null
this.context.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
this.context.elementConstructorManager.factorys[] elements != null
this.context.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
this.context.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.context.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.context.defaultElementPrefix == null
this.context.defaultAttributePrefix == null
this.context.formatter.prolog == null
this.context.formatter.indent == 4
this.context.associatedWithSuperClass == true
this.constructorConstructor has only one value
this.constructorConstructor != null
this.constructorConstructor.instanceCreators has only one value
this.constructorConstructor.instanceCreators != null
this.constructorConstructor.instanceCreators.getClass().getName() == java.util.Collections$EmptyMap.class
this.factories has only one value
this.factories != null
this.factories[] contains no nulls and has only one value, of length 35
this.factories[] elements != null
this.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.factories.getClass().getName() == java.util.ArrayList.class
this.calls has only one value
this.calls != null
this.typeTokenCache has only one value
this.typeTokenCache != null
this.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
size(this.context.typeAdapterManager.factories[]) == 35
size(this.context.elementConstructorManager.factorys[]) == 2
size(this.factories[]) == 35
this.context.typeAdapterManager.factories.getClass().getName() != this.context.typeAdapterManager.typeTokenCache.getClass().getName()
this.context.typeAdapterManager.factories.getClass().getName() != this.context.fieldNamingStrategy.getClass().getName()
this.context.typeAdapterManager.factories.getClass().getName() != this.context.classNamingStrategy.getClass().getName()
this.context.typeAdapterManager.factories.getClass().getName() != this.constructorConstructor.instanceCreators.getClass().getName()
this.context.typeAdapterManager.factories.getClass().getName() != this.typeTokenCache.getClass().getName()
this.context.typeAdapterManager.typeTokenCache.getClass().getName() != this.context.fieldNamingStrategy.getClass().getName()
this.context.typeAdapterManager.typeTokenCache.getClass().getName() != this.context.classNamingStrategy.getClass().getName()
this.context.typeAdapterManager.typeTokenCache.getClass().getName() != this.constructorConstructor.instanceCreators.getClass().getName()
this.context.typeAdapterManager.typeTokenCache.getClass().getName() != this.factories.getClass().getName()
this.context.fieldNamingStrategy.getClass().getName() != this.context.classNamingStrategy.getClass().getName()
this.context.fieldNamingStrategy.getClass().getName() != this.constructorConstructor.instanceCreators.getClass().getName()
this.context.fieldNamingStrategy.getClass().getName() != this.factories.getClass().getName()
this.context.fieldNamingStrategy.getClass().getName() != this.typeTokenCache.getClass().getName()
this.context.classNamingStrategy.getClass().getName() != this.constructorConstructor.instanceCreators.getClass().getName()
this.context.classNamingStrategy.getClass().getName() != this.factories.getClass().getName()
this.context.classNamingStrategy.getClass().getName() != this.typeTokenCache.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != this.factories.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != this.typeTokenCache.getClass().getName()
this.factories.getClass().getName() != this.typeTokenCache.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapterManager.TypeAdapterManager(org.jczh.appliedxml.Serializer):::ENTER
arg0 has only one value
arg0.nullValueSerializeRequired == true
arg0.typeAdapterManager == null
arg0.elementConstructorManager == null
arg0.fieldNamingStrategy == null
arg0.classNamingStrategy == null
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter == null
arg0.associatedWithSuperClass == true
===========================================================================
org.jczh.appliedxml.TypeAdapterManager.TypeAdapterManager(org.jczh.appliedxml.Serializer):::EXIT
this.context == orig(arg0)
this.context.nullValueSerializeRequired == arg0.nullValueSerializeRequired
this.context.associatedWithSuperClass == arg0.associatedWithSuperClass
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
this.context.typeAdapterManager == null
this.context.elementConstructorManager == null
this.context.fieldNamingStrategy == null
this.context.classNamingStrategy == null
this.context.formatter == null
arg0.nullValueSerializeRequired == true
arg0.typeAdapterManager == null
arg0.elementConstructorManager == null
arg0.fieldNamingStrategy == null
arg0.classNamingStrategy == null
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter == null
arg0.associatedWithSuperClass == true
===========================================================================
org.jczh.appliedxml.TypeAdapterManager.getAdapter(com.google.gsoncode.internal.TypeToken):::ENTER
this == this.context.typeAdapterManager
this.context == this.context.elementConstructorManager.context
this.context.nullValueSerializeRequired == false
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager != null
this.context.elementConstructorManager has only one value
this.context.elementConstructorManager != null
this.context.fieldNamingStrategy has only one value
this.context.fieldNamingStrategy != null
this.context.classNamingStrategy has only one value
this.context.classNamingStrategy != null
this.context.formatter has only one value
this.context.formatter != null
arg0 != null
arg0.rawType != null
arg0.type != null
this.context.fieldNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.context.classNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.type.getClass().getName()
this.factories.getClass().getName() != arg0.type.getClass().getName()
this.typeTokenCache.getClass().getName() != arg0.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapterManager.getAdapter(com.google.gsoncode.internal.TypeToken):::EXIT101
===========================================================================
org.jczh.appliedxml.TypeAdapterManager.getAdapter(com.google.gsoncode.internal.TypeToken):::EXIT84
arg0.type.getClass().getName() == java.lang.Class.class
arg0.hashCode one of { 349885916, 1007805637 }
===========================================================================
org.jczh.appliedxml.TypeAdapterManager.getAdapter(com.google.gsoncode.internal.TypeToken):::EXIT
this.context == this.context.elementConstructorManager.context
this.context == orig(this.context)
this.context == orig(this.context.typeAdapterManager.context)
this.context == orig(this.context.elementConstructorManager.context)
this.context.nullValueSerializeRequired == orig(this.context.nullValueSerializeRequired)
this.context.typeAdapterManager == orig(this)
this.context.typeAdapterManager == orig(this.context.typeAdapterManager)
this.context.typeAdapterManager.factories[] == orig(this.context.typeAdapterManager.factories[])
this.context.elementConstructorManager == orig(this.context.elementConstructorManager)
this.context.elementConstructorManager.factorys == orig(this.context.elementConstructorManager.factorys)
this.context.elementConstructorManager.factorys[] == orig(this.context.elementConstructorManager.factorys[])
this.context.fieldNamingStrategy == orig(this.context.fieldNamingStrategy)
this.context.fieldNamingStrategy.getClass().getName() == orig(this.context.fieldNamingStrategy.getClass().getName())
this.context.classNamingStrategy == orig(this.context.classNamingStrategy)
this.context.classNamingStrategy.getClass().getName() == orig(this.context.classNamingStrategy.getClass().getName())
this.context.defaultElementPrefix == orig(this.context.defaultElementPrefix)
this.context.defaultAttributePrefix == orig(this.context.defaultAttributePrefix)
this.context.formatter == orig(this.context.formatter)
this.context.formatter.prolog == orig(this.context.formatter.prolog)
this.context.formatter.indent == orig(this.context.formatter.indent)
this.context.associatedWithSuperClass == orig(this.context.associatedWithSuperClass)
this.constructorConstructor == orig(this.context.typeAdapterManager.constructorConstructor)
this.constructorConstructor == orig(this.constructorConstructor)
this.constructorConstructor.instanceCreators == orig(this.constructorConstructor.instanceCreators)
this.constructorConstructor.instanceCreators.getClass().getName() == orig(this.constructorConstructor.instanceCreators.getClass().getName())
this.factories == orig(this.context.typeAdapterManager.factories)
this.factories == orig(this.factories)
this.factories[] == orig(this.factories[])
this.factories.getClass().getName() == orig(this.context.typeAdapterManager.factories.getClass().getName())
this.factories.getClass().getName() == orig(this.factories.getClass().getName())
this.calls == orig(this.context.typeAdapterManager.calls)
this.calls == orig(this.calls)
this.typeTokenCache == orig(this.context.typeAdapterManager.typeTokenCache)
this.typeTokenCache == orig(this.typeTokenCache)
this.typeTokenCache.getClass().getName() == orig(this.context.typeAdapterManager.typeTokenCache.getClass().getName())
this.typeTokenCache.getClass().getName() == orig(this.typeTokenCache.getClass().getName())
arg0.rawType == orig(arg0.rawType)
arg0.type == orig(arg0.type)
arg0.type.getClass().getName() == orig(arg0.type.getClass().getName())
arg0.hashCode == orig(arg0.hashCode)
this.context.nullValueSerializeRequired == false
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager != null
this.context.elementConstructorManager has only one value
this.context.elementConstructorManager != null
this.context.fieldNamingStrategy has only one value
this.context.fieldNamingStrategy != null
this.context.classNamingStrategy has only one value
this.context.classNamingStrategy != null
this.context.formatter has only one value
this.context.formatter != null
arg0.rawType != null
arg0.type != null
return != null
this.context.fieldNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.context.fieldNamingStrategy.getClass().getName() != return.getClass().getName()
this.context.classNamingStrategy.getClass().getName() != arg0.type.getClass().getName()
this.context.classNamingStrategy.getClass().getName() != return.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != arg0.type.getClass().getName()
this.constructorConstructor.instanceCreators.getClass().getName() != return.getClass().getName()
this.factories.getClass().getName() != arg0.type.getClass().getName()
this.factories.getClass().getName() != return.getClass().getName()
this.typeTokenCache.getClass().getName() != arg0.type.getClass().getName()
this.typeTokenCache.getClass().getName() != return.getClass().getName()
arg0.type.getClass().getName() != return.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper:::OBJECT
this.context has only one value
this.context != null
this.context.nullValueSerializeRequired == false
this.context.typeAdapterManager has only one value
this.context.typeAdapterManager != null
this.context.typeAdapterManager.context has only one value
this.context.typeAdapterManager.context != null
this.context.typeAdapterManager.constructorConstructor has only one value
this.context.typeAdapterManager.constructorConstructor != null
this.context.typeAdapterManager.factories has only one value
this.context.typeAdapterManager.factories != null
this.context.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.context.typeAdapterManager.factories[] elements != null
this.context.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.context.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.context.typeAdapterManager.calls has only one value
this.context.typeAdapterManager.calls != null
this.context.typeAdapterManager.typeTokenCache has only one value
this.context.typeAdapterManager.typeTokenCache != null
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.context.elementConstructorManager has only one value
this.context.elementConstructorManager != null
this.context.elementConstructorManager.context has only one value
this.context.elementConstructorManager.context != null
this.context.elementConstructorManager.factorys has only one value
this.context.elementConstructorManager.factorys != null
this.context.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
this.context.elementConstructorManager.factorys[] elements != null
this.context.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
this.context.fieldNamingStrategy has only one value
this.context.fieldNamingStrategy != null
this.context.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.context.classNamingStrategy has only one value
this.context.classNamingStrategy != null
this.context.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.context.defaultElementPrefix == null
this.context.defaultAttributePrefix == null
this.context.formatter has only one value
this.context.formatter != null
this.context.formatter.prolog == null
this.context.formatter.indent == 4
this.context.associatedWithSuperClass == true
this.delegate != null
this.type != null
size(this.context.typeAdapterManager.factories[]) == 35
size(this.context.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.TypeAdapterRuntimeTypeWrapper(org.jczh.appliedxml.Serializer, org.jczh.appliedxml.TypeAdapter, java.lang.reflect.Type):::ENTER
arg0 has only one value
arg0 != null
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.context != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.context != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1 != null
arg2 != null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.TypeAdapterRuntimeTypeWrapper(org.jczh.appliedxml.Serializer, org.jczh.appliedxml.TypeAdapter, java.lang.reflect.Type):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0.typeAdapterManager.context)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0.elementConstructorManager.context)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.context has only one value
arg0.typeAdapterManager.context != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.context has only one value
arg0.elementConstructorManager.context != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, java.lang.Object):::ENTER
arg0 != null
arg1 != null
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, java.lang.Object):::EXIT
this.context == orig(this.context)
this.context.nullValueSerializeRequired == orig(this.context.nullValueSerializeRequired)
this.context.typeAdapterManager == orig(this.context.typeAdapterManager)
this.context.typeAdapterManager.context == orig(this.context.typeAdapterManager.context)
this.context.typeAdapterManager.constructorConstructor == orig(this.context.typeAdapterManager.constructorConstructor)
this.context.typeAdapterManager.factories == orig(this.context.typeAdapterManager.factories)
this.context.typeAdapterManager.factories[] == orig(this.context.typeAdapterManager.factories[])
this.context.typeAdapterManager.factories.getClass().getName() == orig(this.context.typeAdapterManager.factories.getClass().getName())
this.context.typeAdapterManager.calls == orig(this.context.typeAdapterManager.calls)
this.context.typeAdapterManager.typeTokenCache == orig(this.context.typeAdapterManager.typeTokenCache)
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.context.typeAdapterManager.typeTokenCache.getClass().getName())
this.context.elementConstructorManager == orig(this.context.elementConstructorManager)
this.context.elementConstructorManager.context == orig(this.context.elementConstructorManager.context)
this.context.elementConstructorManager.factorys == orig(this.context.elementConstructorManager.factorys)
this.context.elementConstructorManager.factorys[] == orig(this.context.elementConstructorManager.factorys[])
this.context.fieldNamingStrategy == orig(this.context.fieldNamingStrategy)
this.context.fieldNamingStrategy.getClass().getName() == orig(this.context.fieldNamingStrategy.getClass().getName())
this.context.classNamingStrategy == orig(this.context.classNamingStrategy)
this.context.classNamingStrategy.getClass().getName() == orig(this.context.classNamingStrategy.getClass().getName())
this.context.defaultElementPrefix == orig(this.context.defaultElementPrefix)
this.context.defaultAttributePrefix == orig(this.context.defaultAttributePrefix)
this.context.formatter == orig(this.context.formatter)
this.context.formatter.prolog == orig(this.context.formatter.prolog)
this.context.formatter.indent == orig(this.context.formatter.indent)
this.context.associatedWithSuperClass == orig(this.context.associatedWithSuperClass)
this.delegate == orig(this.delegate)
this.delegate.getClass().getName() == orig(this.delegate.getClass().getName())
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
return != null
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.write(org.jczh.appliedxml.XmlWriter, java.lang.Object):::ENTER
arg0 has only one value
arg0 != null
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE != null
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS != null
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER != null
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE != null
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE != null
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND != null
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN != null
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE != null
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
arg0.buffer has only one value
arg0.buffer != null
arg0.buffer.text has only one value
arg0.buffer.text != null
arg0.indenter has only one value
arg0.indenter != null
arg0.indenter.cache has only one value
arg0.indenter.cache != null
arg0.indenter.indent == 4
arg0.indenter.count one of { 8, 12, 16 }
arg0.indenter.index one of { 2, 3, 4 }
arg0.result has only one value
arg0.result != null
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
arg0.last != null
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT != null
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.START != null
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT != null
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.END != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] elements != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
arg1 != null
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.TypeAdapterRuntimeTypeWrapper.write(org.jczh.appliedxml.XmlWriter, java.lang.Object):::EXIT
this.context == orig(this.context)
this.context.nullValueSerializeRequired == orig(this.context.nullValueSerializeRequired)
this.context.typeAdapterManager == orig(this.context.typeAdapterManager)
this.context.typeAdapterManager.context == orig(this.context.typeAdapterManager.context)
this.context.typeAdapterManager.constructorConstructor == orig(this.context.typeAdapterManager.constructorConstructor)
this.context.typeAdapterManager.factories == orig(this.context.typeAdapterManager.factories)
this.context.typeAdapterManager.factories[] == orig(this.context.typeAdapterManager.factories[])
this.context.typeAdapterManager.factories.getClass().getName() == orig(this.context.typeAdapterManager.factories.getClass().getName())
this.context.typeAdapterManager.calls == orig(this.context.typeAdapterManager.calls)
this.context.typeAdapterManager.typeTokenCache == orig(this.context.typeAdapterManager.typeTokenCache)
this.context.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.context.typeAdapterManager.typeTokenCache.getClass().getName())
this.context.elementConstructorManager == orig(this.context.elementConstructorManager)
this.context.elementConstructorManager.context == orig(this.context.elementConstructorManager.context)
this.context.elementConstructorManager.factorys == orig(this.context.elementConstructorManager.factorys)
this.context.elementConstructorManager.factorys[] == orig(this.context.elementConstructorManager.factorys[])
this.context.fieldNamingStrategy == orig(this.context.fieldNamingStrategy)
this.context.fieldNamingStrategy.getClass().getName() == orig(this.context.fieldNamingStrategy.getClass().getName())
this.context.classNamingStrategy == orig(this.context.classNamingStrategy)
this.context.classNamingStrategy.getClass().getName() == orig(this.context.classNamingStrategy.getClass().getName())
this.context.defaultElementPrefix == orig(this.context.defaultElementPrefix)
this.context.defaultAttributePrefix == orig(this.context.defaultAttributePrefix)
this.context.formatter == orig(this.context.formatter)
this.context.formatter.prolog == orig(this.context.formatter.prolog)
this.context.formatter.indent == orig(this.context.formatter.indent)
this.context.associatedWithSuperClass == orig(this.context.associatedWithSuperClass)
this.delegate == orig(this.delegate)
this.delegate.getClass().getName() == orig(this.delegate.getClass().getName())
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.buffer == orig(arg0.buffer)
arg0.buffer.text == orig(arg0.buffer.text)
arg0.indenter == orig(arg0.indenter)
arg0.indenter.cache == orig(arg0.indenter.cache)
arg0.indenter.indent == orig(arg0.indenter.indent)
arg0.indenter.count == orig(arg0.indenter.count)
arg0.indenter.index == orig(arg0.indenter.index)
arg0.result == orig(arg0.result)
arg0.result.getClass().getName() == orig(arg0.result.getClass().getName())
arg0.prolog == orig(arg0.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE != null
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS != null
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER != null
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE != null
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE != null
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND != null
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN != null
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE != null
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
arg0.buffer has only one value
arg0.buffer != null
arg0.buffer.text has only one value
arg0.buffer.text != null
arg0.indenter has only one value
arg0.indenter != null
arg0.indenter.cache has only one value
arg0.indenter.cache != null
arg0.indenter.indent == 4
arg0.indenter.count one of { 8, 12, 16 }
arg0.indenter.index one of { 2, 3, 4 }
arg0.result has only one value
arg0.result != null
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last != null
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT != null
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.START != null
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT != null
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.END != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] elements != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.TypeAdapters$1:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$10:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$10.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$11:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$11.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$12:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$12.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$13:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$13.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$13.write(org.jczh.appliedxml.XmlWriter, java.lang.String):::ENTER
arg0.indenter.indent == arg0.indenter.index
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.LESS[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.GREATER[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.AND[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.OPEN[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.last == org.jczh.appliedxml.XmlWriter$Tag.START
org.jczh.appliedxml.XmlWriter$Tag.END == org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1]
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.LESS[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.AND[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.OPEN[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0 has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count == 16
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent-1] == 110
org.jczh.appliedxml.XmlWriter.LESS[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.GREATER[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent] == 116
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent] == 59
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1] == 112
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent] == 32
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent-1] == 45
org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1] == 62
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1] has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.LESS[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.GREATER[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements <= org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.AND[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.AND[] elements <= org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1]
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.OPEN[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.OPEN[] elements >= org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.CLOSE[] elements <= org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1]
arg0.result.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
arg0.last in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.COMMENT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.START in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.TEXT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.END in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
===========================================================================
org.jczh.appliedxml.TypeAdapters$13.write(org.jczh.appliedxml.XmlWriter, java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.buffer == orig(arg0.buffer)
arg0.buffer.text == orig(arg0.buffer.text)
arg0.indenter == orig(arg0.indenter)
arg0.indenter.cache == orig(arg0.indenter.cache)
arg0.indenter.indent == arg0.indenter.index
arg0.indenter.indent == orig(arg0.indenter.indent)
arg0.indenter.indent == orig(arg0.indenter.index)
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.LESS[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.GREATER[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.AND[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.OPEN[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.indenter.count == orig(arg0.indenter.count)
arg0.result == orig(arg0.result)
arg0.result.getClass().getName() == orig(arg0.result.getClass().getName())
arg0.prolog == orig(arg0.prolog)
arg0.last == org.jczh.appliedxml.XmlWriter$Tag.TEXT
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(arg0.last)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.END == org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg1.toString == orig(arg1.toString)
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.LESS[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.AND[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.OPEN[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count == 16
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent-1] == 110
org.jczh.appliedxml.XmlWriter.LESS[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.GREATER[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent] == 116
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent] == 59
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1] == 112
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent] == 32
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent-1] == 45
org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1] == 62
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1] has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.LESS[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.GREATER[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements <= org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.AND[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.AND[] elements <= org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1]
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.OPEN[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.OPEN[] elements >= org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.CLOSE[] elements <= org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1]
arg0.result.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
arg0.last in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.COMMENT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.START in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.TEXT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.END in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
orig(arg0.last) in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
===========================================================================
org.jczh.appliedxml.TypeAdapters$14:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$14.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$15:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$15.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$16:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$16.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$17:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$17.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$18:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$18.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$19:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$19.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$1.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$2:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$20:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$20.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$21:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$21.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$22:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$22.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$22.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$22.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT481
===========================================================================
org.jczh.appliedxml.TypeAdapters$22.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$23:::CLASS
org.jczh.appliedxml.TypeAdapters$23.YEAR has only one value
org.jczh.appliedxml.TypeAdapters$23.YEAR.toString == "year"
org.jczh.appliedxml.TypeAdapters$23.MONTH has only one value
org.jczh.appliedxml.TypeAdapters$23.MONTH.toString == "month"
org.jczh.appliedxml.TypeAdapters$23.DAY_OF_MONTH has only one value
org.jczh.appliedxml.TypeAdapters$23.DAY_OF_MONTH.toString == "dayOfMonth"
org.jczh.appliedxml.TypeAdapters$23.HOUR_OF_DAY has only one value
org.jczh.appliedxml.TypeAdapters$23.HOUR_OF_DAY.toString == "hourOfDay"
org.jczh.appliedxml.TypeAdapters$23.MINUTE has only one value
org.jczh.appliedxml.TypeAdapters$23.MINUTE.toString == "minute"
org.jczh.appliedxml.TypeAdapters$23.SECOND has only one value
org.jczh.appliedxml.TypeAdapters$23.SECOND.toString == "second"
===========================================================================
org.jczh.appliedxml.TypeAdapters$23:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$23.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$24:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$24.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$25:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$25.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$25.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$25.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT690
===========================================================================
org.jczh.appliedxml.TypeAdapters$25.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$27:::OBJECT
this.val$type != null
this.val$typeAdapter != null
===========================================================================
org.jczh.appliedxml.TypeAdapters$27.(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
arg0 != null
arg1 != null
===========================================================================
org.jczh.appliedxml.TypeAdapters$27.(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
this.val$type == orig(arg0)
this.val$typeAdapter == orig(arg1)
this.val$typeAdapter.getClass().getName() == orig(arg1.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapters$27.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0 != null
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1 != null
arg1.rawType != null
arg1.type != null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$27.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.val$type == orig(this.val$type)
this.val$typeAdapter == orig(this.val$typeAdapter)
this.val$typeAdapter.getClass().getName() == return.getClass().getName()
this.val$typeAdapter.getClass().getName() == orig(this.val$typeAdapter.getClass().getName())
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.rawType != null
arg1.type != null
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$13.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$28:::OBJECT
this has only one value
this.val$base has only one value
this.val$base != null
this.val$sub has only one value
this.val$sub != null
this.val$typeAdapter has only one value
this.val$typeAdapter != null
this.val$typeAdapter.getClass().getName() == org.jczh.appliedxml.TypeAdapters$23.class
===========================================================================
org.jczh.appliedxml.TypeAdapters$28.(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
arg0 has only one value
arg1 has only one value
arg2 has only one value
arg2.getClass().getName() == org.jczh.appliedxml.TypeAdapters$23.class
===========================================================================
org.jczh.appliedxml.TypeAdapters$28.(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
this.val$base == orig(arg0)
this.val$sub == orig(arg1)
this.val$typeAdapter == orig(arg2)
this.val$typeAdapter.getClass().getName() == orig(arg2.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapters$28.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$28.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.val$base == orig(this.val$base)
this.val$sub == orig(this.val$sub)
this.val$typeAdapter == orig(this.val$typeAdapter)
this.val$typeAdapter.getClass().getName() == orig(this.val$typeAdapter.getClass().getName())
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$29:::OBJECT
this has only one value
this.val$clazz has only one value
this.val$clazz != null
this.val$typeAdapter has only one value
this.val$typeAdapter != null
this.val$typeAdapter.getClass().getName() == org.jczh.appliedxml.TypeAdapters$20.class
===========================================================================
org.jczh.appliedxml.TypeAdapters$29.(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
arg0 has only one value
arg1 has only one value
arg1.getClass().getName() == org.jczh.appliedxml.TypeAdapters$20.class
===========================================================================
org.jczh.appliedxml.TypeAdapters$29.(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
this.val$clazz == orig(arg0)
this.val$typeAdapter == orig(arg1)
this.val$typeAdapter.getClass().getName() == orig(arg1.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapters$29.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0 != null
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1 != null
arg1.rawType != null
arg1.type != null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$29.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.val$clazz == orig(this.val$clazz)
this.val$typeAdapter == orig(this.val$typeAdapter)
this.val$typeAdapter.getClass().getName() == orig(this.val$typeAdapter.getClass().getName())
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.rawType != null
arg1.type != null
return == null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$2.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$3:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$3.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$4:::OBJECT
this.val$unboxed != null
this.val$boxed != null
this.val$typeAdapter != null
===========================================================================
org.jczh.appliedxml.TypeAdapters$4.(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
===========================================================================
org.jczh.appliedxml.TypeAdapters$4.(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
this.val$unboxed == orig(arg0)
this.val$boxed == orig(arg1)
this.val$typeAdapter == orig(arg2)
this.val$typeAdapter.getClass().getName() == orig(arg2.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapters$4.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::ENTER
arg0 == arg0.typeAdapterManager.context
arg0 == arg0.elementConstructorManager.context
arg0 has only one value
arg0 != null
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1 != null
arg1.rawType != null
arg1.type != null
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$4.create(org.jczh.appliedxml.Serializer, com.google.gsoncode.internal.TypeToken):::EXIT
this.val$unboxed == orig(this.val$unboxed)
this.val$boxed == orig(this.val$boxed)
this.val$typeAdapter == orig(this.val$typeAdapter)
this.val$typeAdapter.getClass().getName() == return.getClass().getName()
this.val$typeAdapter.getClass().getName() == orig(this.val$typeAdapter.getClass().getName())
arg0.nullValueSerializeRequired == orig(arg0.nullValueSerializeRequired)
arg0.typeAdapterManager == orig(arg0.typeAdapterManager)
arg0.typeAdapterManager.context == orig(arg0)
arg0.typeAdapterManager.constructorConstructor == orig(arg0.typeAdapterManager.constructorConstructor)
arg0.typeAdapterManager.factories == orig(arg0.typeAdapterManager.factories)
arg0.typeAdapterManager.factories[] == orig(arg0.typeAdapterManager.factories[])
arg0.typeAdapterManager.factories.getClass().getName() == orig(arg0.typeAdapterManager.factories.getClass().getName())
arg0.typeAdapterManager.calls == orig(arg0.typeAdapterManager.calls)
arg0.typeAdapterManager.typeTokenCache == orig(arg0.typeAdapterManager.typeTokenCache)
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == orig(arg0.typeAdapterManager.typeTokenCache.getClass().getName())
arg0.elementConstructorManager == orig(arg0.elementConstructorManager)
arg0.elementConstructorManager.context == orig(arg0)
arg0.elementConstructorManager.factorys == orig(arg0.elementConstructorManager.factorys)
arg0.elementConstructorManager.factorys[] == orig(arg0.elementConstructorManager.factorys[])
arg0.fieldNamingStrategy == orig(arg0.fieldNamingStrategy)
arg0.fieldNamingStrategy.getClass().getName() == orig(arg0.fieldNamingStrategy.getClass().getName())
arg0.classNamingStrategy == orig(arg0.classNamingStrategy)
arg0.classNamingStrategy.getClass().getName() == orig(arg0.classNamingStrategy.getClass().getName())
arg0.defaultElementPrefix == orig(arg0.defaultElementPrefix)
arg0.defaultAttributePrefix == orig(arg0.defaultAttributePrefix)
arg0.formatter == orig(arg0.formatter)
arg0.formatter.prolog == orig(arg0.formatter.prolog)
arg0.formatter.indent == orig(arg0.formatter.indent)
arg0.associatedWithSuperClass == orig(arg0.associatedWithSuperClass)
arg1.rawType == orig(arg1.rawType)
arg1.type == orig(arg1.type)
arg1.type.getClass().getName() == orig(arg1.type.getClass().getName())
arg1.hashCode == orig(arg1.hashCode)
arg0.nullValueSerializeRequired == false
arg0.typeAdapterManager has only one value
arg0.typeAdapterManager != null
arg0.typeAdapterManager.constructorConstructor has only one value
arg0.typeAdapterManager.constructorConstructor != null
arg0.typeAdapterManager.factories has only one value
arg0.typeAdapterManager.factories != null
arg0.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
arg0.typeAdapterManager.factories[] elements != null
arg0.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
arg0.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
arg0.typeAdapterManager.calls has only one value
arg0.typeAdapterManager.calls != null
arg0.typeAdapterManager.typeTokenCache has only one value
arg0.typeAdapterManager.typeTokenCache != null
arg0.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
arg0.elementConstructorManager has only one value
arg0.elementConstructorManager != null
arg0.elementConstructorManager.factorys has only one value
arg0.elementConstructorManager.factorys != null
arg0.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
arg0.elementConstructorManager.factorys[] elements != null
arg0.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
arg0.fieldNamingStrategy has only one value
arg0.fieldNamingStrategy != null
arg0.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0.classNamingStrategy has only one value
arg0.classNamingStrategy != null
arg0.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
arg0.defaultElementPrefix == null
arg0.defaultAttributePrefix == null
arg0.formatter has only one value
arg0.formatter != null
arg0.formatter.prolog == null
arg0.formatter.indent == 4
arg0.associatedWithSuperClass == true
arg1.rawType != null
arg1.type != null
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$7.class
size(arg0.typeAdapterManager.factories[]) == 35
size(arg0.elementConstructorManager.factorys[]) == 2
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.factories.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
this.val$typeAdapter.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.typeAdapterManager.typeTokenCache.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.factories.getClass().getName() != arg1.type.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.fieldNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.typeAdapterManager.typeTokenCache.getClass().getName() != arg1.type.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg0.classNamingStrategy.getClass().getName()
arg0.fieldNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
arg0.classNamingStrategy.getClass().getName() != arg1.type.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters$5:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$5.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$6:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$6.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$7:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$7.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$8:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$8.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters$9:::OBJECT
this has only one value
===========================================================================
org.jczh.appliedxml.TypeAdapters$9.():::EXIT
===========================================================================
org.jczh.appliedxml.TypeAdapters:::CLASS
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.STRING_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.URL_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.URI_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.UUID_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS has only one value
org.jczh.appliedxml.TypeAdapters.CLASS != null
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() == org.jczh.appliedxml.TypeAdapters$1.class
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY != null
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters$27.class
org.jczh.appliedxml.TypeAdapters.BIT_SET has only one value
org.jczh.appliedxml.TypeAdapters.BIT_SET != null
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() == org.jczh.appliedxml.TypeAdapters$2.class
org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY != null
org.jczh.appliedxml.TypeAdapters.BOOLEAN has only one value
org.jczh.appliedxml.TypeAdapters.BOOLEAN != null
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() == org.jczh.appliedxml.TypeAdapters$3.class
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY != null
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters$4.class
org.jczh.appliedxml.TypeAdapters.BYTE has only one value
org.jczh.appliedxml.TypeAdapters.BYTE != null
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() == org.jczh.appliedxml.TypeAdapters$5.class
org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY != null
org.jczh.appliedxml.TypeAdapters.SHORT has only one value
org.jczh.appliedxml.TypeAdapters.SHORT != null
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() == org.jczh.appliedxml.TypeAdapters$6.class
org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY != null
org.jczh.appliedxml.TypeAdapters.INTEGER has only one value
org.jczh.appliedxml.TypeAdapters.INTEGER != null
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() == org.jczh.appliedxml.TypeAdapters$7.class
org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY != null
org.jczh.appliedxml.TypeAdapters.LONG has only one value
org.jczh.appliedxml.TypeAdapters.LONG != null
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() == org.jczh.appliedxml.TypeAdapters$8.class
org.jczh.appliedxml.TypeAdapters.FLOAT has only one value
org.jczh.appliedxml.TypeAdapters.FLOAT != null
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() == org.jczh.appliedxml.TypeAdapters$9.class
org.jczh.appliedxml.TypeAdapters.DOUBLE has only one value
org.jczh.appliedxml.TypeAdapters.DOUBLE != null
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() == org.jczh.appliedxml.TypeAdapters$10.class
org.jczh.appliedxml.TypeAdapters.NUMBER has only one value
org.jczh.appliedxml.TypeAdapters.NUMBER != null
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() == org.jczh.appliedxml.TypeAdapters$11.class
org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY != null
org.jczh.appliedxml.TypeAdapters.CHARACTER has only one value
org.jczh.appliedxml.TypeAdapters.CHARACTER != null
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() == org.jczh.appliedxml.TypeAdapters$12.class
org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY != null
org.jczh.appliedxml.TypeAdapters.STRING has only one value
org.jczh.appliedxml.TypeAdapters.STRING != null
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() == org.jczh.appliedxml.TypeAdapters$13.class
org.jczh.appliedxml.TypeAdapters.STRING_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.STRING_FACTORY != null
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL has only one value
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL != null
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() == org.jczh.appliedxml.TypeAdapters$14.class
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER has only one value
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER != null
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() == org.jczh.appliedxml.TypeAdapters$15.class
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER has only one value
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER != null
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() == org.jczh.appliedxml.TypeAdapters$16.class
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY != null
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER has only one value
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER != null
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() == org.jczh.appliedxml.TypeAdapters$17.class
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY != null
org.jczh.appliedxml.TypeAdapters.URL has only one value
org.jczh.appliedxml.TypeAdapters.URL != null
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() == org.jczh.appliedxml.TypeAdapters$18.class
org.jczh.appliedxml.TypeAdapters.URL_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.URL_FACTORY != null
org.jczh.appliedxml.TypeAdapters.URI has only one value
org.jczh.appliedxml.TypeAdapters.URI != null
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() == org.jczh.appliedxml.TypeAdapters$19.class
org.jczh.appliedxml.TypeAdapters.URI_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.URI_FACTORY != null
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS has only one value
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS != null
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() == org.jczh.appliedxml.TypeAdapters$20.class
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY != null
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters$29.class
org.jczh.appliedxml.TypeAdapters.UUID has only one value
org.jczh.appliedxml.TypeAdapters.UUID != null
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() == org.jczh.appliedxml.TypeAdapters$21.class
org.jczh.appliedxml.TypeAdapters.UUID_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.UUID_FACTORY != null
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY != null
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters$22.class
org.jczh.appliedxml.TypeAdapters.CALENDAR has only one value
org.jczh.appliedxml.TypeAdapters.CALENDAR != null
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() == org.jczh.appliedxml.TypeAdapters$23.class
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY != null
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters$28.class
org.jczh.appliedxml.TypeAdapters.LOCALE has only one value
org.jczh.appliedxml.TypeAdapters.LOCALE != null
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() == org.jczh.appliedxml.TypeAdapters$24.class
org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY != null
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY has only one value
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY != null
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() == org.jczh.appliedxml.TypeAdapters$25.class
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URL.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.URI.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters.newEnumTypeHierarchyFactory():::EXIT
return has only one value
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$25.class
===========================================================================
org.jczh.appliedxml.TypeAdapters.newFactory(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
===========================================================================
org.jczh.appliedxml.TypeAdapters.newFactory(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
org.jczh.appliedxml.TypeAdapters.CLASS == orig(org.jczh.appliedxml.TypeAdapters.CLASS)
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY)
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URL_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URI_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.UUID_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET)
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY)
org.jczh.appliedxml.TypeAdapters.BOOLEAN == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN)
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY)
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == return.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE == orig(org.jczh.appliedxml.TypeAdapters.BYTE)
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY)
org.jczh.appliedxml.TypeAdapters.SHORT == orig(org.jczh.appliedxml.TypeAdapters.SHORT)
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName())
org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY)
org.jczh.appliedxml.TypeAdapters.INTEGER == orig(org.jczh.appliedxml.TypeAdapters.INTEGER)
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY)
org.jczh.appliedxml.TypeAdapters.LONG == orig(org.jczh.appliedxml.TypeAdapters.LONG)
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName())
org.jczh.appliedxml.TypeAdapters.FLOAT == orig(org.jczh.appliedxml.TypeAdapters.FLOAT)
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName())
org.jczh.appliedxml.TypeAdapters.DOUBLE == orig(org.jczh.appliedxml.TypeAdapters.DOUBLE)
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER == orig(org.jczh.appliedxml.TypeAdapters.NUMBER)
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY)
org.jczh.appliedxml.TypeAdapters.CHARACTER == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER)
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY)
org.jczh.appliedxml.TypeAdapters.STRING == orig(org.jczh.appliedxml.TypeAdapters.STRING)
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_FACTORY)
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL == orig(org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL)
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER == orig(org.jczh.appliedxml.TypeAdapters.BIG_INTEGER)
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER)
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY)
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER)
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY)
org.jczh.appliedxml.TypeAdapters.URL == orig(org.jczh.appliedxml.TypeAdapters.URL)
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URL.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URL_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.URL_FACTORY)
org.jczh.appliedxml.TypeAdapters.URI == orig(org.jczh.appliedxml.TypeAdapters.URI)
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URI.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URI_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.URI_FACTORY)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID == orig(org.jczh.appliedxml.TypeAdapters.UUID)
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.UUID_FACTORY)
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY)
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR)
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY)
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE == orig(org.jczh.appliedxml.TypeAdapters.LOCALE)
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY)
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY)
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName())
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$4.class
return.getClass().getName() != orig(arg2.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapters.newFactory(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
arg0 != null
arg1 != null
===========================================================================
org.jczh.appliedxml.TypeAdapters.newFactory(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
org.jczh.appliedxml.TypeAdapters.CLASS == orig(org.jczh.appliedxml.TypeAdapters.CLASS)
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY)
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == return.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URL_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URI_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.UUID_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET)
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY)
org.jczh.appliedxml.TypeAdapters.BOOLEAN == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN)
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY)
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE == orig(org.jczh.appliedxml.TypeAdapters.BYTE)
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY)
org.jczh.appliedxml.TypeAdapters.SHORT == orig(org.jczh.appliedxml.TypeAdapters.SHORT)
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName())
org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY)
org.jczh.appliedxml.TypeAdapters.INTEGER == orig(org.jczh.appliedxml.TypeAdapters.INTEGER)
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY)
org.jczh.appliedxml.TypeAdapters.LONG == orig(org.jczh.appliedxml.TypeAdapters.LONG)
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName())
org.jczh.appliedxml.TypeAdapters.FLOAT == orig(org.jczh.appliedxml.TypeAdapters.FLOAT)
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName())
org.jczh.appliedxml.TypeAdapters.DOUBLE == orig(org.jczh.appliedxml.TypeAdapters.DOUBLE)
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER == orig(org.jczh.appliedxml.TypeAdapters.NUMBER)
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY)
org.jczh.appliedxml.TypeAdapters.CHARACTER == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER)
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY)
org.jczh.appliedxml.TypeAdapters.STRING == orig(org.jczh.appliedxml.TypeAdapters.STRING)
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_FACTORY)
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL == orig(org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL)
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER == orig(org.jczh.appliedxml.TypeAdapters.BIG_INTEGER)
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER)
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY)
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER)
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY)
org.jczh.appliedxml.TypeAdapters.URL == orig(org.jczh.appliedxml.TypeAdapters.URL)
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URL.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URL_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.URL_FACTORY)
org.jczh.appliedxml.TypeAdapters.URI == orig(org.jczh.appliedxml.TypeAdapters.URI)
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URI.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URI_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.URI_FACTORY)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID == orig(org.jczh.appliedxml.TypeAdapters.UUID)
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.UUID_FACTORY)
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY)
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR)
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY)
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE == orig(org.jczh.appliedxml.TypeAdapters.LOCALE)
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY)
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY)
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName())
return != null
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$27.class
return.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
org.jczh.appliedxml.TypeAdapters.newFactoryForMultipleTypes(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
arg0 has only one value
arg1 has only one value
arg2 has only one value
arg2.getClass().getName() == org.jczh.appliedxml.TypeAdapters$23.class
===========================================================================
org.jczh.appliedxml.TypeAdapters.newFactoryForMultipleTypes(java.lang.Class, java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
return has only one value
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$28.class
===========================================================================
org.jczh.appliedxml.TypeAdapters.newTypeHierarchyFactory(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::ENTER
arg0 has only one value
arg1 has only one value
arg1.getClass().getName() == org.jczh.appliedxml.TypeAdapters$20.class
===========================================================================
org.jczh.appliedxml.TypeAdapters.newTypeHierarchyFactory(java.lang.Class, org.jczh.appliedxml.TypeAdapter):::EXIT
return has only one value
return.getClass().getName() == org.jczh.appliedxml.TypeAdapters$29.class
===========================================================================
org.jczh.appliedxml.TypeAdapters.writeAsText(org.jczh.appliedxml.XmlWriter, java.lang.Object):::ENTER
arg0.indenter.indent == arg0.indenter.index
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.LESS[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.GREATER[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.AND[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.OPEN[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.last == org.jczh.appliedxml.XmlWriter$Tag.START
org.jczh.appliedxml.XmlWriter$Tag.END == org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1]
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.LESS[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.AND[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.OPEN[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0 has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count == 16
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
arg1.getClass().getName() == java.lang.String.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent-1] == 110
org.jczh.appliedxml.XmlWriter.LESS[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.GREATER[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent] == 116
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent] == 59
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1] == 112
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent] == 32
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent-1] == 45
org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1] == 62
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1] has only one value
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() != arg1.getClass().getName()
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.LESS[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.GREATER[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements <= org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.AND[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.AND[] elements <= org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1]
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.OPEN[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.OPEN[] elements >= org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.CLOSE[] elements <= org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1]
arg0.result.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
arg0.result.getClass().getName() != arg1.getClass().getName()
arg0.last in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.COMMENT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.START in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.TEXT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.END in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() != arg1.getClass().getName()
===========================================================================
org.jczh.appliedxml.TypeAdapters.writeAsText(org.jczh.appliedxml.XmlWriter, java.lang.Object):::EXIT
org.jczh.appliedxml.TypeAdapters.CLASS == orig(org.jczh.appliedxml.TypeAdapters.CLASS)
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY)
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URL_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URI_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.UUID_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET)
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BIT_SET_FACTORY)
org.jczh.appliedxml.TypeAdapters.BOOLEAN == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN)
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY)
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE == orig(org.jczh.appliedxml.TypeAdapters.BYTE)
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.BYTE_FACTORY)
org.jczh.appliedxml.TypeAdapters.SHORT == orig(org.jczh.appliedxml.TypeAdapters.SHORT)
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName())
org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.SHORT_FACTORY)
org.jczh.appliedxml.TypeAdapters.INTEGER == orig(org.jczh.appliedxml.TypeAdapters.INTEGER)
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.INTEGER_FACTORY)
org.jczh.appliedxml.TypeAdapters.LONG == orig(org.jczh.appliedxml.TypeAdapters.LONG)
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName())
org.jczh.appliedxml.TypeAdapters.FLOAT == orig(org.jczh.appliedxml.TypeAdapters.FLOAT)
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName())
org.jczh.appliedxml.TypeAdapters.DOUBLE == orig(org.jczh.appliedxml.TypeAdapters.DOUBLE)
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER == orig(org.jczh.appliedxml.TypeAdapters.NUMBER)
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.NUMBER_FACTORY)
org.jczh.appliedxml.TypeAdapters.CHARACTER == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER)
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CHARACTER_FACTORY)
org.jczh.appliedxml.TypeAdapters.STRING == orig(org.jczh.appliedxml.TypeAdapters.STRING)
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_FACTORY)
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL == orig(org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL)
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER == orig(org.jczh.appliedxml.TypeAdapters.BIG_INTEGER)
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER)
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUILDER_FACTORY)
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER)
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.STRING_BUFFER_FACTORY)
org.jczh.appliedxml.TypeAdapters.URL == orig(org.jczh.appliedxml.TypeAdapters.URL)
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URL.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URL_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.URL_FACTORY)
org.jczh.appliedxml.TypeAdapters.URI == orig(org.jczh.appliedxml.TypeAdapters.URI)
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.URI.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URI_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.URI_FACTORY)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY)
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID == orig(org.jczh.appliedxml.TypeAdapters.UUID)
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.UUID_FACTORY)
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY)
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR)
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY)
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE == orig(org.jczh.appliedxml.TypeAdapters.LOCALE)
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.LOCALE_FACTORY)
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY == orig(org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY)
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() == orig(org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName())
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.buffer == orig(arg0.buffer)
arg0.buffer.text == orig(arg0.buffer.text)
arg0.indenter == orig(arg0.indenter)
arg0.indenter.cache == orig(arg0.indenter.cache)
arg0.indenter.indent == arg0.indenter.index
arg0.indenter.indent == orig(arg0.indenter.indent)
arg0.indenter.indent == orig(arg0.indenter.index)
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.LESS[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.GREATER[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.AND[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.OPEN[])-1
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter.CLOSE[])
arg0.indenter.indent == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.indenter.count == orig(arg0.indenter.count)
arg0.result == orig(arg0.result)
arg0.result.getClass().getName() == orig(arg0.result.getClass().getName())
arg0.prolog == orig(arg0.prolog)
arg0.last == org.jczh.appliedxml.XmlWriter$Tag.TEXT
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(arg0.last)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.END == org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.LESS[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.AND[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.OPEN[])-1 == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
arg0.buffer has only one value
arg0.buffer.text has only one value
arg0.indenter has only one value
arg0.indenter.cache has only one value
arg0.indenter.indent == 4
arg0.indenter.count == 16
arg0.result has only one value
arg0.result.getClass().getName() == java.io.BufferedWriter.class
arg0.prolog == null
arg0.last has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.NAMESPACE[arg0.indenter.indent-1] == 110
org.jczh.appliedxml.XmlWriter.LESS[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.GREATER[arg0.indenter.indent-1] == 59
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent] == 116
org.jczh.appliedxml.XmlWriter.DOUBLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent] == 115
org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent-1] == 111
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent] == 59
org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1] == 112
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent] == 32
org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent-1] == 45
org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1] == 62
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[arg0.indenter.indent-1] has only one value
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CLASS_FACTORY.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIT_SET.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BOOLEAN_FACTORY.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BYTE.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.SHORT.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INTEGER.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LONG.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.FLOAT.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.DOUBLE.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.NUMBER.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CHARACTER.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_DECIMAL.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.BIG_INTEGER.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUILDER.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.STRING_BUFFER.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URL.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.URI.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.INET_ADDRESS_FACTORY.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.UUID.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.TIMESTAMP_FACTORY.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.CALENDAR_FACTORY.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.LOCALE.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() != arg0.result.getClass().getName()
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
org.jczh.appliedxml.TypeAdapters.ENUM_FACTORY.getClass().getName() != orig(arg1.getClass().getName())
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.NAMESPACE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.LESS[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.LESS[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.GREATER[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.GREATER[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.DOUBLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.SINGLE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.SINGLE[] elements <= org.jczh.appliedxml.XmlWriter.SINGLE[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.AND[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.AND[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.AND[] elements <= org.jczh.appliedxml.XmlWriter.AND[arg0.indenter.indent-1]
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.OPEN[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.OPEN[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.OPEN[] elements >= org.jczh.appliedxml.XmlWriter.OPEN[arg0.indenter.indent]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.indent
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > arg0.indenter.count
org.jczh.appliedxml.XmlWriter.CLOSE[] elements > size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
org.jczh.appliedxml.XmlWriter.CLOSE[] elements <= org.jczh.appliedxml.XmlWriter.CLOSE[arg0.indenter.indent-1]
arg0.result.getClass().getName() != org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName()
arg0.result.getClass().getName() != orig(arg1.getClass().getName())
arg0.last in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.COMMENT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.START in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.TEXT in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.END in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() != orig(arg1.getClass().getName())
orig(arg0.last) in org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]
===========================================================================
org.jczh.appliedxml.XmlWriter$Tag:::OBJECT
===========================================================================
org.jczh.appliedxml.XmlWriter$Tag.Tag(java.lang.String, int):::ENTER
===========================================================================
org.jczh.appliedxml.XmlWriter$Tag.Tag(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
org.jczh.appliedxml.XmlWriter:::CLASS
org.jczh.appliedxml.XmlWriter.NAMESPACE has only one value
org.jczh.appliedxml.XmlWriter.NAMESPACE != null
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == [120, 109, 108, 110, 115]
org.jczh.appliedxml.XmlWriter.LESS has only one value
org.jczh.appliedxml.XmlWriter.LESS != null
org.jczh.appliedxml.XmlWriter.LESS[] == [38, 108, 116, 59]
org.jczh.appliedxml.XmlWriter.GREATER has only one value
org.jczh.appliedxml.XmlWriter.GREATER != null
org.jczh.appliedxml.XmlWriter.GREATER[] == [38, 103, 116, 59]
org.jczh.appliedxml.XmlWriter.DOUBLE has only one value
org.jczh.appliedxml.XmlWriter.DOUBLE != null
org.jczh.appliedxml.XmlWriter.DOUBLE[] == [38, 113, 117, 111, 116, 59]
org.jczh.appliedxml.XmlWriter.SINGLE has only one value
org.jczh.appliedxml.XmlWriter.SINGLE != null
org.jczh.appliedxml.XmlWriter.SINGLE[] == [38, 97, 112, 111, 115, 59]
org.jczh.appliedxml.XmlWriter.AND has only one value
org.jczh.appliedxml.XmlWriter.AND != null
org.jczh.appliedxml.XmlWriter.AND[] == [38, 97, 109, 112, 59]
org.jczh.appliedxml.XmlWriter.OPEN has only one value
org.jczh.appliedxml.XmlWriter.OPEN != null
org.jczh.appliedxml.XmlWriter.OPEN[] == [60, 33, 45, 45, 32]
org.jczh.appliedxml.XmlWriter.CLOSE has only one value
org.jczh.appliedxml.XmlWriter.CLOSE != null
org.jczh.appliedxml.XmlWriter.CLOSE[] == [32, 45, 45, 62]
org.jczh.appliedxml.XmlWriter.CLOSE[] elements one of { 32, 45, 62 }
org.jczh.appliedxml.XmlWriter.CLOSE[] sorted by <=
size(org.jczh.appliedxml.XmlWriter.NAMESPACE[]) == 5
size(org.jczh.appliedxml.XmlWriter.LESS[]) == 4
size(org.jczh.appliedxml.XmlWriter.GREATER[]) == 4
size(org.jczh.appliedxml.XmlWriter.DOUBLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.SINGLE[]) == 6
size(org.jczh.appliedxml.XmlWriter.AND[]) == 5
size(org.jczh.appliedxml.XmlWriter.OPEN[]) == 5
size(org.jczh.appliedxml.XmlWriter.CLOSE[]) == 4
===========================================================================
org.jczh.appliedxml.XmlWriter:::OBJECT
this has only one value
this.buffer has only one value
this.buffer != null
this.buffer.text has only one value
this.buffer.text != null
this.indenter has only one value
this.indenter != null
this.indenter.cache has only one value
this.indenter.cache != null
this.indenter.cache.list has only one value
this.indenter.cache.list != null
this.indenter.cache.list.getClass().getName() == java.lang.String[].class
this.indenter.cache.count >= 0
this.indenter.indent == 4
this.indenter.index >= 0
this.result has only one value
this.result != null
this.result.getClass().getName() == java.io.BufferedWriter.class
this.prolog == null
org.jczh.appliedxml.XmlWriter$Tag.COMMENT has only one value
org.jczh.appliedxml.XmlWriter$Tag.COMMENT != null
org.jczh.appliedxml.XmlWriter$Tag.START has only one value
org.jczh.appliedxml.XmlWriter$Tag.START != null
org.jczh.appliedxml.XmlWriter$Tag.TEXT has only one value
org.jczh.appliedxml.XmlWriter$Tag.TEXT != null
org.jczh.appliedxml.XmlWriter$Tag.END has only one value
org.jczh.appliedxml.XmlWriter$Tag.END != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES has only one value
org.jczh.appliedxml.XmlWriter$Tag.$VALUES != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == org.jczh.appliedxml.XmlWriter$Tag[].class
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] contains no nulls and has only one value, of length 4
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] elements != null
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == [org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag, org.jczh.appliedxml.XmlWriter.Tag]
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.XmlWriter.Tag.class
size(this.indenter.cache.list[]) == 16
size(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) == 4
===========================================================================
org.jczh.appliedxml.XmlWriter.XmlWriter(java.io.Writer, org.jczh.appliedxml.Format):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.io.StringWriter.class
arg1 has only one value
arg1.prolog == null
arg1.indent == 4
===========================================================================
org.jczh.appliedxml.XmlWriter.XmlWriter(java.io.Writer, org.jczh.appliedxml.Format):::EXIT
arg1.prolog == orig(arg1.prolog)
arg1.indent == orig(arg1.indent)
this.indenter.cache.list[] contains only nulls and has only one value, of length 16
this.indenter.cache.list[] elements == null
this.indenter.cache.list[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].getClass().getName() elements == null
this.indenter.cache.list[].toString == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements == null
this.indenter.cache.count == 0
this.indenter.count == 0
this.indenter.index == 0
this.last == null
arg1.prolog == null
arg1.indent == 4
===========================================================================
org.jczh.appliedxml.XmlWriter.append(char):::ENTER
arg0 one of { 60, 62 }
===========================================================================
org.jczh.appliedxml.XmlWriter.append(char):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
===========================================================================
org.jczh.appliedxml.XmlWriter.append(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jczh.appliedxml.XmlWriter.append(java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
===========================================================================
org.jczh.appliedxml.XmlWriter.escape(char):::ENTER
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.indenter.count one of { 4, 16 }
this.indenter.index one of { 1, 4 }
this.last has only one value
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.escape(char):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.indenter.count one of { 4, 16 }
this.indenter.index one of { 1, 4 }
this.last has only one value
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.escape(java.lang.String):::ENTER
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.indenter.count one of { 4, 16 }
this.indenter.index one of { 1, 4 }
this.last has only one value
this.last != null
arg0 != null
===========================================================================
org.jczh.appliedxml.XmlWriter.escape(java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.indenter.count one of { 4, 16 }
this.indenter.index one of { 1, 4 }
this.last has only one value
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.flush():::ENTER
===========================================================================
org.jczh.appliedxml.XmlWriter.flush():::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::ENTER
arg0.toString == ""
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::EXIT517
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
orig(arg0) has only one value
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::EXIT517;condition="return == true"
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::EXIT519
orig(arg0) == null
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::EXIT519;condition="return == true"
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
(orig(arg0) has only one value)  ==>  (arg0.toString == "")
(orig(arg0) has only one value)  ==>  (this.indenter.cache.count == 0)
(orig(arg0) has only one value)  ==>  (this.indenter.cache.list[] has only one value, of length 16)
(orig(arg0) has only one value)  ==>  (this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(orig(arg0) has only one value)  ==>  (this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(orig(arg0) has only one value)  ==>  (this.indenter.cache.list[].toString elements one of { null, "\n" })
(orig(arg0) has only one value)  ==>  (this.indenter.count == 4)
(orig(arg0) has only one value)  ==>  (this.indenter.index == 1)
(orig(arg0) has only one value)  ==>  (this.last has only one value)
arg0.toString == ""
return == true
===========================================================================
org.jczh.appliedxml.XmlWriter.isEmpty(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.jczh.appliedxml.XmlWriter.symbol(char):::ENTER
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.indenter.count one of { 4, 16 }
this.indenter.index one of { 1, 4 }
this.last has only one value
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.symbol(char):::EXIT570
===========================================================================
org.jczh.appliedxml.XmlWriter.symbol(char):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.indenter.count one of { 4, 16 }
this.indenter.index one of { 1, 4 }
this.last has only one value
this.last != null
return == null
===========================================================================
org.jczh.appliedxml.XmlWriter.write(char):::ENTER
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.write(char):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.write(char[]):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
arg0 has only one value
arg0[] == [120, 109, 108, 110, 115]
size(arg0[]) == 5
===========================================================================
org.jczh.appliedxml.XmlWriter.write(char[]):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0[] == orig(arg0[])
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
arg0[] == [120, 109, 108, 110, 115]
===========================================================================
org.jczh.appliedxml.XmlWriter.write(java.lang.String):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.indenter.count one of { 0, 4, 8 }
this.indenter.index one of { 0, 1, 2 }
this.last has only one value
arg0.toString one of { "\n", "\n    ", "\n        " }
===========================================================================
org.jczh.appliedxml.XmlWriter.write(java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.indenter.count one of { 0, 4, 8 }
this.indenter.index one of { 0, 1, 2 }
this.last has only one value
arg0.toString one of { "\n", "\n    ", "\n        " }
===========================================================================
org.jczh.appliedxml.XmlWriter.write(java.lang.String, java.lang.String):::ENTER
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.last != null
arg0 != null
arg1 == null
===========================================================================
org.jczh.appliedxml.XmlWriter.write(java.lang.String, java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
this.indenter.cache.list[].getClass().getName() one of { [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.list[].toString one of { [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null] }
this.indenter.cache.count one of { 0, 3 }
this.last != null
===========================================================================
org.jczh.appliedxml.XmlWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
arg0.toString one of { "errno", "no", "ver" }
arg1.toString one of { "123", "234" }
arg2 == null
===========================================================================
org.jczh.appliedxml.XmlWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
arg0.toString one of { "errno", "no", "ver" }
arg1.toString one of { "123", "234" }
===========================================================================
org.jczh.appliedxml.XmlWriter.writeEnd(java.lang.String, java.lang.String):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.last != null
arg0 != null
arg1 == null
===========================================================================
org.jczh.appliedxml.XmlWriter.writeEnd(java.lang.String, java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.last has only one value
this.last != null
this.indenter.count - orig(this.indenter.count) + 4 == 0
this.indenter.index - orig(this.indenter.index) + 1 == 0
===========================================================================
org.jczh.appliedxml.XmlWriter.writeNamespace(java.lang.String, java.lang.String):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
arg0 has only one value
arg0.toString == "httt://wwww.baidu.com"
arg1 has only one value
arg1.toString == ""
===========================================================================
org.jczh.appliedxml.XmlWriter.writeNamespace(java.lang.String, java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
this.last == orig(this.last)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString elements one of { null, "\n" }
this.indenter.cache.count == 0
this.indenter.count == 4
this.indenter.index == 1
this.last has only one value
arg0.toString == "httt://wwww.baidu.com"
arg1.toString == ""
===========================================================================
org.jczh.appliedxml.XmlWriter.writeStart(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 == null
===========================================================================
org.jczh.appliedxml.XmlWriter.writeStart(java.lang.String, java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.indent == orig(this.indenter.indent)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName())
arg0.toString == orig(arg0.toString)
size(this.indenter.cache.list[]) == orig(size(this.indenter.cache.list[]))
this.last has only one value
this.last != null
this.indenter.cache.list[].toString >= orig(this.indenter.cache.list[].toString) (lexically)
this.indenter.cache.count >= orig(this.indenter.cache.count)
this.indenter.count - orig(this.indenter.count) - 4 == 0
this.indenter.index - orig(this.indenter.index) - 1 == 0
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[]) (elementwise)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
org.jczh.appliedxml.XmlWriter.writeText(java.lang.String):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.indenter.count == 16
this.indenter.index == 4
this.last has only one value
===========================================================================
org.jczh.appliedxml.XmlWriter.writeText(java.lang.String):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.indenter.count == 16
this.indenter.index == 4
this.last has only one value
===========================================================================
org.jczh.appliedxml.XmlWriter.writeText(java.lang.String, org.jczh.appliedxml.Mode):::ENTER
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.indenter.count == 16
this.indenter.index == 4
this.last has only one value
arg1 has only one value
org.jczh.appliedxml.Mode.DATA has only one value
org.jczh.appliedxml.Mode.ESCAPE has only one value
org.jczh.appliedxml.Mode.INHERIT has only one value
org.jczh.appliedxml.Mode.$VALUES has only one value
org.jczh.appliedxml.Mode.$VALUES.getClass().getName() == org.jczh.appliedxml.Mode[].class
org.jczh.appliedxml.Mode.$VALUES[] contains no nulls and has only one value, of length 3
org.jczh.appliedxml.Mode.$VALUES[].getClass().getName() == [org.jczh.appliedxml.Mode, org.jczh.appliedxml.Mode, org.jczh.appliedxml.Mode]
org.jczh.appliedxml.Mode.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.Mode.class
size(org.jczh.appliedxml.Mode.$VALUES[]) == 3
===========================================================================
org.jczh.appliedxml.XmlWriter.writeText(java.lang.String, org.jczh.appliedxml.Mode):::EXIT
org.jczh.appliedxml.XmlWriter.NAMESPACE == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE)
org.jczh.appliedxml.XmlWriter.NAMESPACE[] == orig(org.jczh.appliedxml.XmlWriter.NAMESPACE[])
org.jczh.appliedxml.XmlWriter.LESS == orig(org.jczh.appliedxml.XmlWriter.LESS)
org.jczh.appliedxml.XmlWriter.LESS[] == orig(org.jczh.appliedxml.XmlWriter.LESS[])
org.jczh.appliedxml.XmlWriter.GREATER == orig(org.jczh.appliedxml.XmlWriter.GREATER)
org.jczh.appliedxml.XmlWriter.GREATER[] == orig(org.jczh.appliedxml.XmlWriter.GREATER[])
org.jczh.appliedxml.XmlWriter.DOUBLE == orig(org.jczh.appliedxml.XmlWriter.DOUBLE)
org.jczh.appliedxml.XmlWriter.DOUBLE[] == orig(org.jczh.appliedxml.XmlWriter.DOUBLE[])
org.jczh.appliedxml.XmlWriter.SINGLE == orig(org.jczh.appliedxml.XmlWriter.SINGLE)
org.jczh.appliedxml.XmlWriter.SINGLE[] == orig(org.jczh.appliedxml.XmlWriter.SINGLE[])
org.jczh.appliedxml.XmlWriter.AND == orig(org.jczh.appliedxml.XmlWriter.AND)
org.jczh.appliedxml.XmlWriter.AND[] == orig(org.jczh.appliedxml.XmlWriter.AND[])
org.jczh.appliedxml.XmlWriter.OPEN == orig(org.jczh.appliedxml.XmlWriter.OPEN)
org.jczh.appliedxml.XmlWriter.OPEN[] == orig(org.jczh.appliedxml.XmlWriter.OPEN[])
org.jczh.appliedxml.XmlWriter.CLOSE == orig(org.jczh.appliedxml.XmlWriter.CLOSE)
org.jczh.appliedxml.XmlWriter.CLOSE[] == orig(org.jczh.appliedxml.XmlWriter.CLOSE[])
this.buffer == orig(this.buffer)
this.buffer.text == orig(this.buffer.text)
this.indenter == orig(this.indenter)
this.indenter.cache == orig(this.indenter.cache)
this.indenter.cache.list == orig(this.indenter.cache.list)
this.indenter.cache.list.getClass().getName() == orig(this.indenter.cache.list.getClass().getName())
this.indenter.cache.list[] == orig(this.indenter.cache.list[])
this.indenter.cache.count == orig(this.indenter.cache.count)
this.indenter.indent == orig(this.indenter.indent)
this.indenter.count == orig(this.indenter.count)
this.indenter.index == orig(this.indenter.index)
this.result == orig(this.result)
this.result.getClass().getName() == orig(this.result.getClass().getName())
this.prolog == orig(this.prolog)
org.jczh.appliedxml.XmlWriter$Tag.COMMENT == orig(org.jczh.appliedxml.XmlWriter$Tag.COMMENT)
org.jczh.appliedxml.XmlWriter$Tag.START == orig(org.jczh.appliedxml.XmlWriter$Tag.START)
org.jczh.appliedxml.XmlWriter$Tag.TEXT == orig(org.jczh.appliedxml.XmlWriter$Tag.TEXT)
org.jczh.appliedxml.XmlWriter$Tag.END == orig(org.jczh.appliedxml.XmlWriter$Tag.END)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES)
org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES.getClass().getName())
org.jczh.appliedxml.XmlWriter$Tag.$VALUES[] == orig(org.jczh.appliedxml.XmlWriter$Tag.$VALUES[])
arg0.toString == orig(arg0.toString)
org.jczh.appliedxml.Mode.DATA == orig(org.jczh.appliedxml.Mode.DATA)
org.jczh.appliedxml.Mode.ESCAPE == orig(org.jczh.appliedxml.Mode.ESCAPE)
org.jczh.appliedxml.Mode.INHERIT == orig(org.jczh.appliedxml.Mode.INHERIT)
org.jczh.appliedxml.Mode.$VALUES == orig(org.jczh.appliedxml.Mode.$VALUES)
org.jczh.appliedxml.Mode.$VALUES.getClass().getName() == orig(org.jczh.appliedxml.Mode.$VALUES.getClass().getName())
org.jczh.appliedxml.Mode.$VALUES[] == orig(org.jczh.appliedxml.Mode.$VALUES[])
this.indenter.cache.list[] has only one value, of length 16
this.indenter.cache.list[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.list[].toString == [
, 
    , 
        , 
            , null, null, null, null, null, null, null, null, null, null, null, null]
this.indenter.cache.count == 3
this.indenter.count == 16
this.indenter.index == 4
this.last has only one value
org.jczh.appliedxml.Mode.DATA has only one value
org.jczh.appliedxml.Mode.ESCAPE has only one value
org.jczh.appliedxml.Mode.INHERIT has only one value
org.jczh.appliedxml.Mode.$VALUES has only one value
org.jczh.appliedxml.Mode.$VALUES.getClass().getName() == org.jczh.appliedxml.Mode[].class
org.jczh.appliedxml.Mode.$VALUES[] contains no nulls and has only one value, of length 3
org.jczh.appliedxml.Mode.$VALUES[].getClass().getName() == [org.jczh.appliedxml.Mode, org.jczh.appliedxml.Mode, org.jczh.appliedxml.Mode]
org.jczh.appliedxml.Mode.$VALUES[].getClass().getName() elements == org.jczh.appliedxml.Mode.class
size(org.jczh.appliedxml.Mode.$VALUES[]) == 3
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.extractFrom(org.jczh.appliedxml.annotation.Namespace, org.jczh.appliedxml.annotation.NamespaceList):::ENTER
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
arg1 == null
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.extractFrom(org.jczh.appliedxml.annotation.Namespace, org.jczh.appliedxml.annotation.NamespaceList):::EXIT
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.jczh.appliedxml.Element.Namespace]
return[].getClass().getName() elements == org.jczh.appliedxml.Element.Namespace.class
size(return[]) == 1
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.extractNamespaces(java.lang.Class):::ENTER
arg0 has only one value
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.extractNamespaces(java.lang.Class):::EXIT
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.jczh.appliedxml.Element.Namespace]
return[].getClass().getName() elements == org.jczh.appliedxml.Element.Namespace.class
size(return[]) == 1
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.extractNamespaces(java.lang.reflect.Field):::ENTER
arg0 != null
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.extractNamespaces(java.lang.reflect.Field):::EXIT
return == null
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.namespaceAnnotatino2Namespace(org.jczh.appliedxml.annotation.Namespace):::ENTER
arg0 has only one value
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.jczh.appliedxml.utils.ReflectUtil.namespaceAnnotatino2Namespace(org.jczh.appliedxml.annotation.Namespace):::EXIT
return has only one value
return.prefix has only one value
return.prefix.toString == ""
return.reference has only one value
return.reference.toString == "httt://wwww.baidu.com"
===========================================================================
org.jczh.appliedxml.utils.StringUtil.isEmpty(java.lang.String):::ENTER
arg0.toString == ""
===========================================================================
org.jczh.appliedxml.utils.StringUtil.isEmpty(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == ""
return == true
===========================================================================
org.jczh.appliedxml.utils.StringUtil.isEmpty(java.lang.String):::EXIT;condition="return == true"
===========================================================================
test.simples.Exam:::OBJECT
this.ID.toString one of { "11111", "55555" }
this.examTypeID.toString one of { "0x1111", "0x2222" }
this.examName.toString one of { "ExamName-XXX", "ExamName-XXX1" }
===========================================================================
test.simples.Exam.Exam():::EXIT
this.ID == null
this.examTypeID == null
this.examName == null
===========================================================================
test.simples.Exam.setExamName(java.lang.String):::ENTER
this.ID == null
this.examTypeID == null
this.examName == null
arg0.toString one of { "ExamName-XXX", "ExamName-XXX1" }
===========================================================================
test.simples.Exam.setExamName(java.lang.String):::EXIT
this.ID == orig(this.ID)
this.examTypeID == orig(this.examTypeID)
this.examName == orig(arg0)
arg0.toString == orig(arg0.toString)
this.ID == null
this.examTypeID == null
arg0.toString one of { "ExamName-XXX", "ExamName-XXX1" }
===========================================================================
test.simples.Exam.setExamTypeID(java.lang.String):::ENTER
this.ID == null
this.examTypeID == null
arg0.toString one of { "0x1111", "0x2222" }
===========================================================================
test.simples.Exam.setExamTypeID(java.lang.String):::EXIT
this.ID == orig(this.ID)
this.examTypeID == orig(arg0)
this.examName == orig(this.examName)
this.examName.toString == orig(this.examName.toString)
arg0.toString == orig(arg0.toString)
this.ID == null
arg0.toString one of { "0x1111", "0x2222" }
===========================================================================
test.simples.Exam.setID(java.lang.String):::ENTER
this.ID == null
arg0.toString one of { "11111", "55555" }
===========================================================================
test.simples.Exam.setID(java.lang.String):::EXIT
this.ID == orig(arg0)
this.examTypeID == orig(this.examTypeID)
this.examTypeID.toString == orig(this.examTypeID.toString)
this.examName == orig(this.examName)
this.examName.toString == orig(this.examName.toString)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "11111", "55555" }
===========================================================================
test.simples.ExamType:::OBJECT
this.ID.toString one of { "0x111", "0x1112" }
this.dictName.toString one of { "DictName", "DictName2" }
===========================================================================
test.simples.ExamType.ExamType():::EXIT
this.ID == null
this.dictName == null
===========================================================================
test.simples.ExamType.setDictName(java.lang.String):::ENTER
this.ID == null
this.dictName == null
arg0.toString one of { "DictName", "DictName2" }
===========================================================================
test.simples.ExamType.setDictName(java.lang.String):::EXIT
this.ID == orig(this.ID)
this.dictName == orig(arg0)
arg0.toString == orig(arg0.toString)
this.ID == null
arg0.toString one of { "DictName", "DictName2" }
===========================================================================
test.simples.ExamType.setID(java.lang.String):::ENTER
this.ID == null
arg0.toString one of { "0x111", "0x1112" }
===========================================================================
test.simples.ExamType.setID(java.lang.String):::EXIT
this.ID == orig(arg0)
this.dictName == orig(this.dictName)
this.dictName.toString == orig(this.dictName.toString)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "0x111", "0x1112" }
===========================================================================
test.simples.Service:::OBJECT
this has only one value
this.no one of { 0, 123 }
this.errno one of { 0, 123 }
this.ver one of { 0, 234 }
this.exams != null
this.exams[] elements != null
this.exams[].getClass().getName() elements == test.simples.Exam.class
this.exams[].getClass().getName() one of { [], [test.simples.Exam, test.simples.Exam] }
this.examTypes != null
this.examTypes[] elements != null
this.examTypes[].getClass().getName() elements == test.simples.ExamType.class
this.examTypes[].getClass().getName() one of { [], [test.simples.ExamType, test.simples.ExamType] }
this.subjects != null
this.subjects[] elements has only one value
this.subjects[] elements != null
this.subjects[].getClass().getName() elements == test.simples.Subject.class
this.subjects[].getClass().getName() one of { [], [test.simples.Subject] }
size(this.exams[]) one of { 0, 2 }
size(this.exams[])-1 != 0
size(this.examTypes[]) one of { 0, 2 }
size(this.examTypes[])-1 != 0
size(this.subjects[]) one of { 0, 1 }
===========================================================================
test.simples.Service.Service():::EXIT
this.no == 0
this.errno == 0
this.ver == 0
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
===========================================================================
test.simples.Service.setErrno(int):::ENTER
this.no == 123
this.errno == 0
this.ver == 0
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0 == 123
===========================================================================
test.simples.Service.setErrno(int):::EXIT
this.no == orig(this.no)
this.errno == orig(arg0)
this.ver == orig(this.ver)
this.exams == orig(this.exams)
this.exams[] == orig(this.exams[])
this.examTypes == orig(this.examTypes)
this.examTypes[] == orig(this.examTypes[])
this.subjects == orig(this.subjects)
this.subjects[] == orig(this.subjects[])
this.no == 123
this.errno == 123
this.ver == 0
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
===========================================================================
test.simples.Service.setExamTypes(java.util.ArrayList):::ENTER
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
arg0[].getClass().getName() elements == test.simples.ExamType.class
size(arg0[]) == 2
===========================================================================
test.simples.Service.setExamTypes(java.util.ArrayList):::EXIT
this.no == orig(this.no)
this.errno == orig(this.errno)
this.ver == orig(this.ver)
this.exams == orig(this.exams)
this.exams[] == orig(this.exams[])
this.examTypes == orig(arg0)
this.subjects == orig(this.subjects)
this.subjects[] == orig(this.subjects[])
arg0[] == orig(arg0[])
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] contains no nulls and has only one value, of length 2
this.examTypes[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
arg0[].getClass().getName() elements == test.simples.ExamType.class
size(this.examTypes[]) == 2
===========================================================================
test.simples.Service.setExams(java.util.ArrayList):::ENTER
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] contains no nulls and has only one value, of length 2
this.examTypes[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [test.simples.Exam, test.simples.Exam]
arg0[].getClass().getName() elements == test.simples.Exam.class
size(this.examTypes[]) == 2
size(arg0[]) == 2
===========================================================================
test.simples.Service.setExams(java.util.ArrayList):::EXIT
this.no == orig(this.no)
this.errno == orig(this.errno)
this.ver == orig(this.ver)
this.exams == orig(arg0)
this.examTypes == orig(this.examTypes)
this.examTypes[] == orig(this.examTypes[])
this.subjects == orig(this.subjects)
this.subjects[] == orig(this.subjects[])
arg0[] == orig(arg0[])
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] contains no nulls and has only one value, of length 2
this.exams[].getClass().getName() == [test.simples.Exam, test.simples.Exam]
this.examTypes has only one value
this.examTypes[] contains no nulls and has only one value, of length 2
this.examTypes[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [test.simples.Exam, test.simples.Exam]
arg0[].getClass().getName() elements == test.simples.Exam.class
size(this.exams[]) == 2
size(this.examTypes[]) == 2
===========================================================================
test.simples.Service.setNo(int):::ENTER
this.no == 0
this.errno == 0
this.ver == 0
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0 == 123
===========================================================================
test.simples.Service.setNo(int):::EXIT
this.no == orig(arg0)
this.errno == orig(this.errno)
this.ver == orig(this.ver)
this.exams == orig(this.exams)
this.exams[] == orig(this.exams[])
this.examTypes == orig(this.examTypes)
this.examTypes[] == orig(this.examTypes[])
this.subjects == orig(this.subjects)
this.subjects[] == orig(this.subjects[])
this.no == 123
this.errno == 0
this.ver == 0
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
===========================================================================
test.simples.Service.setSubjects(java.util.ArrayList):::ENTER
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] contains no nulls and has only one value, of length 2
this.exams[].getClass().getName() == [test.simples.Exam, test.simples.Exam]
this.examTypes has only one value
this.examTypes[] contains no nulls and has only one value, of length 2
this.examTypes[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [test.simples.Subject]
arg0[].getClass().getName() elements == test.simples.Subject.class
size(this.exams[]) == 2
size(this.examTypes[]) == 2
size(arg0[]) == 1
===========================================================================
test.simples.Service.setSubjects(java.util.ArrayList):::EXIT
this.no == orig(this.no)
this.errno == orig(this.errno)
this.ver == orig(this.ver)
this.exams == orig(this.exams)
this.exams[] == orig(this.exams[])
this.examTypes == orig(this.examTypes)
this.examTypes[] == orig(this.examTypes[])
this.subjects == orig(arg0)
arg0[] == orig(arg0[])
size(this.subjects[])-1 == orig(size(this.subjects[]))
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] contains no nulls and has only one value, of length 2
this.exams[].getClass().getName() == [test.simples.Exam, test.simples.Exam]
this.examTypes has only one value
this.examTypes[] contains no nulls and has only one value, of length 2
this.examTypes[].getClass().getName() == [test.simples.ExamType, test.simples.ExamType]
this.subjects has only one value
this.subjects[] contains no nulls and has only one value, of length 1
this.subjects[].getClass().getName() == [test.simples.Subject]
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [test.simples.Subject]
arg0[].getClass().getName() elements == test.simples.Subject.class
size(this.exams[]) == 2
size(this.examTypes[]) == 2
size(this.subjects[]) == 1
===========================================================================
test.simples.Service.setVer(int):::ENTER
this.no == 123
this.errno == 123
this.ver == 0
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
arg0 == 234
===========================================================================
test.simples.Service.setVer(int):::EXIT
this.no == orig(this.no)
this.errno == orig(this.errno)
this.ver == orig(arg0)
this.exams == orig(this.exams)
this.exams[] == orig(this.exams[])
this.examTypes == orig(this.examTypes)
this.examTypes[] == orig(this.examTypes[])
this.subjects == orig(this.subjects)
this.subjects[] == orig(this.subjects[])
this.no == 123
this.errno == 123
this.ver == 234
this.exams has only one value
this.exams[] == []
this.exams[].getClass().getName() == []
this.examTypes has only one value
this.examTypes[] == []
this.examTypes[].getClass().getName() == []
this.subjects has only one value
this.subjects[] == []
this.subjects[].getClass().getName() == []
===========================================================================
test.simples.Subject:::OBJECT
this has only one value
this.ID.toString == "subjectid"
this.examID == null
this.subjectName == null
===========================================================================
test.simples.Subject.Subject():::EXIT
this.ID == null
===========================================================================
test.simples.Subject.setID(java.lang.String):::ENTER
this.ID == null
arg0 has only one value
arg0.toString == "subjectid"
===========================================================================
test.simples.Subject.setID(java.lang.String):::EXIT
this.ID == orig(arg0)
this.examID == orig(this.examID)
this.subjectName == orig(this.subjectName)
arg0.toString == orig(arg0.toString)
this.ID has only one value
arg0.toString == "subjectid"
===========================================================================
test.simples.Test$1:::OBJECT
this has only one value
test.simples.Test.this has only one value
test.simples.Test.this.serializer has only one value
test.simples.Test.this.serializer.nullValueSerializeRequired == false
test.simples.Test.this.serializer.typeAdapterManager has only one value
test.simples.Test.this.serializer.elementConstructorManager has only one value
test.simples.Test.this.serializer.defaultElementPrefix == null
test.simples.Test.this.serializer.defaultAttributePrefix == null
test.simples.Test.this.serializer.formatter has only one value
test.simples.Test.this.serializer.associatedWithSuperClass == true
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() != test.simples.Test.this.serializer.classNamingStrategy.getClass().getName()
===========================================================================
test.simples.Test$1.(test.simples.Test):::ENTER
test.simples.Test.this has only one value
test.simples.Test.this.serializer has only one value
test.simples.Test.this.serializer.nullValueSerializeRequired == false
test.simples.Test.this.serializer.typeAdapterManager has only one value
test.simples.Test.this.serializer.elementConstructorManager has only one value
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
test.simples.Test.this.serializer.classNamingStrategy has only one value
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
test.simples.Test.this.serializer.defaultElementPrefix == null
test.simples.Test.this.serializer.defaultAttributePrefix == null
test.simples.Test.this.serializer.formatter has only one value
test.simples.Test.this.serializer.associatedWithSuperClass == true
===========================================================================
test.simples.Test$1.(test.simples.Test):::EXIT
test.simples.Test.this == orig(test.simples.Test.this)
test.simples.Test.this.serializer == orig(test.simples.Test.this.serializer)
test.simples.Test.this.serializer.nullValueSerializeRequired == orig(test.simples.Test.this.serializer.nullValueSerializeRequired)
test.simples.Test.this.serializer.typeAdapterManager == orig(test.simples.Test.this.serializer.typeAdapterManager)
test.simples.Test.this.serializer.elementConstructorManager == orig(test.simples.Test.this.serializer.elementConstructorManager)
test.simples.Test.this.serializer.fieldNamingStrategy == orig(test.simples.Test.this.serializer.fieldNamingStrategy)
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.classNamingStrategy == orig(test.simples.Test.this.serializer.classNamingStrategy)
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.classNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.defaultElementPrefix == orig(test.simples.Test.this.serializer.defaultElementPrefix)
test.simples.Test.this.serializer.defaultAttributePrefix == orig(test.simples.Test.this.serializer.defaultAttributePrefix)
test.simples.Test.this.serializer.formatter == orig(test.simples.Test.this.serializer.formatter)
test.simples.Test.this.serializer.associatedWithSuperClass == orig(test.simples.Test.this.serializer.associatedWithSuperClass)
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
test.simples.Test.this.serializer.classNamingStrategy has only one value
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$2.class
===========================================================================
test.simples.Test$1.translateName(java.lang.Class):::ENTER
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
test.simples.Test.this.serializer.classNamingStrategy has only one value
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
===========================================================================
test.simples.Test$1.translateName(java.lang.Class):::EXIT
test.simples.Test.this == orig(test.simples.Test.this)
test.simples.Test.this.serializer == orig(test.simples.Test.this.serializer)
test.simples.Test.this.serializer.nullValueSerializeRequired == orig(test.simples.Test.this.serializer.nullValueSerializeRequired)
test.simples.Test.this.serializer.typeAdapterManager == orig(test.simples.Test.this.serializer.typeAdapterManager)
test.simples.Test.this.serializer.elementConstructorManager == orig(test.simples.Test.this.serializer.elementConstructorManager)
test.simples.Test.this.serializer.fieldNamingStrategy == orig(test.simples.Test.this.serializer.fieldNamingStrategy)
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.classNamingStrategy == orig(test.simples.Test.this.serializer.classNamingStrategy)
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.classNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.defaultElementPrefix == orig(test.simples.Test.this.serializer.defaultElementPrefix)
test.simples.Test.this.serializer.defaultAttributePrefix == orig(test.simples.Test.this.serializer.defaultAttributePrefix)
test.simples.Test.this.serializer.formatter == orig(test.simples.Test.this.serializer.formatter)
test.simples.Test.this.serializer.associatedWithSuperClass == orig(test.simples.Test.this.serializer.associatedWithSuperClass)
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
test.simples.Test.this.serializer.classNamingStrategy has only one value
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
===========================================================================
test.simples.Test$2:::OBJECT
this has only one value
test.simples.Test.this has only one value
test.simples.Test.this.serializer has only one value
test.simples.Test.this.serializer != null
test.simples.Test.this.serializer.nullValueSerializeRequired == false
test.simples.Test.this.serializer.typeAdapterManager has only one value
test.simples.Test.this.serializer.typeAdapterManager != null
test.simples.Test.this.serializer.elementConstructorManager has only one value
test.simples.Test.this.serializer.elementConstructorManager != null
test.simples.Test.this.serializer.fieldNamingStrategy != null
test.simples.Test.this.serializer.classNamingStrategy has only one value
test.simples.Test.this.serializer.classNamingStrategy != null
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
test.simples.Test.this.serializer.defaultElementPrefix == null
test.simples.Test.this.serializer.defaultAttributePrefix == null
test.simples.Test.this.serializer.formatter has only one value
test.simples.Test.this.serializer.formatter != null
test.simples.Test.this.serializer.associatedWithSuperClass == true
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() != test.simples.Test.this.serializer.classNamingStrategy.getClass().getName()
===========================================================================
test.simples.Test$2.(test.simples.Test):::ENTER
test.simples.Test.this has only one value
test.simples.Test.this.serializer has only one value
test.simples.Test.this.serializer.nullValueSerializeRequired == false
test.simples.Test.this.serializer.typeAdapterManager has only one value
test.simples.Test.this.serializer.elementConstructorManager has only one value
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
test.simples.Test.this.serializer.classNamingStrategy has only one value
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
test.simples.Test.this.serializer.defaultElementPrefix == null
test.simples.Test.this.serializer.defaultAttributePrefix == null
test.simples.Test.this.serializer.formatter has only one value
test.simples.Test.this.serializer.associatedWithSuperClass == true
===========================================================================
test.simples.Test$2.(test.simples.Test):::EXIT
test.simples.Test.this == orig(test.simples.Test.this)
test.simples.Test.this.serializer == orig(test.simples.Test.this.serializer)
test.simples.Test.this.serializer.nullValueSerializeRequired == orig(test.simples.Test.this.serializer.nullValueSerializeRequired)
test.simples.Test.this.serializer.typeAdapterManager == orig(test.simples.Test.this.serializer.typeAdapterManager)
test.simples.Test.this.serializer.elementConstructorManager == orig(test.simples.Test.this.serializer.elementConstructorManager)
test.simples.Test.this.serializer.fieldNamingStrategy == orig(test.simples.Test.this.serializer.fieldNamingStrategy)
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.classNamingStrategy == orig(test.simples.Test.this.serializer.classNamingStrategy)
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.classNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.defaultElementPrefix == orig(test.simples.Test.this.serializer.defaultElementPrefix)
test.simples.Test.this.serializer.defaultAttributePrefix == orig(test.simples.Test.this.serializer.defaultAttributePrefix)
test.simples.Test.this.serializer.formatter == orig(test.simples.Test.this.serializer.formatter)
test.simples.Test.this.serializer.associatedWithSuperClass == orig(test.simples.Test.this.serializer.associatedWithSuperClass)
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == org.jczh.appliedxml.Serializer$1.class
===========================================================================
test.simples.Test$2.translateName(java.lang.reflect.Field):::ENTER
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
arg0 != null
===========================================================================
test.simples.Test$2.translateName(java.lang.reflect.Field):::EXIT43
return.toString one of { "errno", "no", "ver" }
===========================================================================
test.simples.Test$2.translateName(java.lang.reflect.Field):::EXIT44
===========================================================================
test.simples.Test$2.translateName(java.lang.reflect.Field):::EXIT
test.simples.Test.this == orig(test.simples.Test.this)
test.simples.Test.this.serializer == orig(test.simples.Test.this.serializer)
test.simples.Test.this.serializer.nullValueSerializeRequired == orig(test.simples.Test.this.serializer.nullValueSerializeRequired)
test.simples.Test.this.serializer.typeAdapterManager == orig(test.simples.Test.this.serializer.typeAdapterManager)
test.simples.Test.this.serializer.elementConstructorManager == orig(test.simples.Test.this.serializer.elementConstructorManager)
test.simples.Test.this.serializer.fieldNamingStrategy == orig(test.simples.Test.this.serializer.fieldNamingStrategy)
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.classNamingStrategy == orig(test.simples.Test.this.serializer.classNamingStrategy)
test.simples.Test.this.serializer.classNamingStrategy.getClass().getName() == orig(test.simples.Test.this.serializer.classNamingStrategy.getClass().getName())
test.simples.Test.this.serializer.defaultElementPrefix == orig(test.simples.Test.this.serializer.defaultElementPrefix)
test.simples.Test.this.serializer.defaultAttributePrefix == orig(test.simples.Test.this.serializer.defaultAttributePrefix)
test.simples.Test.this.serializer.formatter == orig(test.simples.Test.this.serializer.formatter)
test.simples.Test.this.serializer.associatedWithSuperClass == orig(test.simples.Test.this.serializer.associatedWithSuperClass)
test.simples.Test.this.serializer.fieldNamingStrategy has only one value
test.simples.Test.this.serializer.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
return != null
===========================================================================
test.simples.Test:::OBJECT
this.serializer == this.serializer.typeAdapterManager.context
this.serializer == this.serializer.elementConstructorManager.context
this has only one value
this.serializer has only one value
this.serializer.nullValueSerializeRequired == false
this.serializer.typeAdapterManager has only one value
this.serializer.typeAdapterManager.constructorConstructor has only one value
this.serializer.typeAdapterManager.factories has only one value
this.serializer.typeAdapterManager.factories[] contains no nulls and has only one value, of length 35
this.serializer.typeAdapterManager.factories[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, org.jczh.appliedxml.ArrayTypeAdapterFactory, org.jczh.appliedxml.CollectionTypeAdapterFactory, org.jczh.appliedxml.MapTypeAdapterFactory, org.jczh.appliedxml.ReflectiveTypeAdapterFactory]
this.serializer.typeAdapterManager.factories.getClass().getName() == java.util.ArrayList.class
this.serializer.typeAdapterManager.calls has only one value
this.serializer.typeAdapterManager.typeTokenCache has only one value
this.serializer.typeAdapterManager.typeTokenCache.getClass().getName() == java.util.Collections$SynchronizedMap.class
this.serializer.elementConstructorManager has only one value
this.serializer.elementConstructorManager.factorys has only one value
this.serializer.elementConstructorManager.factorys[] contains no nulls and has only one value, of length 2
this.serializer.elementConstructorManager.factorys[].getClass().getName() == [org.jczh.appliedxml.ElementConstructorManager.CollectionElementFactory, org.jczh.appliedxml.DocumentTreeBuilderFactory]
this.serializer.fieldNamingStrategy has only one value
this.serializer.fieldNamingStrategy.getClass().getName() == test.simples.Test$2.class
this.serializer.classNamingStrategy has only one value
this.serializer.classNamingStrategy.getClass().getName() == test.simples.Test$1.class
this.serializer.defaultElementPrefix == null
this.serializer.defaultAttributePrefix == null
this.serializer.formatter has only one value
this.serializer.formatter.prolog == null
this.serializer.formatter.indent == 4
this.serializer.associatedWithSuperClass == true
size(this.serializer.typeAdapterManager.factories[]) == 35
size(this.serializer.elementConstructorManager.factorys[]) == 2
===========================================================================
test.simples.Test.Test():::EXIT
===========================================================================
test.simples.Test.service2Xml():::ENTER
===========================================================================
test.simples.Test.service2Xml():::EXIT
this.serializer == orig(this.serializer)
this.serializer == orig(this.serializer.typeAdapterManager.context)
this.serializer == orig(this.serializer.elementConstructorManager.context)
this.serializer.nullValueSerializeRequired == orig(this.serializer.nullValueSerializeRequired)
this.serializer.typeAdapterManager == orig(this.serializer.typeAdapterManager)
this.serializer.typeAdapterManager.constructorConstructor == orig(this.serializer.typeAdapterManager.constructorConstructor)
this.serializer.typeAdapterManager.factories == orig(this.serializer.typeAdapterManager.factories)
this.serializer.typeAdapterManager.factories[] == orig(this.serializer.typeAdapterManager.factories[])
this.serializer.typeAdapterManager.factories.getClass().getName() == orig(this.serializer.typeAdapterManager.factories.getClass().getName())
this.serializer.typeAdapterManager.calls == orig(this.serializer.typeAdapterManager.calls)
this.serializer.typeAdapterManager.typeTokenCache == orig(this.serializer.typeAdapterManager.typeTokenCache)
this.serializer.typeAdapterManager.typeTokenCache.getClass().getName() == orig(this.serializer.typeAdapterManager.typeTokenCache.getClass().getName())
this.serializer.elementConstructorManager == orig(this.serializer.elementConstructorManager)
this.serializer.elementConstructorManager.factorys == orig(this.serializer.elementConstructorManager.factorys)
this.serializer.elementConstructorManager.factorys[] == orig(this.serializer.elementConstructorManager.factorys[])
this.serializer.fieldNamingStrategy == orig(this.serializer.fieldNamingStrategy)
this.serializer.fieldNamingStrategy.getClass().getName() == orig(this.serializer.fieldNamingStrategy.getClass().getName())
this.serializer.classNamingStrategy == orig(this.serializer.classNamingStrategy)
this.serializer.classNamingStrategy.getClass().getName() == orig(this.serializer.classNamingStrategy.getClass().getName())
this.serializer.defaultElementPrefix == orig(this.serializer.defaultElementPrefix)
this.serializer.defaultAttributePrefix == orig(this.serializer.defaultAttributePrefix)
this.serializer.formatter == orig(this.serializer.formatter)
this.serializer.formatter.prolog == orig(this.serializer.formatter.prolog)
this.serializer.formatter.indent == orig(this.serializer.formatter.indent)
this.serializer.associatedWithSuperClass == orig(this.serializer.associatedWithSuperClass)
return has only one value
return.toString == "<Service xmlns=\"httt://wwww.baidu.com\" no=\"123\" errno=\"123\" ver=\"234\">\n    <Exams>\n        <Exam>\n            <ID>55555</ID>\n            <ExamTypeID>0x2222</ExamTypeID>\n            <ExamName>ExamName-XXX</ExamName>\n        </Exam>\n        <Exam>\n            <ID>11111</ID>\n            <ExamTypeID>0x1111</ExamTypeID>\n            <ExamName>ExamName-XXX1</ExamName>\n        </Exam>\n    </Exams>\n    <ExamTypes>\n        <ExamType>\n            <ID>0x111</ID>\n            <DictName>DictName</DictName>\n        </ExamType>\n        <ExamType>\n            <ID>0x1112</ID>\n            <DictName>DictName2</DictName>\n        </ExamType>\n    </ExamTypes>\n    <Subjects>\n        <Subject>\n            <ID>subjectid</ID>\n        </Subject>\n    </Subjects>\n</Service>"
Exiting Daikon.
