Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 9 times.  Unmatched entries are ignored!
Unterminated calls:
  event.CloseSemanticsTest.main(java.lang.String[]) : 1 invocation
  event.CloseSemanticsTest.server() : 1 invocation
  event.TCPServerLoop.createTCPServer(event.Callback$TCPServer, java.net.SocketAddress) : 1 invocation
  event.TCPClientLoop.run() : 1 invocation
  event.Loop.run() : 2 invocations
  event.Callback$ErrorCallbackBase.onError(event.Loop, java.lang.Throwable) : 1 invocation
  event.Loop.onError(java.lang.Throwable) : 1 invocation
  event.Callback$DefaultErrorCallback.onError(event.Loop, java.lang.Throwable) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
event.Callback$DefaultErrorCallback:::OBJECT
this has only one value
===========================================================================
event.Callback$DefaultErrorCallback.DefaultErrorCallback():::EXIT
===========================================================================
event.Callback$ErrorCallbackBase:::OBJECT
===========================================================================
event.Callback$ErrorCallbackBase.ErrorCallbackBase():::EXIT
===========================================================================
event.Callback$TCPClient:::OBJECT
this has only one value
this.getClass().getName() == event.CloseSemanticsTest$5.class
===========================================================================
event.Callback$TCPClient.TCPClient():::EXIT
===========================================================================
event.Callback$TCPServer:::OBJECT
this has only one value
this.getClass().getName() == event.CloseSemanticsTest$6.class
===========================================================================
event.Callback$TCPServer.TCPServer():::EXIT
===========================================================================
event.CloseSemanticsTest$5:::OBJECT
this has only one value
===========================================================================
event.CloseSemanticsTest$5.():::EXIT
===========================================================================
event.CloseSemanticsTest$6:::OBJECT
this has only one value
this.val$client has only one value
this.val$client.getClass().getName() == event.CloseSemanticsTest$5.class
===========================================================================
event.CloseSemanticsTest$6.(event.Callback$TCPClient):::ENTER
arg0 has only one value
arg0.getClass().getName() == event.CloseSemanticsTest$5.class
===========================================================================
event.CloseSemanticsTest$6.(event.Callback$TCPClient):::EXIT
===========================================================================
event.DNSLoop:::CLASS
event.TimeoutLoop.$assertionsDisabled == false
===========================================================================
event.DNSLoop:::OBJECT
this has only one value
this.timeouts has only one value
this.timeouts.getClass().getName() == java.util.PriorityQueue.class
this.newTimeouts has only one value
this.newTimeouts[] == []
this.newTimeouts[].getClass().getName() == []
this.loopTime == 0
this.idSeq == 0
this.maxSleep == 0
this.stopped == false
this.loopThread == null
this.errCB == null
this.selector has only one value
this.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
===========================================================================
event.DNSLoop.DNSLoop():::EXIT
===========================================================================
event.Loop:::OBJECT
this.maxSleep == 0
this.stopped == false
this.loopThread == null
this.errCB == null
this.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
===========================================================================
event.Loop.Loop():::EXIT
===========================================================================
event.TCPClientLoop:::CLASS
event.TCPClientLoop.$assertionsDisabled == false
===========================================================================
event.TCPClientLoop:::OBJECT
this has only one value
this.dnsLoop has only one value
this.dnsLoop.timeouts has only one value
this.dnsLoop.timeouts.getClass().getName() == java.util.PriorityQueue.class
this.dnsLoop.newTimeouts has only one value
this.dnsLoop.newTimeouts[] == []
this.dnsLoop.newTimeouts[].getClass().getName() == []
this.dnsLoop.loopTime == 0
this.dnsLoop.idSeq == 0
event.TimeoutLoop.$assertionsDisabled == false
this.dnsLoop.maxSleep == 0
this.dnsLoop.stopped == false
this.dnsLoop.loopThread == null
this.dnsLoop.errCB == null
this.dnsLoop.selector has only one value
this.dnsLoop.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
this.buf has only one value
this.buf.getClass().getName() == java.nio.DirectByteBuffer.class
this.timeouts has only one value
this.timeouts.getClass().getName() == java.util.PriorityQueue.class
this.newTimeouts has only one value
this.newTimeouts[] == []
this.newTimeouts[].getClass().getName() == []
this.loopTime == 0
this.idSeq == 0
this.maxSleep == 0
this.stopped == false
this.loopThread == null
this.errCB == null
this.selector has only one value
this.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
===========================================================================
event.TCPClientLoop.TCPClientLoop():::EXIT
===========================================================================
event.TCPServerLoop:::CLASS
event.TCPServerLoop.$assertionsDisabled == false
event.TCPClientLoop.$assertionsDisabled == false
===========================================================================
event.TCPServerLoop:::OBJECT
this has only one value
this.dnsLoop has only one value
this.dnsLoop.timeouts has only one value
this.dnsLoop.timeouts.getClass().getName() == java.util.PriorityQueue.class
this.dnsLoop.newTimeouts has only one value
this.dnsLoop.newTimeouts[] == []
this.dnsLoop.newTimeouts[].getClass().getName() == []
this.dnsLoop.loopTime == 0
this.dnsLoop.idSeq == 0
event.TimeoutLoop.$assertionsDisabled == false
this.dnsLoop.maxSleep == 0
this.dnsLoop.stopped == false
this.dnsLoop.loopThread == null
this.dnsLoop.errCB == null
this.dnsLoop.selector has only one value
this.dnsLoop.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
this.buf has only one value
this.buf.getClass().getName() == java.nio.DirectByteBuffer.class
this.timeouts has only one value
this.timeouts.getClass().getName() == java.util.PriorityQueue.class
this.newTimeouts has only one value
this.newTimeouts[] == []
this.newTimeouts[].getClass().getName() == []
this.loopTime == 0
this.idSeq == 0
this.maxSleep == 0
this.stopped == false
this.loopThread == null
this.errCB == null
this.selector has only one value
this.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
===========================================================================
event.TCPServerLoop.TCPServerLoop():::EXIT
===========================================================================
event.TimeoutLoop:::CLASS
event.TimeoutLoop.$assertionsDisabled == false
===========================================================================
event.TimeoutLoop:::OBJECT
this.timeouts.getClass().getName() == java.util.PriorityQueue.class
this.newTimeouts[] == []
this.newTimeouts[].getClass().getName() == []
this.loopTime == 0
this.idSeq == 0
this.maxSleep == 0
this.stopped == false
this.loopThread == null
this.errCB == null
this.selector.getClass().getName() == sun.nio.ch.EPollSelectorImpl.class
===========================================================================
event.TimeoutLoop.TimeoutLoop():::EXIT
Exiting Daikon.
