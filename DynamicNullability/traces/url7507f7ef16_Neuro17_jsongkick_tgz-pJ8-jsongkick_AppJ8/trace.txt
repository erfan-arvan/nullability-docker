Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 3 times.  Unmatched entries are ignored!
Unterminated calls:
  jsongkick.App.main(java.lang.String[]) : 1 invocation
  jsongkick.App.run() : 1 invocation
  search.LocationSearch.firstLocation(java.lang.String) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

missing variables in newEnterExitRel:
  parent = org.apache.logging.log4j.status.StatusLogger$BoundedQueue.BoundedQueue(org.apache.logging.log4j.status.StatusLogger, int):::ENTER
  child = org.apache.logging.log4j.status.StatusLogger$BoundedQueue.BoundedQueue(org.apache.logging.log4j.status.StatusLogger, int):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@43b428b0
parent varinfos missing from parent_to_child_map:
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.serialVersionUID]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.serialVersionUID-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES-1]
   org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[org.apache.logging.log4j.status.StatusLogger.this.listenersLevel]
   org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[org.apache.logging.log4j.status.StatusLogger.this.listenersLevel-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.spi.AbstractLogger.serialVersionUID]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.spi.AbstractLogger.serialVersionUID-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.simple.SimpleLogger.serialVersionUID]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.simple.SimpleLogger.serialVersionUID-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.simple.SimpleLogger.SPACE]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.simple.SimpleLogger.SPACE-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.this.listenersLevel]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[org.apache.logging.log4j.status.StatusLogger.this.listenersLevel-1]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[size]
   org.apache.logging.log4j.status.StatusLogger.this.listeners[size-1]
rel.parent_to_child_map:
    org.apache.logging.log4j.status.StatusLogger.this => orig(org.apache.logging.log4j.status.StatusLogger.this)
    org.apache.logging.log4j.status.StatusLogger.serialVersionUID => org.apache.logging.log4j.status.StatusLogger.serialVersionUID
    org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES => orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
    org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString => orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
    org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL => orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
    org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString => orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
    org.apache.logging.log4j.status.StatusLogger.PROPS => orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
    org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES => orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
    org.apache.logging.log4j.util.PropertiesUtil.LOGGER => orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
    org.apache.logging.log4j.util.PropertiesUtil.LOGGER.getClass().getName() => orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER.getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.PROPS.props => orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
    org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES => orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
    org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL => orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
    org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL.toString => orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL.toString)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..] => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..])
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..].getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..].getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
    org.apache.logging.log4j.spi.AbstractLogger.serialVersionUID => org.apache.logging.log4j.spi.AbstractLogger.serialVersionUID
    org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER => orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
    org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() => orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
    org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER => orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
    org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() => orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
    org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER => orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
    org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() => orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
    org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER => orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
    org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() => orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
    org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER => orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
    org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() => orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER => orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() => orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
    org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS => orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
    org.apache.logging.log4j.spi.AbstractLogger.FQCN => orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
    org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString => orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
    org.apache.logging.log4j.spi.AbstractLogger.THROWING => orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
    org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString => orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING => orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString => orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.this.logger => orig(org.apache.logging.log4j.status.StatusLogger.this.logger)
    org.apache.logging.log4j.simple.SimpleLogger.serialVersionUID => org.apache.logging.log4j.simple.SimpleLogger.serialVersionUID
    org.apache.logging.log4j.simple.SimpleLogger.SPACE => org.apache.logging.log4j.simple.SimpleLogger.SPACE
    org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter)
    org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter.getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter.getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.this.logger.level => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.level)
    org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime)
    org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap)
    org.apache.logging.log4j.status.StatusLogger.this.logger.stream => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.stream)
    org.apache.logging.log4j.status.StatusLogger.this.logger.logName => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.logName)
    org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString)
    org.apache.logging.log4j.status.StatusLogger.this.logger.name => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.name)
    org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString)
    org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory)
    org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory.getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory.getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.this.listeners => orig(org.apache.logging.log4j.status.StatusLogger.this.listeners)
    org.apache.logging.log4j.status.StatusLogger.this.listeners[..] => orig(org.apache.logging.log4j.status.StatusLogger.this.listeners[..])
    org.apache.logging.log4j.status.StatusLogger.this.listeners[..].getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.this.listeners[..].getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.this.listenersLock => orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLock)
    org.apache.logging.log4j.status.StatusLogger.this.messages => orig(org.apache.logging.log4j.status.StatusLogger.this.messages)
    org.apache.logging.log4j.status.StatusLogger.this.messages.getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.this.messages.getClass().getName())
    org.apache.logging.log4j.status.StatusLogger.this.msgLock => orig(org.apache.logging.log4j.status.StatusLogger.this.msgLock)
    org.apache.logging.log4j.status.StatusLogger.this.listenersLevel => orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLevel)
    org.apache.logging.log4j.status.StatusLogger.this.name => orig(org.apache.logging.log4j.status.StatusLogger.this.name)
    org.apache.logging.log4j.status.StatusLogger.this.name.toString => orig(org.apache.logging.log4j.status.StatusLogger.this.name.toString)
    org.apache.logging.log4j.status.StatusLogger.this.messageFactory => orig(org.apache.logging.log4j.status.StatusLogger.this.messageFactory)
    org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName() => orig(org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName())
    size => orig(size)
    size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..]) => orig(size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..]))
    size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..])-1 => orig(size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..]))-1
    size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..]) => orig(size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..]))
    size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..])-1 => orig(size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..]))-1
child.var_infos:
    this
    org.apache.logging.log4j.status.StatusLogger$BoundedQueue.serialVersionUID
    this.size
    org.apache.logging.log4j.status.StatusLogger.this
    org.apache.logging.log4j.status.StatusLogger.serialVersionUID
    org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES
    org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString
    org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL
    org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString
    org.apache.logging.log4j.status.StatusLogger.PROPS
    org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES
    org.apache.logging.log4j.util.PropertiesUtil.LOGGER
    org.apache.logging.log4j.util.PropertiesUtil.LOGGER.getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.PROPS.props
    org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES
    org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL
    org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL.toString
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..]
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..].getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel
    org.apache.logging.log4j.spi.AbstractLogger.serialVersionUID
    org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER
    org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName()
    org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER
    org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName()
    org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER
    org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName()
    org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER
    org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName()
    org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER
    org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName()
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName()
    org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS
    org.apache.logging.log4j.spi.AbstractLogger.FQCN
    org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString
    org.apache.logging.log4j.spi.AbstractLogger.THROWING
    org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING
    org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory
    org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.this.logger
    org.apache.logging.log4j.simple.SimpleLogger.serialVersionUID
    org.apache.logging.log4j.simple.SimpleLogger.SPACE
    org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter
    org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter.getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.this.logger.level
    org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime
    org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap
    org.apache.logging.log4j.status.StatusLogger.this.logger.stream
    org.apache.logging.log4j.status.StatusLogger.this.logger.logName
    org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString
    org.apache.logging.log4j.status.StatusLogger.this.logger.name
    org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString
    org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory
    org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory.getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.this.listeners
    org.apache.logging.log4j.status.StatusLogger.this.listeners[..]
    org.apache.logging.log4j.status.StatusLogger.this.listeners[..].getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.this.listenersLock
    org.apache.logging.log4j.status.StatusLogger.this.messages
    org.apache.logging.log4j.status.StatusLogger.this.messages.getClass().getName()
    org.apache.logging.log4j.status.StatusLogger.this.msgLock
    org.apache.logging.log4j.status.StatusLogger.this.listenersLevel
    org.apache.logging.log4j.status.StatusLogger.this.name
    org.apache.logging.log4j.status.StatusLogger.this.name.toString
    org.apache.logging.log4j.status.StatusLogger.this.messageFactory
    org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName()
    size
    orig(org.apache.logging.log4j.status.StatusLogger.this)
    orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
    orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
    orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
    orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
    orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
    orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER.getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
    orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
    orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
    orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..])
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..].getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
    orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
    orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
    orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
    orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
    orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
    orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
    orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
    orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
    orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
    orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
    orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
    orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
    orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
    orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
    orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
    orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
    orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
    orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
    orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
    orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter.getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.level)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.stream)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.logName)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.name)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory)
    orig(org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory.getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.this.listeners)
    orig(org.apache.logging.log4j.status.StatusLogger.this.listeners[..])
    orig(org.apache.logging.log4j.status.StatusLogger.this.listeners[..].getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLock)
    orig(org.apache.logging.log4j.status.StatusLogger.this.messages)
    orig(org.apache.logging.log4j.status.StatusLogger.this.messages.getClass().getName())
    orig(org.apache.logging.log4j.status.StatusLogger.this.msgLock)
    orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLevel)
    orig(org.apache.logging.log4j.status.StatusLogger.this.name)
    orig(org.apache.logging.log4j.status.StatusLogger.this.name.toString)
    orig(org.apache.logging.log4j.status.StatusLogger.this.messageFactory)
    orig(org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName())
    orig(size)
    size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..])
    size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..])-1
    size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..])
    size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..])-1
    orig(size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..]))
    orig(size(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[..]))-1
    orig(size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..]))
    orig(size(org.apache.logging.log4j.status.StatusLogger.this.listeners[..]))-1
End of diagnostics for newEnterExitRel(org.apache.logging.log4j.status.StatusLogger$BoundedQueue.BoundedQueue(org.apache.logging.log4j.status.StatusLogger, int):::ENTER, org.apache.logging.log4j.status.StatusLogger$BoundedQueue.BoundedQueue(org.apache.logging.log4j.status.StatusLogger, int):::EXIT)
===========================================================================
com.google.gson.AnonymousAndLocalClassExclusionStrategy:::OBJECT
this has only one value
===========================================================================
com.google.gson.AnonymousAndLocalClassExclusionStrategy.AnonymousAndLocalClassExclusionStrategy():::EXIT
===========================================================================
com.google.gson.BaseMapTypeAdapter:::OBJECT
===========================================================================
com.google.gson.BaseMapTypeAdapter.BaseMapTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultConstructorAllocator:::CLASS
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR has only one value
===========================================================================
com.google.gson.DefaultConstructorAllocator:::OBJECT
this.constructorCache.getClass().getName() == com.google.gson.LruCache.class
===========================================================================
com.google.gson.DefaultConstructorAllocator.DefaultConstructorAllocator(int):::ENTER
cacheSize one of { 50, 500 }
===========================================================================
com.google.gson.DefaultConstructorAllocator.DefaultConstructorAllocator(int):::EXIT
===========================================================================
com.google.gson.DefaultConstructorAllocator.createNullConstructor():::EXIT47
===========================================================================
com.google.gson.DefaultConstructorAllocator.createNullConstructor():::EXIT
return has only one value
===========================================================================
com.google.gson.DefaultConstructorAllocator.getNoArgsConstructor(java.lang.Class):::ENTER
c has only one value
===========================================================================
com.google.gson.DefaultConstructorAllocator.getNoArgsConstructor(java.lang.Class):::EXIT82
===========================================================================
com.google.gson.DefaultConstructorAllocator.getNoArgsConstructor(java.lang.Class):::EXIT
return has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$BigDecimalTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$BigDecimalTypeAdapter.BigDecimalTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$BigIntegerTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$BigIntegerTypeAdapter.BigIntegerTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$BooleanTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$BooleanTypeAdapter.BooleanTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$ByteTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$ByteTypeAdapter.ByteTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$CharacterTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$CharacterTypeAdapter.CharacterTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.CollectionTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultConstructorCreator:::OBJECT
this.allocator has only one value
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR has only one value
this.allocator.constructorCache has only one value
this.allocator.constructorCache.getClass().getName() == com.google.gson.LruCache.class
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultConstructorCreator.DefaultConstructorCreator(java.lang.Class, com.google.gson.DefaultConstructorAllocator):::ENTER
allocator has only one value
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR has only one value
allocator.constructorCache has only one value
allocator.constructorCache.getClass().getName() == com.google.gson.LruCache.class
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultConstructorCreator.DefaultConstructorCreator(java.lang.Class, com.google.gson.DefaultConstructorAllocator):::EXIT
this.defaultInstance == orig(defaultInstance)
this.allocator == orig(allocator)
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR == orig(com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR)
this.allocator.constructorCache == allocator.constructorCache
this.allocator.constructorCache.getClass().getName() == allocator.constructorCache.getClass().getName()
allocator.constructorCache == orig(allocator.constructorCache)
allocator.constructorCache.getClass().getName() == orig(allocator.constructorCache.getClass().getName())
allocator.constructorCache has only one value
allocator.constructorCache.getClass().getName() == com.google.gson.LruCache.class
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter:::OBJECT
this.enUsFormat.getClass().getName() == this.localFormat.getClass().getName()
this.enUsFormat.getClass().getName() == this.iso8601Format.getClass().getName()
this has only one value
this.enUsFormat has only one value
this.enUsFormat.getClass().getName() == java.text.SimpleDateFormat.class
this.localFormat has only one value
this.iso8601Format has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.DefaultDateTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.DefaultDateTypeAdapter(java.text.DateFormat, java.text.DateFormat):::ENTER
enUsFormat.getClass().getName() == localFormat.getClass().getName()
enUsFormat has only one value
enUsFormat.getClass().getName() == java.text.SimpleDateFormat.class
localFormat has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.DefaultDateTypeAdapter(java.text.DateFormat, java.text.DateFormat):::EXIT
this.enUsFormat == orig(enUsFormat)
this.enUsFormat.getClass().getName() == orig(enUsFormat.getClass().getName())
this.enUsFormat.getClass().getName() == orig(localFormat.getClass().getName())
this.localFormat == orig(localFormat)
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultInetAddressAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultInetAddressAdapter.DefaultInetAddressAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter:::OBJECT
this has only one value
this.format has only one value
this.format.getClass().getName() == java.text.SimpleDateFormat.class
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter.DefaultJavaSqlDateTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter:::OBJECT
this has only one value
this.format has only one value
this.format.getClass().getName() == java.text.SimpleDateFormat.class
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter.DefaultTimeTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer.DefaultTimestampDeserializer():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DoubleDeserializer:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$DoubleDeserializer.DoubleDeserializer():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$DoubleSerializer:::OBJECT
this.serializeSpecialFloatingPointValues == false
===========================================================================
com.google.gson.DefaultTypeAdapters$DoubleSerializer.DoubleSerializer(boolean):::ENTER
serializeSpecialDoubleValues == false
===========================================================================
com.google.gson.DefaultTypeAdapters$DoubleSerializer.DoubleSerializer(boolean):::EXIT
this.serializeSpecialFloatingPointValues == orig(serializeSpecialDoubleValues)
===========================================================================
com.google.gson.DefaultTypeAdapters$EnumTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$EnumTypeAdapter.EnumTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$FloatDeserializer:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$FloatDeserializer.FloatDeserializer():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$FloatSerializer:::OBJECT
this.serializeSpecialFloatingPointValues == false
===========================================================================
com.google.gson.DefaultTypeAdapters$FloatSerializer.FloatSerializer(boolean):::ENTER
serializeSpecialDoubleValues == false
===========================================================================
com.google.gson.DefaultTypeAdapters$FloatSerializer.FloatSerializer(boolean):::EXIT
this.serializeSpecialFloatingPointValues == orig(serializeSpecialDoubleValues)
===========================================================================
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter:::CLASS
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == "year"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == "month"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == "dayOfMonth"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == "hourOfDay"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == "minute"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == "second"
===========================================================================
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.GregorianCalendarTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$IntegerTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$IntegerTypeAdapter.IntegerTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$LocaleTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$LocaleTypeAdapter.LocaleTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$LongDeserializer:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$LongDeserializer.LongDeserializer():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$LongSerializer:::OBJECT
this.longSerializationPolicy == com.google.gson.LongSerializationPolicy.DEFAULT
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == this.longSerializationPolicy.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT has only one value
com.google.gson.LongSerializationPolicy.STRING has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$DefaultStrategy.class
com.google.gson.LongSerializationPolicy.$VALUES has only one value
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == com.google.gson.LongSerializationPolicy[].class
com.google.gson.LongSerializationPolicy.$VALUES[] contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() == [com.google.gson.LongSerializationPolicy, com.google.gson.LongSerializationPolicy]
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() elements == com.google.gson.LongSerializationPolicy.class
com.google.gson.LongSerializationPolicy.$VALUES[].strategy contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].strategy.getClass().getName() == [com.google.gson.LongSerializationPolicy.DefaultStrategy, com.google.gson.LongSerializationPolicy.StringStrategy]
com.google.gson.LongSerializationPolicy.STRING.strategy has only one value
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$StringStrategy.class
this.longSerializationPolicy.strategy has only one value
size(com.google.gson.LongSerializationPolicy.$VALUES[]) == 2
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
===========================================================================
com.google.gson.DefaultTypeAdapters$LongSerializer.LongSerializer(com.google.gson.LongSerializationPolicy):::ENTER
longSerializationPolicy == com.google.gson.LongSerializationPolicy.DEFAULT
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == longSerializationPolicy.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT has only one value
com.google.gson.LongSerializationPolicy.STRING has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$DefaultStrategy.class
com.google.gson.LongSerializationPolicy.$VALUES has only one value
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == com.google.gson.LongSerializationPolicy[].class
com.google.gson.LongSerializationPolicy.$VALUES[] contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() == [com.google.gson.LongSerializationPolicy, com.google.gson.LongSerializationPolicy]
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() elements == com.google.gson.LongSerializationPolicy.class
com.google.gson.LongSerializationPolicy.$VALUES[].strategy contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].strategy.getClass().getName() == [com.google.gson.LongSerializationPolicy.DefaultStrategy, com.google.gson.LongSerializationPolicy.StringStrategy]
com.google.gson.LongSerializationPolicy.STRING.strategy has only one value
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$StringStrategy.class
longSerializationPolicy.strategy has only one value
size(com.google.gson.LongSerializationPolicy.$VALUES[]) == 2
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
===========================================================================
com.google.gson.DefaultTypeAdapters$LongSerializer.LongSerializer(com.google.gson.LongSerializationPolicy):::EXIT
com.google.gson.LongSerializationPolicy.DEFAULT == orig(longSerializationPolicy)
com.google.gson.LongSerializationPolicy.DEFAULT == orig(com.google.gson.LongSerializationPolicy.DEFAULT)
com.google.gson.LongSerializationPolicy.STRING == orig(com.google.gson.LongSerializationPolicy.STRING)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == longSerializationPolicy.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(longSerializationPolicy.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES == orig(com.google.gson.LongSerializationPolicy.$VALUES)
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES[] == orig(com.google.gson.LongSerializationPolicy.$VALUES[])
com.google.gson.LongSerializationPolicy.$VALUES[].strategy == orig(com.google.gson.LongSerializationPolicy.$VALUES[].strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy == orig(com.google.gson.LongSerializationPolicy.STRING.strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName())
this.longSerializationPolicy.strategy == longSerializationPolicy.strategy
longSerializationPolicy.strategy == orig(longSerializationPolicy.strategy)
longSerializationPolicy.strategy has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$NumberTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$NumberTypeAdapter.NumberTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$ShortTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$ShortTypeAdapter.ShortTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$StringBufferTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$StringBufferTypeAdapter.StringBufferTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$StringBuilderTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$StringBuilderTypeAdapter.StringBuilderTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$StringTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$StringTypeAdapter.StringTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$UriTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$UriTypeAdapter.UriTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$UrlTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$UrlTypeAdapter.UrlTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters$UuidTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.DefaultTypeAdapters$UuidTypeAdapter.UuidTypeAdapter():::EXIT
===========================================================================
com.google.gson.DefaultTypeAdapters:::CLASS
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat has only one value
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat != null
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == java.text.SimpleDateFormat.class
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat has only one value
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat != null
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format has only one value
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format != null
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format has only one value
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format != null
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format has only one value
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format != null
com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER has only one value
com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER != null
com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER != null
com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER has only one value
com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER != null
com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER has only one value
com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == "year"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == "month"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == "dayOfMonth"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == "hourOfDay"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == "minute"
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND has only one value
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND != null
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == "second"
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS != null
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger != null
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map != null
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == java.util.HashMap.class
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList != null
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[] == []
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[].getClass().getName() == []
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable == false
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[] contains no nulls and has only one value, of length 4
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[] elements != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable == false
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS != null
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map != null
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList != null
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[] == []
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[].getClass().getName() == []
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable == false
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[] contains no nulls and has only one value, of length 4
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[] elements != null
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable == false
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS != null
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map != null
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList has only one value
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList != null
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[] contains no nulls and has only one value, of length 5
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[] elements != null
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable == false
size(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[]) == 4
size(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[]) == 4
size(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[]) == 5
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName()
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultDeserializers():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultDeserializers():::EXIT
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
return has only one value
return.map has only one value
return.map.getClass().getName() == java.util.HashMap.class
return.typeHierarchyList has only one value
return.typeHierarchyList[] == []
return.typeHierarchyList[].getClass().getName() == []
return.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
return.modifiable == false
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultHierarchyDeserializers():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultHierarchyDeserializers():::EXIT
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
return has only one value
return.map has only one value
return.map.getClass().getName() == java.util.HashMap.class
return.typeHierarchyList has only one value
return.typeHierarchyList[] contains no nulls and has only one value, of length 4
return.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
return.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
return.modifiable == false
size(return.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultHierarchySerializers():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultHierarchySerializers():::EXIT
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
return has only one value
return.map has only one value
return.map.getClass().getName() == java.util.HashMap.class
return.typeHierarchyList has only one value
return.typeHierarchyList[] contains no nulls and has only one value, of length 4
return.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
return.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
return.modifiable == false
size(return.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultInstanceCreators():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultInstanceCreators():::EXIT
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
return has only one value
return.map has only one value
return.map.getClass().getName() == java.util.HashMap.class
return.typeHierarchyList has only one value
return.typeHierarchyList[] contains no nulls and has only one value, of length 5
return.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
return.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
return.modifiable == false
size(return.typeHierarchyList[]) == 5
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultSerializers():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.createDefaultSerializers():::EXIT
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
return has only one value
return.map has only one value
return.map.getClass().getName() == java.util.HashMap.class
return.typeHierarchyList has only one value
return.typeHierarchyList[] == []
return.typeHierarchyList[].getClass().getName() == []
return.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
return.modifiable == false
===========================================================================
com.google.gson.DefaultTypeAdapters.getDefaultDeserializers():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.getDefaultDeserializers():::EXIT
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format)
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format)
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format)
com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER == orig(com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER)
com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER)
com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER == orig(com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER)
com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == return.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == return.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS == return
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable)
return.map has only one value
return.typeHierarchyList has only one value
return.typeHierarchyList[] == []
return.typeHierarchyList[].getClass().getName() == []
return.modifiable == false
===========================================================================
com.google.gson.DefaultTypeAdapters.getDefaultInstanceCreators():::ENTER
===========================================================================
com.google.gson.DefaultTypeAdapters.getDefaultInstanceCreators():::EXIT
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format)
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format)
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format)
com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER == orig(com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER)
com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER)
com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER == orig(com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER)
com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == return.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == return.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS == return
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable)
return.map has only one value
return.typeHierarchyList has only one value
return.typeHierarchyList[] contains no nulls and has only one value, of length 5
return.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
return.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.modifiable == false
size(return.typeHierarchyList[]) == 5
===========================================================================
com.google.gson.DefaultTypeAdapters.getDefaultSerializers(boolean, com.google.gson.LongSerializationPolicy):::ENTER
longSerializationPolicy == com.google.gson.LongSerializationPolicy.DEFAULT
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == longSerializationPolicy.strategy.getClass().getName()
serializeSpecialFloatingPointValues == false
com.google.gson.LongSerializationPolicy.DEFAULT has only one value
com.google.gson.LongSerializationPolicy.STRING has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$DefaultStrategy.class
com.google.gson.LongSerializationPolicy.$VALUES has only one value
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == com.google.gson.LongSerializationPolicy[].class
com.google.gson.LongSerializationPolicy.$VALUES[] contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() == [com.google.gson.LongSerializationPolicy, com.google.gson.LongSerializationPolicy]
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() elements == com.google.gson.LongSerializationPolicy.class
com.google.gson.LongSerializationPolicy.$VALUES[].strategy contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].strategy.getClass().getName() == [com.google.gson.LongSerializationPolicy.DefaultStrategy, com.google.gson.LongSerializationPolicy.StringStrategy]
com.google.gson.LongSerializationPolicy.STRING.strategy has only one value
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$StringStrategy.class
longSerializationPolicy.strategy has only one value
size(com.google.gson.LongSerializationPolicy.$VALUES[]) == 2
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
===========================================================================
com.google.gson.DefaultTypeAdapters.getDefaultSerializers(boolean, com.google.gson.LongSerializationPolicy):::EXIT
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format.getClass().getName())
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.localFormat)
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format == orig(com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.iso8601Format)
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format == orig(com.google.gson.DefaultTypeAdapters.JAVA_SQL_DATE_TYPE_ADAPTER.format)
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format == orig(com.google.gson.DefaultTypeAdapters.TIME_TYPE_ADAPTER.format)
com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER == orig(com.google.gson.DefaultTypeAdapters.TIMESTAMP_DESERIALIZER)
com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.ENUM_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.URL_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.URI_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.UUUID_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.LOCALE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.INET_ADDRESS_ADAPTER)
com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.COLLECTION_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.MAP_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BIG_DECIMAL_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BIG_INTEGER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BOOLEAN_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.BYTE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.CHARACTER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.DOUBLE_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.FLOAT_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.INTEGER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER == orig(com.google.gson.DefaultTypeAdapters.LONG_DESERIALIZER)
com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.NUMBER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.SHORT_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_BUILDER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.STRING_BUFFER_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER == orig(com.google.gson.DefaultTypeAdapters.GREGORIAN_CALENDAR_TYPE_ADAPTER)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == return.map.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == return.typeHierarchyList.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList.getClass().getName())
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_DESERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.modifiable)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.map)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList)
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[] == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.typeHierarchyList[])
com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable == orig(com.google.gson.DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS.modifiable)
com.google.gson.LongSerializationPolicy.DEFAULT == orig(longSerializationPolicy)
com.google.gson.LongSerializationPolicy.DEFAULT == orig(com.google.gson.LongSerializationPolicy.DEFAULT)
com.google.gson.LongSerializationPolicy.STRING == orig(com.google.gson.LongSerializationPolicy.STRING)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == longSerializationPolicy.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(longSerializationPolicy.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES == orig(com.google.gson.LongSerializationPolicy.$VALUES)
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES[] == orig(com.google.gson.LongSerializationPolicy.$VALUES[])
com.google.gson.LongSerializationPolicy.$VALUES[].strategy == orig(com.google.gson.LongSerializationPolicy.$VALUES[].strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy == orig(com.google.gson.LongSerializationPolicy.STRING.strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName())
longSerializationPolicy.strategy == orig(longSerializationPolicy.strategy)
com.google.gson.LongSerializationPolicy.DEFAULT has only one value
com.google.gson.LongSerializationPolicy.STRING has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$DefaultStrategy.class
com.google.gson.LongSerializationPolicy.$VALUES has only one value
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == com.google.gson.LongSerializationPolicy[].class
com.google.gson.LongSerializationPolicy.$VALUES[] contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() == [com.google.gson.LongSerializationPolicy, com.google.gson.LongSerializationPolicy]
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() elements == com.google.gson.LongSerializationPolicy.class
com.google.gson.LongSerializationPolicy.$VALUES[].strategy contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].strategy.getClass().getName() == [com.google.gson.LongSerializationPolicy.DefaultStrategy, com.google.gson.LongSerializationPolicy.StringStrategy]
com.google.gson.LongSerializationPolicy.STRING.strategy has only one value
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$StringStrategy.class
longSerializationPolicy.strategy has only one value
return.typeHierarchyList[] == []
return.typeHierarchyList[].getClass().getName() == []
return.modifiable == true
size(com.google.gson.LongSerializationPolicy.$VALUES[]) == 2
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.DefaultTypeAdapters.DATE_TYPE_ADAPTER.enUsFormat.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.map.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.DefaultTypeAdapters.DEFAULT_SERIALIZERS.typeHierarchyList.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
===========================================================================
com.google.gson.DefaultTypeAdapters.wrapDeserializer(com.google.gson.JsonDeserializer):::ENTER
deserializer != null
===========================================================================
com.google.gson.DefaultTypeAdapters.wrapDeserializer(com.google.gson.JsonDeserializer):::EXIT
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.YEAR.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.DAY_OF_MONTH.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.HOUR_OF_DAY.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.MINUTE.toString)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND)
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString == orig(com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter.SECOND.toString)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
return != null
return.getClass().getName() == com.google.gson.JsonDeserializerExceptionWrapper.class
return.getClass().getName() != orig(deserializer.getClass().getName())
===========================================================================
com.google.gson.DisjunctionExclusionStrategy:::OBJECT
this.strategies != null
this.strategies.getClass().getName() == java.util.LinkedList.class
===========================================================================
com.google.gson.DisjunctionExclusionStrategy.DisjunctionExclusionStrategy(java.util.Collection):::ENTER
strategies != null
strategies.getClass().getName() == java.util.LinkedList.class
===========================================================================
com.google.gson.DisjunctionExclusionStrategy.DisjunctionExclusionStrategy(java.util.Collection):::EXIT
this.strategies == orig(strategies)
this.strategies.getClass().getName() == orig(strategies.getClass().getName())
===========================================================================
com.google.gson.ExposeAnnotationDeserializationExclusionStrategy:::OBJECT
this has only one value
===========================================================================
com.google.gson.ExposeAnnotationDeserializationExclusionStrategy.ExposeAnnotationDeserializationExclusionStrategy():::EXIT
===========================================================================
com.google.gson.ExposeAnnotationSerializationExclusionStrategy:::OBJECT
this has only one value
===========================================================================
com.google.gson.ExposeAnnotationSerializationExclusionStrategy.ExposeAnnotationSerializationExclusionStrategy():::EXIT
===========================================================================
com.google.gson.Gson:::CLASS
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == true
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == java.util.HashSet.class
com.google.gson.Gson.DEFAULT_NAMING_POLICY has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX has only one value
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == ")]}'\n"
===========================================================================
com.google.gson.Gson:::OBJECT
this.deserializationExclusionStrategy.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
this.serializationExclusionStrategy.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
this.fieldNamingPolicy has only one value
this.fieldNamingPolicy.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache.getClass().getName() == com.google.gson.LruCache.class
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
this.objectConstructor.instanceCreatorMap.map.getClass().getName() == java.util.HashMap.class
this.objectConstructor.instanceCreatorMap.typeHierarchyList[] contains no nulls and has only one value, of length 5
this.objectConstructor.instanceCreatorMap.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.objectConstructor.instanceCreatorMap.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.objectConstructor.instanceCreatorMap.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.objectConstructor.instanceCreatorMap.modifiable == true
this.serializers.map.getClass().getName() == java.util.HashMap.class
this.serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.serializers.modifiable == false
this.deserializers.map.getClass().getName() == java.util.HashMap.class
this.deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.deserializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.deserializers.modifiable == false
this.serializeNulls == false
this.htmlSafe == true
this.generateNonExecutableJson == false
this.prettyPrinting == true
size(this.objectConstructor.instanceCreatorMap.typeHierarchyList[]) == 5
size(this.serializers.typeHierarchyList[]) == 4
size(this.deserializers.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.Gson.Gson(com.google.gson.ExclusionStrategy, com.google.gson.ExclusionStrategy, com.google.gson.FieldNamingStrategy2, com.google.gson.MappedObjectConstructor, boolean, com.google.gson.ParameterizedTypeHandlerMap, com.google.gson.ParameterizedTypeHandlerMap, boolean, boolean, boolean):::ENTER
deserializationExclusionStrategy.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
serializationExclusionStrategy.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
fieldNamingPolicy has only one value
fieldNamingPolicy.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache.getClass().getName() == com.google.gson.LruCache.class
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
objectConstructor.instanceCreatorMap.map.getClass().getName() == java.util.HashMap.class
objectConstructor.instanceCreatorMap.typeHierarchyList[] contains no nulls and has only one value, of length 5
objectConstructor.instanceCreatorMap.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
objectConstructor.instanceCreatorMap.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
objectConstructor.instanceCreatorMap.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
objectConstructor.instanceCreatorMap.modifiable == true
serializeNulls == false
serializers.map.getClass().getName() == java.util.HashMap.class
serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
serializers.modifiable == false
deserializers.map.getClass().getName() == java.util.HashMap.class
deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
deserializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
deserializers.modifiable == false
generateNonExecutableGson == false
htmlSafe == true
prettyPrinting == true
size(objectConstructor.instanceCreatorMap.typeHierarchyList[]) == 5
size(serializers.typeHierarchyList[]) == 4
size(deserializers.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.Gson.Gson(com.google.gson.ExclusionStrategy, com.google.gson.ExclusionStrategy, com.google.gson.FieldNamingStrategy2, com.google.gson.MappedObjectConstructor, boolean, com.google.gson.ParameterizedTypeHandlerMap, com.google.gson.ParameterizedTypeHandlerMap, boolean, boolean, boolean):::EXIT
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR == orig(com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR)
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache)
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache.getClass().getName())
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
objectConstructor.instanceCreatorMap == orig(objectConstructor.instanceCreatorMap)
objectConstructor.instanceCreatorMap.map == orig(objectConstructor.instanceCreatorMap.map)
objectConstructor.instanceCreatorMap.map.getClass().getName() == orig(objectConstructor.instanceCreatorMap.map.getClass().getName())
objectConstructor.instanceCreatorMap.typeHierarchyList == orig(objectConstructor.instanceCreatorMap.typeHierarchyList)
objectConstructor.instanceCreatorMap.typeHierarchyList[] == orig(objectConstructor.instanceCreatorMap.typeHierarchyList[])
objectConstructor.instanceCreatorMap.typeHierarchyList.getClass().getName() == orig(objectConstructor.instanceCreatorMap.typeHierarchyList.getClass().getName())
objectConstructor.instanceCreatorMap.modifiable == orig(objectConstructor.instanceCreatorMap.modifiable)
serializers.map == orig(serializers.map)
serializers.map.getClass().getName() == orig(serializers.map.getClass().getName())
serializers.typeHierarchyList == orig(serializers.typeHierarchyList)
serializers.typeHierarchyList[] == orig(serializers.typeHierarchyList[])
serializers.typeHierarchyList.getClass().getName() == orig(serializers.typeHierarchyList.getClass().getName())
serializers.modifiable == orig(serializers.modifiable)
deserializers.map == orig(deserializers.map)
deserializers.map.getClass().getName() == orig(deserializers.map.getClass().getName())
deserializers.typeHierarchyList == orig(deserializers.typeHierarchyList)
deserializers.typeHierarchyList[] == orig(deserializers.typeHierarchyList[])
deserializers.typeHierarchyList.getClass().getName() == orig(deserializers.typeHierarchyList.getClass().getName())
deserializers.modifiable == orig(deserializers.modifiable)
objectConstructor.instanceCreatorMap.map.getClass().getName() == java.util.HashMap.class
objectConstructor.instanceCreatorMap.typeHierarchyList[] contains no nulls and has only one value, of length 5
objectConstructor.instanceCreatorMap.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
objectConstructor.instanceCreatorMap.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
objectConstructor.instanceCreatorMap.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
objectConstructor.instanceCreatorMap.modifiable == true
serializers.map.getClass().getName() == java.util.HashMap.class
serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
serializers.modifiable == false
deserializers.map.getClass().getName() == java.util.HashMap.class
deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
deserializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
deserializers.modifiable == false
size(objectConstructor.instanceCreatorMap.typeHierarchyList[]) == 5
size(serializers.typeHierarchyList[]) == 4
size(deserializers.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.Gson.createExclusionStrategy():::ENTER
===========================================================================
com.google.gson.Gson.createExclusionStrategy():::EXIT
return has only one value
return.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
===========================================================================
com.google.gson.GsonBuilder:::CLASS
com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER has only one value
com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER != null
com.google.gson.GsonBuilder.innerClassExclusionStrategy has only one value
com.google.gson.GsonBuilder.innerClassExclusionStrategy != null
com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy has only one value
com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy != null
com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy has only one value
com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy != null
===========================================================================
com.google.gson.GsonBuilder:::OBJECT
this.serializeExclusionStrategies.getClass().getName() == this.deserializeExclusionStrategies.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() == this.modifierBasedExclusionStrategy.modifiers.getClass().getName()
this.longSerializationPolicy == com.google.gson.LongSerializationPolicy.DEFAULT
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == this.longSerializationPolicy.strategy.getClass().getName()
this.instanceCreators.map.getClass().getName() == this.serializers.map.getClass().getName()
this.instanceCreators.map.getClass().getName() == this.deserializers.map.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == this.serializers.typeHierarchyList.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == this.deserializers.typeHierarchyList.getClass().getName()
this.serializeExclusionStrategies != null
this.serializeExclusionStrategies.getClass().getName() == java.util.HashSet.class
this.deserializeExclusionStrategies != null
this.ignoreVersionsAfter == -1.0
this.modifierBasedExclusionStrategy has only one value
this.modifierBasedExclusionStrategy != null
this.modifierBasedExclusionStrategy.modifiers has only one value
this.modifierBasedExclusionStrategy.modifiers != null
this.serializeInnerClasses == true
this.excludeFieldsWithoutExposeAnnotation == false
com.google.gson.LongSerializationPolicy.DEFAULT has only one value
com.google.gson.LongSerializationPolicy.DEFAULT != null
com.google.gson.LongSerializationPolicy.STRING has only one value
com.google.gson.LongSerializationPolicy.STRING != null
com.google.gson.LongSerializationPolicy.DEFAULT.strategy has only one value
com.google.gson.LongSerializationPolicy.DEFAULT.strategy != null
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$DefaultStrategy.class
com.google.gson.LongSerializationPolicy.$VALUES has only one value
com.google.gson.LongSerializationPolicy.$VALUES != null
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == com.google.gson.LongSerializationPolicy[].class
com.google.gson.LongSerializationPolicy.$VALUES[] contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[] elements != null
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() == [com.google.gson.LongSerializationPolicy, com.google.gson.LongSerializationPolicy]
com.google.gson.LongSerializationPolicy.$VALUES[].getClass().getName() elements == com.google.gson.LongSerializationPolicy.class
com.google.gson.LongSerializationPolicy.$VALUES[].strategy contains no nulls and has only one value, of length 2
com.google.gson.LongSerializationPolicy.$VALUES[].strategy elements != null
com.google.gson.LongSerializationPolicy.$VALUES[].strategy.getClass().getName() == [com.google.gson.LongSerializationPolicy.DefaultStrategy, com.google.gson.LongSerializationPolicy.StringStrategy]
com.google.gson.LongSerializationPolicy.STRING.strategy has only one value
com.google.gson.LongSerializationPolicy.STRING.strategy != null
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == com.google.gson.LongSerializationPolicy$StringStrategy.class
this.longSerializationPolicy.strategy has only one value
this.longSerializationPolicy.strategy != null
this.fieldNamingPolicy has only one value
this.fieldNamingPolicy != null
this.fieldNamingPolicy.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
this.instanceCreators != null
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger != null
this.instanceCreators.map != null
this.instanceCreators.map.getClass().getName() == java.util.HashMap.class
this.instanceCreators.typeHierarchyList != null
this.instanceCreators.typeHierarchyList[] == []
this.instanceCreators.typeHierarchyList[].getClass().getName() == []
this.instanceCreators.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.serializers != null
this.serializers.map != null
this.serializers.typeHierarchyList != null
this.serializers.typeHierarchyList[] == []
this.serializers.typeHierarchyList[].getClass().getName() == []
this.serializers.modifiable == true
this.deserializers != null
this.deserializers.map != null
this.deserializers.typeHierarchyList != null
this.deserializers.typeHierarchyList[] == []
this.deserializers.typeHierarchyList[].getClass().getName() == []
this.deserializers.modifiable == true
this.serializeNulls == false
this.datePattern == null
this.dateStyle == 2
this.timeStyle == 2
this.serializeSpecialFloatingPointValues == false
this.escapeHtmlChars == true
this.generateNonExecutableJson == false
size(com.google.gson.LongSerializationPolicy.$VALUES[]) == 2
this.serializeExclusionStrategies.getClass().getName() != com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != this.fieldNamingPolicy.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != this.instanceCreators.map.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != this.instanceCreators.typeHierarchyList.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != this.fieldNamingPolicy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != this.instanceCreators.map.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != this.instanceCreators.typeHierarchyList.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != this.fieldNamingPolicy.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != this.instanceCreators.map.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != this.instanceCreators.typeHierarchyList.getClass().getName()
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() != this.fieldNamingPolicy.getClass().getName()
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() != this.instanceCreators.map.getClass().getName()
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() != this.instanceCreators.typeHierarchyList.getClass().getName()
this.fieldNamingPolicy.getClass().getName() != this.instanceCreators.map.getClass().getName()
this.fieldNamingPolicy.getClass().getName() != this.instanceCreators.typeHierarchyList.getClass().getName()
this.instanceCreators.map.getClass().getName() != this.instanceCreators.typeHierarchyList.getClass().getName()
===========================================================================
com.google.gson.GsonBuilder.GsonBuilder():::EXIT
this.instanceCreators.modifiable == true
this.prettyPrinting == false
===========================================================================
com.google.gson.GsonBuilder.addTypeAdaptersForDate(java.lang.String, int, int, com.google.gson.ParameterizedTypeHandlerMap, com.google.gson.ParameterizedTypeHandlerMap):::ENTER
serializers.map.getClass().getName() == deserializers.map.getClass().getName()
serializers.typeHierarchyList.getClass().getName() == deserializers.typeHierarchyList.getClass().getName()
datePattern == null
dateStyle == 2
timeStyle == 2
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
serializers.map.getClass().getName() == java.util.HashMap.class
serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
serializers.modifiable == true
deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
deserializers.modifiable == true
size(serializers.typeHierarchyList[]) == 4
size(deserializers.typeHierarchyList[]) == 4
serializers.map.getClass().getName() != serializers.typeHierarchyList.getClass().getName()
===========================================================================
com.google.gson.GsonBuilder.addTypeAdaptersForDate(java.lang.String, int, int, com.google.gson.ParameterizedTypeHandlerMap, com.google.gson.ParameterizedTypeHandlerMap):::EXIT
com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER == orig(com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER)
com.google.gson.GsonBuilder.innerClassExclusionStrategy == orig(com.google.gson.GsonBuilder.innerClassExclusionStrategy)
com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy == orig(com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy)
com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy == orig(com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
serializers.map == orig(serializers.map)
serializers.map.getClass().getName() == deserializers.map.getClass().getName()
serializers.map.getClass().getName() == orig(serializers.map.getClass().getName())
serializers.map.getClass().getName() == orig(deserializers.map.getClass().getName())
serializers.typeHierarchyList == orig(serializers.typeHierarchyList)
serializers.typeHierarchyList[] == orig(serializers.typeHierarchyList[])
serializers.typeHierarchyList.getClass().getName() == deserializers.typeHierarchyList.getClass().getName()
serializers.typeHierarchyList.getClass().getName() == orig(serializers.typeHierarchyList.getClass().getName())
serializers.typeHierarchyList.getClass().getName() == orig(deserializers.typeHierarchyList.getClass().getName())
serializers.modifiable == orig(serializers.modifiable)
deserializers.map == orig(deserializers.map)
deserializers.typeHierarchyList == orig(deserializers.typeHierarchyList)
deserializers.typeHierarchyList[] == orig(deserializers.typeHierarchyList[])
deserializers.modifiable == orig(deserializers.modifiable)
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
serializers.map.getClass().getName() == java.util.HashMap.class
serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
serializers.modifiable == true
deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
deserializers.modifiable == true
size(serializers.typeHierarchyList[]) == 4
size(deserializers.typeHierarchyList[]) == 4
serializers.map.getClass().getName() != serializers.typeHierarchyList.getClass().getName()
===========================================================================
com.google.gson.GsonBuilder.create():::ENTER
this.instanceCreators.modifiable == true
this.prettyPrinting == true
===========================================================================
com.google.gson.GsonBuilder.create():::EXIT
com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER == orig(com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER)
com.google.gson.GsonBuilder.innerClassExclusionStrategy == orig(com.google.gson.GsonBuilder.innerClassExclusionStrategy)
com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy == orig(com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy)
com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy == orig(com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy)
this.serializeExclusionStrategies == orig(this.serializeExclusionStrategies)
this.serializeExclusionStrategies.getClass().getName() == com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() == orig(this.serializeExclusionStrategies.getClass().getName())
this.serializeExclusionStrategies.getClass().getName() == orig(this.deserializeExclusionStrategies.getClass().getName())
this.serializeExclusionStrategies.getClass().getName() == orig(this.modifierBasedExclusionStrategy.modifiers.getClass().getName())
this.deserializeExclusionStrategies == orig(this.deserializeExclusionStrategies)
this.ignoreVersionsAfter == orig(this.ignoreVersionsAfter)
this.modifierBasedExclusionStrategy == com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY
this.modifierBasedExclusionStrategy.modifiers == orig(this.modifierBasedExclusionStrategy.modifiers)
this.serializeInnerClasses == orig(this.serializeInnerClasses)
this.excludeFieldsWithoutExposeAnnotation == orig(this.excludeFieldsWithoutExposeAnnotation)
com.google.gson.LongSerializationPolicy.DEFAULT == orig(this.longSerializationPolicy)
com.google.gson.LongSerializationPolicy.DEFAULT == orig(com.google.gson.LongSerializationPolicy.DEFAULT)
com.google.gson.LongSerializationPolicy.STRING == orig(com.google.gson.LongSerializationPolicy.STRING)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(this.longSerializationPolicy.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES == orig(com.google.gson.LongSerializationPolicy.$VALUES)
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES[] == orig(com.google.gson.LongSerializationPolicy.$VALUES[])
com.google.gson.LongSerializationPolicy.$VALUES[].strategy == orig(com.google.gson.LongSerializationPolicy.$VALUES[].strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy == orig(com.google.gson.LongSerializationPolicy.STRING.strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName())
this.longSerializationPolicy.strategy == orig(this.longSerializationPolicy.strategy)
this.fieldNamingPolicy == com.google.gson.Gson.DEFAULT_NAMING_POLICY
this.fieldNamingPolicy.getClass().getName() == com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
this.instanceCreators == orig(this.instanceCreators)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.instanceCreators.map == orig(this.instanceCreators.map)
this.instanceCreators.map.getClass().getName() == return.serializers.map.getClass().getName()
this.instanceCreators.map.getClass().getName() == return.deserializers.map.getClass().getName()
this.instanceCreators.map.getClass().getName() == orig(this.instanceCreators.map.getClass().getName())
this.instanceCreators.map.getClass().getName() == orig(this.serializers.map.getClass().getName())
this.instanceCreators.map.getClass().getName() == orig(this.deserializers.map.getClass().getName())
this.instanceCreators.typeHierarchyList == orig(this.instanceCreators.typeHierarchyList)
this.instanceCreators.typeHierarchyList[] == orig(this.instanceCreators.typeHierarchyList[])
this.instanceCreators.typeHierarchyList.getClass().getName() == return.serializers.typeHierarchyList.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == return.deserializers.typeHierarchyList.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == orig(this.instanceCreators.typeHierarchyList.getClass().getName())
this.instanceCreators.typeHierarchyList.getClass().getName() == orig(this.serializers.typeHierarchyList.getClass().getName())
this.instanceCreators.typeHierarchyList.getClass().getName() == orig(this.deserializers.typeHierarchyList.getClass().getName())
this.serializers == orig(this.serializers)
this.serializers.map == orig(this.serializers.map)
this.serializers.typeHierarchyList == orig(this.serializers.typeHierarchyList)
this.serializers.typeHierarchyList[] == orig(this.serializers.typeHierarchyList[])
this.serializers.modifiable == orig(this.serializers.modifiable)
this.deserializers == orig(this.deserializers)
this.deserializers.map == orig(this.deserializers.map)
this.deserializers.typeHierarchyList == orig(this.deserializers.typeHierarchyList)
this.deserializers.typeHierarchyList[] == orig(this.deserializers.typeHierarchyList[])
this.deserializers.modifiable == orig(this.deserializers.modifiable)
this.serializeNulls == return.serializeNulls
this.serializeNulls == orig(this.serializeNulls)
this.datePattern == orig(this.datePattern)
this.dateStyle == orig(this.dateStyle)
this.timeStyle == orig(this.timeStyle)
this.serializeSpecialFloatingPointValues == orig(this.serializeSpecialFloatingPointValues)
this.escapeHtmlChars == return.htmlSafe
this.escapeHtmlChars == orig(this.escapeHtmlChars)
this.prettyPrinting == return.prettyPrinting
this.prettyPrinting == orig(this.prettyPrinting)
this.generateNonExecutableJson == return.generateNonExecutableJson
this.generateNonExecutableJson == orig(this.generateNonExecutableJson)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(this.modifierBasedExclusionStrategy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == return.fieldNamingPolicy
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == return.fieldNamingPolicy.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == return.deserializationExclusionStrategy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == return.serializationExclusionStrategy.getClass().getName()
this.instanceCreators.modifiable == false
this.prettyPrinting == true
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == true
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX has only one value
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == ")]}'\n"
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
return.serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
return.serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
return.serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.serializers.modifiable == false
return.deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
return.deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
return.deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.deserializers.modifiable == false
size(return.serializers.typeHierarchyList[]) == 4
size(return.deserializers.typeHierarchyList[]) == 4
this.serializeExclusionStrategies.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
this.instanceCreators.map.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
this.instanceCreators.map.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
this.instanceCreators.map.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
===========================================================================
com.google.gson.GsonBuilder.setPrettyPrinting():::ENTER
this.instanceCreators.modifiable == true
this.prettyPrinting == false
===========================================================================
com.google.gson.GsonBuilder.setPrettyPrinting():::EXIT
com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER == orig(com.google.gson.GsonBuilder.COMPLEX_KEY_MAP_TYPE_ADAPTER)
com.google.gson.GsonBuilder.innerClassExclusionStrategy == orig(com.google.gson.GsonBuilder.innerClassExclusionStrategy)
com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy == orig(com.google.gson.GsonBuilder.exposeAnnotationDeserializationExclusionStrategy)
com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy == orig(com.google.gson.GsonBuilder.exposeAnnotationSerializationExclusionStrategy)
this.serializeExclusionStrategies == return.serializeExclusionStrategies
this.serializeExclusionStrategies == orig(this.serializeExclusionStrategies)
this.serializeExclusionStrategies.getClass().getName() == return.serializeExclusionStrategies.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() == return.deserializeExclusionStrategies.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() == return.modifierBasedExclusionStrategy.modifiers.getClass().getName()
this.serializeExclusionStrategies.getClass().getName() == orig(this.serializeExclusionStrategies.getClass().getName())
this.serializeExclusionStrategies.getClass().getName() == orig(this.deserializeExclusionStrategies.getClass().getName())
this.serializeExclusionStrategies.getClass().getName() == orig(this.modifierBasedExclusionStrategy.modifiers.getClass().getName())
this.deserializeExclusionStrategies == return.deserializeExclusionStrategies
this.deserializeExclusionStrategies == orig(this.deserializeExclusionStrategies)
this.ignoreVersionsAfter == return.ignoreVersionsAfter
this.ignoreVersionsAfter == orig(this.ignoreVersionsAfter)
this.modifierBasedExclusionStrategy == return.modifierBasedExclusionStrategy
this.modifierBasedExclusionStrategy == orig(this.modifierBasedExclusionStrategy)
this.modifierBasedExclusionStrategy.modifiers == return.modifierBasedExclusionStrategy.modifiers
this.modifierBasedExclusionStrategy.modifiers == orig(this.modifierBasedExclusionStrategy.modifiers)
this.serializeInnerClasses == return.serializeInnerClasses
this.serializeInnerClasses == orig(this.serializeInnerClasses)
this.excludeFieldsWithoutExposeAnnotation == return.excludeFieldsWithoutExposeAnnotation
this.excludeFieldsWithoutExposeAnnotation == orig(this.excludeFieldsWithoutExposeAnnotation)
com.google.gson.LongSerializationPolicy.DEFAULT == return.longSerializationPolicy
com.google.gson.LongSerializationPolicy.DEFAULT == orig(this.longSerializationPolicy)
com.google.gson.LongSerializationPolicy.DEFAULT == orig(com.google.gson.LongSerializationPolicy.DEFAULT)
com.google.gson.LongSerializationPolicy.STRING == orig(com.google.gson.LongSerializationPolicy.STRING)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy)
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == return.longSerializationPolicy.strategy.getClass().getName()
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.DEFAULT.strategy.getClass().getName() == orig(this.longSerializationPolicy.strategy.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES == orig(com.google.gson.LongSerializationPolicy.$VALUES)
com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.$VALUES.getClass().getName())
com.google.gson.LongSerializationPolicy.$VALUES[] == orig(com.google.gson.LongSerializationPolicy.$VALUES[])
com.google.gson.LongSerializationPolicy.$VALUES[].strategy == orig(com.google.gson.LongSerializationPolicy.$VALUES[].strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy == orig(com.google.gson.LongSerializationPolicy.STRING.strategy)
com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName() == orig(com.google.gson.LongSerializationPolicy.STRING.strategy.getClass().getName())
this.longSerializationPolicy.strategy == return.longSerializationPolicy.strategy
this.longSerializationPolicy.strategy == orig(this.longSerializationPolicy.strategy)
this.fieldNamingPolicy == return.fieldNamingPolicy
this.fieldNamingPolicy == orig(this.fieldNamingPolicy)
this.fieldNamingPolicy.getClass().getName() == return.fieldNamingPolicy.getClass().getName()
this.fieldNamingPolicy.getClass().getName() == orig(this.fieldNamingPolicy.getClass().getName())
this.instanceCreators == return.instanceCreators
this.instanceCreators == orig(this.instanceCreators)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.instanceCreators.map == return.instanceCreators.map
this.instanceCreators.map == orig(this.instanceCreators.map)
this.instanceCreators.map.getClass().getName() == return.instanceCreators.map.getClass().getName()
this.instanceCreators.map.getClass().getName() == return.serializers.map.getClass().getName()
this.instanceCreators.map.getClass().getName() == return.deserializers.map.getClass().getName()
this.instanceCreators.map.getClass().getName() == orig(this.instanceCreators.map.getClass().getName())
this.instanceCreators.map.getClass().getName() == orig(this.serializers.map.getClass().getName())
this.instanceCreators.map.getClass().getName() == orig(this.deserializers.map.getClass().getName())
this.instanceCreators.typeHierarchyList == return.instanceCreators.typeHierarchyList
this.instanceCreators.typeHierarchyList == orig(this.instanceCreators.typeHierarchyList)
this.instanceCreators.typeHierarchyList[] == orig(this.instanceCreators.typeHierarchyList[])
this.instanceCreators.typeHierarchyList.getClass().getName() == return.instanceCreators.typeHierarchyList.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == return.serializers.typeHierarchyList.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == return.deserializers.typeHierarchyList.getClass().getName()
this.instanceCreators.typeHierarchyList.getClass().getName() == orig(this.instanceCreators.typeHierarchyList.getClass().getName())
this.instanceCreators.typeHierarchyList.getClass().getName() == orig(this.serializers.typeHierarchyList.getClass().getName())
this.instanceCreators.typeHierarchyList.getClass().getName() == orig(this.deserializers.typeHierarchyList.getClass().getName())
this.instanceCreators.modifiable == return.instanceCreators.modifiable
this.instanceCreators.modifiable == orig(this.instanceCreators.modifiable)
this.serializers == return.serializers
this.serializers == orig(this.serializers)
this.serializers.map == return.serializers.map
this.serializers.map == orig(this.serializers.map)
this.serializers.typeHierarchyList == return.serializers.typeHierarchyList
this.serializers.typeHierarchyList == orig(this.serializers.typeHierarchyList)
this.serializers.typeHierarchyList[] == orig(this.serializers.typeHierarchyList[])
this.serializers.modifiable == return.serializers.modifiable
this.serializers.modifiable == orig(this.serializers.modifiable)
this.deserializers == return.deserializers
this.deserializers == orig(this.deserializers)
this.deserializers.map == return.deserializers.map
this.deserializers.map == orig(this.deserializers.map)
this.deserializers.typeHierarchyList == return.deserializers.typeHierarchyList
this.deserializers.typeHierarchyList == orig(this.deserializers.typeHierarchyList)
this.deserializers.typeHierarchyList[] == orig(this.deserializers.typeHierarchyList[])
this.deserializers.modifiable == return.deserializers.modifiable
this.deserializers.modifiable == orig(this.deserializers.modifiable)
this.serializeNulls == return.serializeNulls
this.serializeNulls == orig(this.serializeNulls)
this.datePattern == orig(this.datePattern)
this.dateStyle == return.dateStyle
this.dateStyle == orig(this.dateStyle)
this.timeStyle == return.timeStyle
this.timeStyle == orig(this.timeStyle)
this.serializeSpecialFloatingPointValues == return.serializeSpecialFloatingPointValues
this.serializeSpecialFloatingPointValues == orig(this.serializeSpecialFloatingPointValues)
this.escapeHtmlChars == return.escapeHtmlChars
this.escapeHtmlChars == orig(this.escapeHtmlChars)
this.prettyPrinting == return.prettyPrinting
this.generateNonExecutableJson == return.generateNonExecutableJson
this.generateNonExecutableJson == orig(this.generateNonExecutableJson)
return == orig(this)
this.instanceCreators.modifiable == true
this.prettyPrinting == true
return.instanceCreators.typeHierarchyList[] == []
return.instanceCreators.typeHierarchyList[].getClass().getName() == []
return.serializers.typeHierarchyList[] == []
return.serializers.typeHierarchyList[].getClass().getName() == []
return.deserializers.typeHierarchyList[] == []
return.deserializers.typeHierarchyList[].getClass().getName() == []
return.datePattern == null
===========================================================================
com.google.gson.InnerClassExclusionStrategy:::OBJECT
this has only one value
===========================================================================
com.google.gson.InnerClassExclusionStrategy.InnerClassExclusionStrategy():::EXIT
===========================================================================
com.google.gson.JavaFieldNamingPolicy:::OBJECT
this has only one value
===========================================================================
com.google.gson.JavaFieldNamingPolicy.JavaFieldNamingPolicy():::EXIT
===========================================================================
com.google.gson.JsonDeserializerExceptionWrapper:::OBJECT
this.delegate != null
===========================================================================
com.google.gson.JsonDeserializerExceptionWrapper.JsonDeserializerExceptionWrapper(com.google.gson.JsonDeserializer):::ENTER
delegate != null
===========================================================================
com.google.gson.JsonDeserializerExceptionWrapper.JsonDeserializerExceptionWrapper(com.google.gson.JsonDeserializer):::EXIT
this.delegate == orig(delegate)
this.delegate.getClass().getName() == orig(delegate.getClass().getName())
===========================================================================
com.google.gson.LongSerializationPolicy$DefaultStrategy:::OBJECT
this has only one value
===========================================================================
com.google.gson.LongSerializationPolicy$DefaultStrategy.DefaultStrategy():::EXIT
===========================================================================
com.google.gson.LongSerializationPolicy$StringStrategy:::OBJECT
this has only one value
===========================================================================
com.google.gson.LongSerializationPolicy$StringStrategy.StringStrategy():::EXIT
===========================================================================
com.google.gson.LongSerializationPolicy:::OBJECT
===========================================================================
com.google.gson.LongSerializationPolicy.LongSerializationPolicy(java.lang.String, int, com.google.gson.LongSerializationPolicy$Strategy):::ENTER
$hidden$1.toString one of { "DEFAULT", "STRING" }
$hidden$2 one of { 0, 1 }
===========================================================================
com.google.gson.LongSerializationPolicy.LongSerializationPolicy(java.lang.String, int, com.google.gson.LongSerializationPolicy$Strategy):::EXIT
this.strategy == orig(strategy)
this.strategy.getClass().getName() == orig(strategy.getClass().getName())
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "DEFAULT", "STRING" }
===========================================================================
com.google.gson.LruCache:::CLASS
===========================================================================
com.google.gson.LruCache:::OBJECT
this.maxCapacity one of { 50, 500 }
===========================================================================
com.google.gson.LruCache.LruCache(int):::ENTER
maxCapacity one of { 50, 500 }
===========================================================================
com.google.gson.LruCache.LruCache(int):::EXIT
this.maxCapacity == orig(maxCapacity)
===========================================================================
com.google.gson.MapAsArrayTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.MapAsArrayTypeAdapter.MapAsArrayTypeAdapter():::EXIT
===========================================================================
com.google.gson.MapTypeAdapter:::OBJECT
this has only one value
===========================================================================
com.google.gson.MapTypeAdapter.MapTypeAdapter():::EXIT
===========================================================================
com.google.gson.MappedObjectConstructor:::CLASS
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
com.google.gson.DefaultConstructorAllocator.NULL_CONSTRUCTOR has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator.constructorCache.getClass().getName() == com.google.gson.LruCache.class
===========================================================================
com.google.gson.MappedObjectConstructor:::OBJECT
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
this.instanceCreatorMap.map.getClass().getName() == java.util.HashMap.class
this.instanceCreatorMap.typeHierarchyList[] contains no nulls and has only one value, of length 5
this.instanceCreatorMap.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.instanceCreatorMap.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.instanceCreatorMap.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.instanceCreatorMap.modifiable == true
size(this.instanceCreatorMap.typeHierarchyList[]) == 5
===========================================================================
com.google.gson.MappedObjectConstructor.MappedObjectConstructor(com.google.gson.ParameterizedTypeHandlerMap):::ENTER
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
instanceCreators.map.getClass().getName() == java.util.HashMap.class
instanceCreators.typeHierarchyList[] contains no nulls and has only one value, of length 5
instanceCreators.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
instanceCreators.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
instanceCreators.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
instanceCreators.modifiable == true
size(instanceCreators.typeHierarchyList[]) == 5
===========================================================================
com.google.gson.MappedObjectConstructor.MappedObjectConstructor(com.google.gson.ParameterizedTypeHandlerMap):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
instanceCreators.map == orig(instanceCreators.map)
instanceCreators.map.getClass().getName() == orig(instanceCreators.map.getClass().getName())
instanceCreators.typeHierarchyList == orig(instanceCreators.typeHierarchyList)
instanceCreators.typeHierarchyList[] == orig(instanceCreators.typeHierarchyList[])
instanceCreators.typeHierarchyList.getClass().getName() == orig(instanceCreators.typeHierarchyList.getClass().getName())
instanceCreators.modifiable == orig(instanceCreators.modifiable)
instanceCreators.map.getClass().getName() == java.util.HashMap.class
instanceCreators.typeHierarchyList[] contains no nulls and has only one value, of length 5
instanceCreators.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
instanceCreators.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
instanceCreators.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
instanceCreators.modifiable == true
size(instanceCreators.typeHierarchyList[]) == 5
===========================================================================
com.google.gson.ModifierBasedExclusionStrategy:::OBJECT
this has only one value
this.modifiers has only one value
this.modifiers.getClass().getName() == java.util.HashSet.class
===========================================================================
com.google.gson.ModifierBasedExclusionStrategy.ModifierBasedExclusionStrategy(int[]):::ENTER
modifiers has only one value
modifiers[] == [128, 8]
modifiers[] elements one of { 8, 128 }
size(modifiers[]) == 2
===========================================================================
com.google.gson.ModifierBasedExclusionStrategy.ModifierBasedExclusionStrategy(int[]):::EXIT
modifiers[] == orig(modifiers[])
modifiers[] == [128, 8]
modifiers[] elements one of { 8, 128 }
===========================================================================
com.google.gson.Pair:::OBJECT
this.first != null
this.first.getClass().getName() == java.lang.Class.class
this.second != null
this.first.getClass().getName() != this.second.getClass().getName()
===========================================================================
com.google.gson.Pair.Pair(java.lang.Object, java.lang.Object):::ENTER
first != null
first.getClass().getName() == java.lang.Class.class
second != null
first.getClass().getName() != second.getClass().getName()
===========================================================================
com.google.gson.Pair.Pair(java.lang.Object, java.lang.Object):::EXIT
this.first == orig(first)
this.first.getClass().getName() == orig(first.getClass().getName())
this.second == orig(second)
this.second.getClass().getName() == orig(second.getClass().getName())
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap:::CLASS
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger != null
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap:::OBJECT
this.map != null
this.map.getClass().getName() == java.util.HashMap.class
this.typeHierarchyList != null
this.typeHierarchyList[] elements != null
this.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.map.getClass().getName() != this.typeHierarchyList.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.ParameterizedTypeHandlerMap():::EXIT
this.typeHierarchyList[] == []
this.typeHierarchyList[].getClass().getName() == []
this.modifiable == true
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.copyOf():::ENTER
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.copyOf():::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == return.map.getClass().getName()
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == return.typeHierarchyList.getClass().getName()
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
return != null
return.map != null
return.typeHierarchyList != null
return.typeHierarchyList[] elements != null
return.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
return.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
return.modifiable == true
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
size(return.typeHierarchyList[]) one of { 0, 4 }
size(return.typeHierarchyList[])-1 != 0
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.getIndexOfAnOverriddenHandler(java.lang.Class):::ENTER
this.modifiable == true
type != null
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.getIndexOfAnOverriddenHandler(java.lang.Class):::EXIT77
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.getIndexOfAnOverriddenHandler(java.lang.Class):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
this.modifiable == true
return == -1
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class):::ENTER
this.modifiable == true
type != null
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class):::EXIT172
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
this.modifiable == true
return == -1
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.hasSpecificHandlerFor(java.lang.reflect.Type):::ENTER
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
this.modifiable == true
type != null
type.getClass().getName() == java.lang.Class.class
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
this.map.getClass().getName() != type.getClass().getName()
this.typeHierarchyList.getClass().getName() != type.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.hasSpecificHandlerFor(java.lang.reflect.Type):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
this.modifiable == true
return == false
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
this.map.getClass().getName() != orig(type.getClass().getName())
this.typeHierarchyList.getClass().getName() != orig(type.getClass().getName())
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.hasSpecificHandlerFor(java.lang.reflect.Type):::EXIT;condition="not(return == true)"
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.makeUnmodifiable():::ENTER
this.modifiable == true
size(this.typeHierarchyList[]) one of { 0, 4, 5 }
size(this.typeHierarchyList[])-1 != 0
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.makeUnmodifiable():::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == false
size(this.typeHierarchyList[]) one of { 0, 4, 5 }
size(this.typeHierarchyList[])-1 != 0
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.register(com.google.gson.ParameterizedTypeHandlerMap):::ENTER
this.map.getClass().getName() == other.map.getClass().getName()
this.typeHierarchyList.getClass().getName() == other.typeHierarchyList.getClass().getName()
this.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.modifiable == true
other != null
other.map != null
other.typeHierarchyList != null
other.typeHierarchyList[] == []
other.typeHierarchyList[].getClass().getName() == []
other.modifiable == true
size(this.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.register(com.google.gson.ParameterizedTypeHandlerMap):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == other.map.getClass().getName()
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.map.getClass().getName() == orig(other.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == other.typeHierarchyList.getClass().getName()
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.typeHierarchyList.getClass().getName() == orig(other.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
other.map == orig(other.map)
other.typeHierarchyList == orig(other.typeHierarchyList)
other.typeHierarchyList[] == orig(other.typeHierarchyList[])
other.modifiable == orig(other.modifiable)
this.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.modifiable == true
other.map != null
other.typeHierarchyList != null
other.typeHierarchyList[] == []
other.typeHierarchyList[].getClass().getName() == []
other.modifiable == true
size(this.typeHierarchyList[]) == 4
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.register(java.lang.reflect.Type, java.lang.Object):::ENTER
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
this.modifiable == true
typeOfT != null
typeOfT.getClass().getName() == java.lang.Class.class
value != null
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
this.map.getClass().getName() != typeOfT.getClass().getName()
this.map.getClass().getName() != value.getClass().getName()
this.typeHierarchyList.getClass().getName() != typeOfT.getClass().getName()
this.typeHierarchyList.getClass().getName() != value.getClass().getName()
typeOfT.getClass().getName() != value.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.register(java.lang.reflect.Type, java.lang.Object):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
this.modifiable == true
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
this.map.getClass().getName() != orig(typeOfT.getClass().getName())
this.map.getClass().getName() != orig(value.getClass().getName())
this.typeHierarchyList.getClass().getName() != orig(typeOfT.getClass().getName())
this.typeHierarchyList.getClass().getName() != orig(value.getClass().getName())
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerForTypeHierarchy(com.google.gson.Pair):::ENTER
this.modifiable == true
pair != null
pair.first != null
pair.first.getClass().getName() == java.lang.Class.class
pair.second != null
this.map.getClass().getName() != pair.first.getClass().getName()
this.map.getClass().getName() != pair.second.getClass().getName()
this.typeHierarchyList.getClass().getName() != pair.first.getClass().getName()
this.typeHierarchyList.getClass().getName() != pair.second.getClass().getName()
pair.first.getClass().getName() != pair.second.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerForTypeHierarchy(com.google.gson.Pair):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
pair.first == orig(pair.first)
pair.first.getClass().getName() == orig(pair.first.getClass().getName())
pair.second == orig(pair.second)
pair.second.getClass().getName() == orig(pair.second.getClass().getName())
size(this.typeHierarchyList[])-1 == orig(size(this.typeHierarchyList[]))
this.modifiable == true
pair.first != null
pair.first.getClass().getName() == java.lang.Class.class
pair.second != null
size(this.typeHierarchyList[]) >= 1
this.map.getClass().getName() != pair.first.getClass().getName()
this.map.getClass().getName() != pair.second.getClass().getName()
this.typeHierarchyList.getClass().getName() != pair.first.getClass().getName()
this.typeHierarchyList.getClass().getName() != pair.second.getClass().getName()
pair.first.getClass().getName() != pair.second.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerForTypeHierarchy(java.lang.Class, java.lang.Object):::ENTER
this.modifiable == true
typeOfT != null
value != null
this.map.getClass().getName() != value.getClass().getName()
this.typeHierarchyList.getClass().getName() != value.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerForTypeHierarchy(java.lang.Class, java.lang.Object):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
size(this.typeHierarchyList[])-1 == orig(size(this.typeHierarchyList[]))
this.modifiable == true
size(this.typeHierarchyList[]) >= 1
this.map.getClass().getName() != orig(value.getClass().getName())
this.typeHierarchyList.getClass().getName() != orig(value.getClass().getName())
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap):::ENTER
this.map.getClass().getName() == other.map.getClass().getName()
this.typeHierarchyList.getClass().getName() == other.typeHierarchyList.getClass().getName()
this.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
this.modifiable == true
other != null
other.map != null
other.typeHierarchyList != null
other.typeHierarchyList[] elements != null
other.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
other.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
size(this.typeHierarchyList[]) one of { 0, 4 }
size(this.typeHierarchyList[])-1 != 0
size(other.typeHierarchyList[]) one of { 0, 5 }
size(other.typeHierarchyList[])-1 != 0
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == other.map.getClass().getName()
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.map.getClass().getName() == orig(other.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList.getClass().getName() == other.typeHierarchyList.getClass().getName()
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.typeHierarchyList.getClass().getName() == orig(other.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
other.map == orig(other.map)
other.typeHierarchyList == orig(other.typeHierarchyList)
other.typeHierarchyList[] == orig(other.typeHierarchyList[])
other.modifiable == orig(other.modifiable)
this.modifiable == true
other.map != null
other.typeHierarchyList != null
other.typeHierarchyList[] elements != null
other.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
other.typeHierarchyList[].getClass().getName() one of { [], [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair] }
size(this.typeHierarchyList[]) one of { 0, 4, 5 }
size(this.typeHierarchyList[])-1 != 0
size(other.typeHierarchyList[]) one of { 0, 5 }
size(other.typeHierarchyList[])-1 != 0
size(this.typeHierarchyList[]) >= orig(size(this.typeHierarchyList[]))
size(this.typeHierarchyList[])-1 != orig(size(this.typeHierarchyList[]))
size(this.typeHierarchyList[])-1 % orig(size(this.typeHierarchyList[]))-1 == 0
size(this.typeHierarchyList[])-1 >= orig(size(this.typeHierarchyList[]))-1
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerIfAbsent(java.lang.reflect.Type, java.lang.Object):::ENTER
this.typeHierarchyList[] == []
this.typeHierarchyList[].getClass().getName() == []
this.modifiable == true
typeOfT != null
typeOfT.getClass().getName() == java.lang.Class.class
value != null
this.map.getClass().getName() != typeOfT.getClass().getName()
this.map.getClass().getName() != value.getClass().getName()
this.typeHierarchyList.getClass().getName() != typeOfT.getClass().getName()
this.typeHierarchyList.getClass().getName() != value.getClass().getName()
typeOfT.getClass().getName() != value.getClass().getName()
===========================================================================
com.google.gson.ParameterizedTypeHandlerMap.registerIfAbsent(java.lang.reflect.Type, java.lang.Object):::EXIT
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.typeHierarchyList == orig(this.typeHierarchyList)
this.typeHierarchyList[] == orig(this.typeHierarchyList[])
this.typeHierarchyList.getClass().getName() == orig(this.typeHierarchyList.getClass().getName())
this.modifiable == orig(this.modifiable)
this.typeHierarchyList[] == []
this.typeHierarchyList[].getClass().getName() == []
this.modifiable == true
this.map.getClass().getName() != orig(typeOfT.getClass().getName())
this.map.getClass().getName() != orig(value.getClass().getName())
this.typeHierarchyList.getClass().getName() != orig(typeOfT.getClass().getName())
this.typeHierarchyList.getClass().getName() != orig(value.getClass().getName())
===========================================================================
com.google.gson.RecursiveFieldNamingPolicy:::OBJECT
this has only one value
this.getClass().getName() == com.google.gson.JavaFieldNamingPolicy.class
===========================================================================
com.google.gson.RecursiveFieldNamingPolicy.RecursiveFieldNamingPolicy():::EXIT
===========================================================================
com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy:::OBJECT
this has only one value
this.delegate has only one value
this.delegate.getClass().getName() == com.google.gson.JavaFieldNamingPolicy.class
===========================================================================
com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.SerializedNameAnnotationInterceptingNamingPolicy(com.google.gson.FieldNamingStrategy2):::ENTER
delegate has only one value
delegate.getClass().getName() == com.google.gson.JavaFieldNamingPolicy.class
===========================================================================
com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.SerializedNameAnnotationInterceptingNamingPolicy(com.google.gson.FieldNamingStrategy2):::EXIT
this.delegate == orig(delegate)
this.delegate.getClass().getName() == orig(delegate.getClass().getName())
===========================================================================
com.google.gson.SyntheticFieldExclusionStrategy:::OBJECT
this has only one value
this.skipSyntheticFields == true
===========================================================================
com.google.gson.SyntheticFieldExclusionStrategy.SyntheticFieldExclusionStrategy(boolean):::ENTER
skipSyntheticFields == true
===========================================================================
com.google.gson.SyntheticFieldExclusionStrategy.SyntheticFieldExclusionStrategy(boolean):::EXIT
this.skipSyntheticFields == orig(skipSyntheticFields)
===========================================================================
com.google.gson.UnsafeAllocator$1:::OBJECT
this has only one value
this.val$allocateInstance has only one value
this.val$unsafe has only one value
this.val$unsafe.getClass().getName() == sun.misc.Unsafe.class
===========================================================================
com.google.gson.UnsafeAllocator$1.(java.lang.reflect.Method, java.lang.Object):::ENTER
$hidden$1 has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == sun.misc.Unsafe.class
===========================================================================
com.google.gson.UnsafeAllocator$1.(java.lang.reflect.Method, java.lang.Object):::EXIT
this.val$allocateInstance == orig($hidden$1)
this.val$unsafe == orig($hidden$2)
this.val$unsafe.getClass().getName() == orig($hidden$2.getClass().getName())
===========================================================================
com.google.gson.UnsafeAllocator:::OBJECT
this has only one value
this.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
===========================================================================
com.google.gson.UnsafeAllocator.UnsafeAllocator():::EXIT
===========================================================================
com.google.gson.UnsafeAllocator.create():::EXIT44
===========================================================================
com.google.gson.UnsafeAllocator.create():::EXIT
return has only one value
return.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
===========================================================================
com.google.gson.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):::ENTER
obj != null
===========================================================================
com.google.gson.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):::EXIT
return == orig(obj)
return.getClass().getName() == orig(obj.getClass().getName())
return != null
===========================================================================
config.SongkickConfig:::CLASS
config.SongkickConfig.SCHEME has only one value
config.SongkickConfig.SCHEME.toString == "http"
config.SongkickConfig.HOST has only one value
config.SongkickConfig.HOST.toString == "api.songkick.com/api/3.0"
config.SongkickConfig.ARTIST_PATH has only one value
config.SongkickConfig.ARTIST_PATH.toString == "/search/artists.json"
config.SongkickConfig.ARTIST_PATH_FOR_EVENT has only one value
config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString == "/artists"
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR has only one value
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString == "/calendar.json"
config.SongkickConfig.CONCERT_PATH has only one value
config.SongkickConfig.CONCERT_PATH.toString == ""
config.SongkickConfig.LOCATION_PATH has only one value
config.SongkickConfig.LOCATION_PATH.toString == "/search/locations.json"
config.SongkickConfig.EVENT_PATH has only one value
config.SongkickConfig.EVENT_PATH.toString == "/events.json"
config.SongkickConfig.apiKey has only one value
config.SongkickConfig.apiKey.toString == "iF1N0jYrhI5wtG3n"
===========================================================================
config.SongkickConfig.getApiKey():::ENTER
===========================================================================
config.SongkickConfig.getApiKey():::EXIT
config.SongkickConfig.SCHEME == orig(config.SongkickConfig.SCHEME)
config.SongkickConfig.SCHEME.toString == orig(config.SongkickConfig.SCHEME.toString)
config.SongkickConfig.HOST == orig(config.SongkickConfig.HOST)
config.SongkickConfig.HOST.toString == orig(config.SongkickConfig.HOST.toString)
config.SongkickConfig.ARTIST_PATH == orig(config.SongkickConfig.ARTIST_PATH)
config.SongkickConfig.ARTIST_PATH.toString == orig(config.SongkickConfig.ARTIST_PATH.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString)
config.SongkickConfig.CONCERT_PATH == orig(config.SongkickConfig.CONCERT_PATH)
config.SongkickConfig.CONCERT_PATH.toString == orig(config.SongkickConfig.CONCERT_PATH.toString)
config.SongkickConfig.LOCATION_PATH == orig(config.SongkickConfig.LOCATION_PATH)
config.SongkickConfig.LOCATION_PATH.toString == orig(config.SongkickConfig.LOCATION_PATH.toString)
config.SongkickConfig.EVENT_PATH == orig(config.SongkickConfig.EVENT_PATH)
config.SongkickConfig.EVENT_PATH.toString == orig(config.SongkickConfig.EVENT_PATH.toString)
config.SongkickConfig.apiKey == return
config.SongkickConfig.apiKey == orig(config.SongkickConfig.apiKey)
config.SongkickConfig.apiKey.toString == orig(config.SongkickConfig.apiKey.toString)
return.toString == "iF1N0jYrhI5wtG3n"
===========================================================================
config.SongkickConfig.getHost():::ENTER
===========================================================================
config.SongkickConfig.getHost():::EXIT
config.SongkickConfig.SCHEME == orig(config.SongkickConfig.SCHEME)
config.SongkickConfig.SCHEME.toString == orig(config.SongkickConfig.SCHEME.toString)
config.SongkickConfig.HOST == return
config.SongkickConfig.HOST == orig(config.SongkickConfig.HOST)
config.SongkickConfig.HOST.toString == orig(config.SongkickConfig.HOST.toString)
config.SongkickConfig.ARTIST_PATH == orig(config.SongkickConfig.ARTIST_PATH)
config.SongkickConfig.ARTIST_PATH.toString == orig(config.SongkickConfig.ARTIST_PATH.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString)
config.SongkickConfig.CONCERT_PATH == orig(config.SongkickConfig.CONCERT_PATH)
config.SongkickConfig.CONCERT_PATH.toString == orig(config.SongkickConfig.CONCERT_PATH.toString)
config.SongkickConfig.LOCATION_PATH == orig(config.SongkickConfig.LOCATION_PATH)
config.SongkickConfig.LOCATION_PATH.toString == orig(config.SongkickConfig.LOCATION_PATH.toString)
config.SongkickConfig.EVENT_PATH == orig(config.SongkickConfig.EVENT_PATH)
config.SongkickConfig.EVENT_PATH.toString == orig(config.SongkickConfig.EVENT_PATH.toString)
config.SongkickConfig.apiKey == orig(config.SongkickConfig.apiKey)
config.SongkickConfig.apiKey.toString == orig(config.SongkickConfig.apiKey.toString)
return.toString == "api.songkick.com/api/3.0"
===========================================================================
config.SongkickConfig.getLocationPath():::ENTER
===========================================================================
config.SongkickConfig.getLocationPath():::EXIT
config.SongkickConfig.SCHEME == orig(config.SongkickConfig.SCHEME)
config.SongkickConfig.SCHEME.toString == orig(config.SongkickConfig.SCHEME.toString)
config.SongkickConfig.HOST == orig(config.SongkickConfig.HOST)
config.SongkickConfig.HOST.toString == orig(config.SongkickConfig.HOST.toString)
config.SongkickConfig.ARTIST_PATH == orig(config.SongkickConfig.ARTIST_PATH)
config.SongkickConfig.ARTIST_PATH.toString == orig(config.SongkickConfig.ARTIST_PATH.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString)
config.SongkickConfig.CONCERT_PATH == orig(config.SongkickConfig.CONCERT_PATH)
config.SongkickConfig.CONCERT_PATH.toString == orig(config.SongkickConfig.CONCERT_PATH.toString)
config.SongkickConfig.LOCATION_PATH == return
config.SongkickConfig.LOCATION_PATH == orig(config.SongkickConfig.LOCATION_PATH)
config.SongkickConfig.LOCATION_PATH.toString == orig(config.SongkickConfig.LOCATION_PATH.toString)
config.SongkickConfig.EVENT_PATH == orig(config.SongkickConfig.EVENT_PATH)
config.SongkickConfig.EVENT_PATH.toString == orig(config.SongkickConfig.EVENT_PATH.toString)
config.SongkickConfig.apiKey == orig(config.SongkickConfig.apiKey)
config.SongkickConfig.apiKey.toString == orig(config.SongkickConfig.apiKey.toString)
return.toString == "/search/locations.json"
===========================================================================
config.SongkickConfig.getScheme():::ENTER
===========================================================================
config.SongkickConfig.getScheme():::EXIT
config.SongkickConfig.SCHEME == return
config.SongkickConfig.SCHEME == orig(config.SongkickConfig.SCHEME)
config.SongkickConfig.SCHEME.toString == orig(config.SongkickConfig.SCHEME.toString)
config.SongkickConfig.HOST == orig(config.SongkickConfig.HOST)
config.SongkickConfig.HOST.toString == orig(config.SongkickConfig.HOST.toString)
config.SongkickConfig.ARTIST_PATH == orig(config.SongkickConfig.ARTIST_PATH)
config.SongkickConfig.ARTIST_PATH.toString == orig(config.SongkickConfig.ARTIST_PATH.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT.toString)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR)
config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString == orig(config.SongkickConfig.ARTIST_PATH_FOR_EVENT_CALENDAR.toString)
config.SongkickConfig.CONCERT_PATH == orig(config.SongkickConfig.CONCERT_PATH)
config.SongkickConfig.CONCERT_PATH.toString == orig(config.SongkickConfig.CONCERT_PATH.toString)
config.SongkickConfig.LOCATION_PATH == orig(config.SongkickConfig.LOCATION_PATH)
config.SongkickConfig.LOCATION_PATH.toString == orig(config.SongkickConfig.LOCATION_PATH.toString)
config.SongkickConfig.EVENT_PATH == orig(config.SongkickConfig.EVENT_PATH)
config.SongkickConfig.EVENT_PATH.toString == orig(config.SongkickConfig.EVENT_PATH.toString)
config.SongkickConfig.apiKey == orig(config.SongkickConfig.apiKey)
config.SongkickConfig.apiKey.toString == orig(config.SongkickConfig.apiKey.toString)
return.toString == "http"
===========================================================================
http.SongkickConnector:::CLASS
http.SongkickConnector.log has only one value
http.SongkickConnector.log != null
http.SongkickConnector.log.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
===========================================================================
http.SongkickConnector:::OBJECT
com.google.gson.Gson.DEFAULT_NAMING_POLICY == this.gson.fieldNamingPolicy
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == this.gson.fieldNamingPolicy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == this.gson.deserializationExclusionStrategy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == this.gson.serializationExclusionStrategy.getClass().getName()
this.gson.serializers.map.getClass().getName() == this.gson.deserializers.map.getClass().getName()
this.gson.serializers.typeHierarchyList.getClass().getName() == this.gson.deserializers.typeHierarchyList.getClass().getName()
this.gson.serializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.jsonResponse == null
this.gson != null
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY != null
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY != null
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == true
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY != null
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers != null
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == java.util.HashSet.class
com.google.gson.Gson.DEFAULT_NAMING_POLICY has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY != null
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY != null
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX has only one value
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX != null
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == ")]}'\n"
this.gson.deserializationExclusionStrategy != null
this.gson.serializationExclusionStrategy != null
this.gson.objectConstructor != null
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator != null
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator != null
this.gson.objectConstructor.instanceCreatorMap != null
this.gson.serializers != null
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger != null
this.gson.serializers.map != null
this.gson.serializers.map.getClass().getName() == java.util.HashMap.class
this.gson.serializers.typeHierarchyList != null
this.gson.serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.serializers.typeHierarchyList[] elements != null
this.gson.serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.gson.serializers.modifiable == false
this.gson.deserializers != null
this.gson.deserializers.map != null
this.gson.deserializers.typeHierarchyList != null
this.gson.deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.deserializers.typeHierarchyList[] elements != null
this.gson.deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.deserializers.modifiable == false
this.gson.serializeNulls == false
this.gson.htmlSafe == true
this.gson.generateNonExecutableJson == false
this.gson.prettyPrinting == true
this.uriBld.scheme.toString == "http"
this.uriBld.encodedSchemeSpecificPart == null
this.uriBld.encodedAuthority == null
this.uriBld.userInfo == null
this.uriBld.encodedUserInfo == null
this.uriBld.host.toString == "api.songkick.com/api/3.0"
this.uriBld.port == -1
this.uriBld.path.toString == "/search/locations.json"
this.uriBld.encodedPath == null
this.uriBld.encodedQuery == null
this.uriBld.queryParams[].getClass().getName() elements == org.apache.http.message.BasicNameValuePair.class
this.uriBld.queryParams[].getClass().getName() one of { [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair], [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair] }
this.uriBld.queryParams.getClass().getName() == java.util.ArrayList.class
this.uriBld.query == null
this.uriBld.fragment == null
this.uriBld.encodedFragment == null
this.pages one of { 0, 1 }
size(this.gson.serializers.typeHierarchyList[]) == 4
size(this.gson.deserializers.typeHierarchyList[]) == 4
size(this.uriBld.queryParams[]) one of { 2, 3 }
this.getClass().getName() != http.SongkickConnector.log.getClass().getName()
this.getClass().getName() != com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName()
this.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
this.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
this.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
this.getClass().getName() != this.gson.serializers.map.getClass().getName()
this.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
this.getClass().getName() != this.uriBld.queryParams.getClass().getName()
http.SongkickConnector.log.getClass().getName() != com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName()
http.SongkickConnector.log.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
http.SongkickConnector.log.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
http.SongkickConnector.log.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
http.SongkickConnector.log.getClass().getName() != this.gson.serializers.map.getClass().getName()
http.SongkickConnector.log.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
http.SongkickConnector.log.getClass().getName() != this.uriBld.queryParams.getClass().getName()
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() != com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName()
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() != this.gson.serializers.map.getClass().getName()
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() != this.uriBld.queryParams.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != this.gson.serializers.map.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() != this.uriBld.queryParams.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() != com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() != this.gson.serializers.map.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() != this.uriBld.queryParams.getClass().getName()
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() != this.gson.serializers.map.getClass().getName()
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() != this.uriBld.queryParams.getClass().getName()
this.gson.serializers.map.getClass().getName() != this.gson.serializers.typeHierarchyList.getClass().getName()
this.gson.serializers.map.getClass().getName() != this.uriBld.queryParams.getClass().getName()
===========================================================================
http.SongkickConnector.SongkickConnector():::EXIT
this.uriBld == null
this.uri == null
this.page == null
this.pages == 0
this.url == null
===========================================================================
http.SongkickConnector.buildURI():::ENTER
this has only one value
this.getClass().getName() == search.LocationSearch.class
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme == null
this.uriBld.host == null
this.uriBld.path == null
this.uriBld.queryParams == null
this.uri == null
this.page has only one value
this.pages == 1
this.url == null
===========================================================================
http.SongkickConnector.buildURI():::EXIT
http.SongkickConnector.log == orig(http.SongkickConnector.log)
http.SongkickConnector.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.typeHierarchyList.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.gson.serializers.typeHierarchyList.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.path == orig(this.uriBld.path)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams == orig(this.uriBld.queryParams)
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.page == orig(this.page)
this.pages == orig(this.pages)
this.url == orig(this.url)
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path == null
this.uriBld.queryParams == null
this.uri == null
this.page has only one value
this.pages == 1
this.url == null
===========================================================================
http.SongkickConnector.checkResponse():::ENTER
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this has only one value
this.getClass().getName() == search.LocationSearch.class
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.checkResponse():::EXIT151
===========================================================================
http.SongkickConnector.checkResponse():::EXIT151;condition="not(return == true)"
===========================================================================
http.SongkickConnector.checkResponse():::EXIT
http.SongkickConnector.log == orig(http.SongkickConnector.log)
http.SongkickConnector.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.scheme == orig(this.uriBld.scheme)
this.uriBld.scheme.toString == orig(this.uriBld.scheme.toString)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.host == orig(this.uriBld.host)
this.uriBld.host.toString == orig(this.uriBld.host.toString)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.path == orig(this.uriBld.path)
this.uriBld.path.toString == orig(this.uriBld.path.toString)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams == orig(this.uriBld.queryParams)
this.uriBld.queryParams[] == orig(this.uriBld.queryParams[])
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.uriBld.queryParams.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.page == orig(this.page)
this.pages == orig(this.pages)
this.url == orig(this.url)
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
return == false
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.checkResponse():::EXIT;condition="not(return == true)"
===========================================================================
http.SongkickConnector.executeRequest(java.net.URI):::ENTER
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.uri == arg0
this has only one value
this.getClass().getName() == search.LocationSearch.class
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url == null
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.executeRequest(java.net.URI):::EXIT
http.SongkickConnector.log == orig(http.SongkickConnector.log)
http.SongkickConnector.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.scheme == orig(this.uriBld.scheme)
this.uriBld.scheme.toString == orig(this.uriBld.scheme.toString)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.host == orig(this.uriBld.host)
this.uriBld.host.toString == orig(this.uriBld.host.toString)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.path == orig(this.uriBld.path)
this.uriBld.path.toString == orig(this.uriBld.path.toString)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams == orig(this.uriBld.queryParams)
this.uriBld.queryParams[] == orig(this.uriBld.queryParams[])
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.uriBld.queryParams.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.uri == orig(arg0)
this.page == orig(this.page)
this.pages == orig(this.pages)
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
return == null
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.getJsonResponse():::ENTER
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this has only one value
this.getClass().getName() == search.LocationSearch.class
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.getJsonResponse():::EXIT
http.SongkickConnector.log == orig(http.SongkickConnector.log)
http.SongkickConnector.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.scheme == orig(this.uriBld.scheme)
this.uriBld.scheme.toString == orig(this.uriBld.scheme.toString)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.host == orig(this.uriBld.host)
this.uriBld.host.toString == orig(this.uriBld.host.toString)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.path == orig(this.uriBld.path)
this.uriBld.path.toString == orig(this.uriBld.path.toString)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams == orig(this.uriBld.queryParams)
this.uriBld.queryParams[] == orig(this.uriBld.queryParams[])
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.uriBld.queryParams.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.page == orig(this.page)
this.pages == orig(this.pages)
this.url == orig(this.url)
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
return == null
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.getPage():::ENTER
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this has only one value
this.getClass().getName() == search.LocationSearch.class
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 2
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri == null
this.page has only one value
this.pages == 1
this.url == null
size(this.uriBld.queryParams[]) == 2
===========================================================================
http.SongkickConnector.getPage():::EXIT
http.SongkickConnector.log == orig(http.SongkickConnector.log)
http.SongkickConnector.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.scheme == orig(this.uriBld.scheme)
this.uriBld.scheme.toString == orig(this.uriBld.scheme.toString)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.host == orig(this.uriBld.host)
this.uriBld.host.toString == orig(this.uriBld.host.toString)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.path == orig(this.uriBld.path)
this.uriBld.path.toString == orig(this.uriBld.path.toString)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams == orig(this.uriBld.queryParams)
this.uriBld.queryParams[] == orig(this.uriBld.queryParams[])
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.uriBld.queryParams.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.page == return
this.pages == orig(this.pages)
this.url == orig(this.url)
return == orig(this.page)
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 2
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri == null
this.pages == 1
this.url == null
return has only one value
size(this.uriBld.queryParams[]) == 2
===========================================================================
http.SongkickConnector.isNullResponse():::ENTER
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this has only one value
this.getClass().getName() == search.LocationSearch.class
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.isNullResponse():::EXIT
http.SongkickConnector.log == orig(http.SongkickConnector.log)
http.SongkickConnector.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.scheme == orig(this.uriBld.scheme)
this.uriBld.scheme.toString == orig(this.uriBld.scheme.toString)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.host == orig(this.uriBld.host)
this.uriBld.host.toString == orig(this.uriBld.host.toString)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.path == orig(this.uriBld.path)
this.uriBld.path.toString == orig(this.uriBld.path.toString)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams == orig(this.uriBld.queryParams)
this.uriBld.queryParams[] == orig(this.uriBld.queryParams[])
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.uriBld.queryParams.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.page == orig(this.page)
this.pages == orig(this.pages)
this.url == orig(this.url)
this.gson has only one value
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
this.gson.serializers.map has only one value
this.gson.serializers.typeHierarchyList has only one value
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.uriBld has only one value
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uri has only one value
this.page has only one value
this.pages == 1
this.url has only one value
return == true
size(this.uriBld.queryParams[]) == 3
===========================================================================
http.SongkickConnector.isNullResponse():::EXIT;condition="return == true"
===========================================================================
org.apache.http.client.utils.URIBuilder:::OBJECT
this.scheme.toString == "http"
this.encodedSchemeSpecificPart == null
this.encodedAuthority == null
this.userInfo == null
this.encodedUserInfo == null
this.host.toString == "api.songkick.com/api/3.0"
this.port == -1
this.path.toString == "/search/locations.json"
this.encodedPath == null
this.encodedQuery == null
this.queryParams[] elements != null
this.queryParams[].getClass().getName() elements == org.apache.http.message.BasicNameValuePair.class
this.queryParams.getClass().getName() == java.util.ArrayList.class
this.query == null
this.fragment == null
this.encodedFragment == null
size(this.queryParams[]) one of { 1, 2, 3 }
===========================================================================
org.apache.http.client.utils.URIBuilder.URIBuilder():::EXIT
this.scheme == null
this.host == null
this.path == null
this.queryParams == null
===========================================================================
org.apache.http.client.utils.URIBuilder.build():::ENTER
this has only one value
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.build():::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.host.toString == orig(this.host.toString)
this.port == orig(this.port)
this.path == orig(this.path)
this.path.toString == orig(this.path.toString)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.queryParams[] == orig(this.queryParams[])
this.queryParams.getClass().getName() == orig(this.queryParams.getClass().getName())
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
return has only one value
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.buildString():::ENTER
this has only one value
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.buildString():::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.host.toString == orig(this.host.toString)
this.port == orig(this.port)
this.path == orig(this.path)
this.path.toString == orig(this.path.toString)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.queryParams[] == orig(this.queryParams[])
this.queryParams.getClass().getName() == orig(this.queryParams.getClass().getName())
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
return has only one value
return.toString == "http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1"
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.encodePath(java.lang.String):::ENTER
this has only one value
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
path has only one value
path.toString == "/search/locations.json"
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.encodePath(java.lang.String):::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.host.toString == orig(this.host.toString)
this.port == orig(this.port)
this.path == orig(this.path)
this.path.toString == orig(this.path.toString)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.queryParams[] == orig(this.queryParams[])
this.queryParams.getClass().getName() == orig(this.queryParams.getClass().getName())
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
path.toString == orig(path.toString)
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
path.toString == "/search/locations.json"
return has only one value
return.toString == "/search/locations.json"
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.encodeUrlForm(java.util.List):::ENTER
this has only one value
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
params has only one value
params[] contains no nulls and has only one value, of length 3
params[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
params[].getClass().getName() elements == org.apache.http.message.BasicNameValuePair.class
params.getClass().getName() == java.util.ArrayList.class
size(this.queryParams[]) == 3
size(params[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.encodeUrlForm(java.util.List):::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.host.toString == orig(this.host.toString)
this.port == orig(this.port)
this.path == orig(this.path)
this.path.toString == orig(this.path.toString)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.queryParams[] == orig(this.queryParams[])
this.queryParams.getClass().getName() == orig(this.queryParams.getClass().getName())
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
params[] == orig(params[])
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
this.queryParams[] contains no nulls and has only one value, of length 3
this.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
params[] contains no nulls and has only one value, of length 3
params[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
params[].getClass().getName() elements == org.apache.http.message.BasicNameValuePair.class
return has only one value
return.toString == "query=rome&apikey=iF1N0jYrhI5wtG3n&page=1"
size(this.queryParams[]) == 3
===========================================================================
org.apache.http.client.utils.URIBuilder.normalizePath(java.lang.String):::ENTER
path has only one value
path.toString == "/search/locations.json"
===========================================================================
org.apache.http.client.utils.URIBuilder.normalizePath(java.lang.String):::EXIT487
===========================================================================
org.apache.http.client.utils.URIBuilder.normalizePath(java.lang.String):::EXIT
path.toString == orig(path.toString)
path.toString == "/search/locations.json"
return has only one value
return.toString == "/search/locations.json"
===========================================================================
org.apache.http.client.utils.URIBuilder.setHost(java.lang.String):::ENTER
this has only one value
this.scheme has only one value
this.host == null
this.path == null
this.queryParams == null
host has only one value
host.toString == "api.songkick.com/api/3.0"
===========================================================================
org.apache.http.client.utils.URIBuilder.setHost(java.lang.String):::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.port == orig(this.port)
this.path == orig(this.path)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
host.toString == orig(host.toString)
this.scheme has only one value
this.host has only one value
this.path == null
this.queryParams == null
host.toString == "api.songkick.com/api/3.0"
return has only one value
return.scheme has only one value
return.scheme.toString == "http"
return.encodedSchemeSpecificPart == null
return.encodedAuthority == null
return.userInfo == null
return.encodedUserInfo == null
return.host has only one value
return.host.toString == "api.songkick.com/api/3.0"
return.port == -1
return.path == null
return.encodedPath == null
return.encodedQuery == null
return.queryParams == null
return.query == null
return.fragment == null
return.encodedFragment == null
===========================================================================
org.apache.http.client.utils.URIBuilder.setParameter(java.lang.String, java.lang.String):::ENTER
this has only one value
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams[].getClass().getName() one of { [org.apache.http.message.BasicNameValuePair], [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair] }
param.toString one of { "apikey", "page", "query" }
value.toString one of { "1", "iF1N0jYrhI5wtG3n", "rome" }
size(this.queryParams[]) one of { 1, 2 }
===========================================================================
org.apache.http.client.utils.URIBuilder.setParameter(java.lang.String, java.lang.String):::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.host.toString == orig(this.host.toString)
this.port == orig(this.port)
this.path == orig(this.path)
this.path.toString == orig(this.path.toString)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams.getClass().getName() == orig(this.queryParams.getClass().getName())
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
param.toString == orig(param.toString)
value.toString == orig(value.toString)
size(this.queryParams[])-1 == orig(size(this.queryParams[]))
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams has only one value
param.toString one of { "apikey", "page", "query" }
value.toString one of { "1", "iF1N0jYrhI5wtG3n", "rome" }
return has only one value
return.scheme has only one value
return.scheme.toString == "http"
return.encodedSchemeSpecificPart == null
return.encodedAuthority == null
return.userInfo == null
return.encodedUserInfo == null
return.host has only one value
return.host.toString == "api.songkick.com/api/3.0"
return.port == -1
return.path has only one value
return.path.toString == "/search/locations.json"
return.encodedPath == null
return.encodedQuery == null
return.queryParams has only one value
return.queryParams[].getClass().getName() elements == org.apache.http.message.BasicNameValuePair.class
return.queryParams.getClass().getName() == java.util.ArrayList.class
return.query == null
return.fragment == null
return.encodedFragment == null
size(return.queryParams[]) one of { 1, 2, 3 }
===========================================================================
org.apache.http.client.utils.URIBuilder.setPath(java.lang.String):::ENTER
this has only one value
this.scheme has only one value
this.host has only one value
this.path == null
this.queryParams == null
path has only one value
path.toString == "/search/locations.json"
===========================================================================
org.apache.http.client.utils.URIBuilder.setPath(java.lang.String):::EXIT
this.scheme == orig(this.scheme)
this.scheme.toString == orig(this.scheme.toString)
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.host.toString == orig(this.host.toString)
this.port == orig(this.port)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
path.toString == orig(path.toString)
this.scheme has only one value
this.host has only one value
this.path has only one value
this.queryParams == null
path.toString == "/search/locations.json"
return has only one value
return.scheme has only one value
return.scheme.toString == "http"
return.encodedSchemeSpecificPart == null
return.encodedAuthority == null
return.userInfo == null
return.encodedUserInfo == null
return.host has only one value
return.host.toString == "api.songkick.com/api/3.0"
return.port == -1
return.path has only one value
return.path.toString == "/search/locations.json"
return.encodedPath == null
return.encodedQuery == null
return.queryParams == null
return.query == null
return.fragment == null
return.encodedFragment == null
===========================================================================
org.apache.http.client.utils.URIBuilder.setScheme(java.lang.String):::ENTER
this has only one value
this.scheme == null
this.host == null
this.path == null
this.queryParams == null
scheme has only one value
scheme.toString == "http"
===========================================================================
org.apache.http.client.utils.URIBuilder.setScheme(java.lang.String):::EXIT
this.encodedSchemeSpecificPart == orig(this.encodedSchemeSpecificPart)
this.encodedAuthority == orig(this.encodedAuthority)
this.userInfo == orig(this.userInfo)
this.encodedUserInfo == orig(this.encodedUserInfo)
this.host == orig(this.host)
this.port == orig(this.port)
this.path == orig(this.path)
this.encodedPath == orig(this.encodedPath)
this.encodedQuery == orig(this.encodedQuery)
this.queryParams == orig(this.queryParams)
this.query == orig(this.query)
this.fragment == orig(this.fragment)
this.encodedFragment == orig(this.encodedFragment)
scheme.toString == orig(scheme.toString)
this.scheme has only one value
this.host == null
this.path == null
this.queryParams == null
scheme.toString == "http"
return has only one value
return.scheme has only one value
return.scheme.toString == "http"
return.encodedSchemeSpecificPart == null
return.encodedAuthority == null
return.userInfo == null
return.encodedUserInfo == null
return.host == null
return.port == -1
return.path == null
return.encodedPath == null
return.encodedQuery == null
return.queryParams == null
return.query == null
return.fragment == null
return.encodedFragment == null
===========================================================================
org.apache.http.client.utils.URLEncodedUtils:::CLASS
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE has only one value
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE != null
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString == "application/x-www-form-urlencoded"
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR has only one value
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR != null
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString == "="
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS has only one value
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS != null
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] == [38, 59]
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] elements one of { 38, 59 }
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] sorted by <
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN has only one value
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN != null
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString == "[&;]"
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED has only one value
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED != null
org.apache.http.client.utils.URLEncodedUtils.PUNCT has only one value
org.apache.http.client.utils.URLEncodedUtils.PUNCT != null
org.apache.http.client.utils.URLEncodedUtils.USERINFO has only one value
org.apache.http.client.utils.URLEncodedUtils.USERINFO != null
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE has only one value
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE != null
org.apache.http.client.utils.URLEncodedUtils.URIC has only one value
org.apache.http.client.utils.URLEncodedUtils.URIC != null
org.apache.http.client.utils.URLEncodedUtils.RESERVED has only one value
org.apache.http.client.utils.URLEncodedUtils.RESERVED != null
org.apache.http.client.utils.URLEncodedUtils.URLENCODER has only one value
org.apache.http.client.utils.URLEncodedUtils.URLENCODER != null
size(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[]) == 2
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.encPath(java.lang.String, java.nio.charset.Charset):::ENTER
content has only one value
content.toString == "/search/locations.json"
charset has only one value
charset.getClass().getName() == sun.nio.cs.UTF_8.class
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.encPath(java.lang.String, java.nio.charset.Charset):::EXIT
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE)
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[])
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN)
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString)
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.UNRESERVED)
org.apache.http.client.utils.URLEncodedUtils.PUNCT == orig(org.apache.http.client.utils.URLEncodedUtils.PUNCT)
org.apache.http.client.utils.URLEncodedUtils.USERINFO == orig(org.apache.http.client.utils.URLEncodedUtils.USERINFO)
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE == orig(org.apache.http.client.utils.URLEncodedUtils.PATHSAFE)
org.apache.http.client.utils.URLEncodedUtils.URIC == orig(org.apache.http.client.utils.URLEncodedUtils.URIC)
org.apache.http.client.utils.URLEncodedUtils.RESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.RESERVED)
org.apache.http.client.utils.URLEncodedUtils.URLENCODER == orig(org.apache.http.client.utils.URLEncodedUtils.URLENCODER)
content.toString == orig(content.toString)
content.toString == "/search/locations.json"
return has only one value
return.toString == "/search/locations.json"
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.encodeFormFields(java.lang.String, java.nio.charset.Charset):::ENTER
charset has only one value
charset.getClass().getName() == sun.nio.cs.UTF_8.class
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.encodeFormFields(java.lang.String, java.nio.charset.Charset):::EXIT586
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.encodeFormFields(java.lang.String, java.nio.charset.Charset):::EXIT
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE)
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[])
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN)
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString)
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.UNRESERVED)
org.apache.http.client.utils.URLEncodedUtils.PUNCT == orig(org.apache.http.client.utils.URLEncodedUtils.PUNCT)
org.apache.http.client.utils.URLEncodedUtils.USERINFO == orig(org.apache.http.client.utils.URLEncodedUtils.USERINFO)
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE == orig(org.apache.http.client.utils.URLEncodedUtils.PATHSAFE)
org.apache.http.client.utils.URLEncodedUtils.URIC == orig(org.apache.http.client.utils.URLEncodedUtils.URIC)
org.apache.http.client.utils.URLEncodedUtils.RESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.RESERVED)
org.apache.http.client.utils.URLEncodedUtils.URLENCODER == orig(org.apache.http.client.utils.URLEncodedUtils.URLENCODER)
content.toString == orig(content.toString)
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.format(java.lang.Iterable, char, java.nio.charset.Charset):::ENTER
parameters has only one value
parameters.getClass().getName() == java.util.ArrayList.class
parameterSeparator == 38
charset has only one value
charset.getClass().getName() == sun.nio.cs.UTF_8.class
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.format(java.lang.Iterable, char, java.nio.charset.Charset):::EXIT
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE)
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[])
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN)
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString)
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.UNRESERVED)
org.apache.http.client.utils.URLEncodedUtils.PUNCT == orig(org.apache.http.client.utils.URLEncodedUtils.PUNCT)
org.apache.http.client.utils.URLEncodedUtils.USERINFO == orig(org.apache.http.client.utils.URLEncodedUtils.USERINFO)
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE == orig(org.apache.http.client.utils.URLEncodedUtils.PATHSAFE)
org.apache.http.client.utils.URLEncodedUtils.URIC == orig(org.apache.http.client.utils.URLEncodedUtils.URIC)
org.apache.http.client.utils.URLEncodedUtils.RESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.RESERVED)
org.apache.http.client.utils.URLEncodedUtils.URLENCODER == orig(org.apache.http.client.utils.URLEncodedUtils.URLENCODER)
return has only one value
return.toString == "query=rome&apikey=iF1N0jYrhI5wtG3n&page=1"
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.format(java.lang.Iterable, java.nio.charset.Charset):::ENTER
parameters has only one value
parameters.getClass().getName() == java.util.ArrayList.class
charset has only one value
charset.getClass().getName() == sun.nio.cs.UTF_8.class
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.format(java.lang.Iterable, java.nio.charset.Charset):::EXIT
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE)
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[])
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN)
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString)
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.UNRESERVED)
org.apache.http.client.utils.URLEncodedUtils.PUNCT == orig(org.apache.http.client.utils.URLEncodedUtils.PUNCT)
org.apache.http.client.utils.URLEncodedUtils.USERINFO == orig(org.apache.http.client.utils.URLEncodedUtils.USERINFO)
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE == orig(org.apache.http.client.utils.URLEncodedUtils.PATHSAFE)
org.apache.http.client.utils.URLEncodedUtils.URIC == orig(org.apache.http.client.utils.URLEncodedUtils.URIC)
org.apache.http.client.utils.URLEncodedUtils.RESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.RESERVED)
org.apache.http.client.utils.URLEncodedUtils.URLENCODER == orig(org.apache.http.client.utils.URLEncodedUtils.URLENCODER)
return has only one value
return.toString == "query=rome&apikey=iF1N0jYrhI5wtG3n&page=1"
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.urlEncode(java.lang.String, java.nio.charset.Charset, java.util.BitSet, boolean):::ENTER
charset has only one value
charset.getClass().getName() == sun.nio.cs.UTF_8.class
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.urlEncode(java.lang.String, java.nio.charset.Charset, java.util.BitSet, boolean):::EXIT481
===========================================================================
org.apache.http.client.utils.URLEncodedUtils.urlEncode(java.lang.String, java.nio.charset.Charset, java.util.BitSet, boolean):::EXIT
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE)
org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString == orig(org.apache.http.client.utils.URLEncodedUtils.CONTENT_TYPE.toString)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR)
org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString == orig(org.apache.http.client.utils.URLEncodedUtils.NAME_VALUE_SEPARATOR.toString)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS)
org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[] == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEPS[])
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN)
org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString == orig(org.apache.http.client.utils.URLEncodedUtils.QP_SEP_PATTERN.toString)
org.apache.http.client.utils.URLEncodedUtils.UNRESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.UNRESERVED)
org.apache.http.client.utils.URLEncodedUtils.PUNCT == orig(org.apache.http.client.utils.URLEncodedUtils.PUNCT)
org.apache.http.client.utils.URLEncodedUtils.USERINFO == orig(org.apache.http.client.utils.URLEncodedUtils.USERINFO)
org.apache.http.client.utils.URLEncodedUtils.PATHSAFE == orig(org.apache.http.client.utils.URLEncodedUtils.PATHSAFE)
org.apache.http.client.utils.URLEncodedUtils.URIC == orig(org.apache.http.client.utils.URLEncodedUtils.URIC)
org.apache.http.client.utils.URLEncodedUtils.RESERVED == orig(org.apache.http.client.utils.URLEncodedUtils.RESERVED)
org.apache.http.client.utils.URLEncodedUtils.URLENCODER == orig(org.apache.http.client.utils.URLEncodedUtils.URLENCODER)
content.toString == orig(content.toString)
===========================================================================
org.apache.http.conn.util.InetAddressUtils:::CLASS
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING has only one value
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString == "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"
org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN has only one value
org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN has only one value
org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN has only one value
org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN has only one value
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6Address(java.lang.String):::ENTER
input has only one value
input.toString == "api.songkick.com/api/3.0"
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6Address(java.lang.String):::EXIT
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING)
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString)
org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN)
input.toString == orig(input.toString)
input.toString == "api.songkick.com/api/3.0"
return == false
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6Address(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6HexCompressedAddress(java.lang.String):::ENTER
input has only one value
input.toString == "api.songkick.com/api/3.0"
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6HexCompressedAddress(java.lang.String):::EXIT
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING)
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString)
org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN)
input.toString == orig(input.toString)
input.toString == "api.songkick.com/api/3.0"
return == false
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6HexCompressedAddress(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6StdAddress(java.lang.String):::ENTER
input has only one value
input.toString == "api.songkick.com/api/3.0"
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6StdAddress(java.lang.String):::EXIT
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING)
org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_BASIC_PATTERN_STRING.toString)
org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV4_MAPPED_IPV6_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV6_STD_PATTERN)
org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN == orig(org.apache.http.conn.util.InetAddressUtils.IPV6_HEX_COMPRESSED_PATTERN)
input.toString == orig(input.toString)
input.toString == "api.songkick.com/api/3.0"
return == false
===========================================================================
org.apache.http.conn.util.InetAddressUtils.isIPv6StdAddress(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.http.message.BasicNameValuePair:::CLASS
===========================================================================
org.apache.http.message.BasicNameValuePair:::OBJECT
this.name != null
this.name.toString one of { "apikey", "page", "query" }
this.value != null
this.value.toString one of { "1", "iF1N0jYrhI5wtG3n", "rome" }
===========================================================================
org.apache.http.message.BasicNameValuePair.BasicNameValuePair(java.lang.String, java.lang.String):::ENTER
name.toString one of { "apikey", "page", "query" }
value.toString one of { "1", "iF1N0jYrhI5wtG3n", "rome" }
===========================================================================
org.apache.http.message.BasicNameValuePair.BasicNameValuePair(java.lang.String, java.lang.String):::EXIT
this.name == orig(name)
this.value == orig(value)
name.toString == orig(name.toString)
value.toString == orig(value.toString)
name.toString one of { "apikey", "page", "query" }
value.toString one of { "1", "iF1N0jYrhI5wtG3n", "rome" }
===========================================================================
org.apache.http.message.BasicNameValuePair.getName():::ENTER
===========================================================================
org.apache.http.message.BasicNameValuePair.getName():::EXIT
this.name == return
this.name.toString == orig(this.name.toString)
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
return == orig(this.name)
return.toString one of { "apikey", "page", "query" }
===========================================================================
org.apache.http.message.BasicNameValuePair.getValue():::ENTER
===========================================================================
org.apache.http.message.BasicNameValuePair.getValue():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.value == return
this.value.toString == orig(this.value.toString)
return == orig(this.value)
return.toString one of { "1", "iF1N0jYrhI5wtG3n", "rome" }
===========================================================================
org.apache.http.util.Args.notNull(java.lang.Object, java.lang.String):::ENTER
argument.getClass().getName() == java.lang.String.class
name has only one value
name.toString == "Name"
===========================================================================
org.apache.http.util.Args.notNull(java.lang.Object, java.lang.String):::EXIT
name.toString == orig(name.toString)
return == orig(argument)
return.getClass().getName() == orig(argument.getClass().getName())
name.toString == "Name"
return.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.logging.log4j.Level:::CLASS
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels != null
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.OFF != null
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.FATAL != null
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.ERROR != null
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.WARN != null
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.INFO != null
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.DEBUG != null
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.TRACE != null
org.apache.logging.log4j.Level.ALL has only one value
org.apache.logging.log4j.Level.ALL != null
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name != null
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.OFF.standardLevel != null
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name != null
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.standardLevel != null
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name != null
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.standardLevel != null
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name != null
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.standardLevel != null
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name != null
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.standardLevel != null
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name != null
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.standardLevel != null
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name != null
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.standardLevel != null
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name != null
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.standardLevel != null
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF != null
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL != null
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR != null
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN != null
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO != null
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG != null
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE != null
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL != null
org.apache.logging.log4j.Level.OFF.standardLevel.intLevel == 0
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet != null
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] elements != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel elements >= 0
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel sorted by <
org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel == 100
org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel == 200
org.apache.logging.log4j.Level.WARN.standardLevel.intLevel == 300
org.apache.logging.log4j.Level.INFO.standardLevel.intLevel == 400
org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel == 500
org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel == 600
org.apache.logging.log4j.Level.ALL.standardLevel.intLevel == 2147483647
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.Level:::OBJECT
org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel == 100
org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel == 200
org.apache.logging.log4j.Level.WARN.standardLevel.intLevel == 300
org.apache.logging.log4j.Level.INFO.standardLevel.intLevel == 400
org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel == 500
org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel == 600
org.apache.logging.log4j.Level.ALL.standardLevel.intLevel == 2147483647
this.name != null
this.standardLevel != null
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == 0
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == 100
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == 300
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == 400
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == 500
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == 600
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == 2147483647
===========================================================================
org.apache.logging.log4j.Level.Level(java.lang.String, int):::ENTER
===========================================================================
org.apache.logging.log4j.Level.Level(java.lang.String, int):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.logging.log4j.Level.getStandardLevel():::ENTER
this has only one value
this.name has only one value
this.name.toString == "ERROR"
this.intLevel == 200
this.standardLevel has only one value
this.standardLevel.intLevel == 200
===========================================================================
org.apache.logging.log4j.Level.getStandardLevel():::EXIT
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.Level.OFF.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel.intLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.intLevel == orig(this.intLevel)
this.standardLevel == orig(this.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel)
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel)
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel)
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel)
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel)
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel)
this.standardLevel.intLevel == orig(this.standardLevel.intLevel)
this.name has only one value
this.name.toString == "ERROR"
this.intLevel == 200
this.standardLevel has only one value
this.standardLevel.intLevel == 200
return has only one value
return.intLevel == 200
===========================================================================
org.apache.logging.log4j.Level.intLevel():::ENTER
===========================================================================
org.apache.logging.log4j.Level.intLevel():::EXIT
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.Level.OFF.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel.intLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.intLevel == orig(this.intLevel)
this.standardLevel == orig(this.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel)
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel)
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel)
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel)
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel)
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel)
this.standardLevel.intLevel == orig(this.standardLevel.intLevel)
===========================================================================
org.apache.logging.log4j.Level.toLevel(java.lang.String, org.apache.logging.log4j.Level):::ENTER
name == null
defaultLevel.name.toString one of { "ERROR", "WARN" }
defaultLevel.intLevel one of { 200, 300 }
defaultLevel.standardLevel.intLevel one of { 200, 300 }
===========================================================================
org.apache.logging.log4j.Level.toLevel(java.lang.String, org.apache.logging.log4j.Level):::EXIT253
===========================================================================
org.apache.logging.log4j.Level.toLevel(java.lang.String, org.apache.logging.log4j.Level):::EXIT
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.Level.OFF.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel.intLevel)
defaultLevel.name == orig(defaultLevel.name)
defaultLevel.name.toString == orig(defaultLevel.name.toString)
defaultLevel.intLevel == orig(defaultLevel.intLevel)
defaultLevel.standardLevel == orig(defaultLevel.standardLevel)
defaultLevel.standardLevel.intLevel == orig(defaultLevel.standardLevel.intLevel)
defaultLevel.name.toString one of { "ERROR", "WARN" }
defaultLevel.intLevel one of { 200, 300 }
defaultLevel.standardLevel.intLevel one of { 200, 300 }
return.name.toString one of { "ERROR", "WARN" }
return.intLevel one of { 200, 300 }
return.standardLevel.intLevel one of { 200, 300 }
===========================================================================
org.apache.logging.log4j.Level.toString():::ENTER
this has only one value
this.name has only one value
this.name.toString == "ERROR"
this.intLevel == 200
this.standardLevel has only one value
this.standardLevel.intLevel == 200
===========================================================================
org.apache.logging.log4j.Level.toString():::EXIT
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.Level.OFF.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel.intLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel.intLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.intLevel == orig(this.intLevel)
this.standardLevel == orig(this.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel)
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel)
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel)
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel)
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel)
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel)
this.standardLevel.intLevel == orig(this.standardLevel.intLevel)
this.name has only one value
this.name.toString == "ERROR"
this.intLevel == 200
this.standardLevel has only one value
this.standardLevel.intLevel == 200
return has only one value
return.toString == "ERROR"
===========================================================================
org.apache.logging.log4j.LogManager:::CLASS
org.apache.logging.log4j.LogManager.factory has only one value
org.apache.logging.log4j.LogManager.factory != null
org.apache.logging.log4j.LogManager.factory.getClass().getName() == org.apache.logging.log4j.simple.SimpleLoggerContextFactory.class
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME has only one value
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME != null
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME.toString == "log4j2.loggerContextFactory"
org.apache.logging.log4j.LogManager.LOGGER has only one value
org.apache.logging.log4j.LogManager.LOGGER != null
org.apache.logging.log4j.LogManager.LOGGER.getClass().getName() == org.apache.logging.log4j.status.StatusLogger.class
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME has only one value
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME != null
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME.toString == ""
org.apache.logging.log4j.LogManager.factory.getClass().getName() != org.apache.logging.log4j.LogManager.LOGGER.getClass().getName()
===========================================================================
org.apache.logging.log4j.LogManager.getLogger(java.lang.Class):::ENTER
===========================================================================
org.apache.logging.log4j.LogManager.getLogger(java.lang.Class):::EXIT
org.apache.logging.log4j.LogManager.factory == orig(org.apache.logging.log4j.LogManager.factory)
org.apache.logging.log4j.LogManager.factory.getClass().getName() == orig(org.apache.logging.log4j.LogManager.factory.getClass().getName())
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME == orig(org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME)
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME.toString == orig(org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME.toString)
org.apache.logging.log4j.LogManager.LOGGER == orig(org.apache.logging.log4j.LogManager.LOGGER)
org.apache.logging.log4j.LogManager.LOGGER.getClass().getName() == orig(org.apache.logging.log4j.LogManager.LOGGER.getClass().getName())
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME == orig(org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME)
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME.toString == orig(org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME.toString)
return.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
===========================================================================
org.apache.logging.log4j.LogManager.getLogger(java.lang.String):::ENTER
===========================================================================
org.apache.logging.log4j.LogManager.getLogger(java.lang.String):::EXIT
org.apache.logging.log4j.LogManager.factory == orig(org.apache.logging.log4j.LogManager.factory)
org.apache.logging.log4j.LogManager.factory.getClass().getName() == orig(org.apache.logging.log4j.LogManager.factory.getClass().getName())
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME == orig(org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME)
org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME.toString == orig(org.apache.logging.log4j.LogManager.FACTORY_PROPERTY_NAME.toString)
org.apache.logging.log4j.LogManager.LOGGER == orig(org.apache.logging.log4j.LogManager.LOGGER)
org.apache.logging.log4j.LogManager.LOGGER.getClass().getName() == orig(org.apache.logging.log4j.LogManager.LOGGER.getClass().getName())
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME == orig(org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME)
org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME.toString == orig(org.apache.logging.log4j.LogManager.ROOT_LOGGER_NAME.toString)
name.toString == orig(name.toString)
return.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
===========================================================================
org.apache.logging.log4j.MarkerManager$Log4jMarker:::CLASS
===========================================================================
org.apache.logging.log4j.MarkerManager$Log4jMarker:::OBJECT
this.parent.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
===========================================================================
org.apache.logging.log4j.MarkerManager$Log4jMarker.Log4jMarker(java.lang.String):::ENTER
name.toString one of { "EXCEPTION", "FLOW" }
===========================================================================
org.apache.logging.log4j.MarkerManager$Log4jMarker.Log4jMarker(java.lang.String):::EXIT
this.name == orig(name)
name.toString == orig(name.toString)
this.name.toString one of { "EXCEPTION", "FLOW" }
this.parent == null
name.toString one of { "EXCEPTION", "FLOW" }
===========================================================================
org.apache.logging.log4j.MarkerManager$Log4jMarker.Log4jMarker(java.lang.String, org.apache.logging.log4j.Marker):::ENTER
parent.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
===========================================================================
org.apache.logging.log4j.MarkerManager$Log4jMarker.Log4jMarker(java.lang.String, org.apache.logging.log4j.Marker):::EXIT
this.name == orig(name)
this.parent == orig(parent)
this.parent.getClass().getName() == orig(parent.getClass().getName())
name.toString == orig(name.toString)
===========================================================================
org.apache.logging.log4j.MarkerManager:::CLASS
org.apache.logging.log4j.MarkerManager.markerMap has only one value
org.apache.logging.log4j.MarkerManager.markerMap != null
org.apache.logging.log4j.MarkerManager.markerMap.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
===========================================================================
org.apache.logging.log4j.MarkerManager.getMarker(java.lang.String):::ENTER
name.toString one of { "EXCEPTION", "FLOW" }
===========================================================================
org.apache.logging.log4j.MarkerManager.getMarker(java.lang.String):::EXIT
org.apache.logging.log4j.MarkerManager.markerMap == orig(org.apache.logging.log4j.MarkerManager.markerMap)
org.apache.logging.log4j.MarkerManager.markerMap.getClass().getName() == orig(org.apache.logging.log4j.MarkerManager.markerMap.getClass().getName())
name.toString == orig(name.toString)
name.toString one of { "EXCEPTION", "FLOW" }
return.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
===========================================================================
org.apache.logging.log4j.MarkerManager.getMarker(java.lang.String, org.apache.logging.log4j.Marker):::ENTER
parent.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
===========================================================================
org.apache.logging.log4j.MarkerManager.getMarker(java.lang.String, org.apache.logging.log4j.Marker):::EXIT
org.apache.logging.log4j.MarkerManager.markerMap == orig(org.apache.logging.log4j.MarkerManager.markerMap)
org.apache.logging.log4j.MarkerManager.markerMap.getClass().getName() == orig(org.apache.logging.log4j.MarkerManager.markerMap.getClass().getName())
name.toString == orig(name.toString)
return.getClass().getName() == orig(parent.getClass().getName())
return.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
===========================================================================
org.apache.logging.log4j.message.AbstractMessageFactory:::CLASS
===========================================================================
org.apache.logging.log4j.message.AbstractMessageFactory:::OBJECT
this.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
===========================================================================
org.apache.logging.log4j.message.AbstractMessageFactory.AbstractMessageFactory():::EXIT
===========================================================================
org.apache.logging.log4j.message.AbstractMessageFactory.newMessage(java.lang.String):::ENTER
message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.message.AbstractMessageFactory.newMessage(java.lang.String):::EXIT
message.toString == orig(message.toString)
message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
return.getClass().getName() == org.apache.logging.log4j.message.SimpleMessage.class
===========================================================================
org.apache.logging.log4j.message.ParameterizedMessageFactory:::CLASS
org.apache.logging.log4j.message.ParameterizedMessageFactory.INSTANCE has only one value
===========================================================================
org.apache.logging.log4j.message.ParameterizedMessageFactory:::OBJECT
===========================================================================
org.apache.logging.log4j.message.ParameterizedMessageFactory.ParameterizedMessageFactory():::EXIT
===========================================================================
org.apache.logging.log4j.message.SimpleMessage:::CLASS
===========================================================================
org.apache.logging.log4j.message.SimpleMessage:::OBJECT
this.message != null
this.message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.message.SimpleMessage.SimpleMessage(java.lang.String):::ENTER
message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.message.SimpleMessage.SimpleMessage(java.lang.String):::EXIT
this.message == orig(message)
message.toString == orig(message.toString)
message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.message.SimpleMessage.getFormattedMessage():::ENTER
===========================================================================
org.apache.logging.log4j.message.SimpleMessage.getFormattedMessage():::EXIT
this.message == return
this.message.toString == orig(this.message.toString)
return == orig(this.message)
return.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.message.SimpleMessage.getParameters():::ENTER
===========================================================================
org.apache.logging.log4j.message.SimpleMessage.getParameters():::EXIT
this.message == orig(this.message)
this.message.toString == orig(this.message.toString)
return == null
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger:::CLASS
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS has only one value
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS != null
org.apache.logging.log4j.spi.AbstractLogger.FQCN has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN != null
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == "org.apache.logging.log4j.spi.AbstractLogger"
org.apache.logging.log4j.spi.AbstractLogger.THROWING has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING != null
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == "throwing"
org.apache.logging.log4j.spi.AbstractLogger.CATCHING has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING != null
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == "catching"
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger:::OBJECT
this.dateFormatter == null
this.level has only one value
this.level != null
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels != null
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.OFF != null
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.FATAL != null
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.ERROR != null
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.WARN != null
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.INFO != null
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.DEBUG != null
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.TRACE != null
org.apache.logging.log4j.Level.ALL has only one value
org.apache.logging.log4j.Level.ALL != null
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name != null
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.OFF.standardLevel != null
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name != null
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.standardLevel != null
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name != null
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.standardLevel != null
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name != null
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.standardLevel != null
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name != null
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.standardLevel != null
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name != null
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.standardLevel != null
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name != null
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.standardLevel != null
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name != null
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.standardLevel != null
this.level.name has only one value
this.level.name != null
this.level.name.toString == "ERROR"
this.level.intLevel == 200
this.level.standardLevel has only one value
this.level.standardLevel != null
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF != null
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL != null
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR != null
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN != null
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO != null
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG != null
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE != null
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL != null
this.level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet != null
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] elements != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel elements >= 0
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel sorted by <
this.showDateTime == false
this.showContextMap == false
this.stream has only one value
this.stream != null
this.logName != null
this.name != null
this.messageFactory != null
this.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.SimpleLogger(java.lang.String, org.apache.logging.log4j.Level, boolean, boolean, boolean, boolean, java.lang.String, org.apache.logging.log4j.message.MessageFactory, org.apache.logging.log4j.util.PropertiesUtil, java.io.PrintStream):::ENTER
defaultLevel has only one value
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.ALL has only one value
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
defaultLevel.name has only one value
defaultLevel.name.toString == "ERROR"
defaultLevel.intLevel == 200
defaultLevel.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
defaultLevel.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel elements >= 0
showLogName == false
showShortLogName == true
showDateTime == false
showContextMap == false
dateTimeFormat.toString == ""
messageFactory == null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props has only one value
stream has only one value
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.SimpleLogger(java.lang.String, org.apache.logging.log4j.Level, boolean, boolean, boolean, boolean, java.lang.String, org.apache.logging.log4j.message.MessageFactory, org.apache.logging.log4j.util.PropertiesUtil, java.io.PrintStream):::EXIT
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
name.toString == orig(name.toString)
defaultLevel.name == orig(defaultLevel.name)
defaultLevel.name.toString == orig(defaultLevel.name.toString)
defaultLevel.intLevel == orig(defaultLevel.intLevel)
defaultLevel.standardLevel == orig(defaultLevel.standardLevel)
defaultLevel.standardLevel.intLevel == orig(defaultLevel.standardLevel.intLevel)
dateTimeFormat.toString == orig(dateTimeFormat.toString)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
props.props == orig(props.props)
defaultLevel.name has only one value
defaultLevel.name.toString == "ERROR"
defaultLevel.intLevel == 200
defaultLevel.standardLevel has only one value
defaultLevel.standardLevel.intLevel == 200
dateTimeFormat.toString == ""
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props has only one value
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.Object, java.lang.Throwable):::ENTER
this has only one value
this.logName has only one value
this.logName.toString == "StatusLogger"
this.name has only one value
this.name.toString == "StatusLogger"
this.messageFactory has only one value
level has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
level.standardLevel.intLevel == 200
marker == null
msg == null
t == null
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.Object, java.lang.Throwable):::EXIT
this.dateFormatter == orig(this.dateFormatter)
this.level == orig(this.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
this.level.name == orig(this.level.name)
this.level.name.toString == orig(this.level.name.toString)
this.level.intLevel == orig(this.level.intLevel)
this.level.standardLevel == orig(this.level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
this.level.standardLevel.intLevel == orig(this.level.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
this.showDateTime == orig(this.showDateTime)
this.showContextMap == orig(this.showContextMap)
this.stream == orig(this.stream)
this.logName == orig(this.logName)
this.logName.toString == orig(this.logName.toString)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == orig(level.intLevel)
level.standardLevel == orig(level.standardLevel)
level.standardLevel.intLevel == orig(level.standardLevel.intLevel)
this.logName has only one value
this.logName.toString == "StatusLogger"
this.name has only one value
this.name.toString == "StatusLogger"
this.messageFactory has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
level.standardLevel.intLevel == 200
return == true
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.Object, java.lang.Throwable):::EXIT;condition="return == true"
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::ENTER
this.logName.toString one of { "App", "LocationSearch", "SongkickConnector" }
this.name.toString one of { "http.SongkickConnector", "jsongkick.App", "search.LocationSearch" }
level.name.toString one of { "DEBUG", "ERROR", "TRACE" }
level.intLevel one of { 200, 500, 600 }
level.standardLevel.intLevel one of { 200, 500, 600 }
marker == null
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::EXIT
this.dateFormatter == orig(this.dateFormatter)
this.level == orig(this.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
this.level.name == orig(this.level.name)
this.level.name.toString == orig(this.level.name.toString)
this.level.intLevel == orig(this.level.intLevel)
this.level.standardLevel == orig(this.level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
this.level.standardLevel.intLevel == orig(this.level.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
this.showDateTime == orig(this.showDateTime)
this.showContextMap == orig(this.showContextMap)
this.stream == orig(this.stream)
this.logName == orig(this.logName)
this.logName.toString == orig(this.logName.toString)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == orig(level.intLevel)
level.standardLevel == orig(level.standardLevel)
level.standardLevel.intLevel == orig(level.standardLevel.intLevel)
msg.toString == orig(msg.toString)
(level.name.toString == "ERROR")  <==>  (level.intLevel == 200)
(level.name.toString == "ERROR")  <==>  (level.standardLevel.intLevel == 200)
(level.name.toString == "ERROR")  <==>  (return == true)
(level.name.toString == "ERROR")  ==>  (level.name has only one value)
(level.name.toString == "ERROR")  ==>  (level.standardLevel has only one value)
(level.name.toString == "ERROR")  ==>  (msg.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto" })
(level.name.toString == "ERROR")  ==>  (orig(level) has only one value)
(level.name.toString == "ERROR")  ==>  (orig(this) has only one value)
(level.name.toString == "ERROR")  ==>  (this.logName has only one value)
(level.name.toString == "ERROR")  ==>  (this.logName.toString == "SongkickConnector")
(level.name.toString == "ERROR")  ==>  (this.messageFactory has only one value)
(level.name.toString == "ERROR")  ==>  (this.name has only one value)
(level.name.toString == "ERROR")  ==>  (this.name.toString == "http.SongkickConnector")
(level.name.toString one of { "DEBUG", "TRACE" })  <==>  (level.intLevel one of { 500, 600 })
(level.name.toString one of { "DEBUG", "TRACE" })  <==>  (level.standardLevel.intLevel one of { 500, 600 })
(level.name.toString one of { "DEBUG", "TRACE" })  <==>  (return == false)
(level.name.toString one of { "DEBUG", "TRACE" })  ==>  (this.logName.toString one of { "App", "LocationSearch", "SongkickConnector" })
(level.name.toString one of { "DEBUG", "TRACE" })  ==>  (this.name.toString one of { "http.SongkickConnector", "jsongkick.App", "search.LocationSearch" })
this.logName.toString one of { "App", "LocationSearch", "SongkickConnector" }
this.name.toString one of { "http.SongkickConnector", "jsongkick.App", "search.LocationSearch" }
level.name.toString one of { "DEBUG", "ERROR", "TRACE" }
level.intLevel one of { 200, 500, 600 }
level.standardLevel.intLevel one of { 200, 500, 600 }
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::EXIT;condition="return == true"
this.logName has only one value
this.logName.toString == "SongkickConnector"
this.name has only one value
this.name.toString == "http.SongkickConnector"
this.messageFactory has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
level.standardLevel.intLevel == 200
msg.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto" }
return == true
orig(this) has only one value
orig(level) has only one value
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::EXIT;condition="not(return == true)"
level.name.toString one of { "DEBUG", "TRACE" }
level.intLevel one of { 500, 600 }
level.standardLevel.intLevel one of { 500, 600 }
return == false
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.log(org.apache.logging.log4j.Marker, java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.message.Message, java.lang.Throwable):::ENTER
this.logName.toString one of { "SongkickConnector", "StatusLogger" }
this.name.toString one of { "StatusLogger", "http.SongkickConnector" }
marker == null
fqcn has only one value
fqcn.toString == "org.apache.logging.log4j.spi.AbstractLogger"
level has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
level.standardLevel.intLevel == 200
msg.getClass().getName() == org.apache.logging.log4j.message.SimpleMessage.class
throwable == null
===========================================================================
org.apache.logging.log4j.simple.SimpleLogger.log(org.apache.logging.log4j.Marker, java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.message.Message, java.lang.Throwable):::EXIT
this.dateFormatter == orig(this.dateFormatter)
this.level == orig(this.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
this.level.name == orig(this.level.name)
this.level.name.toString == orig(this.level.name.toString)
this.level.intLevel == orig(this.level.intLevel)
this.level.standardLevel == orig(this.level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
this.level.standardLevel.intLevel == orig(this.level.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
this.showDateTime == orig(this.showDateTime)
this.showContextMap == orig(this.showContextMap)
this.stream == orig(this.stream)
this.logName == orig(this.logName)
this.logName.toString == orig(this.logName.toString)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
fqcn.toString == orig(fqcn.toString)
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == orig(level.intLevel)
level.standardLevel == orig(level.standardLevel)
level.standardLevel.intLevel == orig(level.standardLevel.intLevel)
this.logName.toString one of { "SongkickConnector", "StatusLogger" }
this.name.toString one of { "StatusLogger", "http.SongkickConnector" }
fqcn.toString == "org.apache.logging.log4j.spi.AbstractLogger"
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
level.standardLevel.intLevel == 200
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext:::CLASS
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT has only one value
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT != null
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT.toString == "yyyy/MM/dd HH:mm:ss:SSS zzz"
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX has only one value
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX != null
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX.toString == "org.apache.logging.log4j.simplelog."
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext:::OBJECT
this.defaultLevel == org.apache.logging.log4j.Level.ERROR
org.apache.logging.log4j.Level.levels.getClass().getName() == this.loggers.getClass().getName()
this.defaultLevel.intLevel == this.defaultLevel.standardLevel.intLevel
this.defaultLevel.standardLevel == org.apache.logging.log4j.spi.StandardLevel.ERROR
this has only one value
this.simpleLogProps has only one value
this.simpleLogProps != null
this.props has only one value
this.props != null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES != null
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props != null
this.props.props has only one value
this.props.props != null
this.showLogName == false
this.showShortName == true
this.showDateTime == false
this.showContextMap == false
this.dateTimeFormat == null
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels != null
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.OFF != null
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.FATAL != null
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.ERROR != null
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.WARN != null
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.INFO != null
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.DEBUG != null
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.TRACE != null
org.apache.logging.log4j.Level.ALL has only one value
org.apache.logging.log4j.Level.ALL != null
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name != null
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.OFF.standardLevel != null
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name != null
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.standardLevel != null
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name != null
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.standardLevel != null
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name != null
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.standardLevel != null
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name != null
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.standardLevel != null
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name != null
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.standardLevel != null
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name != null
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.standardLevel != null
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name != null
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.standardLevel != null
this.defaultLevel.name has only one value
this.defaultLevel.name != null
this.defaultLevel.name.toString == "ERROR"
this.defaultLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF != null
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL != null
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR != null
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN != null
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO != null
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG != null
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE != null
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL != null
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet != null
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] elements != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel elements >= 0
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel sorted by <
this.stream has only one value
this.stream != null
this.loggers has only one value
this.loggers != null
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
org.apache.logging.log4j.Level.levels.getClass().getName() != org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName()
org.apache.logging.log4j.Level.levels.getClass().getName() != org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName()
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() != org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName()
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext.SimpleLoggerContext():::EXIT
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext.getLogger(java.lang.String):::ENTER
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext.getLogger(java.lang.String):::EXIT
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT)
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT.toString == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT.toString)
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX)
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX.toString == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX.toString)
this.simpleLogProps == orig(this.simpleLogProps)
this.props == orig(this.props)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
this.props.props == orig(this.props.props)
this.showLogName == orig(this.showLogName)
this.showShortName == orig(this.showShortName)
this.showDateTime == orig(this.showDateTime)
this.showContextMap == orig(this.showContextMap)
this.dateTimeFormat == orig(this.dateTimeFormat)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(this.loggers.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(this.defaultLevel)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
this.defaultLevel.name == orig(this.defaultLevel.name)
this.defaultLevel.name.toString == orig(this.defaultLevel.name.toString)
this.defaultLevel.intLevel == orig(this.defaultLevel.intLevel)
this.defaultLevel.intLevel == orig(this.defaultLevel.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(this.defaultLevel.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
this.stream == orig(this.stream)
this.loggers == orig(this.loggers)
name.toString == orig(name.toString)
return.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext.getLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory):::ENTER
messageFactory == null
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext.getLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory):::EXIT114
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContext.getLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory):::EXIT
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT)
org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT.toString == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT.toString)
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX)
org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX.toString == orig(org.apache.logging.log4j.simple.SimpleLoggerContext.SYSTEM_PREFIX.toString)
this.simpleLogProps == orig(this.simpleLogProps)
this.props == orig(this.props)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
this.props.props == orig(this.props.props)
this.showLogName == orig(this.showLogName)
this.showShortName == orig(this.showShortName)
this.showDateTime == orig(this.showDateTime)
this.showContextMap == orig(this.showContextMap)
this.dateTimeFormat == orig(this.dateTimeFormat)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(this.loggers.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(this.defaultLevel)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
this.defaultLevel.name == orig(this.defaultLevel.name)
this.defaultLevel.name.toString == orig(this.defaultLevel.name.toString)
this.defaultLevel.intLevel == orig(this.defaultLevel.intLevel)
this.defaultLevel.intLevel == orig(this.defaultLevel.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(this.defaultLevel.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
this.stream == orig(this.stream)
this.loggers == orig(this.loggers)
name.toString == orig(name.toString)
return.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContextFactory:::CLASS
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context has only one value
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context.getClass().getName() == org.apache.logging.log4j.simple.SimpleLoggerContext.class
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContextFactory:::OBJECT
this has only one value
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.SimpleLoggerContextFactory():::EXIT
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.getContext(java.lang.String, java.lang.ClassLoader, java.lang.Object, boolean):::ENTER
fqcn has only one value
fqcn.toString == "org.apache.logging.log4j.LogManager"
loader == null
externalContext == null
currentContext == false
===========================================================================
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.getContext(java.lang.String, java.lang.ClassLoader, java.lang.Object, boolean):::EXIT
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context == return
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context == orig(org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context)
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context.getClass().getName() == return.getClass().getName()
org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context.getClass().getName() == orig(org.apache.logging.log4j.simple.SimpleLoggerContextFactory.context.getClass().getName())
fqcn.toString == orig(fqcn.toString)
fqcn.toString == "org.apache.logging.log4j.LogManager"
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger:::CLASS
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS has only one value
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS != null
org.apache.logging.log4j.spi.AbstractLogger.FQCN has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN != null
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == "org.apache.logging.log4j.spi.AbstractLogger"
org.apache.logging.log4j.spi.AbstractLogger.THROWING has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING != null
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == "throwing"
org.apache.logging.log4j.spi.AbstractLogger.CATCHING has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING != null
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == "catching"
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger:::OBJECT
this.name != null
this.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
this.getClass().getName() != org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName()
this.getClass().getName() != this.messageFactory.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() != this.messageFactory.getClass().getName()
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.AbstractLogger():::EXIT
this.name has only one value
this.name.toString == "org.apache.logging.log4j.status.StatusLogger"
this.messageFactory has only one value
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.AbstractLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory):::ENTER
messageFactory == null
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.AbstractLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory):::EXIT
this.name == orig(name)
name.toString == orig(name.toString)
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.createDefaultMessageFactory():::ENTER
this.messageFactory == null
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.createDefaultMessageFactory():::EXIT
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory == null
return.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() != return.getClass().getName()
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() != orig(this.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.debug(java.lang.String):::ENTER
this has only one value
this.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
this.name has only one value
this.name.toString == "jsongkick.App"
this.messageFactory has only one value
message has only one value
message.toString == "test firstLocation -------------------------------------------"
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.debug(java.lang.String):::EXIT
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
message.toString == orig(message.toString)
this.name has only one value
this.name.toString == "jsongkick.App"
this.messageFactory has only one value
message.toString == "test firstLocation -------------------------------------------"
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.error(java.lang.String):::ENTER
this.name.toString one of { "http.SongkickConnector", "org.apache.logging.log4j.status.StatusLogger" }
message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.error(java.lang.String):::EXIT
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
message.toString == orig(message.toString)
this.name.toString one of { "http.SongkickConnector", "org.apache.logging.log4j.status.StatusLogger" }
message.toString one of { "Server returned HTTP response code: 401 for URL: http://api.songkick.com/api/3.0/search/locations.json?query=rome&apikey=iF1N0jYrhI5wtG3n&page=1", "Timeout scaduto", "Unable to locate a logging implementation, using SimpleLogger" }
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.isErrorEnabled(org.apache.logging.log4j.Marker):::ENTER
this has only one value
this.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
this.name has only one value
this.name.toString == "StatusLogger"
this.messageFactory has only one value
marker == null
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.isErrorEnabled(org.apache.logging.log4j.Marker):::EXIT
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
this.name has only one value
this.name.toString == "StatusLogger"
this.messageFactory has only one value
return == true
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.isErrorEnabled(org.apache.logging.log4j.Marker):::EXIT;condition="return == true"
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.trace(java.lang.String):::ENTER
this.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
this.name.toString one of { "http.SongkickConnector", "search.LocationSearch" }
message.toString one of { "Building URI", "Retrieving first location", "Succesfully build:" }
===========================================================================
org.apache.logging.log4j.spi.AbstractLogger.trace(java.lang.String):::EXIT
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
message.toString == orig(message.toString)
this.name.toString one of { "http.SongkickConnector", "search.LocationSearch" }
message.toString one of { "Building URI", "Retrieving first location", "Succesfully build:" }
===========================================================================
org.apache.logging.log4j.spi.StandardLevel:::CLASS
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF != null
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL != null
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR != null
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN != null
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO != null
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG != null
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE != null
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL != null
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == 0
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet != null
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] elements != null
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel elements >= 0
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel sorted by <
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == 100
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == 300
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == 400
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == 500
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == 600
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == 2147483647
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.spi.StandardLevel:::OBJECT
this.intLevel >= 0
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.StandardLevel(java.lang.String, int, int):::ENTER
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.StandardLevel(java.lang.String, int, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.getStandardLevel(int):::ENTER
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.getStandardLevel(int):::EXIT
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel)
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel)
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel)
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel)
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel)
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.intLevel():::ENTER
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.intLevel():::EXIT
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel)
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel)
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel)
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel)
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel)
this.intLevel == orig(this.intLevel)
return >= 0
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.values():::ENTER
===========================================================================
org.apache.logging.log4j.spi.StandardLevel.values():::EXIT
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.OFF.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR.intLevel)
org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.WARN.intLevel)
org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.INFO.intLevel)
org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG.intLevel)
org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE.intLevel)
org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.ALL.intLevel)
return.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
return[] contains no nulls and has only one value, of length 8
return[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
size(return[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusData:::CLASS
===========================================================================
org.apache.logging.log4j.status.StatusData:::OBJECT
this.level == org.apache.logging.log4j.Level.ERROR
this.level.intLevel == this.level.standardLevel.intLevel
this.level.standardLevel == org.apache.logging.log4j.spi.StandardLevel.ERROR
this has only one value
this.timestamp == 1743928022612L
this.caller has only one value
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.ALL has only one value
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
this.level.name has only one value
this.level.name.toString == "ERROR"
this.level.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
this.msg has only one value
this.msg.getClass().getName() == org.apache.logging.log4j.message.SimpleMessage.class
this.throwable == null
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusData.StatusData(java.lang.StackTraceElement, org.apache.logging.log4j.Level, org.apache.logging.log4j.message.Message, java.lang.Throwable):::ENTER
level == org.apache.logging.log4j.Level.ERROR
level.intLevel == level.standardLevel.intLevel
level.standardLevel == org.apache.logging.log4j.spi.StandardLevel.ERROR
caller has only one value
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.ALL has only one value
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
msg has only one value
msg.getClass().getName() == org.apache.logging.log4j.message.SimpleMessage.class
t == null
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusData.StatusData(java.lang.StackTraceElement, org.apache.logging.log4j.Level, org.apache.logging.log4j.message.Message, java.lang.Throwable):::EXIT
this.caller == orig(caller)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(level)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
this.level.name == level.name
this.level.intLevel == level.intLevel
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == level.standardLevel
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
this.level.standardLevel.intLevel == level.intLevel
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
this.msg == orig(msg)
this.msg.getClass().getName() == orig(msg.getClass().getName())
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == level.standardLevel.intLevel
level.intLevel == orig(level.intLevel)
level.intLevel == orig(level.standardLevel.intLevel)
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue:::CLASS
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue:::OBJECT
org.apache.logging.log4j.status.StatusLogger.this == org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName()
org.apache.logging.log4j.status.StatusLogger.this.logger.logName == org.apache.logging.log4j.status.StatusLogger.this.logger.name
this has only one value
this.size == 200
org.apache.logging.log4j.status.StatusLogger.this has only one value
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES has only one value
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == "log4j2.status.entries"
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL has only one value
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == "?"
org.apache.logging.log4j.status.StatusLogger.PROPS has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.status.StatusLogger.PROPS.props has only one value
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == 200
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == null
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == []
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[].getClass().getName() == []
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == org.apache.logging.log4j.status.StatusLogger$BoundedQueue.class
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == 300
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == "org.apache.logging.log4j.spi.AbstractLogger"
org.apache.logging.log4j.spi.AbstractLogger.THROWING has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == "throwing"
org.apache.logging.log4j.spi.AbstractLogger.CATCHING has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == "catching"
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == "org.apache.logging.log4j.status.StatusLogger"
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter == null
org.apache.logging.log4j.status.StatusLogger.this.logger.level has only one value
org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime == false
org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap == false
org.apache.logging.log4j.status.StatusLogger.this.logger.stream has only one value
org.apache.logging.log4j.status.StatusLogger.this.logger.logName has only one value
org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString == "StatusLogger"
org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString == "StatusLogger"
org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory has only one value
org.apache.logging.log4j.status.StatusLogger.this.listeners has only one value
org.apache.logging.log4j.status.StatusLogger.this.listeners[] == []
org.apache.logging.log4j.status.StatusLogger.this.listeners[].getClass().getName() == []
org.apache.logging.log4j.status.StatusLogger.this.listenersLock has only one value
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel one of { 0, 300 }
org.apache.logging.log4j.status.StatusLogger.this.name has only one value
org.apache.logging.log4j.status.StatusLogger.this.name.toString == "org.apache.logging.log4j.status.StatusLogger"
org.apache.logging.log4j.status.StatusLogger.this.messageFactory has only one value
org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue.BoundedQueue(org.apache.logging.log4j.status.StatusLogger, int):::ENTER
org.apache.logging.log4j.status.StatusLogger.this has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == "org.apache.logging.log4j.spi.AbstractLogger"
org.apache.logging.log4j.spi.AbstractLogger.THROWING has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == "throwing"
org.apache.logging.log4j.spi.AbstractLogger.CATCHING has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == "catching"
org.apache.logging.log4j.status.StatusLogger.this.logger == null
org.apache.logging.log4j.status.StatusLogger.this.listeners has only one value
org.apache.logging.log4j.status.StatusLogger.this.listeners[] == []
org.apache.logging.log4j.status.StatusLogger.this.listeners[].getClass().getName() == []
org.apache.logging.log4j.status.StatusLogger.this.listenersLock has only one value
org.apache.logging.log4j.status.StatusLogger.this.messages == null
org.apache.logging.log4j.status.StatusLogger.this.msgLock == null
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel == 0
org.apache.logging.log4j.status.StatusLogger.this.name has only one value
org.apache.logging.log4j.status.StatusLogger.this.name.toString == "org.apache.logging.log4j.status.StatusLogger"
org.apache.logging.log4j.status.StatusLogger.this.messageFactory has only one value
org.apache.logging.log4j.status.StatusLogger.this.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
size == 200
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue.BoundedQueue(org.apache.logging.log4j.status.StatusLogger, int):::EXIT
this.size == orig(size)
org.apache.logging.log4j.status.StatusLogger.this == orig(org.apache.logging.log4j.status.StatusLogger.this)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.this.logger == orig(org.apache.logging.log4j.status.StatusLogger.this.logger)
org.apache.logging.log4j.status.StatusLogger.this.listeners == orig(org.apache.logging.log4j.status.StatusLogger.this.listeners)
org.apache.logging.log4j.status.StatusLogger.this.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.this.listeners[])
org.apache.logging.log4j.status.StatusLogger.this.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLock)
org.apache.logging.log4j.status.StatusLogger.this.messages == orig(org.apache.logging.log4j.status.StatusLogger.this.messages)
org.apache.logging.log4j.status.StatusLogger.this.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.this.msgLock)
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLevel)
org.apache.logging.log4j.status.StatusLogger.this.name == orig(org.apache.logging.log4j.status.StatusLogger.this.name)
org.apache.logging.log4j.status.StatusLogger.this.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.this.name.toString)
org.apache.logging.log4j.status.StatusLogger.this.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.this.messageFactory)
org.apache.logging.log4j.status.StatusLogger.this.logger == null
org.apache.logging.log4j.status.StatusLogger.this.messages == null
org.apache.logging.log4j.status.StatusLogger.this.msgLock == null
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel == 0
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue.add(java.lang.Object):::ENTER
org.apache.logging.log4j.status.StatusLogger.this.logger has only one value
org.apache.logging.log4j.status.StatusLogger.this.messages has only one value
org.apache.logging.log4j.status.StatusLogger.this.msgLock has only one value
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel == 300
object has only one value
object.getClass().getName() == org.apache.logging.log4j.status.StatusData.class
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue.add(java.lang.Object):::EXIT
this.size == orig(this.size)
org.apache.logging.log4j.status.StatusLogger.this == orig(org.apache.logging.log4j.status.StatusLogger.this)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
org.apache.logging.log4j.status.StatusLogger.PROPS == orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.status.StatusLogger.PROPS.props == orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[])
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
org.apache.logging.log4j.status.StatusLogger.this.logger == orig(org.apache.logging.log4j.status.StatusLogger.this.logger)
org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.dateFormatter)
org.apache.logging.log4j.status.StatusLogger.this.logger.level == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.level)
org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.showDateTime)
org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.showContextMap)
org.apache.logging.log4j.status.StatusLogger.this.logger.stream == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.stream)
org.apache.logging.log4j.status.StatusLogger.this.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.logName)
org.apache.logging.log4j.status.StatusLogger.this.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.name)
org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.logName.toString)
org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.name.toString)
org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.this.logger.messageFactory)
org.apache.logging.log4j.status.StatusLogger.this.listeners == orig(org.apache.logging.log4j.status.StatusLogger.this.listeners)
org.apache.logging.log4j.status.StatusLogger.this.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.this.listeners[])
org.apache.logging.log4j.status.StatusLogger.this.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLock)
org.apache.logging.log4j.status.StatusLogger.this.messages == orig(org.apache.logging.log4j.status.StatusLogger.this.messages)
org.apache.logging.log4j.status.StatusLogger.this.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.this.msgLock)
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.this.listenersLevel)
org.apache.logging.log4j.status.StatusLogger.this.name == orig(org.apache.logging.log4j.status.StatusLogger.this.name)
org.apache.logging.log4j.status.StatusLogger.this.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.this.name.toString)
org.apache.logging.log4j.status.StatusLogger.this.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.this.messageFactory)
org.apache.logging.log4j.status.StatusLogger.this.logger has only one value
org.apache.logging.log4j.status.StatusLogger.this.messages has only one value
org.apache.logging.log4j.status.StatusLogger.this.msgLock has only one value
org.apache.logging.log4j.status.StatusLogger.this.listenersLevel == 300
return == true
===========================================================================
org.apache.logging.log4j.status.StatusLogger$BoundedQueue.add(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.logging.log4j.status.StatusLogger:::CLASS
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES has only one value
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == "log4j2.status.entries"
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL has only one value
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == "?"
org.apache.logging.log4j.status.StatusLogger.PROPS has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props has only one value
org.apache.logging.log4j.status.StatusLogger.PROPS.props has only one value
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == 200
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == null
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == []
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[].getClass().getName() == []
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == org.apache.logging.log4j.status.StatusLogger$BoundedQueue.class
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == 300
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER != null
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == org.apache.logging.log4j.MarkerManager$Log4jMarker.class
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS has only one value
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS != null
org.apache.logging.log4j.spi.AbstractLogger.FQCN has only one value
org.apache.logging.log4j.spi.AbstractLogger.FQCN != null
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == "org.apache.logging.log4j.spi.AbstractLogger"
org.apache.logging.log4j.spi.AbstractLogger.THROWING has only one value
org.apache.logging.log4j.spi.AbstractLogger.THROWING != null
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == "throwing"
org.apache.logging.log4j.spi.AbstractLogger.CATCHING has only one value
org.apache.logging.log4j.spi.AbstractLogger.CATCHING != null
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == "catching"
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == "org.apache.logging.log4j.status.StatusLogger"
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter == null
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime == false
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap == false
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString == "StatusLogger"
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString == "StatusLogger"
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory has only one value
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
===========================================================================
org.apache.logging.log4j.status.StatusLogger:::OBJECT
this has only one value
this.logger has only one value
this.logger.dateFormatter == null
this.logger.level has only one value
org.apache.logging.log4j.Level.levels has only one value
org.apache.logging.log4j.Level.levels.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.logging.log4j.Level.OFF has only one value
org.apache.logging.log4j.Level.FATAL has only one value
org.apache.logging.log4j.Level.ERROR has only one value
org.apache.logging.log4j.Level.WARN has only one value
org.apache.logging.log4j.Level.INFO has only one value
org.apache.logging.log4j.Level.DEBUG has only one value
org.apache.logging.log4j.Level.TRACE has only one value
org.apache.logging.log4j.Level.ALL has only one value
this.logger.level.name has only one value
this.logger.level.name.toString == "ERROR"
this.logger.level.intLevel == 200
this.logger.level.standardLevel has only one value
this.logger.showDateTime == false
this.logger.showContextMap == false
this.logger.stream has only one value
this.logger.logName has only one value
this.logger.logName.toString == "StatusLogger"
this.logger.name has only one value
this.logger.name.toString == "StatusLogger"
this.logger.messageFactory has only one value
this.logger.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
this.listeners has only one value
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listenersLock has only one value
this.messages has only one value
this.messages.getClass().getName() == org.apache.logging.log4j.status.StatusLogger$BoundedQueue.class
this.msgLock has only one value
this.listenersLevel == 300
this.name has only one value
this.name.toString == "org.apache.logging.log4j.status.StatusLogger"
this.messageFactory has only one value
this.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
===========================================================================
org.apache.logging.log4j.status.StatusLogger.StatusLogger():::EXIT
===========================================================================
org.apache.logging.log4j.status.StatusLogger.getLogger():::ENTER
===========================================================================
org.apache.logging.log4j.status.StatusLogger.getLogger():::EXIT
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
org.apache.logging.log4j.status.StatusLogger.PROPS == orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
org.apache.logging.log4j.status.StatusLogger.PROPS.props == orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[])
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName())
return.logger has only one value
return.logger.dateFormatter == null
return.logger.level has only one value
return.logger.showDateTime == false
return.logger.showContextMap == false
return.logger.stream has only one value
return.logger.logName has only one value
return.logger.logName.toString == "StatusLogger"
return.logger.name has only one value
return.logger.name.toString == "StatusLogger"
return.logger.messageFactory has only one value
return.logger.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
return.listeners has only one value
return.listeners[] == []
return.listeners[].getClass().getName() == []
return.listenersLock has only one value
return.messages has only one value
return.messages.getClass().getName() == org.apache.logging.log4j.status.StatusLogger$BoundedQueue.class
return.msgLock has only one value
return.listenersLevel == 300
return.name has only one value
return.name.toString == "org.apache.logging.log4j.status.StatusLogger"
return.messageFactory has only one value
return.messageFactory.getClass().getName() == org.apache.logging.log4j.message.ParameterizedMessageFactory.class
===========================================================================
org.apache.logging.log4j.status.StatusLogger.getStackTraceElement(java.lang.String, java.lang.StackTraceElement[]):::ENTER
fqcn has only one value
fqcn.toString == "org.apache.logging.log4j.spi.AbstractLogger"
stackTrace has only one value
stackTrace.getClass().getName() == java.lang.StackTraceElement[].class
stackTrace[] contains no nulls and has only one value, of length 5
size(stackTrace[]) == 5
===========================================================================
org.apache.logging.log4j.status.StatusLogger.getStackTraceElement(java.lang.String, java.lang.StackTraceElement[]):::EXIT211
===========================================================================
org.apache.logging.log4j.status.StatusLogger.getStackTraceElement(java.lang.String, java.lang.StackTraceElement[]):::EXIT
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
org.apache.logging.log4j.status.StatusLogger.PROPS == orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
org.apache.logging.log4j.status.StatusLogger.PROPS.props == orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[])
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName())
this.logger == orig(this.logger)
this.logger.dateFormatter == orig(this.logger.dateFormatter)
this.logger.level == orig(this.logger.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
this.logger.level.name == orig(this.logger.level.name)
this.logger.level.name.toString == orig(this.logger.level.name.toString)
this.logger.level.intLevel == orig(this.logger.level.intLevel)
this.logger.level.standardLevel == orig(this.logger.level.standardLevel)
this.logger.showDateTime == orig(this.logger.showDateTime)
this.logger.showContextMap == orig(this.logger.showContextMap)
this.logger.stream == orig(this.logger.stream)
this.logger.logName == orig(this.logger.logName)
this.logger.logName.toString == orig(this.logger.logName.toString)
this.logger.name == orig(this.logger.name)
this.logger.name.toString == orig(this.logger.name.toString)
this.logger.messageFactory == orig(this.logger.messageFactory)
this.logger.messageFactory.getClass().getName() == orig(this.logger.messageFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listenersLock == orig(this.listenersLock)
this.messages == orig(this.messages)
this.messages.getClass().getName() == orig(this.messages.getClass().getName())
this.msgLock == orig(this.msgLock)
this.listenersLevel == orig(this.listenersLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
fqcn.toString == orig(fqcn.toString)
stackTrace[] == orig(stackTrace[])
fqcn.toString == "org.apache.logging.log4j.spi.AbstractLogger"
stackTrace[] contains no nulls and has only one value, of length 5
return has only one value
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker):::ENTER
level has only one value
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
marker == null
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker):::EXIT266
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker):::EXIT266;condition="return == true"
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker):::EXIT
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
org.apache.logging.log4j.status.StatusLogger.PROPS == orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
org.apache.logging.log4j.status.StatusLogger.PROPS.props == orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[])
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName())
this.logger == orig(this.logger)
this.logger.dateFormatter == orig(this.logger.dateFormatter)
this.logger.level == orig(this.logger.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
this.logger.level.name == orig(this.logger.level.name)
this.logger.level.name.toString == orig(this.logger.level.name.toString)
this.logger.level.intLevel == orig(this.logger.level.intLevel)
this.logger.level.standardLevel == orig(this.logger.level.standardLevel)
this.logger.showDateTime == orig(this.logger.showDateTime)
this.logger.showContextMap == orig(this.logger.showContextMap)
this.logger.stream == orig(this.logger.stream)
this.logger.logName == orig(this.logger.logName)
this.logger.logName.toString == orig(this.logger.logName.toString)
this.logger.name == orig(this.logger.name)
this.logger.name.toString == orig(this.logger.name.toString)
this.logger.messageFactory == orig(this.logger.messageFactory)
this.logger.messageFactory.getClass().getName() == orig(this.logger.messageFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listenersLock == orig(this.listenersLock)
this.messages == orig(this.messages)
this.messages.getClass().getName() == orig(this.messages.getClass().getName())
this.msgLock == orig(this.msgLock)
this.listenersLevel == orig(this.listenersLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == orig(level.intLevel)
level.standardLevel == orig(level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
level.standardLevel.intLevel == orig(level.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
return == true
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker):::EXIT;condition="return == true"
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::ENTER
level has only one value
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
marker == null
data has only one value
data.toString == "Unable to locate a logging implementation, using SimpleLogger"
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::EXIT
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
org.apache.logging.log4j.status.StatusLogger.PROPS == orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
org.apache.logging.log4j.status.StatusLogger.PROPS.props == orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[])
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName())
this.logger == orig(this.logger)
this.logger.dateFormatter == orig(this.logger.dateFormatter)
this.logger.level == orig(this.logger.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
this.logger.level.name == orig(this.logger.level.name)
this.logger.level.name.toString == orig(this.logger.level.name.toString)
this.logger.level.intLevel == orig(this.logger.level.intLevel)
this.logger.level.standardLevel == orig(this.logger.level.standardLevel)
this.logger.showDateTime == orig(this.logger.showDateTime)
this.logger.showContextMap == orig(this.logger.showContextMap)
this.logger.stream == orig(this.logger.stream)
this.logger.logName == orig(this.logger.logName)
this.logger.logName.toString == orig(this.logger.logName.toString)
this.logger.name == orig(this.logger.name)
this.logger.name.toString == orig(this.logger.name.toString)
this.logger.messageFactory == orig(this.logger.messageFactory)
this.logger.messageFactory.getClass().getName() == orig(this.logger.messageFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listenersLock == orig(this.listenersLock)
this.messages == orig(this.messages)
this.messages.getClass().getName() == orig(this.messages.getClass().getName())
this.msgLock == orig(this.msgLock)
this.listenersLevel == orig(this.listenersLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == orig(level.intLevel)
level.standardLevel == orig(level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
level.standardLevel.intLevel == orig(level.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
data.toString == orig(data.toString)
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
data.toString == "Unable to locate a logging implementation, using SimpleLogger"
return == true
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.logging.log4j.status.StatusLogger.log(org.apache.logging.log4j.Marker, java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.message.Message, java.lang.Throwable):::ENTER
marker == null
fqcn has only one value
fqcn.toString == "org.apache.logging.log4j.spi.AbstractLogger"
level has only one value
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
msg has only one value
msg.getClass().getName() == org.apache.logging.log4j.message.SimpleMessage.class
t == null
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.status.StatusLogger.log(org.apache.logging.log4j.Marker, java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.message.Message, java.lang.Throwable):::EXIT
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString == orig(org.apache.logging.log4j.status.StatusLogger.MAX_STATUS_ENTRIES.toString)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL)
org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString == orig(org.apache.logging.log4j.status.StatusLogger.NOT_AVAIL.toString)
org.apache.logging.log4j.status.StatusLogger.PROPS == orig(org.apache.logging.log4j.status.StatusLogger.PROPS)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
org.apache.logging.log4j.status.StatusLogger.PROPS.props == orig(org.apache.logging.log4j.status.StatusLogger.PROPS.props)
org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES == orig(org.apache.logging.log4j.status.StatusLogger.MAX_ENTRIES)
org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL == orig(org.apache.logging.log4j.status.StatusLogger.DEFAULT_STATUS_LEVEL)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[] == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listeners[])
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messages.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.msgLock)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.listenersLevel)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.FLOW_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.ENTRY_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXIT_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.EXCEPTION_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName() == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING_MARKER.getClass().getName())
org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS == orig(org.apache.logging.log4j.spi.AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS)
org.apache.logging.log4j.spi.AbstractLogger.FQCN == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN)
org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.FQCN.toString)
org.apache.logging.log4j.spi.AbstractLogger.THROWING == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING)
org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.THROWING.toString)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING)
org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString == orig(org.apache.logging.log4j.spi.AbstractLogger.CATCHING.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.messageFactory.getClass().getName())
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.dateFormatter)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.level)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showDateTime)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.showContextMap)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.stream)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.logName.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.name.toString)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory)
org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName() == orig(org.apache.logging.log4j.status.StatusLogger.STATUS_LOGGER.logger.messageFactory.getClass().getName())
this.logger == orig(this.logger)
this.logger.dateFormatter == orig(this.logger.dateFormatter)
this.logger.level == orig(this.logger.level)
org.apache.logging.log4j.Level.levels == orig(org.apache.logging.log4j.Level.levels)
org.apache.logging.log4j.Level.levels.getClass().getName() == orig(org.apache.logging.log4j.Level.levels.getClass().getName())
org.apache.logging.log4j.Level.OFF == orig(org.apache.logging.log4j.Level.OFF)
org.apache.logging.log4j.Level.FATAL == orig(org.apache.logging.log4j.Level.FATAL)
org.apache.logging.log4j.Level.ERROR == orig(org.apache.logging.log4j.Level.ERROR)
org.apache.logging.log4j.Level.WARN == orig(org.apache.logging.log4j.Level.WARN)
org.apache.logging.log4j.Level.INFO == orig(org.apache.logging.log4j.Level.INFO)
org.apache.logging.log4j.Level.DEBUG == orig(org.apache.logging.log4j.Level.DEBUG)
org.apache.logging.log4j.Level.TRACE == orig(org.apache.logging.log4j.Level.TRACE)
org.apache.logging.log4j.Level.ALL == orig(org.apache.logging.log4j.Level.ALL)
this.logger.level.name == orig(this.logger.level.name)
this.logger.level.name.toString == orig(this.logger.level.name.toString)
this.logger.level.intLevel == orig(this.logger.level.intLevel)
this.logger.level.standardLevel == orig(this.logger.level.standardLevel)
this.logger.showDateTime == orig(this.logger.showDateTime)
this.logger.showContextMap == orig(this.logger.showContextMap)
this.logger.stream == orig(this.logger.stream)
this.logger.logName == orig(this.logger.logName)
this.logger.logName.toString == orig(this.logger.logName.toString)
this.logger.name == orig(this.logger.name)
this.logger.name.toString == orig(this.logger.name.toString)
this.logger.messageFactory == orig(this.logger.messageFactory)
this.logger.messageFactory.getClass().getName() == orig(this.logger.messageFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listenersLock == orig(this.listenersLock)
this.messages == orig(this.messages)
this.messages.getClass().getName() == orig(this.messages.getClass().getName())
this.msgLock == orig(this.msgLock)
this.listenersLevel == orig(this.listenersLevel)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.messageFactory == orig(this.messageFactory)
this.messageFactory.getClass().getName() == orig(this.messageFactory.getClass().getName())
fqcn.toString == orig(fqcn.toString)
org.apache.logging.log4j.Level.OFF.name == orig(org.apache.logging.log4j.Level.OFF.name)
org.apache.logging.log4j.Level.OFF.name.toString == orig(org.apache.logging.log4j.Level.OFF.name.toString)
org.apache.logging.log4j.Level.OFF.intLevel == orig(org.apache.logging.log4j.Level.OFF.intLevel)
org.apache.logging.log4j.Level.OFF.standardLevel == orig(org.apache.logging.log4j.Level.OFF.standardLevel)
org.apache.logging.log4j.Level.FATAL.name == orig(org.apache.logging.log4j.Level.FATAL.name)
org.apache.logging.log4j.Level.FATAL.name.toString == orig(org.apache.logging.log4j.Level.FATAL.name.toString)
org.apache.logging.log4j.Level.FATAL.intLevel == orig(org.apache.logging.log4j.Level.FATAL.intLevel)
org.apache.logging.log4j.Level.FATAL.standardLevel == orig(org.apache.logging.log4j.Level.FATAL.standardLevel)
org.apache.logging.log4j.Level.ERROR.name == orig(org.apache.logging.log4j.Level.ERROR.name)
org.apache.logging.log4j.Level.ERROR.name.toString == orig(org.apache.logging.log4j.Level.ERROR.name.toString)
org.apache.logging.log4j.Level.ERROR.intLevel == orig(org.apache.logging.log4j.Level.ERROR.intLevel)
org.apache.logging.log4j.Level.ERROR.standardLevel == orig(org.apache.logging.log4j.Level.ERROR.standardLevel)
org.apache.logging.log4j.Level.WARN.name == orig(org.apache.logging.log4j.Level.WARN.name)
org.apache.logging.log4j.Level.WARN.name.toString == orig(org.apache.logging.log4j.Level.WARN.name.toString)
org.apache.logging.log4j.Level.WARN.intLevel == orig(org.apache.logging.log4j.Level.WARN.intLevel)
org.apache.logging.log4j.Level.WARN.standardLevel == orig(org.apache.logging.log4j.Level.WARN.standardLevel)
org.apache.logging.log4j.Level.INFO.name == orig(org.apache.logging.log4j.Level.INFO.name)
org.apache.logging.log4j.Level.INFO.name.toString == orig(org.apache.logging.log4j.Level.INFO.name.toString)
org.apache.logging.log4j.Level.INFO.intLevel == orig(org.apache.logging.log4j.Level.INFO.intLevel)
org.apache.logging.log4j.Level.INFO.standardLevel == orig(org.apache.logging.log4j.Level.INFO.standardLevel)
org.apache.logging.log4j.Level.DEBUG.name == orig(org.apache.logging.log4j.Level.DEBUG.name)
org.apache.logging.log4j.Level.DEBUG.name.toString == orig(org.apache.logging.log4j.Level.DEBUG.name.toString)
org.apache.logging.log4j.Level.DEBUG.intLevel == orig(org.apache.logging.log4j.Level.DEBUG.intLevel)
org.apache.logging.log4j.Level.DEBUG.standardLevel == orig(org.apache.logging.log4j.Level.DEBUG.standardLevel)
org.apache.logging.log4j.Level.TRACE.name == orig(org.apache.logging.log4j.Level.TRACE.name)
org.apache.logging.log4j.Level.TRACE.name.toString == orig(org.apache.logging.log4j.Level.TRACE.name.toString)
org.apache.logging.log4j.Level.TRACE.intLevel == orig(org.apache.logging.log4j.Level.TRACE.intLevel)
org.apache.logging.log4j.Level.TRACE.standardLevel == orig(org.apache.logging.log4j.Level.TRACE.standardLevel)
org.apache.logging.log4j.Level.ALL.name == orig(org.apache.logging.log4j.Level.ALL.name)
org.apache.logging.log4j.Level.ALL.name.toString == orig(org.apache.logging.log4j.Level.ALL.name.toString)
org.apache.logging.log4j.Level.ALL.intLevel == orig(org.apache.logging.log4j.Level.ALL.intLevel)
org.apache.logging.log4j.Level.ALL.standardLevel == orig(org.apache.logging.log4j.Level.ALL.standardLevel)
level.name == orig(level.name)
level.name.toString == orig(level.name.toString)
level.intLevel == orig(level.intLevel)
level.standardLevel == orig(level.standardLevel)
org.apache.logging.log4j.spi.StandardLevel.OFF == orig(org.apache.logging.log4j.spi.StandardLevel.OFF)
org.apache.logging.log4j.spi.StandardLevel.FATAL == orig(org.apache.logging.log4j.spi.StandardLevel.FATAL)
org.apache.logging.log4j.spi.StandardLevel.ERROR == orig(org.apache.logging.log4j.spi.StandardLevel.ERROR)
org.apache.logging.log4j.spi.StandardLevel.WARN == orig(org.apache.logging.log4j.spi.StandardLevel.WARN)
org.apache.logging.log4j.spi.StandardLevel.INFO == orig(org.apache.logging.log4j.spi.StandardLevel.INFO)
org.apache.logging.log4j.spi.StandardLevel.DEBUG == orig(org.apache.logging.log4j.spi.StandardLevel.DEBUG)
org.apache.logging.log4j.spi.StandardLevel.TRACE == orig(org.apache.logging.log4j.spi.StandardLevel.TRACE)
org.apache.logging.log4j.spi.StandardLevel.ALL == orig(org.apache.logging.log4j.spi.StandardLevel.ALL)
level.standardLevel.intLevel == orig(level.standardLevel.intLevel)
org.apache.logging.log4j.spi.StandardLevel.levelSet == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet)
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES)
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName())
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[])
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == orig(org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel)
fqcn.toString == "org.apache.logging.log4j.spi.AbstractLogger"
org.apache.logging.log4j.Level.OFF.name has only one value
org.apache.logging.log4j.Level.OFF.name.toString == "OFF"
org.apache.logging.log4j.Level.OFF.intLevel == 0
org.apache.logging.log4j.Level.OFF.standardLevel has only one value
org.apache.logging.log4j.Level.FATAL.name has only one value
org.apache.logging.log4j.Level.FATAL.name.toString == "FATAL"
org.apache.logging.log4j.Level.FATAL.intLevel == 100
org.apache.logging.log4j.Level.FATAL.standardLevel has only one value
org.apache.logging.log4j.Level.ERROR.name has only one value
org.apache.logging.log4j.Level.ERROR.name.toString == "ERROR"
org.apache.logging.log4j.Level.ERROR.intLevel == 200
org.apache.logging.log4j.Level.ERROR.standardLevel has only one value
org.apache.logging.log4j.Level.WARN.name has only one value
org.apache.logging.log4j.Level.WARN.name.toString == "WARN"
org.apache.logging.log4j.Level.WARN.intLevel == 300
org.apache.logging.log4j.Level.WARN.standardLevel has only one value
org.apache.logging.log4j.Level.INFO.name has only one value
org.apache.logging.log4j.Level.INFO.name.toString == "INFO"
org.apache.logging.log4j.Level.INFO.intLevel == 400
org.apache.logging.log4j.Level.INFO.standardLevel has only one value
org.apache.logging.log4j.Level.DEBUG.name has only one value
org.apache.logging.log4j.Level.DEBUG.name.toString == "DEBUG"
org.apache.logging.log4j.Level.DEBUG.intLevel == 500
org.apache.logging.log4j.Level.DEBUG.standardLevel has only one value
org.apache.logging.log4j.Level.TRACE.name has only one value
org.apache.logging.log4j.Level.TRACE.name.toString == "TRACE"
org.apache.logging.log4j.Level.TRACE.intLevel == 600
org.apache.logging.log4j.Level.TRACE.standardLevel has only one value
org.apache.logging.log4j.Level.ALL.name has only one value
org.apache.logging.log4j.Level.ALL.name.toString == "ALL"
org.apache.logging.log4j.Level.ALL.intLevel == 2147483647
org.apache.logging.log4j.Level.ALL.standardLevel has only one value
level.name has only one value
level.name.toString == "ERROR"
level.intLevel == 200
level.standardLevel has only one value
org.apache.logging.log4j.spi.StandardLevel.OFF has only one value
org.apache.logging.log4j.spi.StandardLevel.FATAL has only one value
org.apache.logging.log4j.spi.StandardLevel.ERROR has only one value
org.apache.logging.log4j.spi.StandardLevel.WARN has only one value
org.apache.logging.log4j.spi.StandardLevel.INFO has only one value
org.apache.logging.log4j.spi.StandardLevel.DEBUG has only one value
org.apache.logging.log4j.spi.StandardLevel.TRACE has only one value
org.apache.logging.log4j.spi.StandardLevel.ALL has only one value
level.standardLevel.intLevel == 200
org.apache.logging.log4j.spi.StandardLevel.levelSet has only one value
org.apache.logging.log4j.spi.StandardLevel.levelSet.getClass().getName() == java.util.RegularEnumSet.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES has only one value
org.apache.logging.log4j.spi.StandardLevel.$VALUES.getClass().getName() == org.apache.logging.log4j.spi.StandardLevel[].class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() == [org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel, org.apache.logging.log4j.spi.StandardLevel]
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].getClass().getName() elements == org.apache.logging.log4j.spi.StandardLevel.class
org.apache.logging.log4j.spi.StandardLevel.$VALUES[].intLevel == [0, 100, 200, 300, 400, 500, 600, 2147483647]
size(org.apache.logging.log4j.spi.StandardLevel.$VALUES[]) == 8
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil:::CLASS
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES != null
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == null
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props has only one value
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props != null
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil:::OBJECT
this.props != null
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.PropertiesUtil(java.lang.String):::ENTER
propsLocn.toString one of { "log4j2.StatusLogger.properties", "log4j2.component.properties", "log4j2.simplelog.properties" }
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.PropertiesUtil(java.lang.String):::EXIT
propsLocn.toString == orig(propsLocn.toString)
propsLocn.toString one of { "log4j2.StatusLogger.properties", "log4j2.component.properties", "log4j2.simplelog.properties" }
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getBooleanProperty(java.lang.String, boolean):::ENTER
this has only one value
this.props has only one value
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getBooleanProperty(java.lang.String, boolean):::EXIT
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
this.props == orig(this.props)
name.toString == orig(name.toString)
return == orig(defaultValue)
(name.toString == "org.apache.logging.log4j.simplelog.showShortLogname")  <==>  (return == true)
(name.toString == "org.apache.logging.log4j.simplelog.showShortLogname")  ==>  (orig(name) has only one value)
(name.toString one of { "org.apache.logging.log4j.simplelog.showContextMap", "org.apache.logging.log4j.simplelog.showdatetime", "org.apache.logging.log4j.simplelog.showlogname" })  <==>  (return == false)
this.props has only one value
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getBooleanProperty(java.lang.String, boolean):::EXIT;condition="return == true"
name.toString == "org.apache.logging.log4j.simplelog.showShortLogname"
return == true
orig(name) has only one value
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getBooleanProperty(java.lang.String, boolean):::EXIT;condition="not(return == true)"
name.toString one of { "org.apache.logging.log4j.simplelog.showContextMap", "org.apache.logging.log4j.simplelog.showdatetime", "org.apache.logging.log4j.simplelog.showlogname" }
return == false
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getIntegerProperty(java.lang.String, int):::ENTER
this has only one value
this.props has only one value
name has only one value
name.toString == "log4j2.status.entries"
defaultValue == 200
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getIntegerProperty(java.lang.String, int):::EXIT108
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getIntegerProperty(java.lang.String, int):::EXIT
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
this.props == orig(this.props)
name.toString == orig(name.toString)
return == orig(defaultValue)
this.props has only one value
name.toString == "log4j2.status.entries"
return == 200
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getProperties():::ENTER
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getProperties():::EXIT
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == return
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
return.props has only one value
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getStringProperty(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getStringProperty(java.lang.String):::EXIT
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
this.props == orig(this.props)
name.toString == orig(name.toString)
return == null
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getStringProperty(java.lang.String, java.lang.String):::ENTER
this has only one value
this.props has only one value
name has only one value
name.toString == "org.apache.logging.log4j.simplelog.logFile"
defaultValue has only one value
defaultValue.toString == "system.err"
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.getStringProperty(java.lang.String, java.lang.String):::EXIT
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
this.props == orig(this.props)
name.toString == orig(name.toString)
defaultValue.toString == orig(defaultValue.toString)
return == orig(defaultValue)
this.props has only one value
name.toString == "org.apache.logging.log4j.simplelog.logFile"
defaultValue.toString == "system.err"
return has only one value
return.toString == "system.err"
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.loadClose(java.io.InputStream, java.lang.Object):::ENTER
in == null
source.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.logging.log4j.util.PropertiesUtil.loadClose(java.io.InputStream, java.lang.Object):::EXIT
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES)
org.apache.logging.log4j.util.PropertiesUtil.LOGGER == orig(org.apache.logging.log4j.util.PropertiesUtil.LOGGER)
org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props == orig(org.apache.logging.log4j.util.PropertiesUtil.LOG4J_PROPERTIES.props)
===========================================================================
org.apache.logging.log4j.util.ProviderUtil.findClassLoader():::EXIT
return has only one value
return.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
org.apache.logging.log4j.util.ProviderUtil.hasProviders():::EXIT
return == false
===========================================================================
org.apache.logging.log4j.util.ProviderUtil.hasProviders():::EXIT;condition="not(return == true)"
===========================================================================
search.ArtistSearch:::CLASS
search.ArtistSearch.log has only one value
search.ArtistSearch.log.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
http.SongkickConnector.log has only one value
http.SongkickConnector.log.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
===========================================================================
search.ArtistSearch:::OBJECT
this has only one value
this.currentArtist == null
this.jsonResponse == null
this.gson has only one value
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == true
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == java.util.HashSet.class
com.google.gson.Gson.DEFAULT_NAMING_POLICY has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX has only one value
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == ")]}'\n"
this.gson.deserializationExclusionStrategy has only one value
this.gson.deserializationExclusionStrategy.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
this.gson.serializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
this.gson.fieldNamingPolicy has only one value
this.gson.fieldNamingPolicy.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
this.gson.objectConstructor has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
this.gson.serializers.map has only one value
this.gson.serializers.map.getClass().getName() == java.util.HashMap.class
this.gson.serializers.typeHierarchyList has only one value
this.gson.serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.gson.serializers.modifiable == false
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.map.getClass().getName() == java.util.HashMap.class
this.gson.deserializers.typeHierarchyList has only one value
this.gson.deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.deserializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.gson.deserializers.modifiable == false
this.gson.serializeNulls == false
this.gson.htmlSafe == true
this.gson.generateNonExecutableJson == false
this.gson.prettyPrinting == true
this.uriBld has only one value
this.uriBld.scheme == null
this.uriBld.encodedSchemeSpecificPart == null
this.uriBld.encodedAuthority == null
this.uriBld.userInfo == null
this.uriBld.encodedUserInfo == null
this.uriBld.host == null
this.uriBld.port == -1
this.uriBld.path == null
this.uriBld.encodedPath == null
this.uriBld.encodedQuery == null
this.uriBld.queryParams == null
this.uriBld.query == null
this.uriBld.fragment == null
this.uriBld.encodedFragment == null
this.uri == null
this.page has only one value
this.pages == 1
this.url == null
size(this.gson.serializers.typeHierarchyList[]) == 4
size(this.gson.deserializers.typeHierarchyList[]) == 4
===========================================================================
search.ArtistSearch.ArtistSearch():::EXIT
===========================================================================
search.EventSearch:::CLASS
search.EventSearch.log.getClass().getName() == http.SongkickConnector.log.getClass().getName()
search.EventSearch.log has only one value
search.EventSearch.log.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
http.SongkickConnector.log has only one value
===========================================================================
search.EventSearch:::OBJECT
com.google.gson.Gson.DEFAULT_NAMING_POLICY == this.gson.fieldNamingPolicy
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == this.gson.fieldNamingPolicy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == this.gson.deserializationExclusionStrategy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == this.gson.serializationExclusionStrategy.getClass().getName()
this.gson.serializers.map.getClass().getName() == this.gson.deserializers.map.getClass().getName()
this.gson.serializers.typeHierarchyList.getClass().getName() == this.gson.deserializers.typeHierarchyList.getClass().getName()
this has only one value
this.currentlocationId == null
this.currentArtist == null
this.jsonResponse == null
this.gson has only one value
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == true
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == java.util.HashSet.class
com.google.gson.Gson.DEFAULT_NAMING_POLICY has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX has only one value
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == ")]}'\n"
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
this.gson.serializers.map has only one value
this.gson.serializers.map.getClass().getName() == java.util.HashMap.class
this.gson.serializers.typeHierarchyList has only one value
this.gson.serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.gson.serializers.modifiable == false
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.gson.deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.deserializers.modifiable == false
this.gson.serializeNulls == false
this.gson.htmlSafe == true
this.gson.generateNonExecutableJson == false
this.gson.prettyPrinting == true
this.uriBld has only one value
this.uriBld.scheme == null
this.uriBld.encodedSchemeSpecificPart == null
this.uriBld.encodedAuthority == null
this.uriBld.userInfo == null
this.uriBld.encodedUserInfo == null
this.uriBld.host == null
this.uriBld.port == -1
this.uriBld.path == null
this.uriBld.encodedPath == null
this.uriBld.encodedQuery == null
this.uriBld.queryParams == null
this.uriBld.query == null
this.uriBld.fragment == null
this.uriBld.encodedFragment == null
this.uri == null
this.page has only one value
this.pages == 1
this.url == null
size(this.gson.serializers.typeHierarchyList[]) == 4
size(this.gson.deserializers.typeHierarchyList[]) == 4
===========================================================================
search.EventSearch.EventSearch():::EXIT
===========================================================================
search.LocationSearch:::CLASS
search.LocationSearch.log.getClass().getName() == http.SongkickConnector.log.getClass().getName()
search.LocationSearch.log has only one value
search.LocationSearch.log.getClass().getName() == org.apache.logging.log4j.simple.SimpleLogger.class
http.SongkickConnector.log has only one value
===========================================================================
search.LocationSearch:::OBJECT
com.google.gson.Gson.DEFAULT_NAMING_POLICY == this.gson.fieldNamingPolicy
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == this.gson.fieldNamingPolicy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == this.gson.deserializationExclusionStrategy.getClass().getName()
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == this.gson.serializationExclusionStrategy.getClass().getName()
this.gson.serializers.map.getClass().getName() == this.gson.deserializers.map.getClass().getName()
this.gson.serializers.typeHierarchyList.getClass().getName() == this.gson.deserializers.typeHierarchyList.getClass().getName()
this.gson.serializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this has only one value
this.currentLocation == null
this.jsonResponse == null
this.gson has only one value
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == true
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers has only one value
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == java.util.HashSet.class
com.google.gson.Gson.DEFAULT_NAMING_POLICY has only one value
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.class
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY has only one value
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == com.google.gson.DisjunctionExclusionStrategy.class
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX has only one value
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == ")]}'\n"
this.gson.deserializationExclusionStrategy has only one value
this.gson.serializationExclusionStrategy has only one value
this.gson.objectConstructor has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator has only one value
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == com.google.gson.UnsafeAllocator$1.class
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator has only one value
this.gson.objectConstructor.instanceCreatorMap has only one value
this.gson.serializers has only one value
com.google.gson.ParameterizedTypeHandlerMap.logger has only one value
this.gson.serializers.map has only one value
this.gson.serializers.map.getClass().getName() == java.util.HashMap.class
this.gson.serializers.typeHierarchyList has only one value
this.gson.serializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.serializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.serializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.serializers.typeHierarchyList.getClass().getName() == java.util.ArrayList.class
this.gson.serializers.modifiable == false
this.gson.deserializers has only one value
this.gson.deserializers.map has only one value
this.gson.deserializers.typeHierarchyList has only one value
this.gson.deserializers.typeHierarchyList[] contains no nulls and has only one value, of length 4
this.gson.deserializers.typeHierarchyList[].getClass().getName() == [com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair, com.google.gson.Pair]
this.gson.deserializers.typeHierarchyList[].getClass().getName() elements == com.google.gson.Pair.class
this.gson.deserializers.modifiable == false
this.gson.serializeNulls == false
this.gson.htmlSafe == true
this.gson.generateNonExecutableJson == false
this.gson.prettyPrinting == true
this.uriBld has only one value
this.uriBld.scheme.toString == "http"
this.uriBld.encodedSchemeSpecificPart == null
this.uriBld.encodedAuthority == null
this.uriBld.userInfo == null
this.uriBld.encodedUserInfo == null
this.uriBld.host.toString == "api.songkick.com/api/3.0"
this.uriBld.port == -1
this.uriBld.path.toString == "/search/locations.json"
this.uriBld.encodedPath == null
this.uriBld.encodedQuery == null
this.uriBld.queryParams[] contains no nulls and has only one value, of length 3
this.uriBld.queryParams[].getClass().getName() == [org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair, org.apache.http.message.BasicNameValuePair]
this.uriBld.queryParams[].getClass().getName() elements == org.apache.http.message.BasicNameValuePair.class
this.uriBld.queryParams.getClass().getName() == java.util.ArrayList.class
this.uriBld.query == null
this.uriBld.fragment == null
this.uriBld.encodedFragment == null
this.page has only one value
this.pages == 1
size(this.gson.serializers.typeHierarchyList[]) == 4
size(this.gson.deserializers.typeHierarchyList[]) == 4
size(this.uriBld.queryParams[]) == 3
===========================================================================
search.LocationSearch.LocationSearch():::EXIT
this.uriBld.scheme == null
this.uriBld.host == null
this.uriBld.path == null
this.uriBld.queryParams == null
this.uri == null
this.url == null
===========================================================================
search.LocationSearch.query(java.lang.String):::ENTER
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path == null
this.uriBld.queryParams == null
this.uri == null
this.url == null
arg0 has only one value
arg0.toString == "rome"
===========================================================================
search.LocationSearch.query(java.lang.String):::EXIT
search.LocationSearch.log == orig(search.LocationSearch.log)
search.LocationSearch.log.getClass().getName() == orig(search.LocationSearch.log.getClass().getName())
search.LocationSearch.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.currentLocation == orig(this.currentLocation)
http.SongkickConnector.log == orig(http.SongkickConnector.log)
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.scheme == orig(this.uriBld.scheme)
this.uriBld.scheme.toString == orig(this.uriBld.scheme.toString)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.host == orig(this.uriBld.host)
this.uriBld.host.toString == orig(this.uriBld.host.toString)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.uri == orig(this.uri)
this.page == orig(this.page)
this.pages == orig(this.pages)
this.url == orig(this.url)
arg0.toString == orig(arg0.toString)
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uri == null
this.url == null
arg0.toString == "rome"
return has only one value
===========================================================================
search.LocationSearch.search(java.lang.String):::ENTER
this.uriBld.scheme == null
this.uriBld.host == null
this.uriBld.path == null
this.uriBld.queryParams == null
this.uri == null
this.url == null
arg0 has only one value
arg0.toString == "rome"
===========================================================================
search.LocationSearch.search(java.lang.String):::EXIT
search.LocationSearch.log == orig(search.LocationSearch.log)
search.LocationSearch.log.getClass().getName() == orig(search.LocationSearch.log.getClass().getName())
search.LocationSearch.log.getClass().getName() == orig(http.SongkickConnector.log.getClass().getName())
this.currentLocation == orig(this.currentLocation)
http.SongkickConnector.log == orig(http.SongkickConnector.log)
this.jsonResponse == orig(this.jsonResponse)
this.gson == orig(this.gson)
com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields == orig(com.google.gson.Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY.skipSyntheticFields)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers)
com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY.modifiers.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY)
com.google.gson.Gson.DEFAULT_NAMING_POLICY == orig(this.gson.fieldNamingPolicy)
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName())
com.google.gson.Gson.DEFAULT_NAMING_POLICY.getClass().getName() == orig(this.gson.fieldNamingPolicy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY)
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.deserializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.DEFAULT_EXCLUSION_STRATEGY.getClass().getName() == orig(this.gson.serializationExclusionStrategy.getClass().getName())
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX)
com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString == orig(com.google.gson.Gson.JSON_NON_EXECUTABLE_PREFIX.toString)
this.gson.deserializationExclusionStrategy == orig(this.gson.deserializationExclusionStrategy)
this.gson.serializationExclusionStrategy == orig(this.gson.serializationExclusionStrategy)
this.gson.objectConstructor == orig(this.gson.objectConstructor)
com.google.gson.MappedObjectConstructor.unsafeAllocator == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator)
com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName() == orig(com.google.gson.MappedObjectConstructor.unsafeAllocator.getClass().getName())
com.google.gson.MappedObjectConstructor.defaultConstructorAllocator == orig(com.google.gson.MappedObjectConstructor.defaultConstructorAllocator)
this.gson.objectConstructor.instanceCreatorMap == orig(this.gson.objectConstructor.instanceCreatorMap)
this.gson.serializers == orig(this.gson.serializers)
com.google.gson.ParameterizedTypeHandlerMap.logger == orig(com.google.gson.ParameterizedTypeHandlerMap.logger)
this.gson.serializers.map == orig(this.gson.serializers.map)
this.gson.serializers.map.getClass().getName() == orig(this.gson.serializers.map.getClass().getName())
this.gson.serializers.map.getClass().getName() == orig(this.gson.deserializers.map.getClass().getName())
this.gson.serializers.typeHierarchyList == orig(this.gson.serializers.typeHierarchyList)
this.gson.serializers.typeHierarchyList[] == orig(this.gson.serializers.typeHierarchyList[])
this.gson.serializers.modifiable == orig(this.gson.serializers.modifiable)
this.gson.deserializers == orig(this.gson.deserializers)
this.gson.deserializers.map == orig(this.gson.deserializers.map)
this.gson.deserializers.typeHierarchyList == orig(this.gson.deserializers.typeHierarchyList)
this.gson.deserializers.typeHierarchyList[] == orig(this.gson.deserializers.typeHierarchyList[])
this.gson.deserializers.typeHierarchyList.getClass().getName() == this.uriBld.queryParams.getClass().getName()
this.gson.deserializers.modifiable == orig(this.gson.deserializers.modifiable)
this.gson.serializeNulls == orig(this.gson.serializeNulls)
this.gson.htmlSafe == orig(this.gson.htmlSafe)
this.gson.generateNonExecutableJson == orig(this.gson.generateNonExecutableJson)
this.gson.prettyPrinting == orig(this.gson.prettyPrinting)
this.uriBld == orig(this.uriBld)
this.uriBld.encodedSchemeSpecificPart == orig(this.uriBld.encodedSchemeSpecificPart)
this.uriBld.encodedAuthority == orig(this.uriBld.encodedAuthority)
this.uriBld.userInfo == orig(this.uriBld.userInfo)
this.uriBld.encodedUserInfo == orig(this.uriBld.encodedUserInfo)
this.uriBld.port == orig(this.uriBld.port)
this.uriBld.encodedPath == orig(this.uriBld.encodedPath)
this.uriBld.encodedQuery == orig(this.uriBld.encodedQuery)
this.uriBld.queryParams.getClass().getName() == orig(this.gson.serializers.typeHierarchyList.getClass().getName())
this.uriBld.queryParams.getClass().getName() == orig(this.gson.deserializers.typeHierarchyList.getClass().getName())
this.uriBld.query == orig(this.uriBld.query)
this.uriBld.fragment == orig(this.uriBld.fragment)
this.uriBld.encodedFragment == orig(this.uriBld.encodedFragment)
this.page == orig(this.page)
this.pages == orig(this.pages)
arg0.toString == orig(arg0.toString)
this.uriBld.scheme has only one value
this.uriBld.host has only one value
this.uriBld.path has only one value
this.uriBld.queryParams has only one value
this.uri has only one value
this.url has only one value
arg0.toString == "rome"
Exiting Daikon.
