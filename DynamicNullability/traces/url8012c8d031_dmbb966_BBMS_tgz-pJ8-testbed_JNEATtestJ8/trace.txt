Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
bbms.GlobalFuncs:::CLASS
bbms.GlobalFuncs.MiniMapType == hex.MiniMapEnum.TERRAIN
bbms.GlobalFuncs.defaultFitType == unit.FitnessTypeEnum.SIMPLE_GREEDY
bbms.GlobalFuncs.tempStr == bbms.GlobalFuncs.outputPrefix
bbms.GlobalFuncs.tempStr == bbms.GlobalFuncs.inputPrefix
bbms.GlobalFuncs.gui == null
bbms.GlobalFuncs.scenMap == null
bbms.GlobalFuncs.mapInitialized == false
bbms.GlobalFuncs.clockInitialized == false
bbms.GlobalFuncs.placeUnit == 0
bbms.GlobalFuncs.showShaded == true
bbms.GlobalFuncs.showVapor == false
bbms.GlobalFuncs.showLOS == true
bbms.GlobalFuncs.showFOW == false
bbms.GlobalFuncs.showWPs == false
bbms.GlobalFuncs.miniMapSize == 16
bbms.GlobalFuncs.updateVapor == false
bbms.GlobalFuncs.shareTeamFit == true
bbms.GlobalFuncs.RotateHull == true
bbms.GlobalFuncs.runningTest == false
bbms.GlobalFuncs.displayMiniMap == false
bbms.GlobalFuncs.MiniMapType has only one value
bbms.GlobalFuncs.MiniMapType != null
hex.MiniMapEnum.VAPOR_AMT has only one value
hex.MiniMapEnum.VAPOR_AMT != null
hex.MiniMapEnum.VAPOR_DV has only one value
hex.MiniMapEnum.VAPOR_DV != null
hex.MiniMapEnum.$VALUES has only one value
hex.MiniMapEnum.$VALUES != null
hex.MiniMapEnum.$VALUES.getClass().getName() == hex.MiniMapEnum[].class
hex.MiniMapEnum.$VALUES[] contains no nulls and has only one value, of length 3
hex.MiniMapEnum.$VALUES[] elements != null
hex.MiniMapEnum.$VALUES[].getClass().getName() == [hex.MiniMapEnum, hex.MiniMapEnum, hex.MiniMapEnum]
hex.MiniMapEnum.$VALUES[].getClass().getName() elements == hex.MiniMapEnum.class
bbms.GlobalFuncs.networkResultThreshold == 0.75
bbms.GlobalFuncs.mutateProbability == 0.05
bbms.GlobalFuncs.epochInterval == 10
bbms.GlobalFuncs.dirPrefix has only one value
bbms.GlobalFuncs.dirPrefix != null
bbms.GlobalFuncs.dirPrefix.toString == "T"
bbms.GlobalFuncs.deathPenalty == 1.0
bbms.GlobalFuncs.defaultFitType has only one value
bbms.GlobalFuncs.defaultFitType != null
unit.FitnessTypeEnum.SHARED_SPOTTING has only one value
unit.FitnessTypeEnum.SHARED_SPOTTING != null
unit.FitnessTypeEnum.SOVIET_COMMUNISM has only one value
unit.FitnessTypeEnum.SOVIET_COMMUNISM != null
unit.FitnessTypeEnum.FULL_COMMUNISM has only one value
unit.FitnessTypeEnum.FULL_COMMUNISM != null
unit.FitnessTypeEnum.$VALUES has only one value
unit.FitnessTypeEnum.$VALUES != null
unit.FitnessTypeEnum.$VALUES.getClass().getName() == unit.FitnessTypeEnum[].class
unit.FitnessTypeEnum.$VALUES[] contains no nulls and has only one value, of length 4
unit.FitnessTypeEnum.$VALUES[] elements != null
unit.FitnessTypeEnum.$VALUES[].getClass().getName() == [unit.FitnessTypeEnum, unit.FitnessTypeEnum, unit.FitnessTypeEnum, unit.FitnessTypeEnum]
unit.FitnessTypeEnum.$VALUES[].getClass().getName() elements == unit.FitnessTypeEnum.class
bbms.GlobalFuncs.unitList has only one value
bbms.GlobalFuncs.unitList != null
bbms.GlobalFuncs.unitList[] == []
bbms.GlobalFuncs.unitList[].getClass().getName() == []
bbms.GlobalFuncs.friendlyUnitList has only one value
bbms.GlobalFuncs.friendlyUnitList != null
bbms.GlobalFuncs.friendlyUnitList[] == []
bbms.GlobalFuncs.friendlyUnitList[].getClass().getName() == []
bbms.GlobalFuncs.enemyUnitList has only one value
bbms.GlobalFuncs.enemyUnitList != null
bbms.GlobalFuncs.enemyUnitList[] == []
bbms.GlobalFuncs.enemyUnitList[].getClass().getName() == []
bbms.GlobalFuncs.destroyedUnitList has only one value
bbms.GlobalFuncs.destroyedUnitList != null
bbms.GlobalFuncs.destroyedUnitList[] == []
bbms.GlobalFuncs.destroyedUnitList[].getClass().getName() == []
bbms.GlobalFuncs.selectedHex == null
bbms.GlobalFuncs.selectedUnit == null
unit.OrganismTypeEnum.SIMPLE_SINGLE has only one value
unit.OrganismTypeEnum.SIMPLE_SINGLE != null
unit.OrganismTypeEnum.SIMPLE_DUAL has only one value
unit.OrganismTypeEnum.SIMPLE_DUAL != null
unit.OrganismTypeEnum.SIX_DIRECTIONAL has only one value
unit.OrganismTypeEnum.SIX_DIRECTIONAL != null
unit.OrganismTypeEnum.BASE_RANDOM has only one value
unit.OrganismTypeEnum.BASE_RANDOM != null
unit.OrganismTypeEnum.BASE_MAXHEX has only one value
unit.OrganismTypeEnum.BASE_MAXHEX != null
unit.OrganismTypeEnum.maxObservedDV == 0.0
unit.OrganismTypeEnum.$VALUES has only one value
unit.OrganismTypeEnum.$VALUES != null
unit.OrganismTypeEnum.$VALUES.getClass().getName() == unit.OrganismTypeEnum[].class
unit.OrganismTypeEnum.$VALUES[] contains no nulls and has only one value, of length 5
unit.OrganismTypeEnum.$VALUES[] elements != null
unit.OrganismTypeEnum.$VALUES[].getClass().getName() == [unit.OrganismTypeEnum, unit.OrganismTypeEnum, unit.OrganismTypeEnum, unit.OrganismTypeEnum, unit.OrganismTypeEnum]
unit.OrganismTypeEnum.$VALUES[].getClass().getName() elements == unit.OrganismTypeEnum.class
bbms.GlobalFuncs.defaultOrgType has only one value
bbms.GlobalFuncs.defaultOrgType != null
bbms.GlobalFuncs.calcShared == false
bbms.GlobalFuncs.forceTreePlacement == true
bbms.GlobalFuncs.currentPop == null
bbms.GlobalFuncs.tempStr has only one value
bbms.GlobalFuncs.tempStr != null
bbms.GlobalFuncs.tempStr.toString == ""
bbms.GlobalFuncs.orgAssignNum == 0
bbms.GlobalFuncs.maxRunsPerOrg == 1
bbms.GlobalFuncs.numTests == 1
bbms.GlobalFuncs.numDifferentTests == 1
bbms.GlobalFuncs.detailedOutput == null
bbms.GlobalFuncs.summaryOutput == null
bbms.GlobalFuncs.fullIterOutput == null
bbms.GlobalFuncs.targetPop == null
bbms.GlobalFuncs.currentTestPath == null
bbms.GlobalFuncs.outputPrefix.toString == ""
bbms.GlobalFuncs.inputPrefix.toString == ""
bbms.GlobalFuncs.percentPerRun == 0.1
bbms.GlobalFuncs.currentRunsPerOrg == 0
bbms.GlobalFuncs.iterationCount == 0
bbms.GlobalFuncs.numScoutsPer == 0
bbms.GlobalFuncs.curEpoch == 1
bbms.GlobalFuncs.maxEpochs == 1
bbms.GlobalFuncs.pauseNewIter == false
bbms.GlobalFuncs.pauseNewEpoch == false
bbms.GlobalFuncs.newEpoch == false
bbms.GlobalFuncs.randCOAEpoch == true
bbms.GlobalFuncs.currentPopEpochNum == 0
bbms.GlobalFuncs.spottedSoFar == 0
bbms.GlobalFuncs.maxPossibleSpots == 0
bbms.GlobalFuncs.moveRateMult == 10.0
bbms.GlobalFuncs.COAIndex == 1
bbms.GlobalFuncs.curCOA == null
bbms.GlobalFuncs.allCOAs has only one value
bbms.GlobalFuncs.allCOAs != null
bbms.GlobalFuncs.allCOAs[] == []
bbms.GlobalFuncs.allCOAs[].getClass().getName() == []
bbms.GlobalFuncs.GameClock has only one value
bbms.GlobalFuncs.GameClock != null
bbms.GlobalFuncs.runtoEq == false
bbms.GlobalFuncs.dvTolerance == 0
bbms.GlobalFuncs.visibility == 0
bbms.GlobalFuncs.unitCount == 0
bbms.GlobalFuncs.maxSpottedDV == 1.0
bbms.GlobalFuncs.maxSpottedDV60 == 1.0
bbms.GlobalFuncs.maxsingleDV == 1.0
bbms.GlobalFuncs.flowRate == 1.0
bbms.GlobalFuncs.flowRateCap == 2.95
bbms.GlobalFuncs.flowStep == 0.05
bbms.GlobalFuncs.flowCheck == 5
bbms.GlobalFuncs.reduceRate == false
bbms.GlobalFuncs.fixSlowRate == false
bbms.GlobalFuncs.maxDelta == 0
bbms.GlobalFuncs.ticksStable == 0
bbms.GlobalFuncs.totalVapor == 0
bbms.GlobalFuncs.totalVaporDelta == 0
bbms.GlobalFuncs.allSpots has only one value
bbms.GlobalFuncs.allSpots != null
bbms.GlobalFuncs.allSpots.records has only one value
bbms.GlobalFuncs.allSpots.records != null
bbms.GlobalFuncs.allSpots.records[] == []
bbms.GlobalFuncs.allSpots.records[].getClass().getName() == []
bbms.GlobalFuncs.randGen has only one value
bbms.GlobalFuncs.randGen != null
bbms.GlobalFuncs.randGen.mt has only one value
bbms.GlobalFuncs.randGen.mt != null
bbms.GlobalFuncs.randGen.mti >= 1
bbms.GlobalFuncs.randGen.mag01 has only one value
bbms.GlobalFuncs.randGen.mag01 != null
bbms.GlobalFuncs.randGen.mag01[] == [0, -1727483681]
bbms.GlobalFuncs.randGen.mag01[] elements one of { -1727483681, 0 }
bbms.GlobalFuncs.randGen.mag01[] sorted by >
bbms.GlobalFuncs.randGen.__nextNextGaussian == 0.0
bbms.GlobalFuncs.randGen.__haveNextNextGaussian == false
size(hex.MiniMapEnum.$VALUES[]) == 3
size(unit.FitnessTypeEnum.$VALUES[]) == 4
size(unit.OrganismTypeEnum.$VALUES[]) == 5
size(bbms.GlobalFuncs.randGen.mt[]) == 624
size(bbms.GlobalFuncs.randGen.mag01[]) == 2
hex.MiniMapEnum.$VALUES.getClass().getName() != unit.FitnessTypeEnum.$VALUES.getClass().getName()
hex.MiniMapEnum.$VALUES.getClass().getName() != unit.OrganismTypeEnum.$VALUES.getClass().getName()
unit.FitnessTypeEnum.$VALUES.getClass().getName() != unit.OrganismTypeEnum.$VALUES.getClass().getName()
===========================================================================
bbms.GlobalFuncs.randFloat():::ENTER
===========================================================================
bbms.GlobalFuncs.randFloat():::EXIT
bbms.GlobalFuncs.gui == orig(bbms.GlobalFuncs.gui)
bbms.GlobalFuncs.scenMap == orig(bbms.GlobalFuncs.scenMap)
bbms.GlobalFuncs.mapInitialized == orig(bbms.GlobalFuncs.mapInitialized)
bbms.GlobalFuncs.clockInitialized == orig(bbms.GlobalFuncs.clockInitialized)
bbms.GlobalFuncs.placeUnit == orig(bbms.GlobalFuncs.placeUnit)
bbms.GlobalFuncs.showShaded == orig(bbms.GlobalFuncs.showShaded)
bbms.GlobalFuncs.showVapor == orig(bbms.GlobalFuncs.showVapor)
bbms.GlobalFuncs.showLOS == orig(bbms.GlobalFuncs.showLOS)
bbms.GlobalFuncs.showFOW == orig(bbms.GlobalFuncs.showFOW)
bbms.GlobalFuncs.showWPs == orig(bbms.GlobalFuncs.showWPs)
bbms.GlobalFuncs.miniMapSize == orig(bbms.GlobalFuncs.miniMapSize)
bbms.GlobalFuncs.updateVapor == orig(bbms.GlobalFuncs.updateVapor)
bbms.GlobalFuncs.shareTeamFit == orig(bbms.GlobalFuncs.shareTeamFit)
bbms.GlobalFuncs.RotateHull == orig(bbms.GlobalFuncs.RotateHull)
bbms.GlobalFuncs.runningTest == orig(bbms.GlobalFuncs.runningTest)
bbms.GlobalFuncs.displayMiniMap == orig(bbms.GlobalFuncs.displayMiniMap)
bbms.GlobalFuncs.MiniMapType == orig(bbms.GlobalFuncs.MiniMapType)
bbms.GlobalFuncs.MiniMapType == orig(hex.MiniMapEnum.TERRAIN)
hex.MiniMapEnum.VAPOR_AMT == orig(hex.MiniMapEnum.VAPOR_AMT)
hex.MiniMapEnum.VAPOR_DV == orig(hex.MiniMapEnum.VAPOR_DV)
hex.MiniMapEnum.$VALUES == orig(hex.MiniMapEnum.$VALUES)
hex.MiniMapEnum.$VALUES.getClass().getName() == orig(hex.MiniMapEnum.$VALUES.getClass().getName())
hex.MiniMapEnum.$VALUES[] == orig(hex.MiniMapEnum.$VALUES[])
bbms.GlobalFuncs.networkResultThreshold == orig(bbms.GlobalFuncs.networkResultThreshold)
bbms.GlobalFuncs.mutateProbability == orig(bbms.GlobalFuncs.mutateProbability)
bbms.GlobalFuncs.epochInterval == orig(bbms.GlobalFuncs.epochInterval)
bbms.GlobalFuncs.dirPrefix == orig(bbms.GlobalFuncs.dirPrefix)
bbms.GlobalFuncs.dirPrefix.toString == orig(bbms.GlobalFuncs.dirPrefix.toString)
bbms.GlobalFuncs.deathPenalty == orig(bbms.GlobalFuncs.deathPenalty)
bbms.GlobalFuncs.defaultFitType == orig(bbms.GlobalFuncs.defaultFitType)
bbms.GlobalFuncs.defaultFitType == orig(unit.FitnessTypeEnum.SIMPLE_GREEDY)
unit.FitnessTypeEnum.SHARED_SPOTTING == orig(unit.FitnessTypeEnum.SHARED_SPOTTING)
unit.FitnessTypeEnum.SOVIET_COMMUNISM == orig(unit.FitnessTypeEnum.SOVIET_COMMUNISM)
unit.FitnessTypeEnum.FULL_COMMUNISM == orig(unit.FitnessTypeEnum.FULL_COMMUNISM)
unit.FitnessTypeEnum.$VALUES == orig(unit.FitnessTypeEnum.$VALUES)
unit.FitnessTypeEnum.$VALUES.getClass().getName() == orig(unit.FitnessTypeEnum.$VALUES.getClass().getName())
unit.FitnessTypeEnum.$VALUES[] == orig(unit.FitnessTypeEnum.$VALUES[])
bbms.GlobalFuncs.unitList == orig(bbms.GlobalFuncs.unitList)
bbms.GlobalFuncs.unitList[] == orig(bbms.GlobalFuncs.unitList[])
bbms.GlobalFuncs.friendlyUnitList == orig(bbms.GlobalFuncs.friendlyUnitList)
bbms.GlobalFuncs.friendlyUnitList[] == orig(bbms.GlobalFuncs.friendlyUnitList[])
bbms.GlobalFuncs.enemyUnitList == orig(bbms.GlobalFuncs.enemyUnitList)
bbms.GlobalFuncs.enemyUnitList[] == orig(bbms.GlobalFuncs.enemyUnitList[])
bbms.GlobalFuncs.destroyedUnitList == orig(bbms.GlobalFuncs.destroyedUnitList)
bbms.GlobalFuncs.destroyedUnitList[] == orig(bbms.GlobalFuncs.destroyedUnitList[])
bbms.GlobalFuncs.selectedHex == orig(bbms.GlobalFuncs.selectedHex)
bbms.GlobalFuncs.selectedUnit == orig(bbms.GlobalFuncs.selectedUnit)
unit.OrganismTypeEnum.SIMPLE_SINGLE == orig(unit.OrganismTypeEnum.SIMPLE_SINGLE)
unit.OrganismTypeEnum.SIMPLE_DUAL == orig(unit.OrganismTypeEnum.SIMPLE_DUAL)
unit.OrganismTypeEnum.SIX_DIRECTIONAL == orig(unit.OrganismTypeEnum.SIX_DIRECTIONAL)
unit.OrganismTypeEnum.BASE_RANDOM == orig(unit.OrganismTypeEnum.BASE_RANDOM)
unit.OrganismTypeEnum.BASE_MAXHEX == orig(unit.OrganismTypeEnum.BASE_MAXHEX)
unit.OrganismTypeEnum.maxObservedDV == orig(unit.OrganismTypeEnum.maxObservedDV)
unit.OrganismTypeEnum.$VALUES == orig(unit.OrganismTypeEnum.$VALUES)
unit.OrganismTypeEnum.$VALUES.getClass().getName() == orig(unit.OrganismTypeEnum.$VALUES.getClass().getName())
unit.OrganismTypeEnum.$VALUES[] == orig(unit.OrganismTypeEnum.$VALUES[])
bbms.GlobalFuncs.defaultOrgType == orig(bbms.GlobalFuncs.defaultOrgType)
bbms.GlobalFuncs.calcShared == orig(bbms.GlobalFuncs.calcShared)
bbms.GlobalFuncs.forceTreePlacement == orig(bbms.GlobalFuncs.forceTreePlacement)
bbms.GlobalFuncs.currentPop == orig(bbms.GlobalFuncs.currentPop)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.tempStr)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.outputPrefix)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.inputPrefix)
bbms.GlobalFuncs.tempStr.toString == orig(bbms.GlobalFuncs.tempStr.toString)
bbms.GlobalFuncs.orgAssignNum == orig(bbms.GlobalFuncs.orgAssignNum)
bbms.GlobalFuncs.maxRunsPerOrg == orig(bbms.GlobalFuncs.maxRunsPerOrg)
bbms.GlobalFuncs.numTests == orig(bbms.GlobalFuncs.numTests)
bbms.GlobalFuncs.numDifferentTests == orig(bbms.GlobalFuncs.numDifferentTests)
bbms.GlobalFuncs.detailedOutput == orig(bbms.GlobalFuncs.detailedOutput)
bbms.GlobalFuncs.summaryOutput == orig(bbms.GlobalFuncs.summaryOutput)
bbms.GlobalFuncs.fullIterOutput == orig(bbms.GlobalFuncs.fullIterOutput)
bbms.GlobalFuncs.targetPop == orig(bbms.GlobalFuncs.targetPop)
bbms.GlobalFuncs.currentTestPath == orig(bbms.GlobalFuncs.currentTestPath)
bbms.GlobalFuncs.outputPrefix.toString == orig(bbms.GlobalFuncs.outputPrefix.toString)
bbms.GlobalFuncs.inputPrefix.toString == orig(bbms.GlobalFuncs.inputPrefix.toString)
bbms.GlobalFuncs.percentPerRun == orig(bbms.GlobalFuncs.percentPerRun)
bbms.GlobalFuncs.currentRunsPerOrg == orig(bbms.GlobalFuncs.currentRunsPerOrg)
bbms.GlobalFuncs.iterationCount == orig(bbms.GlobalFuncs.iterationCount)
bbms.GlobalFuncs.numScoutsPer == orig(bbms.GlobalFuncs.numScoutsPer)
bbms.GlobalFuncs.curEpoch == orig(bbms.GlobalFuncs.curEpoch)
bbms.GlobalFuncs.maxEpochs == orig(bbms.GlobalFuncs.maxEpochs)
bbms.GlobalFuncs.pauseNewIter == orig(bbms.GlobalFuncs.pauseNewIter)
bbms.GlobalFuncs.pauseNewEpoch == orig(bbms.GlobalFuncs.pauseNewEpoch)
bbms.GlobalFuncs.newEpoch == orig(bbms.GlobalFuncs.newEpoch)
bbms.GlobalFuncs.randCOAEpoch == orig(bbms.GlobalFuncs.randCOAEpoch)
bbms.GlobalFuncs.currentPopEpochNum == orig(bbms.GlobalFuncs.currentPopEpochNum)
bbms.GlobalFuncs.spottedSoFar == orig(bbms.GlobalFuncs.spottedSoFar)
bbms.GlobalFuncs.maxPossibleSpots == orig(bbms.GlobalFuncs.maxPossibleSpots)
bbms.GlobalFuncs.moveRateMult == orig(bbms.GlobalFuncs.moveRateMult)
bbms.GlobalFuncs.COAIndex == orig(bbms.GlobalFuncs.COAIndex)
bbms.GlobalFuncs.curCOA == orig(bbms.GlobalFuncs.curCOA)
bbms.GlobalFuncs.allCOAs == orig(bbms.GlobalFuncs.allCOAs)
bbms.GlobalFuncs.allCOAs[] == orig(bbms.GlobalFuncs.allCOAs[])
bbms.GlobalFuncs.GameClock == orig(bbms.GlobalFuncs.GameClock)
bbms.GlobalFuncs.runtoEq == orig(bbms.GlobalFuncs.runtoEq)
bbms.GlobalFuncs.dvTolerance == orig(bbms.GlobalFuncs.dvTolerance)
bbms.GlobalFuncs.visibility == orig(bbms.GlobalFuncs.visibility)
bbms.GlobalFuncs.unitCount == orig(bbms.GlobalFuncs.unitCount)
bbms.GlobalFuncs.maxSpottedDV == orig(bbms.GlobalFuncs.maxSpottedDV)
bbms.GlobalFuncs.maxSpottedDV60 == orig(bbms.GlobalFuncs.maxSpottedDV60)
bbms.GlobalFuncs.maxsingleDV == orig(bbms.GlobalFuncs.maxsingleDV)
bbms.GlobalFuncs.flowRate == orig(bbms.GlobalFuncs.flowRate)
bbms.GlobalFuncs.flowRateCap == orig(bbms.GlobalFuncs.flowRateCap)
bbms.GlobalFuncs.flowStep == orig(bbms.GlobalFuncs.flowStep)
bbms.GlobalFuncs.flowCheck == orig(bbms.GlobalFuncs.flowCheck)
bbms.GlobalFuncs.reduceRate == orig(bbms.GlobalFuncs.reduceRate)
bbms.GlobalFuncs.fixSlowRate == orig(bbms.GlobalFuncs.fixSlowRate)
bbms.GlobalFuncs.maxDelta == orig(bbms.GlobalFuncs.maxDelta)
bbms.GlobalFuncs.ticksStable == orig(bbms.GlobalFuncs.ticksStable)
bbms.GlobalFuncs.totalVapor == orig(bbms.GlobalFuncs.totalVapor)
bbms.GlobalFuncs.totalVaporDelta == orig(bbms.GlobalFuncs.totalVaporDelta)
bbms.GlobalFuncs.allSpots == orig(bbms.GlobalFuncs.allSpots)
bbms.GlobalFuncs.allSpots.records == orig(bbms.GlobalFuncs.allSpots.records)
bbms.GlobalFuncs.allSpots.records[] == orig(bbms.GlobalFuncs.allSpots.records[])
bbms.GlobalFuncs.randGen == orig(bbms.GlobalFuncs.randGen)
bbms.GlobalFuncs.randGen.mt == orig(bbms.GlobalFuncs.randGen.mt)
bbms.GlobalFuncs.randGen.mag01 == orig(bbms.GlobalFuncs.randGen.mag01)
bbms.GlobalFuncs.randGen.mag01[] == orig(bbms.GlobalFuncs.randGen.mag01[])
bbms.GlobalFuncs.randGen.__nextNextGaussian == orig(bbms.GlobalFuncs.randGen.__nextNextGaussian)
bbms.GlobalFuncs.randGen.__haveNextNextGaussian == orig(bbms.GlobalFuncs.randGen.__haveNextNextGaussian)
size(bbms.GlobalFuncs.randGen.mt[]) == orig(size(bbms.GlobalFuncs.randGen.mt[]))
bbms.GlobalFuncs.randGen.mti != orig(bbms.GlobalFuncs.randGen.mti)
===========================================================================
bbms.GlobalFuncs.randPosNeg():::ENTER
===========================================================================
bbms.GlobalFuncs.randPosNeg():::EXIT186
bbms.GlobalFuncs.randGen.mt[] == orig(bbms.GlobalFuncs.randGen.mt[])
return == -1
bbms.GlobalFuncs.randGen.mti - orig(bbms.GlobalFuncs.randGen.mti) - 1 == 0
===========================================================================
bbms.GlobalFuncs.randPosNeg():::EXIT187
return == 1
===========================================================================
bbms.GlobalFuncs.randPosNeg():::EXIT
bbms.GlobalFuncs.gui == orig(bbms.GlobalFuncs.gui)
bbms.GlobalFuncs.scenMap == orig(bbms.GlobalFuncs.scenMap)
bbms.GlobalFuncs.mapInitialized == orig(bbms.GlobalFuncs.mapInitialized)
bbms.GlobalFuncs.clockInitialized == orig(bbms.GlobalFuncs.clockInitialized)
bbms.GlobalFuncs.placeUnit == orig(bbms.GlobalFuncs.placeUnit)
bbms.GlobalFuncs.showShaded == orig(bbms.GlobalFuncs.showShaded)
bbms.GlobalFuncs.showVapor == orig(bbms.GlobalFuncs.showVapor)
bbms.GlobalFuncs.showLOS == orig(bbms.GlobalFuncs.showLOS)
bbms.GlobalFuncs.showFOW == orig(bbms.GlobalFuncs.showFOW)
bbms.GlobalFuncs.showWPs == orig(bbms.GlobalFuncs.showWPs)
bbms.GlobalFuncs.miniMapSize == orig(bbms.GlobalFuncs.miniMapSize)
bbms.GlobalFuncs.updateVapor == orig(bbms.GlobalFuncs.updateVapor)
bbms.GlobalFuncs.shareTeamFit == orig(bbms.GlobalFuncs.shareTeamFit)
bbms.GlobalFuncs.RotateHull == orig(bbms.GlobalFuncs.RotateHull)
bbms.GlobalFuncs.runningTest == orig(bbms.GlobalFuncs.runningTest)
bbms.GlobalFuncs.displayMiniMap == orig(bbms.GlobalFuncs.displayMiniMap)
bbms.GlobalFuncs.MiniMapType == orig(bbms.GlobalFuncs.MiniMapType)
bbms.GlobalFuncs.MiniMapType == orig(hex.MiniMapEnum.TERRAIN)
hex.MiniMapEnum.VAPOR_AMT == orig(hex.MiniMapEnum.VAPOR_AMT)
hex.MiniMapEnum.VAPOR_DV == orig(hex.MiniMapEnum.VAPOR_DV)
hex.MiniMapEnum.$VALUES == orig(hex.MiniMapEnum.$VALUES)
hex.MiniMapEnum.$VALUES.getClass().getName() == orig(hex.MiniMapEnum.$VALUES.getClass().getName())
hex.MiniMapEnum.$VALUES[] == orig(hex.MiniMapEnum.$VALUES[])
bbms.GlobalFuncs.networkResultThreshold == orig(bbms.GlobalFuncs.networkResultThreshold)
bbms.GlobalFuncs.mutateProbability == orig(bbms.GlobalFuncs.mutateProbability)
bbms.GlobalFuncs.epochInterval == orig(bbms.GlobalFuncs.epochInterval)
bbms.GlobalFuncs.dirPrefix == orig(bbms.GlobalFuncs.dirPrefix)
bbms.GlobalFuncs.dirPrefix.toString == orig(bbms.GlobalFuncs.dirPrefix.toString)
bbms.GlobalFuncs.deathPenalty == orig(bbms.GlobalFuncs.deathPenalty)
bbms.GlobalFuncs.defaultFitType == orig(bbms.GlobalFuncs.defaultFitType)
bbms.GlobalFuncs.defaultFitType == orig(unit.FitnessTypeEnum.SIMPLE_GREEDY)
unit.FitnessTypeEnum.SHARED_SPOTTING == orig(unit.FitnessTypeEnum.SHARED_SPOTTING)
unit.FitnessTypeEnum.SOVIET_COMMUNISM == orig(unit.FitnessTypeEnum.SOVIET_COMMUNISM)
unit.FitnessTypeEnum.FULL_COMMUNISM == orig(unit.FitnessTypeEnum.FULL_COMMUNISM)
unit.FitnessTypeEnum.$VALUES == orig(unit.FitnessTypeEnum.$VALUES)
unit.FitnessTypeEnum.$VALUES.getClass().getName() == orig(unit.FitnessTypeEnum.$VALUES.getClass().getName())
unit.FitnessTypeEnum.$VALUES[] == orig(unit.FitnessTypeEnum.$VALUES[])
bbms.GlobalFuncs.unitList == orig(bbms.GlobalFuncs.unitList)
bbms.GlobalFuncs.unitList[] == orig(bbms.GlobalFuncs.unitList[])
bbms.GlobalFuncs.friendlyUnitList == orig(bbms.GlobalFuncs.friendlyUnitList)
bbms.GlobalFuncs.friendlyUnitList[] == orig(bbms.GlobalFuncs.friendlyUnitList[])
bbms.GlobalFuncs.enemyUnitList == orig(bbms.GlobalFuncs.enemyUnitList)
bbms.GlobalFuncs.enemyUnitList[] == orig(bbms.GlobalFuncs.enemyUnitList[])
bbms.GlobalFuncs.destroyedUnitList == orig(bbms.GlobalFuncs.destroyedUnitList)
bbms.GlobalFuncs.destroyedUnitList[] == orig(bbms.GlobalFuncs.destroyedUnitList[])
bbms.GlobalFuncs.selectedHex == orig(bbms.GlobalFuncs.selectedHex)
bbms.GlobalFuncs.selectedUnit == orig(bbms.GlobalFuncs.selectedUnit)
unit.OrganismTypeEnum.SIMPLE_SINGLE == orig(unit.OrganismTypeEnum.SIMPLE_SINGLE)
unit.OrganismTypeEnum.SIMPLE_DUAL == orig(unit.OrganismTypeEnum.SIMPLE_DUAL)
unit.OrganismTypeEnum.SIX_DIRECTIONAL == orig(unit.OrganismTypeEnum.SIX_DIRECTIONAL)
unit.OrganismTypeEnum.BASE_RANDOM == orig(unit.OrganismTypeEnum.BASE_RANDOM)
unit.OrganismTypeEnum.BASE_MAXHEX == orig(unit.OrganismTypeEnum.BASE_MAXHEX)
unit.OrganismTypeEnum.maxObservedDV == orig(unit.OrganismTypeEnum.maxObservedDV)
unit.OrganismTypeEnum.$VALUES == orig(unit.OrganismTypeEnum.$VALUES)
unit.OrganismTypeEnum.$VALUES.getClass().getName() == orig(unit.OrganismTypeEnum.$VALUES.getClass().getName())
unit.OrganismTypeEnum.$VALUES[] == orig(unit.OrganismTypeEnum.$VALUES[])
bbms.GlobalFuncs.defaultOrgType == orig(bbms.GlobalFuncs.defaultOrgType)
bbms.GlobalFuncs.calcShared == orig(bbms.GlobalFuncs.calcShared)
bbms.GlobalFuncs.forceTreePlacement == orig(bbms.GlobalFuncs.forceTreePlacement)
bbms.GlobalFuncs.currentPop == orig(bbms.GlobalFuncs.currentPop)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.tempStr)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.outputPrefix)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.inputPrefix)
bbms.GlobalFuncs.tempStr.toString == orig(bbms.GlobalFuncs.tempStr.toString)
bbms.GlobalFuncs.orgAssignNum == orig(bbms.GlobalFuncs.orgAssignNum)
bbms.GlobalFuncs.maxRunsPerOrg == orig(bbms.GlobalFuncs.maxRunsPerOrg)
bbms.GlobalFuncs.numTests == orig(bbms.GlobalFuncs.numTests)
bbms.GlobalFuncs.numDifferentTests == orig(bbms.GlobalFuncs.numDifferentTests)
bbms.GlobalFuncs.detailedOutput == orig(bbms.GlobalFuncs.detailedOutput)
bbms.GlobalFuncs.summaryOutput == orig(bbms.GlobalFuncs.summaryOutput)
bbms.GlobalFuncs.fullIterOutput == orig(bbms.GlobalFuncs.fullIterOutput)
bbms.GlobalFuncs.targetPop == orig(bbms.GlobalFuncs.targetPop)
bbms.GlobalFuncs.currentTestPath == orig(bbms.GlobalFuncs.currentTestPath)
bbms.GlobalFuncs.outputPrefix.toString == orig(bbms.GlobalFuncs.outputPrefix.toString)
bbms.GlobalFuncs.inputPrefix.toString == orig(bbms.GlobalFuncs.inputPrefix.toString)
bbms.GlobalFuncs.percentPerRun == orig(bbms.GlobalFuncs.percentPerRun)
bbms.GlobalFuncs.currentRunsPerOrg == orig(bbms.GlobalFuncs.currentRunsPerOrg)
bbms.GlobalFuncs.iterationCount == orig(bbms.GlobalFuncs.iterationCount)
bbms.GlobalFuncs.numScoutsPer == orig(bbms.GlobalFuncs.numScoutsPer)
bbms.GlobalFuncs.curEpoch == orig(bbms.GlobalFuncs.curEpoch)
bbms.GlobalFuncs.maxEpochs == orig(bbms.GlobalFuncs.maxEpochs)
bbms.GlobalFuncs.pauseNewIter == orig(bbms.GlobalFuncs.pauseNewIter)
bbms.GlobalFuncs.pauseNewEpoch == orig(bbms.GlobalFuncs.pauseNewEpoch)
bbms.GlobalFuncs.newEpoch == orig(bbms.GlobalFuncs.newEpoch)
bbms.GlobalFuncs.randCOAEpoch == orig(bbms.GlobalFuncs.randCOAEpoch)
bbms.GlobalFuncs.currentPopEpochNum == orig(bbms.GlobalFuncs.currentPopEpochNum)
bbms.GlobalFuncs.spottedSoFar == orig(bbms.GlobalFuncs.spottedSoFar)
bbms.GlobalFuncs.maxPossibleSpots == orig(bbms.GlobalFuncs.maxPossibleSpots)
bbms.GlobalFuncs.moveRateMult == orig(bbms.GlobalFuncs.moveRateMult)
bbms.GlobalFuncs.COAIndex == orig(bbms.GlobalFuncs.COAIndex)
bbms.GlobalFuncs.curCOA == orig(bbms.GlobalFuncs.curCOA)
bbms.GlobalFuncs.allCOAs == orig(bbms.GlobalFuncs.allCOAs)
bbms.GlobalFuncs.allCOAs[] == orig(bbms.GlobalFuncs.allCOAs[])
bbms.GlobalFuncs.GameClock == orig(bbms.GlobalFuncs.GameClock)
bbms.GlobalFuncs.runtoEq == orig(bbms.GlobalFuncs.runtoEq)
bbms.GlobalFuncs.dvTolerance == orig(bbms.GlobalFuncs.dvTolerance)
bbms.GlobalFuncs.visibility == orig(bbms.GlobalFuncs.visibility)
bbms.GlobalFuncs.unitCount == orig(bbms.GlobalFuncs.unitCount)
bbms.GlobalFuncs.maxSpottedDV == orig(bbms.GlobalFuncs.maxSpottedDV)
bbms.GlobalFuncs.maxSpottedDV60 == orig(bbms.GlobalFuncs.maxSpottedDV60)
bbms.GlobalFuncs.maxsingleDV == orig(bbms.GlobalFuncs.maxsingleDV)
bbms.GlobalFuncs.flowRate == orig(bbms.GlobalFuncs.flowRate)
bbms.GlobalFuncs.flowRateCap == orig(bbms.GlobalFuncs.flowRateCap)
bbms.GlobalFuncs.flowStep == orig(bbms.GlobalFuncs.flowStep)
bbms.GlobalFuncs.flowCheck == orig(bbms.GlobalFuncs.flowCheck)
bbms.GlobalFuncs.reduceRate == orig(bbms.GlobalFuncs.reduceRate)
bbms.GlobalFuncs.fixSlowRate == orig(bbms.GlobalFuncs.fixSlowRate)
bbms.GlobalFuncs.maxDelta == orig(bbms.GlobalFuncs.maxDelta)
bbms.GlobalFuncs.ticksStable == orig(bbms.GlobalFuncs.ticksStable)
bbms.GlobalFuncs.totalVapor == orig(bbms.GlobalFuncs.totalVapor)
bbms.GlobalFuncs.totalVaporDelta == orig(bbms.GlobalFuncs.totalVaporDelta)
bbms.GlobalFuncs.allSpots == orig(bbms.GlobalFuncs.allSpots)
bbms.GlobalFuncs.allSpots.records == orig(bbms.GlobalFuncs.allSpots.records)
bbms.GlobalFuncs.allSpots.records[] == orig(bbms.GlobalFuncs.allSpots.records[])
bbms.GlobalFuncs.randGen == orig(bbms.GlobalFuncs.randGen)
bbms.GlobalFuncs.randGen.mt == orig(bbms.GlobalFuncs.randGen.mt)
bbms.GlobalFuncs.randGen.mag01 == orig(bbms.GlobalFuncs.randGen.mag01)
bbms.GlobalFuncs.randGen.mag01[] == orig(bbms.GlobalFuncs.randGen.mag01[])
bbms.GlobalFuncs.randGen.__nextNextGaussian == orig(bbms.GlobalFuncs.randGen.__nextNextGaussian)
bbms.GlobalFuncs.randGen.__haveNextNextGaussian == orig(bbms.GlobalFuncs.randGen.__haveNextNextGaussian)
size(bbms.GlobalFuncs.randGen.mt[]) == orig(size(bbms.GlobalFuncs.randGen.mt[]))
(return == -1)  ==>  (bbms.GlobalFuncs.randGen.mt[] == orig(bbms.GlobalFuncs.randGen.mt[]))
(return == -1)  ==>  (bbms.GlobalFuncs.randGen.mti - orig(bbms.GlobalFuncs.randGen.mti) - 1 == 0)
return one of { -1, 1 }
return != 0
bbms.GlobalFuncs.randGen.mt[] >= orig(bbms.GlobalFuncs.randGen.mt[]) (lexically)
bbms.GlobalFuncs.randGen.mti != orig(bbms.GlobalFuncs.randGen.mti)
===========================================================================
bbms.GlobalFuncs.randRange(int, int):::ENTER
arg0 == 0
arg1 >= 0
arg0 <= arg1
===========================================================================
bbms.GlobalFuncs.randRange(int, int):::EXIT
bbms.GlobalFuncs.gui == orig(bbms.GlobalFuncs.gui)
bbms.GlobalFuncs.scenMap == orig(bbms.GlobalFuncs.scenMap)
bbms.GlobalFuncs.mapInitialized == orig(bbms.GlobalFuncs.mapInitialized)
bbms.GlobalFuncs.clockInitialized == orig(bbms.GlobalFuncs.clockInitialized)
bbms.GlobalFuncs.placeUnit == orig(bbms.GlobalFuncs.placeUnit)
bbms.GlobalFuncs.showShaded == orig(bbms.GlobalFuncs.showShaded)
bbms.GlobalFuncs.showVapor == orig(bbms.GlobalFuncs.showVapor)
bbms.GlobalFuncs.showLOS == orig(bbms.GlobalFuncs.showLOS)
bbms.GlobalFuncs.showFOW == orig(bbms.GlobalFuncs.showFOW)
bbms.GlobalFuncs.showWPs == orig(bbms.GlobalFuncs.showWPs)
bbms.GlobalFuncs.miniMapSize == orig(bbms.GlobalFuncs.miniMapSize)
bbms.GlobalFuncs.updateVapor == orig(bbms.GlobalFuncs.updateVapor)
bbms.GlobalFuncs.shareTeamFit == orig(bbms.GlobalFuncs.shareTeamFit)
bbms.GlobalFuncs.RotateHull == orig(bbms.GlobalFuncs.RotateHull)
bbms.GlobalFuncs.runningTest == orig(bbms.GlobalFuncs.runningTest)
bbms.GlobalFuncs.displayMiniMap == orig(bbms.GlobalFuncs.displayMiniMap)
bbms.GlobalFuncs.MiniMapType == orig(bbms.GlobalFuncs.MiniMapType)
bbms.GlobalFuncs.MiniMapType == orig(hex.MiniMapEnum.TERRAIN)
hex.MiniMapEnum.VAPOR_AMT == orig(hex.MiniMapEnum.VAPOR_AMT)
hex.MiniMapEnum.VAPOR_DV == orig(hex.MiniMapEnum.VAPOR_DV)
hex.MiniMapEnum.$VALUES == orig(hex.MiniMapEnum.$VALUES)
hex.MiniMapEnum.$VALUES.getClass().getName() == orig(hex.MiniMapEnum.$VALUES.getClass().getName())
hex.MiniMapEnum.$VALUES[] == orig(hex.MiniMapEnum.$VALUES[])
bbms.GlobalFuncs.networkResultThreshold == orig(bbms.GlobalFuncs.networkResultThreshold)
bbms.GlobalFuncs.mutateProbability == orig(bbms.GlobalFuncs.mutateProbability)
bbms.GlobalFuncs.epochInterval == orig(bbms.GlobalFuncs.epochInterval)
bbms.GlobalFuncs.dirPrefix == orig(bbms.GlobalFuncs.dirPrefix)
bbms.GlobalFuncs.dirPrefix.toString == orig(bbms.GlobalFuncs.dirPrefix.toString)
bbms.GlobalFuncs.deathPenalty == orig(bbms.GlobalFuncs.deathPenalty)
bbms.GlobalFuncs.defaultFitType == orig(bbms.GlobalFuncs.defaultFitType)
bbms.GlobalFuncs.defaultFitType == orig(unit.FitnessTypeEnum.SIMPLE_GREEDY)
unit.FitnessTypeEnum.SHARED_SPOTTING == orig(unit.FitnessTypeEnum.SHARED_SPOTTING)
unit.FitnessTypeEnum.SOVIET_COMMUNISM == orig(unit.FitnessTypeEnum.SOVIET_COMMUNISM)
unit.FitnessTypeEnum.FULL_COMMUNISM == orig(unit.FitnessTypeEnum.FULL_COMMUNISM)
unit.FitnessTypeEnum.$VALUES == orig(unit.FitnessTypeEnum.$VALUES)
unit.FitnessTypeEnum.$VALUES.getClass().getName() == orig(unit.FitnessTypeEnum.$VALUES.getClass().getName())
unit.FitnessTypeEnum.$VALUES[] == orig(unit.FitnessTypeEnum.$VALUES[])
bbms.GlobalFuncs.unitList == orig(bbms.GlobalFuncs.unitList)
bbms.GlobalFuncs.unitList[] == orig(bbms.GlobalFuncs.unitList[])
bbms.GlobalFuncs.friendlyUnitList == orig(bbms.GlobalFuncs.friendlyUnitList)
bbms.GlobalFuncs.friendlyUnitList[] == orig(bbms.GlobalFuncs.friendlyUnitList[])
bbms.GlobalFuncs.enemyUnitList == orig(bbms.GlobalFuncs.enemyUnitList)
bbms.GlobalFuncs.enemyUnitList[] == orig(bbms.GlobalFuncs.enemyUnitList[])
bbms.GlobalFuncs.destroyedUnitList == orig(bbms.GlobalFuncs.destroyedUnitList)
bbms.GlobalFuncs.destroyedUnitList[] == orig(bbms.GlobalFuncs.destroyedUnitList[])
bbms.GlobalFuncs.selectedHex == orig(bbms.GlobalFuncs.selectedHex)
bbms.GlobalFuncs.selectedUnit == orig(bbms.GlobalFuncs.selectedUnit)
unit.OrganismTypeEnum.SIMPLE_SINGLE == orig(unit.OrganismTypeEnum.SIMPLE_SINGLE)
unit.OrganismTypeEnum.SIMPLE_DUAL == orig(unit.OrganismTypeEnum.SIMPLE_DUAL)
unit.OrganismTypeEnum.SIX_DIRECTIONAL == orig(unit.OrganismTypeEnum.SIX_DIRECTIONAL)
unit.OrganismTypeEnum.BASE_RANDOM == orig(unit.OrganismTypeEnum.BASE_RANDOM)
unit.OrganismTypeEnum.BASE_MAXHEX == orig(unit.OrganismTypeEnum.BASE_MAXHEX)
unit.OrganismTypeEnum.maxObservedDV == orig(unit.OrganismTypeEnum.maxObservedDV)
unit.OrganismTypeEnum.$VALUES == orig(unit.OrganismTypeEnum.$VALUES)
unit.OrganismTypeEnum.$VALUES.getClass().getName() == orig(unit.OrganismTypeEnum.$VALUES.getClass().getName())
unit.OrganismTypeEnum.$VALUES[] == orig(unit.OrganismTypeEnum.$VALUES[])
bbms.GlobalFuncs.defaultOrgType == orig(bbms.GlobalFuncs.defaultOrgType)
bbms.GlobalFuncs.calcShared == orig(bbms.GlobalFuncs.calcShared)
bbms.GlobalFuncs.forceTreePlacement == orig(bbms.GlobalFuncs.forceTreePlacement)
bbms.GlobalFuncs.currentPop == orig(bbms.GlobalFuncs.currentPop)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.tempStr)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.outputPrefix)
bbms.GlobalFuncs.tempStr == orig(bbms.GlobalFuncs.inputPrefix)
bbms.GlobalFuncs.tempStr.toString == orig(bbms.GlobalFuncs.tempStr.toString)
bbms.GlobalFuncs.orgAssignNum == orig(bbms.GlobalFuncs.orgAssignNum)
bbms.GlobalFuncs.maxRunsPerOrg == orig(bbms.GlobalFuncs.maxRunsPerOrg)
bbms.GlobalFuncs.numTests == orig(bbms.GlobalFuncs.numTests)
bbms.GlobalFuncs.numDifferentTests == orig(bbms.GlobalFuncs.numDifferentTests)
bbms.GlobalFuncs.detailedOutput == orig(bbms.GlobalFuncs.detailedOutput)
bbms.GlobalFuncs.summaryOutput == orig(bbms.GlobalFuncs.summaryOutput)
bbms.GlobalFuncs.fullIterOutput == orig(bbms.GlobalFuncs.fullIterOutput)
bbms.GlobalFuncs.targetPop == orig(bbms.GlobalFuncs.targetPop)
bbms.GlobalFuncs.currentTestPath == orig(bbms.GlobalFuncs.currentTestPath)
bbms.GlobalFuncs.outputPrefix.toString == orig(bbms.GlobalFuncs.outputPrefix.toString)
bbms.GlobalFuncs.inputPrefix.toString == orig(bbms.GlobalFuncs.inputPrefix.toString)
bbms.GlobalFuncs.percentPerRun == orig(bbms.GlobalFuncs.percentPerRun)
bbms.GlobalFuncs.currentRunsPerOrg == orig(bbms.GlobalFuncs.currentRunsPerOrg)
bbms.GlobalFuncs.iterationCount == orig(bbms.GlobalFuncs.iterationCount)
bbms.GlobalFuncs.numScoutsPer == orig(bbms.GlobalFuncs.numScoutsPer)
bbms.GlobalFuncs.curEpoch == orig(bbms.GlobalFuncs.curEpoch)
bbms.GlobalFuncs.maxEpochs == orig(bbms.GlobalFuncs.maxEpochs)
bbms.GlobalFuncs.pauseNewIter == orig(bbms.GlobalFuncs.pauseNewIter)
bbms.GlobalFuncs.pauseNewEpoch == orig(bbms.GlobalFuncs.pauseNewEpoch)
bbms.GlobalFuncs.newEpoch == orig(bbms.GlobalFuncs.newEpoch)
bbms.GlobalFuncs.randCOAEpoch == orig(bbms.GlobalFuncs.randCOAEpoch)
bbms.GlobalFuncs.currentPopEpochNum == orig(bbms.GlobalFuncs.currentPopEpochNum)
bbms.GlobalFuncs.spottedSoFar == orig(bbms.GlobalFuncs.spottedSoFar)
bbms.GlobalFuncs.maxPossibleSpots == orig(bbms.GlobalFuncs.maxPossibleSpots)
bbms.GlobalFuncs.moveRateMult == orig(bbms.GlobalFuncs.moveRateMult)
bbms.GlobalFuncs.COAIndex == orig(bbms.GlobalFuncs.COAIndex)
bbms.GlobalFuncs.curCOA == orig(bbms.GlobalFuncs.curCOA)
bbms.GlobalFuncs.allCOAs == orig(bbms.GlobalFuncs.allCOAs)
bbms.GlobalFuncs.allCOAs[] == orig(bbms.GlobalFuncs.allCOAs[])
bbms.GlobalFuncs.GameClock == orig(bbms.GlobalFuncs.GameClock)
bbms.GlobalFuncs.runtoEq == orig(bbms.GlobalFuncs.runtoEq)
bbms.GlobalFuncs.dvTolerance == orig(bbms.GlobalFuncs.dvTolerance)
bbms.GlobalFuncs.visibility == orig(bbms.GlobalFuncs.visibility)
bbms.GlobalFuncs.unitCount == orig(bbms.GlobalFuncs.unitCount)
bbms.GlobalFuncs.maxSpottedDV == orig(bbms.GlobalFuncs.maxSpottedDV)
bbms.GlobalFuncs.maxSpottedDV60 == orig(bbms.GlobalFuncs.maxSpottedDV60)
bbms.GlobalFuncs.maxsingleDV == orig(bbms.GlobalFuncs.maxsingleDV)
bbms.GlobalFuncs.flowRate == orig(bbms.GlobalFuncs.flowRate)
bbms.GlobalFuncs.flowRateCap == orig(bbms.GlobalFuncs.flowRateCap)
bbms.GlobalFuncs.flowStep == orig(bbms.GlobalFuncs.flowStep)
bbms.GlobalFuncs.flowCheck == orig(bbms.GlobalFuncs.flowCheck)
bbms.GlobalFuncs.reduceRate == orig(bbms.GlobalFuncs.reduceRate)
bbms.GlobalFuncs.fixSlowRate == orig(bbms.GlobalFuncs.fixSlowRate)
bbms.GlobalFuncs.maxDelta == orig(bbms.GlobalFuncs.maxDelta)
bbms.GlobalFuncs.ticksStable == orig(bbms.GlobalFuncs.ticksStable)
bbms.GlobalFuncs.totalVapor == orig(bbms.GlobalFuncs.totalVapor)
bbms.GlobalFuncs.totalVaporDelta == orig(bbms.GlobalFuncs.totalVaporDelta)
bbms.GlobalFuncs.allSpots == orig(bbms.GlobalFuncs.allSpots)
bbms.GlobalFuncs.allSpots.records == orig(bbms.GlobalFuncs.allSpots.records)
bbms.GlobalFuncs.allSpots.records[] == orig(bbms.GlobalFuncs.allSpots.records[])
bbms.GlobalFuncs.randGen == orig(bbms.GlobalFuncs.randGen)
bbms.GlobalFuncs.randGen.mt == orig(bbms.GlobalFuncs.randGen.mt)
bbms.GlobalFuncs.randGen.mag01 == orig(bbms.GlobalFuncs.randGen.mag01)
bbms.GlobalFuncs.randGen.mag01[] == orig(bbms.GlobalFuncs.randGen.mag01[])
bbms.GlobalFuncs.randGen.__nextNextGaussian == orig(bbms.GlobalFuncs.randGen.__nextNextGaussian)
bbms.GlobalFuncs.randGen.__haveNextNextGaussian == orig(bbms.GlobalFuncs.randGen.__haveNextNextGaussian)
size(bbms.GlobalFuncs.randGen.mt[]) == orig(size(bbms.GlobalFuncs.randGen.mt[]))
return >= 0
bbms.GlobalFuncs.randGen.mt[] <= orig(bbms.GlobalFuncs.randGen.mt[]) (lexically)
bbms.GlobalFuncs.randGen.mti != orig(bbms.GlobalFuncs.randGen.mti)
return >= orig(arg0)
return <= orig(arg1)
===========================================================================
clock.ClockThread:::OBJECT
this has only one value
this.pausedSleepCheck == 100
this.startCycle == 0
this.endCycle == 0
this.durationCycle == 0
===========================================================================
clock.ClockThread.ClockThread():::EXIT
===========================================================================
hex.MiniMapEnum:::OBJECT
===========================================================================
hex.MiniMapEnum.MiniMapEnum(java.lang.String, int):::ENTER
arg0.toString one of { "TERRAIN", "VAPOR_AMT", "VAPOR_DV" }
arg1 one of { 0, 1, 2 }
===========================================================================
hex.MiniMapEnum.MiniMapEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "TERRAIN", "VAPOR_AMT", "VAPOR_DV" }
===========================================================================
jneat.Gene:::OBJECT
this.lnk.in_node.fType == this.lnk.out_node.fType
this.lnk != null
this.lnk.weight != 0
this.lnk.bias == 0.0
this.lnk.in_node != null
this.lnk.in_node.fType has only one value
this.lnk.in_node.fType != null
this.lnk.in_node.nType != null
this.lnk.in_node.gNodeLabel != null
this.lnk.in_node.activesum == 0.0
this.lnk.in_node.activation == 0.0
this.lnk.in_node.last_activation == 0.0
this.lnk.in_node.prior_activation == 0.0
this.lnk.in_node.active_flag == false
this.lnk.in_node.is_traversed == false
this.lnk.in_node.id >= 1
this.lnk.in_node.activation_count == 0
this.lnk.in_node.inner_level == 0
this.lnk.in_node.incoming != null
this.lnk.in_node.incoming[] == []
this.lnk.in_node.incoming[].getClass().getName() == []
this.lnk.in_node.outgoing != null
this.lnk.in_node.outgoing[] == []
this.lnk.in_node.outgoing[].getClass().getName() == []
this.lnk.in_node.nodeTrait != null
this.lnk.in_node.params != null
this.lnk.in_node.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.lnk.in_node.params[] elements == 0.0
this.lnk.out_node != null
this.lnk.out_node.nType has only one value
this.lnk.out_node.nType != null
this.lnk.out_node.gNodeLabel != null
this.lnk.out_node.activesum == 0.0
this.lnk.out_node.activation == 0.0
this.lnk.out_node.last_activation == 0.0
this.lnk.out_node.prior_activation == 0.0
this.lnk.out_node.active_flag == false
this.lnk.out_node.is_traversed == false
this.lnk.out_node.id >= 2
this.lnk.out_node.activation_count == 0
this.lnk.out_node.inner_level == 0
this.lnk.out_node.incoming != null
this.lnk.out_node.incoming[] == []
this.lnk.out_node.incoming[].getClass().getName() == []
this.lnk.out_node.outgoing != null
this.lnk.out_node.outgoing[] == []
this.lnk.out_node.outgoing[].getClass().getName() == []
this.lnk.out_node.nodeTrait != null
this.lnk.out_node.params != null
this.lnk.out_node.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.lnk.out_node.params[] elements == 0.0
this.lnk.linkTrait.id >= 0
this.lnk.linkTrait.params != null
this.lnk.linkTrait.params[] elements one of { 0.0, 1.0 }
this.lnk.linkTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.lnk.linkTrait.params[] sorted by >=
this.lnk.recurrent == false
this.lnk.time_delay == false
this.lnk.is_traversed == false
this.lnk.params == null
size(this.lnk.in_node.params[]) == 8
size(this.lnk.out_node.params[]) == 8
size(this.lnk.linkTrait.params[]) == 8
this.mutation_num % this.lnk.weight == 0
this.lnk.in_node.id != this.lnk.out_node.id
this.lnk.in_node.id < this.innovation_num
this.lnk.out_node.id < this.innovation_num
===========================================================================
jneat.Gene.Gene(jneat.Gene, jneat.Trait, jneat.NNode, jneat.NNode):::ENTER
arg0.lnk.weight == arg0.mutation_num
arg2.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg3.fType
jneat.NodeTypeEnum.NEURON == arg3.nType
arg2.nodeTrait == arg3.nodeTrait
arg2.nodeTrait.id == arg3.nodeTrait.id
arg2.nodeTrait.params == arg3.nodeTrait.params
arg0 != null
arg0.lnk != null
arg0.lnk.bias == 0.0
arg0.lnk.in_node != null
arg0.lnk.out_node != null
arg0.lnk.linkTrait != null
arg0.lnk.recurrent == false
arg0.lnk.time_delay == false
arg0.lnk.is_traversed == false
arg0.lnk.params == null
arg0.mutation_num != 0
arg0.enabled == true
arg1 == null
arg2 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg2.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg2.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 1
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] == []
arg2.incoming[].getClass().getName() == []
arg2.outgoing != null
arg2.outgoing[] == []
arg2.outgoing[].getClass().getName() == []
arg2.nodeTrait != null
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue == null
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3 != null
arg3.gNodeLabel != null
arg3.activesum == 0.0
arg3.activation == 0.0
arg3.last_activation == 0.0
arg3.prior_activation == 0.0
arg3.active_flag == false
arg3.is_traversed == false
arg3.id >= 2
arg3.activation_count == 0
arg3.inner_level == 0
arg3.incoming != null
arg3.incoming[] == []
arg3.incoming[].getClass().getName() == []
arg3.outgoing != null
arg3.outgoing[] == []
arg3.outgoing[].getClass().getName() == []
arg3.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg3.nodeTrait.params[] sorted by >=
arg3.dup == null
arg3.analogue == null
arg3.params != null
arg3.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.params[] elements == 0.0
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.nodeTrait.params[]) == 8
size(arg2.params[]) == 8
size(arg3.nodeTrait.params[]) == 8
size(arg3.params[]) == 8
arg0.innovation_num > arg2.id
arg0.innovation_num > arg3.id
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
arg2.id < arg3.id
arg0.innovation_num - arg2.id - 7 * arg3.id + 8 == 0
===========================================================================
jneat.Gene.Gene(jneat.Gene, jneat.Trait, jneat.NNode, jneat.NNode):::EXIT
this.lnk.weight == this.mutation_num
this.lnk.in_node == orig(arg2)
this.lnk.in_node.fType == jneat.NodeFuncEnum.SIGMOID
this.lnk.in_node.nType == arg2.nType
this.lnk.in_node.gNodeLabel == arg2.gNodeLabel
this.lnk.in_node.activesum == arg2.activesum
this.lnk.in_node.activation == arg2.activation
this.lnk.in_node.last_activation == arg2.last_activation
this.lnk.in_node.prior_activation == arg2.prior_activation
this.lnk.in_node.active_flag == arg2.active_flag
this.lnk.in_node.is_traversed == arg2.is_traversed
this.lnk.in_node.id == arg2.id
this.lnk.in_node.activation_count == arg2.activation_count
this.lnk.in_node.inner_level == arg2.inner_level
this.lnk.in_node.incoming == arg2.incoming
this.lnk.in_node.outgoing == arg2.outgoing
this.lnk.in_node.nodeTrait == arg2.nodeTrait
this.lnk.in_node.analogue == this.lnk.out_node.analogue
this.lnk.in_node.params == arg2.params
this.lnk.out_node == orig(arg3)
this.lnk.out_node.fType == jneat.NodeFuncEnum.SIGMOID
this.lnk.out_node.nType == jneat.NodeTypeEnum.NEURON
this.lnk.out_node.gNodeLabel == arg3.gNodeLabel
this.lnk.out_node.activesum == arg3.activesum
this.lnk.out_node.activation == arg3.activation
this.lnk.out_node.last_activation == arg3.last_activation
this.lnk.out_node.prior_activation == arg3.prior_activation
this.lnk.out_node.active_flag == arg3.active_flag
this.lnk.out_node.is_traversed == arg3.is_traversed
this.lnk.out_node.id == arg3.id
this.lnk.out_node.activation_count == arg3.activation_count
this.lnk.out_node.inner_level == arg3.inner_level
this.lnk.out_node.incoming == arg3.incoming
this.lnk.out_node.outgoing == arg3.outgoing
this.lnk.out_node.nodeTrait == arg2.nodeTrait
this.lnk.out_node.params == arg3.params
this.lnk.recurrent == arg0.lnk.recurrent
this.lnk.recurrent == orig(arg0.lnk.recurrent)
this.innovation_num == arg0.innovation_num
this.innovation_num == orig(arg0.innovation_num)
this.mutation_num == arg0.lnk.weight
this.mutation_num == arg0.mutation_num
this.mutation_num == orig(arg0.lnk.weight)
this.mutation_num == orig(arg0.mutation_num)
this.enabled == arg0.enabled
this.enabled == orig(arg0.enabled)
arg0.lnk == orig(arg0.lnk)
arg0.lnk.id == orig(arg0.lnk.id)
arg0.lnk.bias == orig(arg0.lnk.bias)
arg0.lnk.in_node == orig(arg0.lnk.in_node)
arg0.lnk.out_node == orig(arg0.lnk.out_node)
arg0.lnk.linkTrait == orig(arg0.lnk.linkTrait)
arg0.lnk.time_delay == orig(arg0.lnk.time_delay)
arg0.lnk.is_traversed == orig(arg0.lnk.is_traversed)
arg0.lnk.params == orig(arg0.lnk.params)
arg2.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg3.fType
jneat.NodeFuncEnum.SIGMOID == orig(arg2.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(arg3.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
arg2.nType == orig(arg2.nType)
jneat.NodeTypeEnum.NEURON == arg3.nType
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.NEURON == orig(arg3.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
arg2.gNodeLabel == orig(arg2.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
arg2.activesum == orig(arg2.activesum)
arg2.activation == orig(arg2.activation)
arg2.last_activation == orig(arg2.last_activation)
arg2.prior_activation == orig(arg2.prior_activation)
arg2.active_flag == orig(arg2.active_flag)
arg2.is_traversed == orig(arg2.is_traversed)
arg2.id == orig(arg2.id)
arg2.activation_count == orig(arg2.activation_count)
arg2.inner_level == orig(arg2.inner_level)
arg2.incoming == orig(arg2.incoming)
arg2.incoming[] == orig(arg2.incoming[])
arg2.outgoing == orig(arg2.outgoing)
arg2.outgoing[] == orig(arg2.outgoing[])
arg2.nodeTrait == arg3.nodeTrait
arg2.nodeTrait == orig(arg2.nodeTrait)
arg2.nodeTrait == orig(arg3.nodeTrait)
arg2.nodeTrait.id == arg3.nodeTrait.id
arg2.nodeTrait.id == orig(arg2.nodeTrait.id)
arg2.nodeTrait.id == orig(arg3.nodeTrait.id)
arg2.nodeTrait.params == arg3.nodeTrait.params
arg2.nodeTrait.params == orig(arg2.nodeTrait.params)
arg2.nodeTrait.params == orig(arg3.nodeTrait.params)
arg2.nodeTrait.params[] == orig(arg2.nodeTrait.params[])
arg2.dup == orig(arg2.dup)
arg2.analogue == orig(arg2.analogue)
arg2.params == orig(arg2.params)
arg2.params[] == orig(arg2.params[])
arg3.gNodeLabel == orig(arg3.gNodeLabel)
arg3.activesum == orig(arg3.activesum)
arg3.activation == orig(arg3.activation)
arg3.last_activation == orig(arg3.last_activation)
arg3.prior_activation == orig(arg3.prior_activation)
arg3.active_flag == orig(arg3.active_flag)
arg3.is_traversed == orig(arg3.is_traversed)
arg3.id == orig(arg3.id)
arg3.activation_count == orig(arg3.activation_count)
arg3.inner_level == orig(arg3.inner_level)
arg3.incoming == orig(arg3.incoming)
arg3.incoming[] == orig(arg3.incoming[])
arg3.outgoing == orig(arg3.outgoing)
arg3.outgoing[] == orig(arg3.outgoing[])
arg3.nodeTrait.params[] == orig(arg3.nodeTrait.params[])
arg3.dup == orig(arg3.dup)
arg3.analogue == orig(arg3.analogue)
arg3.params == orig(arg3.params)
arg3.params[] == orig(arg3.params[])
this.lnk.in_node.dup == null
this.lnk.in_node.analogue == null
this.lnk.out_node.dup == null
this.lnk.linkTrait == null
this.mutation_num != 0
this.enabled == true
arg0.lnk != null
arg0.lnk.bias == 0.0
arg0.lnk.in_node != null
arg0.lnk.out_node != null
arg0.lnk.linkTrait != null
arg0.lnk.time_delay == false
arg0.lnk.is_traversed == false
arg0.lnk.params == null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg2.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg2.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 1
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] == []
arg2.incoming[].getClass().getName() == []
arg2.outgoing != null
arg2.outgoing[] == []
arg2.outgoing[].getClass().getName() == []
arg2.nodeTrait != null
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue == null
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3.gNodeLabel != null
arg3.activesum == 0.0
arg3.activation == 0.0
arg3.last_activation == 0.0
arg3.prior_activation == 0.0
arg3.active_flag == false
arg3.is_traversed == false
arg3.id >= 2
arg3.activation_count == 0
arg3.inner_level == 0
arg3.incoming != null
arg3.incoming[] == []
arg3.incoming[].getClass().getName() == []
arg3.outgoing != null
arg3.outgoing[] == []
arg3.outgoing[].getClass().getName() == []
arg3.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg3.nodeTrait.params[] sorted by >=
arg3.dup == null
arg3.analogue == null
arg3.params != null
arg3.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.params[] elements == 0.0
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.nodeTrait.params[]) == 8
size(arg2.params[]) == 8
size(arg3.nodeTrait.params[]) == 8
size(arg3.params[]) == 8
this.lnk.id > arg0.lnk.id
this.innovation_num > arg2.id
this.innovation_num > arg3.id
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
arg2.id < arg3.id
this.innovation_num - arg2.id - 7 * arg3.id + 8 == 0
===========================================================================
jneat.Gene.Gene(jneat.Trait, double, jneat.NNode, jneat.NNode, boolean, int, double):::ENTER
arg0.id == arg2.nodeTrait.id
arg0.id == arg3.nodeTrait.id
arg0.params == arg2.nodeTrait.params
arg0.params == arg3.nodeTrait.params
arg2.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg2.analogue.fType
jneat.NodeFuncEnum.SIGMOID == arg3.fType
arg2.nType == arg2.analogue.nType
jneat.NodeTypeEnum.NEURON == arg3.nType
jneat.NodeTypeEnum.NEURON == arg3.analogue.nType
arg2.gNodeLabel == arg2.analogue.gNodeLabel
arg2.id == arg2.analogue.id
arg2.analogue.fType == arg3.analogue.fType
arg2.analogue.activation == arg3.analogue.activesum
arg2.analogue.activation == arg3.analogue.activation
arg2.analogue.activation == arg3.analogue.last_activation
arg2.analogue.activation == arg3.analogue.prior_activation
arg2.analogue.inner_level == arg3.analogue.inner_level
arg3.gNodeLabel == arg3.analogue.gNodeLabel
arg3.id == arg3.analogue.id
arg0.id >= 0
arg0.params != null
arg0.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] sorted by >=
arg1 != 0
arg2 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg2.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg2.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 1
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] == []
arg2.incoming[].getClass().getName() == []
arg2.outgoing != null
arg2.outgoing[] == []
arg2.outgoing[].getClass().getName() == []
arg2.nodeTrait != null
arg2.nodeTrait.id >= 0
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue.fType has only one value
arg2.analogue.fType != null
arg2.analogue.nType != null
arg2.analogue.gNodeLabel != null
arg2.analogue.activesum == 0.0
arg2.analogue.activation == 0.0
arg2.analogue.last_activation == 0.0
arg2.analogue.prior_activation == 0.0
arg2.analogue.active_flag == false
arg2.analogue.id >= 1
arg2.analogue.activation_count == 0
arg2.analogue.inner_level == 0
arg2.analogue.incoming != null
arg2.analogue.incoming[] elements != null
arg2.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg2.analogue.outgoing != null
arg2.analogue.outgoing[] elements != null
arg2.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.analogue.nodeTrait != null
arg2.analogue.dup == null
arg2.analogue.analogue == null
arg2.analogue.params != null
arg2.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.analogue.params[] elements == 0.0
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3 != null
arg3.gNodeLabel != null
arg3.activesum == 0.0
arg3.activation == 0.0
arg3.last_activation == 0.0
arg3.prior_activation == 0.0
arg3.active_flag == false
arg3.is_traversed == false
arg3.id >= 2
arg3.activation_count == 0
arg3.inner_level == 0
arg3.incoming != null
arg3.incoming[] == []
arg3.incoming[].getClass().getName() == []
arg3.outgoing != null
arg3.outgoing[] == []
arg3.outgoing[].getClass().getName() == []
arg3.nodeTrait != null
arg3.nodeTrait.id >= 0
arg3.nodeTrait.params != null
arg3.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg3.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg3.nodeTrait.params[] sorted by >=
arg3.dup == null
arg3.analogue.nType has only one value
arg3.analogue.nType != null
arg3.analogue.gNodeLabel != null
arg3.analogue.active_flag == false
arg3.analogue.id >= 2
arg3.analogue.activation_count == 0
arg3.analogue.incoming != null
arg3.analogue.incoming[] elements != null
arg3.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg3.analogue.outgoing != null
arg3.analogue.outgoing[] elements != null
arg3.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg3.analogue.nodeTrait != null
arg3.analogue.dup == null
arg3.analogue.analogue == null
arg3.analogue.params != null
arg3.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.analogue.params[] elements == 0.0
arg3.params != null
arg3.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.params[] elements == 0.0
arg4 == false
size(arg0.params[]) == 8
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.nodeTrait.params[]) == 8
size(arg2.analogue.incoming[]) one of { 0, 1, 2 }
size(arg2.analogue.params[]) == 8
size(arg2.params[]) == 8
size(arg3.nodeTrait.params[]) == 8
size(arg3.analogue.outgoing[]) one of { 0, 1, 2 }
size(arg3.analogue.params[]) == 8
size(arg3.params[]) == 8
arg6 % arg1 == 0
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
arg2.id != arg3.id
arg2.id < arg3.analogue.id
arg2.id < arg5
arg2.analogue.id < arg3.id
arg2.analogue.id < arg3.analogue.id
arg2.analogue.id < arg5
arg3.id < arg5
arg3.analogue.id < arg5
arg2.id + 7 * arg3.analogue.id - arg5 - 8 == 0
arg2.analogue.id + 7 * arg3.id - arg5 - 8 == 0
arg2.analogue.id + 7 * arg3.analogue.id - arg5 - 8 == 0
===========================================================================
jneat.Gene.Gene(jneat.Trait, double, jneat.NNode, jneat.NNode, boolean, int, double):::EXIT
this.lnk.weight == orig(arg1)
this.lnk.in_node == orig(arg2)
this.lnk.in_node.fType == jneat.NodeFuncEnum.SIGMOID
this.lnk.in_node.nType == arg2.nType
this.lnk.in_node.gNodeLabel == arg2.gNodeLabel
this.lnk.in_node.activesum == arg2.activesum
this.lnk.in_node.activation == arg2.activation
this.lnk.in_node.last_activation == arg2.last_activation
this.lnk.in_node.prior_activation == arg2.prior_activation
this.lnk.in_node.active_flag == arg2.active_flag
this.lnk.in_node.is_traversed == arg2.is_traversed
this.lnk.in_node.id == arg2.id
this.lnk.in_node.activation_count == arg2.activation_count
this.lnk.in_node.inner_level == arg2.inner_level
this.lnk.in_node.incoming == arg2.incoming
this.lnk.in_node.outgoing == arg2.outgoing
this.lnk.in_node.nodeTrait == arg2.nodeTrait
this.lnk.in_node.analogue == arg2.analogue
this.lnk.in_node.params == arg2.params
this.lnk.out_node == orig(arg3)
this.lnk.out_node.fType == jneat.NodeFuncEnum.SIGMOID
this.lnk.out_node.nType == jneat.NodeTypeEnum.NEURON
this.lnk.out_node.gNodeLabel == arg3.gNodeLabel
this.lnk.out_node.activesum == arg3.activesum
this.lnk.out_node.activation == arg3.activation
this.lnk.out_node.last_activation == arg3.last_activation
this.lnk.out_node.prior_activation == arg3.prior_activation
this.lnk.out_node.active_flag == arg3.active_flag
this.lnk.out_node.is_traversed == arg3.is_traversed
this.lnk.out_node.id == arg3.id
this.lnk.out_node.activation_count == arg3.activation_count
this.lnk.out_node.inner_level == arg3.inner_level
this.lnk.out_node.incoming == arg3.incoming
this.lnk.out_node.outgoing == arg3.outgoing
this.lnk.out_node.nodeTrait == arg3.nodeTrait
this.lnk.out_node.analogue == arg3.analogue
this.lnk.out_node.params == arg3.params
this.lnk.linkTrait == orig(arg0)
this.lnk.linkTrait.id == arg0.id
this.lnk.linkTrait.params == arg0.params
this.lnk.recurrent == orig(arg4)
this.innovation_num == orig(arg5)
this.mutation_num == orig(arg6)
arg0.id == arg2.nodeTrait.id
arg0.id == arg3.nodeTrait.id
arg0.id == orig(arg0.id)
arg0.params == arg2.nodeTrait.params
arg0.params == arg3.nodeTrait.params
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
arg2.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg2.analogue.fType
jneat.NodeFuncEnum.SIGMOID == arg3.fType
jneat.NodeFuncEnum.SIGMOID == orig(arg2.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(arg3.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
arg2.nType == arg2.analogue.nType
arg2.nType == orig(arg2.nType)
jneat.NodeTypeEnum.NEURON == arg3.nType
jneat.NodeTypeEnum.NEURON == arg3.analogue.nType
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.NEURON == orig(arg3.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
arg2.gNodeLabel == arg2.analogue.gNodeLabel
arg2.gNodeLabel == orig(arg2.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
arg2.activesum == orig(arg2.activesum)
arg2.activation == orig(arg2.activation)
arg2.last_activation == orig(arg2.last_activation)
arg2.prior_activation == orig(arg2.prior_activation)
arg2.active_flag == orig(arg2.active_flag)
arg2.is_traversed == orig(arg2.is_traversed)
arg2.id == arg2.analogue.id
arg2.id == orig(arg2.id)
arg2.activation_count == orig(arg2.activation_count)
arg2.inner_level == orig(arg2.inner_level)
arg2.incoming == orig(arg2.incoming)
arg2.incoming[] == orig(arg2.incoming[])
arg2.outgoing == orig(arg2.outgoing)
arg2.outgoing[] == orig(arg2.outgoing[])
arg2.nodeTrait == orig(arg2.nodeTrait)
arg2.nodeTrait.id == orig(arg2.nodeTrait.id)
arg2.nodeTrait.params == orig(arg2.nodeTrait.params)
arg2.nodeTrait.params[] == orig(arg2.nodeTrait.params[])
arg2.dup == orig(arg2.dup)
arg2.analogue == orig(arg2.analogue)
arg2.analogue.fType == arg3.analogue.fType
arg2.analogue.fType == orig(arg2.analogue.fType)
arg2.analogue.fType == orig(arg3.analogue.fType)
arg2.analogue.nType == orig(arg2.analogue.nType)
arg2.analogue.gNodeLabel == orig(arg2.analogue.gNodeLabel)
arg2.analogue.activesum == orig(arg2.analogue.activesum)
arg2.analogue.activation == arg3.analogue.activesum
arg2.analogue.activation == arg3.analogue.activation
arg2.analogue.activation == arg3.analogue.last_activation
arg2.analogue.activation == arg3.analogue.prior_activation
arg2.analogue.activation == orig(arg2.analogue.activation)
arg2.analogue.activation == orig(arg3.analogue.activesum)
arg2.analogue.activation == orig(arg3.analogue.activation)
arg2.analogue.activation == orig(arg3.analogue.last_activation)
arg2.analogue.activation == orig(arg3.analogue.prior_activation)
arg2.analogue.last_activation == orig(arg2.analogue.last_activation)
arg2.analogue.prior_activation == orig(arg2.analogue.prior_activation)
arg2.analogue.active_flag == orig(arg2.analogue.active_flag)
arg2.analogue.is_traversed == orig(arg2.analogue.is_traversed)
arg2.analogue.id == orig(arg2.analogue.id)
arg2.analogue.activation_count == orig(arg2.analogue.activation_count)
arg2.analogue.inner_level == arg3.analogue.inner_level
arg2.analogue.inner_level == orig(arg2.analogue.inner_level)
arg2.analogue.inner_level == orig(arg3.analogue.inner_level)
arg2.analogue.incoming == orig(arg2.analogue.incoming)
arg2.analogue.incoming[] == orig(arg2.analogue.incoming[])
arg2.analogue.outgoing == orig(arg2.analogue.outgoing)
arg2.analogue.outgoing[] == orig(arg2.analogue.outgoing[])
arg2.analogue.nodeTrait == orig(arg2.analogue.nodeTrait)
arg2.analogue.dup == orig(arg2.analogue.dup)
arg2.analogue.analogue == orig(arg2.analogue.analogue)
arg2.analogue.params == orig(arg2.analogue.params)
arg2.analogue.params[] == orig(arg2.analogue.params[])
arg2.params == orig(arg2.params)
arg2.params[] == orig(arg2.params[])
arg3.gNodeLabel == arg3.analogue.gNodeLabel
arg3.gNodeLabel == orig(arg3.gNodeLabel)
arg3.activesum == orig(arg3.activesum)
arg3.activation == orig(arg3.activation)
arg3.last_activation == orig(arg3.last_activation)
arg3.prior_activation == orig(arg3.prior_activation)
arg3.active_flag == orig(arg3.active_flag)
arg3.is_traversed == orig(arg3.is_traversed)
arg3.id == arg3.analogue.id
arg3.id == orig(arg3.id)
arg3.activation_count == orig(arg3.activation_count)
arg3.inner_level == orig(arg3.inner_level)
arg3.incoming == orig(arg3.incoming)
arg3.incoming[] == orig(arg3.incoming[])
arg3.outgoing == orig(arg3.outgoing)
arg3.outgoing[] == orig(arg3.outgoing[])
arg3.nodeTrait == orig(arg3.nodeTrait)
arg3.nodeTrait.id == orig(arg3.nodeTrait.id)
arg3.nodeTrait.params == orig(arg3.nodeTrait.params)
arg3.nodeTrait.params[] == orig(arg3.nodeTrait.params[])
arg3.dup == orig(arg3.dup)
arg3.analogue == orig(arg3.analogue)
arg3.analogue.nType == orig(arg3.analogue.nType)
arg3.analogue.gNodeLabel == orig(arg3.analogue.gNodeLabel)
arg3.analogue.active_flag == orig(arg3.analogue.active_flag)
arg3.analogue.is_traversed == orig(arg3.analogue.is_traversed)
arg3.analogue.id == orig(arg3.analogue.id)
arg3.analogue.activation_count == orig(arg3.analogue.activation_count)
arg3.analogue.incoming == orig(arg3.analogue.incoming)
arg3.analogue.incoming[] == orig(arg3.analogue.incoming[])
arg3.analogue.outgoing == orig(arg3.analogue.outgoing)
arg3.analogue.outgoing[] == orig(arg3.analogue.outgoing[])
arg3.analogue.nodeTrait == orig(arg3.analogue.nodeTrait)
arg3.analogue.dup == orig(arg3.analogue.dup)
arg3.analogue.analogue == orig(arg3.analogue.analogue)
arg3.analogue.params == orig(arg3.analogue.params)
arg3.analogue.params[] == orig(arg3.analogue.params[])
arg3.params == orig(arg3.params)
arg3.params[] == orig(arg3.params[])
this.lnk.in_node.dup == null
this.lnk.out_node.dup == null
this.lnk.linkTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.enabled == true
arg0.id >= 0
arg0.params != null
arg0.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] sorted by >=
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg2.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg2.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 1
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] == []
arg2.incoming[].getClass().getName() == []
arg2.outgoing != null
arg2.outgoing[] == []
arg2.outgoing[].getClass().getName() == []
arg2.nodeTrait != null
arg2.nodeTrait.id >= 0
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue.fType has only one value
arg2.analogue.fType != null
arg2.analogue.nType != null
arg2.analogue.gNodeLabel != null
arg2.analogue.activesum == 0.0
arg2.analogue.activation == 0.0
arg2.analogue.last_activation == 0.0
arg2.analogue.prior_activation == 0.0
arg2.analogue.active_flag == false
arg2.analogue.id >= 1
arg2.analogue.activation_count == 0
arg2.analogue.inner_level == 0
arg2.analogue.incoming != null
arg2.analogue.incoming[] elements != null
arg2.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg2.analogue.outgoing != null
arg2.analogue.outgoing[] elements != null
arg2.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.analogue.nodeTrait != null
arg2.analogue.dup == null
arg2.analogue.analogue == null
arg2.analogue.params != null
arg2.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.analogue.params[] elements == 0.0
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3.gNodeLabel != null
arg3.activesum == 0.0
arg3.activation == 0.0
arg3.last_activation == 0.0
arg3.prior_activation == 0.0
arg3.active_flag == false
arg3.is_traversed == false
arg3.id >= 2
arg3.activation_count == 0
arg3.inner_level == 0
arg3.incoming != null
arg3.incoming[] == []
arg3.incoming[].getClass().getName() == []
arg3.outgoing != null
arg3.outgoing[] == []
arg3.outgoing[].getClass().getName() == []
arg3.nodeTrait != null
arg3.nodeTrait.id >= 0
arg3.nodeTrait.params != null
arg3.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg3.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg3.nodeTrait.params[] sorted by >=
arg3.dup == null
arg3.analogue.nType has only one value
arg3.analogue.nType != null
arg3.analogue.gNodeLabel != null
arg3.analogue.active_flag == false
arg3.analogue.id >= 2
arg3.analogue.activation_count == 0
arg3.analogue.incoming != null
arg3.analogue.incoming[] elements != null
arg3.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg3.analogue.outgoing != null
arg3.analogue.outgoing[] elements != null
arg3.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg3.analogue.nodeTrait != null
arg3.analogue.dup == null
arg3.analogue.analogue == null
arg3.analogue.params != null
arg3.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.analogue.params[] elements == 0.0
arg3.params != null
arg3.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.params[] elements == 0.0
size(arg0.params[]) == 8
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.nodeTrait.params[]) == 8
size(arg2.analogue.incoming[]) one of { 0, 1, 2 }
size(arg2.analogue.params[]) == 8
size(arg2.params[]) == 8
size(arg3.nodeTrait.params[]) == 8
size(arg3.analogue.outgoing[]) one of { 0, 1, 2 }
size(arg3.analogue.params[]) == 8
size(arg3.params[]) == 8
this.innovation_num > arg2.id
this.innovation_num > arg2.analogue.id
this.innovation_num > arg3.id
this.innovation_num > arg3.analogue.id
this.mutation_num % orig(arg1) == 0
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
arg2.id != arg3.id
arg2.id < arg3.analogue.id
arg2.analogue.id < arg3.id
arg2.analogue.id < arg3.analogue.id
this.innovation_num - arg2.id - 7 * arg3.analogue.id + 8 == 0
this.innovation_num - arg2.analogue.id - 7 * arg3.id + 8 == 0
this.innovation_num - arg2.analogue.id - 7 * arg3.analogue.id + 8 == 0
===========================================================================
jneat.Gene.SaveGene():::ENTER
this.lnk.in_node.analogue != null
this.lnk.out_node.analogue != null
===========================================================================
jneat.Gene.SaveGene():::EXIT
this.lnk == orig(this.lnk)
this.lnk.id == orig(this.lnk.id)
this.lnk.weight == orig(this.lnk.weight)
this.lnk.bias == orig(this.lnk.bias)
this.lnk.in_node == orig(this.lnk.in_node)
this.lnk.in_node.fType == orig(this.lnk.in_node.fType)
this.lnk.in_node.fType == orig(this.lnk.out_node.fType)
this.lnk.in_node.nType == orig(this.lnk.in_node.nType)
this.lnk.in_node.gNodeLabel == orig(this.lnk.in_node.gNodeLabel)
this.lnk.in_node.activesum == orig(this.lnk.in_node.activesum)
this.lnk.in_node.activation == orig(this.lnk.in_node.activation)
this.lnk.in_node.last_activation == orig(this.lnk.in_node.last_activation)
this.lnk.in_node.prior_activation == orig(this.lnk.in_node.prior_activation)
this.lnk.in_node.active_flag == orig(this.lnk.in_node.active_flag)
this.lnk.in_node.is_traversed == orig(this.lnk.in_node.is_traversed)
this.lnk.in_node.id == orig(this.lnk.in_node.id)
this.lnk.in_node.activation_count == orig(this.lnk.in_node.activation_count)
this.lnk.in_node.inner_level == orig(this.lnk.in_node.inner_level)
this.lnk.in_node.incoming == orig(this.lnk.in_node.incoming)
this.lnk.in_node.incoming[] == orig(this.lnk.in_node.incoming[])
this.lnk.in_node.outgoing == orig(this.lnk.in_node.outgoing)
this.lnk.in_node.outgoing[] == orig(this.lnk.in_node.outgoing[])
this.lnk.in_node.nodeTrait == orig(this.lnk.in_node.nodeTrait)
this.lnk.in_node.dup == orig(this.lnk.in_node.dup)
this.lnk.in_node.analogue == orig(this.lnk.in_node.analogue)
this.lnk.in_node.params == orig(this.lnk.in_node.params)
this.lnk.in_node.params[] == orig(this.lnk.in_node.params[])
this.lnk.out_node == orig(this.lnk.out_node)
this.lnk.out_node.nType == orig(this.lnk.out_node.nType)
this.lnk.out_node.gNodeLabel == orig(this.lnk.out_node.gNodeLabel)
this.lnk.out_node.activesum == orig(this.lnk.out_node.activesum)
this.lnk.out_node.activation == orig(this.lnk.out_node.activation)
this.lnk.out_node.last_activation == orig(this.lnk.out_node.last_activation)
this.lnk.out_node.prior_activation == orig(this.lnk.out_node.prior_activation)
this.lnk.out_node.active_flag == orig(this.lnk.out_node.active_flag)
this.lnk.out_node.is_traversed == orig(this.lnk.out_node.is_traversed)
this.lnk.out_node.id == orig(this.lnk.out_node.id)
this.lnk.out_node.activation_count == orig(this.lnk.out_node.activation_count)
this.lnk.out_node.inner_level == orig(this.lnk.out_node.inner_level)
this.lnk.out_node.incoming == orig(this.lnk.out_node.incoming)
this.lnk.out_node.incoming[] == orig(this.lnk.out_node.incoming[])
this.lnk.out_node.outgoing == orig(this.lnk.out_node.outgoing)
this.lnk.out_node.outgoing[] == orig(this.lnk.out_node.outgoing[])
this.lnk.out_node.nodeTrait == orig(this.lnk.out_node.nodeTrait)
this.lnk.out_node.dup == orig(this.lnk.out_node.dup)
this.lnk.out_node.analogue == orig(this.lnk.out_node.analogue)
this.lnk.out_node.params == orig(this.lnk.out_node.params)
this.lnk.out_node.params[] == orig(this.lnk.out_node.params[])
this.lnk.linkTrait == orig(this.lnk.linkTrait)
this.lnk.linkTrait.id == orig(this.lnk.linkTrait.id)
this.lnk.linkTrait.params == orig(this.lnk.linkTrait.params)
this.lnk.linkTrait.params[] == orig(this.lnk.linkTrait.params[])
this.lnk.recurrent == orig(this.lnk.recurrent)
this.lnk.time_delay == orig(this.lnk.time_delay)
this.lnk.is_traversed == orig(this.lnk.is_traversed)
this.lnk.params == orig(this.lnk.params)
this.innovation_num == orig(this.innovation_num)
this.mutation_num == orig(this.mutation_num)
this.enabled == orig(this.enabled)
this.lnk.in_node.analogue != null
this.lnk.out_node.analogue != null
return != null
===========================================================================
jneat.Genome:::OBJECT
this.phenotype.inputs != null
this.phenotype.inputs[] elements != null
this.phenotype.inputs[].getClass().getName() == [jneat.NNode]
this.phenotype.inputs[].getClass().getName() elements == jneat.NNode.class
this.phenotype.outputs != null
this.phenotype.outputs[] elements != null
this.phenotype.outputs[].getClass().getName() == [jneat.NNode]
this.phenotype.outputs[].getClass().getName() elements == jneat.NNode.class
this.phenotype.allNodes != null
this.phenotype.allNodes[] elements != null
this.phenotype.allNodes[].getClass().getName() elements == jneat.NNode.class
this.phenotype.genotype != null
this.phenotype.genotype.phenotype != null
this.phenotype.genotype.genome_id >= 0
this.phenotype.genotype.genes != null
this.phenotype.genotype.genes[] elements != null
this.phenotype.genotype.genes[].getClass().getName() elements == jneat.Gene.class
this.phenotype.genotype.traits != null
this.phenotype.genotype.traits[] elements != null
this.phenotype.genotype.traits[].getClass().getName() == [jneat.Trait]
this.phenotype.genotype.traits[].getClass().getName() elements == jneat.Trait.class
this.phenotype.genotype.nodes != null
this.phenotype.genotype.nodes[] elements != null
this.phenotype.genotype.nodes[].getClass().getName() elements == jneat.NNode.class
this.phenotype.net_id >= 0
this.phenotype.status has only one value
this.phenotype.status != null
jneat.NetworkStatusEnum.NORMAL has only one value
jneat.NetworkStatusEnum.NORMAL != null
jneat.NetworkStatusEnum.HAS_LOOP has only one value
jneat.NetworkStatusEnum.HAS_LOOP != null
jneat.NetworkStatusEnum.$VALUES has only one value
jneat.NetworkStatusEnum.$VALUES != null
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == jneat.NetworkStatusEnum[].class
jneat.NetworkStatusEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NetworkStatusEnum.$VALUES[] elements != null
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() == [jneat.NetworkStatusEnum, jneat.NetworkStatusEnum]
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() elements == jneat.NetworkStatusEnum.class
this.genome_id >= 0
this.genes != null
this.genes[] elements != null
this.genes[].getClass().getName() elements == jneat.Gene.class
this.traits != null
this.traits[] elements != null
this.traits[].getClass().getName() == [jneat.Trait]
this.traits[].getClass().getName() elements == jneat.Trait.class
this.nodes != null
this.nodes[] elements != null
this.nodes[].getClass().getName() elements == jneat.NNode.class
size(this.phenotype.inputs[]) == 1
size(this.phenotype.outputs[]) == 1
size(this.phenotype.allNodes[]) >= 2
size(this.phenotype.genotype.genes[]) >= 1
size(this.phenotype.genotype.traits[]) == 1
size(this.phenotype.genotype.nodes[]) >= 2
size(jneat.NetworkStatusEnum.$VALUES[]) == 2
size(this.traits[]) == 1
size(this.nodes[]) >= 2
===========================================================================
jneat.Genome.Compatibility(jneat.Genome):::ENTER
this.phenotype != null
arg0 != null
arg0.phenotype != null
arg0.phenotype.inputs != null
arg0.phenotype.inputs[] elements != null
arg0.phenotype.inputs[].getClass().getName() == [jneat.NNode]
arg0.phenotype.inputs[].getClass().getName() elements == jneat.NNode.class
arg0.phenotype.outputs != null
arg0.phenotype.outputs[] elements != null
arg0.phenotype.outputs[].getClass().getName() == [jneat.NNode]
arg0.phenotype.outputs[].getClass().getName() elements == jneat.NNode.class
arg0.phenotype.allNodes != null
arg0.phenotype.allNodes[] elements != null
arg0.phenotype.allNodes[].getClass().getName() elements == jneat.NNode.class
arg0.phenotype.genotype != null
arg0.phenotype.net_id >= 0
arg0.phenotype.status has only one value
arg0.phenotype.status != null
arg0.genome_id >= 0
arg0.genes != null
arg0.genes[] elements != null
arg0.genes[].getClass().getName() elements == jneat.Gene.class
arg0.traits != null
arg0.traits[] elements != null
arg0.traits[].getClass().getName() == [jneat.Trait]
arg0.traits[].getClass().getName() elements == jneat.Trait.class
arg0.nodes != null
arg0.nodes[] elements != null
arg0.nodes[].getClass().getName() elements == jneat.NNode.class
size(this.genes[]) >= 1
size(arg0.phenotype.inputs[]) == 1
size(arg0.phenotype.outputs[]) == 1
size(arg0.genes[]) >= 1
size(arg0.traits[]) == 1
===========================================================================
jneat.Genome.Compatibility(jneat.Genome):::EXIT
this.phenotype == orig(this.phenotype)
this.phenotype.inputs == orig(this.phenotype.inputs)
this.phenotype.inputs[] == orig(this.phenotype.inputs[])
this.phenotype.outputs == orig(this.phenotype.outputs)
this.phenotype.outputs[] == orig(this.phenotype.outputs[])
this.phenotype.allNodes == orig(this.phenotype.allNodes)
this.phenotype.allNodes[] == orig(this.phenotype.allNodes[])
this.phenotype.genotype == orig(this.phenotype.genotype)
this.phenotype.genotype.phenotype == orig(this.phenotype.genotype.phenotype)
this.phenotype.genotype.genome_id == orig(this.phenotype.genotype.genome_id)
this.phenotype.genotype.genes == orig(this.phenotype.genotype.genes)
this.phenotype.genotype.genes[] == orig(this.phenotype.genotype.genes[])
this.phenotype.genotype.traits == orig(this.phenotype.genotype.traits)
this.phenotype.genotype.traits[] == orig(this.phenotype.genotype.traits[])
this.phenotype.genotype.nodes == orig(this.phenotype.genotype.nodes)
this.phenotype.genotype.nodes[] == orig(this.phenotype.genotype.nodes[])
this.phenotype.net_id == orig(this.phenotype.net_id)
this.phenotype.status == orig(this.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
arg0.phenotype == orig(arg0.phenotype)
arg0.phenotype.inputs == orig(arg0.phenotype.inputs)
arg0.phenotype.inputs[] == orig(arg0.phenotype.inputs[])
arg0.phenotype.outputs == orig(arg0.phenotype.outputs)
arg0.phenotype.outputs[] == orig(arg0.phenotype.outputs[])
arg0.phenotype.allNodes == orig(arg0.phenotype.allNodes)
arg0.phenotype.allNodes[] == orig(arg0.phenotype.allNodes[])
arg0.phenotype.genotype == orig(arg0.phenotype.genotype)
arg0.phenotype.net_id == orig(arg0.phenotype.net_id)
arg0.phenotype.status == orig(arg0.phenotype.status)
arg0.genome_id == orig(arg0.genome_id)
arg0.genes == orig(arg0.genes)
arg0.genes[] == orig(arg0.genes[])
arg0.traits == orig(arg0.traits)
arg0.traits[] == orig(arg0.traits[])
arg0.nodes == orig(arg0.nodes)
arg0.nodes[] == orig(arg0.nodes[])
this.phenotype != null
arg0.phenotype != null
arg0.phenotype.inputs != null
arg0.phenotype.inputs[] elements != null
arg0.phenotype.inputs[].getClass().getName() == [jneat.NNode]
arg0.phenotype.inputs[].getClass().getName() elements == jneat.NNode.class
arg0.phenotype.outputs != null
arg0.phenotype.outputs[] elements != null
arg0.phenotype.outputs[].getClass().getName() == [jneat.NNode]
arg0.phenotype.outputs[].getClass().getName() elements == jneat.NNode.class
arg0.phenotype.allNodes != null
arg0.phenotype.allNodes[] elements != null
arg0.phenotype.allNodes[].getClass().getName() elements == jneat.NNode.class
arg0.phenotype.genotype != null
arg0.phenotype.net_id >= 0
arg0.phenotype.status has only one value
arg0.phenotype.status != null
arg0.genome_id >= 0
arg0.genes != null
arg0.genes[] elements != null
arg0.genes[].getClass().getName() elements == jneat.Gene.class
arg0.traits != null
arg0.traits[] elements != null
arg0.traits[].getClass().getName() == [jneat.Trait]
arg0.traits[].getClass().getName() elements == jneat.Trait.class
arg0.nodes != null
arg0.nodes[] elements != null
arg0.nodes[].getClass().getName() elements == jneat.NNode.class
size(this.genes[]) >= 1
size(arg0.phenotype.inputs[]) == 1
size(arg0.phenotype.outputs[]) == 1
size(arg0.genes[]) >= 1
size(arg0.traits[]) == 1
===========================================================================
jneat.Genome.Genesis(int):::ENTER
this.phenotype == null
arg0 >= 0
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.Genesis(int):::EXIT
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES[].getClass().getName())
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
this.phenotype != null
return != null
return.inputs != null
return.inputs[] elements != null
return.inputs[].getClass().getName() == [jneat.NNode]
return.inputs[].getClass().getName() elements == jneat.NNode.class
return.outputs != null
return.outputs[] elements != null
return.outputs[].getClass().getName() == [jneat.NNode]
return.outputs[].getClass().getName() elements == jneat.NNode.class
return.allNodes != null
return.allNodes[] elements != null
return.allNodes[].getClass().getName() elements == jneat.NNode.class
return.genotype != null
return.genotype.phenotype != null
return.genotype.genome_id >= 0
return.genotype.genes != null
return.genotype.genes[] elements != null
return.genotype.genes[].getClass().getName() elements == jneat.Gene.class
return.genotype.traits != null
return.genotype.traits[] elements != null
return.genotype.traits[].getClass().getName() == [jneat.Trait]
return.genotype.traits[].getClass().getName() elements == jneat.Trait.class
return.genotype.nodes != null
return.genotype.nodes[] elements != null
return.genotype.nodes[].getClass().getName() elements == jneat.NNode.class
return.net_id >= 0
return.status has only one value
return.status != null
size(this.genes[]) >= 1
size(return.inputs[]) == 1
size(return.outputs[]) == 1
size(return.allNodes[]) >= 2
size(return.genotype.genes[]) >= 1
size(return.genotype.traits[]) == 1
size(return.genotype.nodes[]) >= 2
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[]) (elementwise)
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
jneat.Genome.Genome(int, int, int, int, int, boolean, double):::ENTER
arg1 == 1
arg2 == 1
arg3 >= 0
arg4 == 5
arg5 == false
arg6 == 0.1
===========================================================================
jneat.Genome.Genome(int, int, int, int, int, boolean, double):::EXIT
this.phenotype == null
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.Genome(java.util.Vector, java.util.Vector, java.util.Vector, int):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == jneat.Gene.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [jneat.Trait]
arg1[].getClass().getName() elements == jneat.Trait.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == jneat.NNode.class
arg3 >= 0
size(arg0[]) >= 1
size(arg1[]) == 1
size(arg2[]) >= 2
===========================================================================
jneat.Genome.Genome(java.util.Vector, java.util.Vector, java.util.Vector, int):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
this.phenotype == null
arg0[] elements != null
arg0[].getClass().getName() elements == jneat.Gene.class
arg1[] elements != null
arg1[].getClass().getName() == [jneat.Trait]
arg1[].getClass().getName() elements == jneat.Trait.class
arg2[] elements != null
arg2[].getClass().getName() elements == jneat.NNode.class
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::ENTER
this.phenotype == null
this.genome_id one of { 0, 14 }
this.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene] }
this.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg0 has only one value
arg0.organisms has only one value
arg0.organisms[] contains no nulls and has only one value, of length 37
arg0.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.species has only one value
arg0.species[] contains no nulls and has only one value, of length 30
arg0.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
arg0.species[].getClass().getName() elements == jneat.Species.class
arg0.innovations has only one value
arg0.innovations[] == []
arg0.innovations[].getClass().getName() == []
arg0.cur_node_id == 8
arg0.cur_innov_num == 50
arg0.population_size == 50
arg0.last_species == 30
arg0.final_gen == 0
arg0.mean_fitness == 0.46399999999999997
arg0.max_fitness_this_epoch == 0.85
arg0.variance == 0.0
arg0.standard_deviation == 0.0
arg0.avg_fit_eliminated == 0.4884615384615385
arg0.winnergen == 0
arg0.highest_fitness == 0.85
arg0.highest_last_changed == 0
size(this.genes[]) one of { 1, 6 }
size(this.nodes[]) one of { 3, 7 }
size(arg0.organisms[]) == 37
size(arg0.species[]) == 30
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT394
this.genes[] == orig(this.genes[])
this.nodes[] == orig(this.nodes[])
arg0.innovations[] == orig(arg0.innovations[])
arg0.cur_node_id == orig(arg0.cur_node_id)
arg0.cur_innov_num == orig(arg0.cur_innov_num)
this.genome_id == 14
this.genes has only one value
this.genes[] contains no nulls and has only one value, of length 1
this.genes[] elements has only one value
this.genes[].getClass().getName() == [jneat.Gene]
this.traits has only one value
this.traits[] contains no nulls and has only one value, of length 1
this.traits[] elements has only one value
this.nodes has only one value
this.nodes[] contains no nulls and has only one value, of length 3
this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode]
arg0.innovations[] == []
arg0.innovations[].getClass().getName() == []
arg0.cur_node_id == 8
arg0.cur_innov_num == 50
return == false
orig(this) has only one value
size(this.genes[]) == 1
size(this.nodes[]) == 3
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT394;condition="not(return == true)"
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT453
size(this.nodes[])-1 == orig(size(this.nodes[]))
size(arg0.innovations[])-1 == orig(size(arg0.innovations[]))
this.genome_id == 0
this.genes has only one value
this.genes[] contains no nulls and has only one value, of length 8
this.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
this.traits has only one value
this.traits[] contains no nulls and has only one value, of length 1
this.traits[] elements has only one value
this.nodes has only one value
this.nodes[] contains no nulls and has only one value, of length 8
this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg0.innovations[] contains no nulls and has only one value, of length 1
arg0.innovations[].getClass().getName() == [jneat.Innovation]
arg0.cur_node_id == 9
arg0.cur_innov_num == 52
return == true
orig(this) has only one value
orig(this.genes[]) contains no nulls and has only one value, of length 6
orig(this.genes[].getClass().getName()) == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
orig(this.nodes[]) contains no nulls and has only one value, of length 7
orig(this.nodes[].getClass().getName()) == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
size(this.genes[]) == 8
size(this.nodes[]) == 8
size(arg0.innovations[]) == 1
orig(size(this.genes[])) == 6
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT453;condition="return == true"
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
arg0.organisms == orig(arg0.organisms)
arg0.organisms[] == orig(arg0.organisms[])
arg0.species == orig(arg0.species)
arg0.species[] == orig(arg0.species[])
arg0.innovations == orig(arg0.innovations)
arg0.population_size == orig(arg0.population_size)
arg0.last_species == orig(arg0.last_species)
arg0.final_gen == orig(arg0.final_gen)
arg0.mean_fitness == orig(arg0.mean_fitness)
arg0.max_fitness_this_epoch == orig(arg0.max_fitness_this_epoch)
arg0.variance == orig(arg0.variance)
arg0.standard_deviation == orig(arg0.standard_deviation)
arg0.avg_fit_eliminated == orig(arg0.avg_fit_eliminated)
arg0.winnergen == orig(arg0.winnergen)
arg0.highest_fitness == orig(arg0.highest_fitness)
arg0.highest_last_changed == orig(arg0.highest_last_changed)
(this.genome_id == 0)  <==>  (arg0.cur_innov_num == 52)
(this.genome_id == 0)  <==>  (arg0.cur_node_id == 9)
(this.genome_id == 0)  <==>  (arg0.innovations[] contains no nulls and has only one value, of length 1)
(this.genome_id == 0)  <==>  (arg0.innovations[].getClass().getName() == [jneat.Innovation])
(this.genome_id == 0)  <==>  (orig(size(this.genes[])) == 6)
(this.genome_id == 0)  <==>  (orig(this.genes[]) contains no nulls and has only one value, of length 6)
(this.genome_id == 0)  <==>  (orig(this.genes[].getClass().getName()) == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene])
(this.genome_id == 0)  <==>  (orig(this.nodes[]) contains no nulls and has only one value, of length 7)
(this.genome_id == 0)  <==>  (orig(this.nodes[].getClass().getName()) == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode])
(this.genome_id == 0)  <==>  (return == true)
(this.genome_id == 0)  <==>  (size(arg0.innovations[]) == 1)
(this.genome_id == 0)  <==>  (size(arg0.innovations[])-1 == orig(size(arg0.innovations[])))
(this.genome_id == 0)  <==>  (size(this.genes[]) == 8)
(this.genome_id == 0)  <==>  (size(this.nodes[]) == 8)
(this.genome_id == 0)  <==>  (size(this.nodes[])-1 == orig(size(this.nodes[])))
(this.genome_id == 0)  <==>  (this.genes[] contains no nulls and has only one value, of length 8)
(this.genome_id == 0)  <==>  (this.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene])
(this.genome_id == 0)  <==>  (this.nodes[] contains no nulls and has only one value, of length 8)
(this.genome_id == 0)  <==>  (this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode])
(this.genome_id == 0)  <==>  (this.traits[] contains no nulls and has only one value, of length 1)
(this.genome_id == 0)  ==>  (arg0.innovations[] elements has only one value)
(this.genome_id == 0)  ==>  (arg0.innovations[].getClass().getName() elements == jneat.Innovation.class)
(this.genome_id == 14)  <==>  (arg0.cur_innov_num == 50)
(this.genome_id == 14)  <==>  (arg0.cur_innov_num == orig(arg0.cur_innov_num))
(this.genome_id == 14)  <==>  (arg0.cur_node_id == 8)
(this.genome_id == 14)  <==>  (arg0.cur_node_id == orig(arg0.cur_node_id))
(this.genome_id == 14)  <==>  (arg0.innovations[] == [])
(this.genome_id == 14)  <==>  (arg0.innovations[].getClass().getName() == [])
(this.genome_id == 14)  <==>  (orig(size(this.genes[])) == 1)
(this.genome_id == 14)  <==>  (orig(size(this.nodes[])) == 3)
(this.genome_id == 14)  <==>  (orig(this.genes[]) contains no nulls and has only one value, of length 1)
(this.genome_id == 14)  <==>  (orig(this.genes[].getClass().getName()) == [jneat.Gene])
(this.genome_id == 14)  <==>  (orig(this.nodes[]) contains no nulls and has only one value, of length 3)
(this.genome_id == 14)  <==>  (orig(this.nodes[].getClass().getName()) == [jneat.NNode, jneat.NNode, jneat.NNode])
(this.genome_id == 14)  <==>  (return == false)
(this.genome_id == 14)  <==>  (size(this.genes[]) == 1)
(this.genome_id == 14)  <==>  (size(this.nodes[]) == 3)
(this.genome_id == 14)  <==>  (this.genes[] contains no nulls and has only one value, of length 1)
(this.genome_id == 14)  <==>  (this.genes[].getClass().getName() == [jneat.Gene])
(this.genome_id == 14)  <==>  (this.nodes[] contains no nulls and has only one value, of length 3)
(this.genome_id == 14)  <==>  (this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode])
(this.genome_id == 14)  <==>  (this.traits[] contains no nulls and has only one value, of length 1)
(this.genome_id == 14)  ==>  (arg0.innovations[] == orig(arg0.innovations[]))
(this.genome_id == 14)  ==>  (orig(this.genes[]) elements has only one value)
(this.genome_id == 14)  ==>  (this.genes[] == orig(this.genes[]))
(this.genome_id == 14)  ==>  (this.genes[] elements has only one value)
(this.genome_id == 14)  ==>  (this.nodes[] == orig(this.nodes[]))
this.phenotype == null
this.genome_id one of { 0, 14 }
this.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene] }
this.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg0.organisms has only one value
arg0.organisms[] contains no nulls and has only one value, of length 37
arg0.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.species has only one value
arg0.species[] contains no nulls and has only one value, of length 30
arg0.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
arg0.species[].getClass().getName() elements == jneat.Species.class
arg0.innovations has only one value
arg0.innovations[] elements has only one value
arg0.innovations[].getClass().getName() elements == jneat.Innovation.class
arg0.innovations[].getClass().getName() one of { [], [jneat.Innovation] }
arg0.cur_node_id one of { 8, 9 }
arg0.cur_innov_num one of { 50, 52 }
arg0.population_size == 50
arg0.last_species == 30
arg0.final_gen == 0
arg0.mean_fitness == 0.46399999999999997
arg0.max_fitness_this_epoch == 0.85
arg0.variance == 0.0
arg0.standard_deviation == 0.0
arg0.avg_fit_eliminated == 0.4884615384615385
arg0.winnergen == 0
arg0.highest_fitness == 0.85
arg0.highest_last_changed == 0
size(this.genes[]) one of { 1, 8 }
size(this.nodes[]) one of { 3, 8 }
size(arg0.organisms[]) == 37
size(arg0.species[]) == 30
size(arg0.innovations[]) one of { 0, 1 }
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT;condition="return == true"
size(this.nodes[])-1 == orig(size(this.nodes[]))
size(arg0.innovations[])-1 == orig(size(arg0.innovations[]))
this.genome_id == 0
this.genes has only one value
this.genes[] contains no nulls and has only one value, of length 8
this.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
this.traits has only one value
this.traits[] contains no nulls and has only one value, of length 1
this.traits[] elements has only one value
this.nodes has only one value
this.nodes[] contains no nulls and has only one value, of length 8
this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg0.innovations[] contains no nulls and has only one value, of length 1
arg0.innovations[].getClass().getName() == [jneat.Innovation]
arg0.cur_node_id == 9
arg0.cur_innov_num == 52
return == true
orig(this) has only one value
orig(this.genes[]) contains no nulls and has only one value, of length 6
orig(this.genes[].getClass().getName()) == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
orig(this.nodes[]) contains no nulls and has only one value, of length 7
orig(this.nodes[].getClass().getName()) == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
size(this.genes[]) == 8
size(this.nodes[]) == 8
size(arg0.innovations[]) == 1
orig(size(this.genes[])) == 6
===========================================================================
jneat.Genome.MutateAddNode(jneat.Population):::EXIT;condition="not(return == true)"
this.genes[] == orig(this.genes[])
this.nodes[] == orig(this.nodes[])
arg0.innovations[] == orig(arg0.innovations[])
arg0.cur_node_id == orig(arg0.cur_node_id)
arg0.cur_innov_num == orig(arg0.cur_innov_num)
this.genome_id == 14
this.genes has only one value
this.genes[] contains no nulls and has only one value, of length 1
this.genes[] elements has only one value
this.genes[].getClass().getName() == [jneat.Gene]
this.traits has only one value
this.traits[] contains no nulls and has only one value, of length 1
this.traits[] elements has only one value
this.nodes has only one value
this.nodes[] contains no nulls and has only one value, of length 3
this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode]
arg0.innovations[] == []
arg0.innovations[].getClass().getName() == []
arg0.cur_node_id == 8
arg0.cur_innov_num == 50
return == false
orig(this) has only one value
size(this.genes[]) == 1
size(this.nodes[]) == 3
===========================================================================
jneat.Genome.MutateGene_Reenable():::ENTER
this.phenotype == null
this.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene] }
size(this.genes[]) one of { 1, 2 }
size(this.nodes[]) one of { 2, 4, 5 }
===========================================================================
jneat.Genome.MutateGene_Reenable():::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
this.phenotype == null
this.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene] }
size(this.genes[]) one of { 1, 2 }
size(this.nodes[]) one of { 2, 4, 5 }
===========================================================================
jneat.Genome.MutateLinkWeight(double, double, jneat.MutationTypeEnum):::ENTER
this.phenotype == null
this.genome_id one of { 1, 4, 5 }
this.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene] }
this.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg0 == 1.0
arg1 == 1.0
arg2 has only one value
jneat.MutationTypeEnum.GAUSSIAN has only one value
jneat.MutationTypeEnum.COLD_GAUSSIAN has only one value
jneat.MutationTypeEnum.$VALUES has only one value
jneat.MutationTypeEnum.$VALUES.getClass().getName() == jneat.MutationTypeEnum[].class
jneat.MutationTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.MutationTypeEnum.$VALUES[].getClass().getName() == [jneat.MutationTypeEnum, jneat.MutationTypeEnum]
jneat.MutationTypeEnum.$VALUES[].getClass().getName() elements == jneat.MutationTypeEnum.class
size(this.genes[]) one of { 1, 3 }
size(this.nodes[]) one of { 2, 7 }
size(jneat.MutationTypeEnum.$VALUES[]) == 2
===========================================================================
jneat.Genome.MutateLinkWeight(double, double, jneat.MutationTypeEnum):::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
jneat.MutationTypeEnum.GAUSSIAN == orig(jneat.MutationTypeEnum.GAUSSIAN)
jneat.MutationTypeEnum.COLD_GAUSSIAN == orig(jneat.MutationTypeEnum.COLD_GAUSSIAN)
jneat.MutationTypeEnum.$VALUES == orig(jneat.MutationTypeEnum.$VALUES)
jneat.MutationTypeEnum.$VALUES.getClass().getName() == orig(jneat.MutationTypeEnum.$VALUES.getClass().getName())
jneat.MutationTypeEnum.$VALUES[] == orig(jneat.MutationTypeEnum.$VALUES[])
this.phenotype == null
this.genome_id one of { 1, 4, 5 }
this.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene] }
this.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
jneat.MutationTypeEnum.GAUSSIAN has only one value
jneat.MutationTypeEnum.COLD_GAUSSIAN has only one value
jneat.MutationTypeEnum.$VALUES has only one value
jneat.MutationTypeEnum.$VALUES.getClass().getName() == jneat.MutationTypeEnum[].class
jneat.MutationTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.MutationTypeEnum.$VALUES[].getClass().getName() == [jneat.MutationTypeEnum, jneat.MutationTypeEnum]
jneat.MutationTypeEnum.$VALUES[].getClass().getName() elements == jneat.MutationTypeEnum.class
size(this.genes[]) one of { 1, 3 }
size(this.nodes[]) one of { 2, 7 }
size(jneat.MutationTypeEnum.$VALUES[]) == 2
===========================================================================
jneat.Genome.MutateToggleEnable(int):::ENTER
this.phenotype == null
this.genome_id one of { 1, 2 }
this.genes[].getClass().getName() one of { [jneat.Gene, jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene] }
this.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg0 == 1
size(this.genes[]) one of { 2, 3 }
size(this.nodes[]) one of { 3, 7 }
===========================================================================
jneat.Genome.MutateToggleEnable(int):::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
this.phenotype == null
this.genome_id one of { 1, 2 }
this.genes[].getClass().getName() one of { [jneat.Gene, jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene] }
this.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
size(this.genes[]) one of { 2, 3 }
size(this.nodes[]) one of { 3, 7 }
===========================================================================
jneat.Genome.SaveGenome():::ENTER
this.phenotype != null
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.SaveGenome():::EXIT
this.phenotype == orig(this.phenotype)
this.phenotype.inputs == orig(this.phenotype.inputs)
this.phenotype.inputs[] == orig(this.phenotype.inputs[])
this.phenotype.outputs == orig(this.phenotype.outputs)
this.phenotype.outputs[] == orig(this.phenotype.outputs[])
this.phenotype.allNodes == orig(this.phenotype.allNodes)
this.phenotype.allNodes[] == orig(this.phenotype.allNodes[])
this.phenotype.genotype == orig(this.phenotype.genotype)
this.phenotype.genotype.phenotype == orig(this.phenotype.genotype.phenotype)
this.phenotype.genotype.genome_id == orig(this.phenotype.genotype.genome_id)
this.phenotype.genotype.genes == orig(this.phenotype.genotype.genes)
this.phenotype.genotype.genes[] == orig(this.phenotype.genotype.genes[])
this.phenotype.genotype.traits == orig(this.phenotype.genotype.traits)
this.phenotype.genotype.traits[] == orig(this.phenotype.genotype.traits[])
this.phenotype.genotype.nodes == orig(this.phenotype.genotype.nodes)
this.phenotype.genotype.nodes[] == orig(this.phenotype.genotype.nodes[])
this.phenotype.net_id == orig(this.phenotype.net_id)
this.phenotype.status == orig(this.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
this.phenotype != null
return != null
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.duplicate(int):::ENTER
this.phenotype != null
arg0 >= 0
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.duplicate(int):::EXIT
this.phenotype == orig(this.phenotype)
this.phenotype.inputs == orig(this.phenotype.inputs)
this.phenotype.inputs[] == orig(this.phenotype.inputs[])
this.phenotype.outputs == orig(this.phenotype.outputs)
this.phenotype.outputs[] == orig(this.phenotype.outputs[])
this.phenotype.allNodes == orig(this.phenotype.allNodes)
this.phenotype.allNodes[] == orig(this.phenotype.allNodes[])
this.phenotype.genotype == orig(this.phenotype.genotype)
this.phenotype.genotype.phenotype == orig(this.phenotype.genotype.phenotype)
this.phenotype.genotype.genome_id == orig(this.phenotype.genotype.genome_id)
this.phenotype.genotype.genes == orig(this.phenotype.genotype.genes)
this.phenotype.genotype.genes[] == orig(this.phenotype.genotype.genes[])
this.phenotype.genotype.traits == orig(this.phenotype.genotype.traits)
this.phenotype.genotype.traits[] == orig(this.phenotype.genotype.traits[])
this.phenotype.genotype.nodes == orig(this.phenotype.genotype.nodes)
this.phenotype.genotype.nodes[] == orig(this.phenotype.genotype.nodes[])
this.phenotype.net_id == orig(this.phenotype.net_id)
this.phenotype.status == orig(this.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
this.phenotype != null
return != null
return.phenotype == null
return.genome_id >= 0
return.genes != null
return.genes[] elements != null
return.genes[].getClass().getName() elements == jneat.Gene.class
return.traits != null
return.traits[] elements != null
return.traits[].getClass().getName() == [jneat.Trait]
return.traits[].getClass().getName() elements == jneat.Trait.class
return.nodes != null
return.nodes[] elements != null
return.nodes[].getClass().getName() elements == jneat.NNode.class
size(this.genes[]) >= 1
size(return.genes[]) >= 1
size(return.traits[]) == 1
size(return.nodes[]) >= 2
===========================================================================
jneat.Genome.node_insert(java.util.Vector, jneat.NNode):::ENTER
this has only one value
this.phenotype == null
this.genome_id == 0
this.genes has only one value
this.genes[] contains no nulls and has only one value, of length 8
this.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
this.traits has only one value
this.traits[] contains no nulls and has only one value, of length 1
this.traits[] elements has only one value
this.nodes has only one value
this.nodes[] contains no nulls and has only one value, of length 7
this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 7
arg0[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg0[].getClass().getName() elements == jneat.NNode.class
arg1 has only one value
arg1.fType has only one value
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg1.nType has only one value
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg1.gNodeLabel has only one value
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg1.activesum == 0.0
arg1.activation == 0.0
arg1.last_activation == 0.0
arg1.prior_activation == 0.0
arg1.active_flag == false
arg1.is_traversed == false
arg1.id == 8
arg1.activation_count == 0
arg1.inner_level == 0
arg1.incoming has only one value
arg1.incoming[] == []
arg1.incoming[].getClass().getName() == []
arg1.outgoing has only one value
arg1.outgoing[] == []
arg1.outgoing[].getClass().getName() == []
arg1.nodeTrait has only one value
arg1.nodeTrait.id == 2230
arg1.nodeTrait.params has only one value
arg1.nodeTrait.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.nodeTrait.params[] elements == 0.0
arg1.dup == null
arg1.analogue == null
arg1.params has only one value
arg1.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements == 0.0
size(this.genes[]) == 8
size(this.nodes[]) == 7
size(arg0[]) == 7
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg1.nodeTrait.params[]) == 8
size(arg1.params[]) == 8
===========================================================================
jneat.Genome.node_insert(java.util.Vector, jneat.NNode):::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
arg1.fType == orig(arg1.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
arg1.nType == orig(arg1.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
arg1.gNodeLabel == orig(arg1.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
arg1.activesum == orig(arg1.activesum)
arg1.activation == orig(arg1.activation)
arg1.last_activation == orig(arg1.last_activation)
arg1.prior_activation == orig(arg1.prior_activation)
arg1.active_flag == orig(arg1.active_flag)
arg1.is_traversed == orig(arg1.is_traversed)
arg1.id == orig(arg1.id)
arg1.activation_count == orig(arg1.activation_count)
arg1.inner_level == orig(arg1.inner_level)
arg1.incoming == orig(arg1.incoming)
arg1.incoming[] == orig(arg1.incoming[])
arg1.outgoing == orig(arg1.outgoing)
arg1.outgoing[] == orig(arg1.outgoing[])
arg1.nodeTrait == orig(arg1.nodeTrait)
arg1.nodeTrait.id == orig(arg1.nodeTrait.id)
arg1.nodeTrait.params == orig(arg1.nodeTrait.params)
arg1.nodeTrait.params[] == orig(arg1.nodeTrait.params[])
arg1.dup == orig(arg1.dup)
arg1.analogue == orig(arg1.analogue)
arg1.params == orig(arg1.params)
arg1.params[] == orig(arg1.params[])
size(this.nodes[])-1 == orig(size(this.nodes[]))
size(arg0[])-1 == orig(size(arg0[]))
this.phenotype == null
this.genome_id == 0
this.genes has only one value
this.genes[] contains no nulls and has only one value, of length 8
this.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
this.traits has only one value
this.traits[] contains no nulls and has only one value, of length 1
this.traits[] elements has only one value
this.nodes has only one value
this.nodes[] contains no nulls and has only one value, of length 8
this.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg0[] contains no nulls and has only one value, of length 8
arg0[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg0[].getClass().getName() elements == jneat.NNode.class
arg1.fType has only one value
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg1.nType has only one value
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg1.gNodeLabel has only one value
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg1.activesum == 0.0
arg1.activation == 0.0
arg1.last_activation == 0.0
arg1.prior_activation == 0.0
arg1.active_flag == false
arg1.is_traversed == false
arg1.id == 8
arg1.activation_count == 0
arg1.inner_level == 0
arg1.incoming has only one value
arg1.incoming[] == []
arg1.incoming[].getClass().getName() == []
arg1.outgoing has only one value
arg1.outgoing[] == []
arg1.outgoing[].getClass().getName() == []
arg1.nodeTrait has only one value
arg1.nodeTrait.id == 2230
arg1.nodeTrait.params has only one value
arg1.nodeTrait.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.nodeTrait.params[] elements == 0.0
arg1.dup == null
arg1.analogue == null
arg1.params has only one value
arg1.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements == 0.0
size(this.genes[]) == 8
size(this.nodes[]) == 8
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg1.nodeTrait.params[]) == 8
size(arg1.params[]) == 8
===========================================================================
jneat.Genome.verify():::ENTER
this.phenotype == null
===========================================================================
jneat.Genome.verify():::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
(return == false)  ==>  (this.genes[] == [])
(return == false)  ==>  (this.genes[].getClass().getName() == [])
(return == true)  <==>  (size(this.genes[]) >= 1)
(return == true)  ==>  (this.genes[].getClass().getName() elements == jneat.Gene.class)
this.phenotype == null
===========================================================================
jneat.Genome.verify():::EXIT;condition="return == true"
return == true
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.verify():::EXIT;condition="not(return == true)"
this.genes[] == []
this.genes[].getClass().getName() == []
return == false
===========================================================================
jneat.Genome.verify(boolean):::ENTER
this.phenotype == null
arg0 == false
===========================================================================
jneat.Genome.verify(boolean):::EXIT1179
this.genes[] == []
this.genes[].getClass().getName() == []
return == false
===========================================================================
jneat.Genome.verify(boolean):::EXIT1179;condition="not(return == true)"
===========================================================================
jneat.Genome.verify(boolean):::EXIT1256
return == true
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.verify(boolean):::EXIT1256;condition="return == true"
===========================================================================
jneat.Genome.verify(boolean):::EXIT
this.phenotype == orig(this.phenotype)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome_id == orig(this.genome_id)
this.genes == orig(this.genes)
this.genes[] == orig(this.genes[])
this.traits == orig(this.traits)
this.traits[] == orig(this.traits[])
this.nodes == orig(this.nodes)
this.nodes[] == orig(this.nodes[])
(return == false)  ==>  (this.genes[] == [])
(return == false)  ==>  (this.genes[].getClass().getName() == [])
(return == true)  <==>  (size(this.genes[]) >= 1)
(return == true)  ==>  (this.genes[].getClass().getName() elements == jneat.Gene.class)
this.phenotype == null
===========================================================================
jneat.Genome.verify(boolean):::EXIT;condition="return == true"
return == true
size(this.genes[]) >= 1
===========================================================================
jneat.Genome.verify(boolean):::EXIT;condition="not(return == true)"
this.genes[] == []
this.genes[].getClass().getName() == []
return == false
===========================================================================
jneat.Innovation:::OBJECT
this.innovation_type == jneat.InnovationTypeEnum.NEW_NODE
this.inNode.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == this.outNode.fType
jneat.NodeFuncEnum.SIGMOID == this.newNode.fType
this.inNode.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == this.outNode.nType
jneat.NodeTypeEnum.NEURON == this.newNode.nType
this.inNode.gNodeLabel == jneat.NodeLabelEnum.HIDDEN
jneat.NodeLabelEnum.HIDDEN == this.outNode.gNodeLabel
jneat.NodeLabelEnum.HIDDEN == this.newNode.gNodeLabel
this.inNode.nodeTrait == this.outNode.nodeTrait
this.inNode.nodeTrait.id == this.outNode.nodeTrait.id
this.inNode.nodeTrait.params == this.outNode.nodeTrait.params
this.inNode.analogue == this.outNode.analogue
this has only one value
jneat.InnovationTypeEnum.NEW_NODE has only one value
jneat.InnovationTypeEnum.NEW_LINK has only one value
jneat.InnovationTypeEnum.$VALUES has only one value
jneat.InnovationTypeEnum.$VALUES.getClass().getName() == jneat.InnovationTypeEnum[].class
jneat.InnovationTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.InnovationTypeEnum.$VALUES[].getClass().getName() == [jneat.InnovationTypeEnum, jneat.InnovationTypeEnum]
jneat.InnovationTypeEnum.$VALUES[].getClass().getName() elements == jneat.InnovationTypeEnum.class
this.inNode has only one value
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
this.inNode.activesum == 0.0
this.inNode.activation == 0.0
this.inNode.last_activation == 0.0
this.inNode.prior_activation == 0.0
this.inNode.active_flag == false
this.inNode.is_traversed == false
this.inNode.id == 3
this.inNode.activation_count == 0
this.inNode.inner_level == 0
this.inNode.incoming has only one value
this.inNode.incoming[] == []
this.inNode.incoming[].getClass().getName() == []
this.inNode.outgoing has only one value
this.inNode.outgoing[] == []
this.inNode.outgoing[].getClass().getName() == []
this.inNode.nodeTrait has only one value
this.inNode.nodeTrait.id == 129
this.inNode.nodeTrait.params has only one value
this.inNode.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.inNode.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.inNode.dup == null
this.inNode.analogue == null
this.inNode.params has only one value
this.inNode.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.inNode.params[] elements == 0.0
this.outNode has only one value
this.outNode.activesum == 0.0
this.outNode.activation == 0.0
this.outNode.last_activation == 0.0
this.outNode.prior_activation == 0.0
this.outNode.active_flag == false
this.outNode.is_traversed == false
this.outNode.id == 4
this.outNode.activation_count == 0
this.outNode.inner_level == 0
this.outNode.incoming has only one value
this.outNode.incoming[] == []
this.outNode.incoming[].getClass().getName() == []
this.outNode.outgoing has only one value
this.outNode.outgoing[] == []
this.outNode.outgoing[].getClass().getName() == []
this.outNode.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.outNode.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.outNode.dup == null
this.outNode.params has only one value
this.outNode.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.outNode.params[] elements == 0.0
this.innovation_num1 == 50
this.innovation_num2 == 51
this.new_weight == 0.0
this.newTrait == null
this.newNode has only one value
this.newNode.activesum == 0.0
this.newNode.activation == 0.0
this.newNode.last_activation == 0.0
this.newNode.prior_activation == 0.0
this.newNode.active_flag == false
this.newNode.is_traversed == false
this.newNode.id == 8
this.newNode.activation_count == 0
this.newNode.inner_level == 0
this.newNode.incoming has only one value
this.newNode.incoming[] == []
this.newNode.incoming[].getClass().getName() == []
this.newNode.outgoing has only one value
this.newNode.outgoing[] == []
this.newNode.outgoing[].getClass().getName() == []
this.newNode.nodeTrait has only one value
this.newNode.nodeTrait.id == 2230
this.newNode.nodeTrait.params has only one value
this.newNode.nodeTrait.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.newNode.nodeTrait.params[] elements == 0.0
this.newNode.dup == null
this.newNode.analogue == null
this.newNode.params has only one value
this.newNode.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.newNode.params[] elements == 0.0
this.old_innovation_num == 23
this.recurrent == false
size(jneat.InnovationTypeEnum.$VALUES[]) == 2
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(this.inNode.nodeTrait.params[]) == 8
size(this.inNode.params[]) == 8
size(this.outNode.nodeTrait.params[]) == 8
size(this.outNode.params[]) == 8
size(this.newNode.nodeTrait.params[]) == 8
size(this.newNode.params[]) == 8
===========================================================================
jneat.Innovation.Innovation(jneat.NNode, jneat.NNode, int, int, jneat.NNode, int):::ENTER
arg0.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg1.fType
jneat.NodeFuncEnum.SIGMOID == arg4.fType
arg0.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == arg1.nType
jneat.NodeTypeEnum.NEURON == arg4.nType
arg0.gNodeLabel == jneat.NodeLabelEnum.HIDDEN
jneat.NodeLabelEnum.HIDDEN == arg1.gNodeLabel
jneat.NodeLabelEnum.HIDDEN == arg4.gNodeLabel
arg0.nodeTrait == arg1.nodeTrait
arg0.nodeTrait.id == arg1.nodeTrait.id
arg0.nodeTrait.params == arg1.nodeTrait.params
arg0 has only one value
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id == 3
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming has only one value
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing has only one value
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait has only one value
arg0.nodeTrait.id == 129
arg0.nodeTrait.params has only one value
arg0.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.dup == null
arg0.analogue == null
arg0.params has only one value
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
arg1 has only one value
arg1.activesum == 0.0
arg1.activation == 0.0
arg1.last_activation == 0.0
arg1.prior_activation == 0.0
arg1.active_flag == false
arg1.is_traversed == false
arg1.id == 4
arg1.activation_count == 0
arg1.inner_level == 0
arg1.incoming has only one value
arg1.incoming[] == []
arg1.incoming[].getClass().getName() == []
arg1.outgoing has only one value
arg1.outgoing[] == []
arg1.outgoing[].getClass().getName() == []
arg1.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg1.dup == null
arg1.analogue == null
arg1.params has only one value
arg1.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements == 0.0
arg2 == 50
arg3 == 51
arg4 has only one value
arg4.activesum == 0.0
arg4.activation == 0.0
arg4.last_activation == 0.0
arg4.prior_activation == 0.0
arg4.active_flag == false
arg4.is_traversed == false
arg4.id == 8
arg4.activation_count == 0
arg4.inner_level == 0
arg4.incoming has only one value
arg4.incoming[] == []
arg4.incoming[].getClass().getName() == []
arg4.outgoing has only one value
arg4.outgoing[] == []
arg4.outgoing[].getClass().getName() == []
arg4.nodeTrait has only one value
arg4.nodeTrait.id == 2230
arg4.nodeTrait.params has only one value
arg4.nodeTrait.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg4.nodeTrait.params[] elements == 0.0
arg4.dup == null
arg4.analogue == null
arg4.params has only one value
arg4.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg4.params[] elements == 0.0
arg5 == 23
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
size(arg1.nodeTrait.params[]) == 8
size(arg1.params[]) == 8
size(arg4.nodeTrait.params[]) == 8
size(arg4.params[]) == 8
===========================================================================
jneat.Innovation.Innovation(jneat.NNode, jneat.NNode, int, int, jneat.NNode, int):::EXIT
this.inNode == orig(arg0)
jneat.NodeFuncEnum.SIGMOID == arg0.fType
jneat.NodeFuncEnum.SIGMOID == arg1.fType
jneat.NodeFuncEnum.SIGMOID == arg4.fType
jneat.NodeFuncEnum.SIGMOID == orig(arg0.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(arg1.fType)
jneat.NodeFuncEnum.SIGMOID == orig(arg4.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
jneat.NodeTypeEnum.NEURON == arg0.nType
jneat.NodeTypeEnum.NEURON == arg1.nType
jneat.NodeTypeEnum.NEURON == arg4.nType
jneat.NodeTypeEnum.NEURON == orig(arg0.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.NEURON == orig(arg1.nType)
jneat.NodeTypeEnum.NEURON == orig(arg4.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == arg0.gNodeLabel
jneat.NodeLabelEnum.HIDDEN == arg1.gNodeLabel
jneat.NodeLabelEnum.HIDDEN == arg4.gNodeLabel
jneat.NodeLabelEnum.HIDDEN == orig(arg0.gNodeLabel)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.HIDDEN == orig(arg1.gNodeLabel)
jneat.NodeLabelEnum.HIDDEN == orig(arg4.gNodeLabel)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.inNode.activesum == arg0.activesum
this.inNode.activation == arg0.activation
this.inNode.last_activation == arg0.last_activation
this.inNode.prior_activation == arg0.prior_activation
this.inNode.active_flag == arg0.active_flag
this.inNode.is_traversed == arg0.is_traversed
this.inNode.id == arg0.id
this.inNode.activation_count == arg0.activation_count
this.inNode.inner_level == arg0.inner_level
this.inNode.incoming == arg0.incoming
this.inNode.outgoing == arg0.outgoing
this.inNode.nodeTrait == arg0.nodeTrait
this.inNode.nodeTrait.id == arg0.nodeTrait.id
this.inNode.nodeTrait.params == arg0.nodeTrait.params
this.inNode.params == arg0.params
this.outNode == orig(arg1)
this.outNode.activesum == arg1.activesum
this.outNode.activation == arg1.activation
this.outNode.last_activation == arg1.last_activation
this.outNode.prior_activation == arg1.prior_activation
this.outNode.active_flag == arg1.active_flag
this.outNode.is_traversed == arg1.is_traversed
this.outNode.id == arg1.id
this.outNode.activation_count == arg1.activation_count
this.outNode.inner_level == arg1.inner_level
this.outNode.incoming == arg1.incoming
this.outNode.outgoing == arg1.outgoing
this.outNode.nodeTrait == arg0.nodeTrait
this.outNode.nodeTrait.id == arg0.nodeTrait.id
this.outNode.nodeTrait.params == arg0.nodeTrait.params
this.outNode.params == arg1.params
this.innovation_num1 == orig(arg2)
this.innovation_num2 == orig(arg3)
this.newNode == orig(arg4)
this.newNode.activesum == arg4.activesum
this.newNode.activation == arg4.activation
this.newNode.last_activation == arg4.last_activation
this.newNode.prior_activation == arg4.prior_activation
this.newNode.active_flag == arg4.active_flag
this.newNode.is_traversed == arg4.is_traversed
this.newNode.id == arg4.id
this.newNode.activation_count == arg4.activation_count
this.newNode.inner_level == arg4.inner_level
this.newNode.incoming == arg4.incoming
this.newNode.outgoing == arg4.outgoing
this.newNode.nodeTrait == arg4.nodeTrait
this.newNode.nodeTrait.id == arg4.nodeTrait.id
this.newNode.nodeTrait.params == arg4.nodeTrait.params
this.newNode.params == arg4.params
this.old_innovation_num == orig(arg5)
arg0.activesum == orig(arg0.activesum)
arg0.activation == orig(arg0.activation)
arg0.last_activation == orig(arg0.last_activation)
arg0.prior_activation == orig(arg0.prior_activation)
arg0.active_flag == orig(arg0.active_flag)
arg0.is_traversed == orig(arg0.is_traversed)
arg0.id == orig(arg0.id)
arg0.activation_count == orig(arg0.activation_count)
arg0.inner_level == orig(arg0.inner_level)
arg0.incoming == orig(arg0.incoming)
arg0.incoming[] == orig(arg0.incoming[])
arg0.outgoing == orig(arg0.outgoing)
arg0.outgoing[] == orig(arg0.outgoing[])
arg0.nodeTrait == arg1.nodeTrait
arg0.nodeTrait == orig(arg0.nodeTrait)
arg0.nodeTrait == orig(arg1.nodeTrait)
arg0.nodeTrait.id == arg1.nodeTrait.id
arg0.nodeTrait.id == orig(arg0.nodeTrait.id)
arg0.nodeTrait.id == orig(arg1.nodeTrait.id)
arg0.nodeTrait.params == arg1.nodeTrait.params
arg0.nodeTrait.params == orig(arg0.nodeTrait.params)
arg0.nodeTrait.params == orig(arg1.nodeTrait.params)
arg0.nodeTrait.params[] == orig(arg0.nodeTrait.params[])
arg0.dup == orig(arg0.dup)
arg0.analogue == orig(arg0.analogue)
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
arg1.activesum == orig(arg1.activesum)
arg1.activation == orig(arg1.activation)
arg1.last_activation == orig(arg1.last_activation)
arg1.prior_activation == orig(arg1.prior_activation)
arg1.active_flag == orig(arg1.active_flag)
arg1.is_traversed == orig(arg1.is_traversed)
arg1.id == orig(arg1.id)
arg1.activation_count == orig(arg1.activation_count)
arg1.inner_level == orig(arg1.inner_level)
arg1.incoming == orig(arg1.incoming)
arg1.incoming[] == orig(arg1.incoming[])
arg1.outgoing == orig(arg1.outgoing)
arg1.outgoing[] == orig(arg1.outgoing[])
arg1.nodeTrait.params[] == orig(arg1.nodeTrait.params[])
arg1.dup == orig(arg1.dup)
arg1.analogue == orig(arg1.analogue)
arg1.params == orig(arg1.params)
arg1.params[] == orig(arg1.params[])
arg4.activesum == orig(arg4.activesum)
arg4.activation == orig(arg4.activation)
arg4.last_activation == orig(arg4.last_activation)
arg4.prior_activation == orig(arg4.prior_activation)
arg4.active_flag == orig(arg4.active_flag)
arg4.is_traversed == orig(arg4.is_traversed)
arg4.id == orig(arg4.id)
arg4.activation_count == orig(arg4.activation_count)
arg4.inner_level == orig(arg4.inner_level)
arg4.incoming == orig(arg4.incoming)
arg4.incoming[] == orig(arg4.incoming[])
arg4.outgoing == orig(arg4.outgoing)
arg4.outgoing[] == orig(arg4.outgoing[])
arg4.nodeTrait == orig(arg4.nodeTrait)
arg4.nodeTrait.id == orig(arg4.nodeTrait.id)
arg4.nodeTrait.params == orig(arg4.nodeTrait.params)
arg4.nodeTrait.params[] == orig(arg4.nodeTrait.params[])
arg4.dup == orig(arg4.dup)
arg4.analogue == orig(arg4.analogue)
arg4.params == orig(arg4.params)
arg4.params[] == orig(arg4.params[])
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id == 3
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming has only one value
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing has only one value
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait has only one value
arg0.nodeTrait.id == 129
arg0.nodeTrait.params has only one value
arg0.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.dup == null
arg0.analogue == null
arg0.params has only one value
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
arg1.activesum == 0.0
arg1.activation == 0.0
arg1.last_activation == 0.0
arg1.prior_activation == 0.0
arg1.active_flag == false
arg1.is_traversed == false
arg1.id == 4
arg1.activation_count == 0
arg1.inner_level == 0
arg1.incoming has only one value
arg1.incoming[] == []
arg1.incoming[].getClass().getName() == []
arg1.outgoing has only one value
arg1.outgoing[] == []
arg1.outgoing[].getClass().getName() == []
arg1.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg1.dup == null
arg1.analogue == null
arg1.params has only one value
arg1.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements == 0.0
arg4.activesum == 0.0
arg4.activation == 0.0
arg4.last_activation == 0.0
arg4.prior_activation == 0.0
arg4.active_flag == false
arg4.is_traversed == false
arg4.id == 8
arg4.activation_count == 0
arg4.inner_level == 0
arg4.incoming has only one value
arg4.incoming[] == []
arg4.incoming[].getClass().getName() == []
arg4.outgoing has only one value
arg4.outgoing[] == []
arg4.outgoing[].getClass().getName() == []
arg4.nodeTrait has only one value
arg4.nodeTrait.id == 2230
arg4.nodeTrait.params has only one value
arg4.nodeTrait.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg4.nodeTrait.params[] elements == 0.0
arg4.dup == null
arg4.analogue == null
arg4.params has only one value
arg4.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg4.params[] elements == 0.0
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
size(arg1.nodeTrait.params[]) == 8
size(arg1.params[]) == 8
size(arg4.nodeTrait.params[]) == 8
size(arg4.params[]) == 8
===========================================================================
jneat.InnovationTypeEnum:::OBJECT
===========================================================================
jneat.InnovationTypeEnum.InnovationTypeEnum(java.lang.String, int):::ENTER
arg0.toString one of { "NEW_LINK", "NEW_NODE" }
arg1 one of { 0, 1 }
===========================================================================
jneat.InnovationTypeEnum.InnovationTypeEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "NEW_LINK", "NEW_NODE" }
===========================================================================
jneat.JNEATGlobal:::CLASS
jneat.JNEATGlobal.p_disjoint_coeff == jneat.JNEATGlobal.p_excess_coeff
jneat.JNEATGlobal.p_disjoint_coeff == jneat.JNEATGlobal.p_mutdiff_coeff
jneat.JNEATGlobal.p_disjoint_coeff == jneat.JNEATGlobal.p_compat_threshold
jneat.JNEATGlobal.p_age_significance == jneat.JNEATGlobal.p_mutate_only_prob
jneat.JNEATGlobal.p_age_significance == jneat.JNEATGlobal.p_mutate_weight_power
jneat.JNEATGlobal.p_mutate_add_link_prob == jneat.JNEATGlobal.p_mutate_add_node_prob
jneat.JNEATGlobal.p_mutate_add_link_prob == jneat.JNEATGlobal.p_mutate_gene_reenable_prob
jneat.JNEATGlobal.p_mutate_add_link_prob == jneat.JNEATGlobal.p_mutate_link_weights_prob
jneat.JNEATGlobal.p_mutate_add_link_prob == jneat.JNEATGlobal.p_mutate_toggle_enable_prob
jneat.JNEATGlobal.p_mutate_add_link_prob == jneat.JNEATGlobal.p_mutate_toggle_reenable_prob
jneat.JNEATGlobal.p_mutate_link_trait_prob == jneat.JNEATGlobal.p_mutate_node_trait_prob
jneat.JNEATGlobal.p_mutate_link_trait_prob == jneat.JNEATGlobal.p_mutate_random_trait_prob
jneat.JNEATGlobal.p_mutate_link_trait_prob == jneat.JNEATGlobal.p_recur_only_prob
jneat.JNEATGlobal.numGenes == 0
jneat.JNEATGlobal.numGenomes >= 0
jneat.JNEATGlobal.numNetworks >= 0
jneat.JNEATGlobal.numNodes >= 0
jneat.JNEATGlobal.numLinks >= 0
jneat.JNEATGlobal.numSpecies == 0
jneat.JNEATGlobal.p_disjoint_coeff == 0.1
jneat.JNEATGlobal.p_dropoff_age == 5
jneat.JNEATGlobal.p_dropoff_coeff == 0.5
jneat.JNEATGlobal.p_age_youngOrganism == 10
jneat.JNEATGlobal.p_age_significance == 1.0
jneat.JNEATGlobal.p_survival_threshold == 0.5
jneat.JNEATGlobal.p_mutate_add_link_prob == 0.05
jneat.JNEATGlobal.p_mutate_link_trait_prob == 0.0
jneat.JNEATGlobal.p_newlink_tries == 1
jneat.JNEATGlobal.p_interspecies_mate_rate == 0.0
jneat.JNEATGlobal.p_mate_multipoint_prob == 0.0
jneat.JNEATGlobal.p_mate_multipoint_avg_prob == 0.0
jneat.JNEATGlobal.p_mate_singlepoint_prob == 0.0
jneat.JNEATGlobal.p_mate_only_prob == 0.0
jneat.JNEATGlobal.p_babies_stolen == 0
jneat.JNEATGlobal.numTraitParams == 8
jneat.JNEATGlobal.traitParamMutProb == 0.0
jneat.JNEATGlobal.traitMutationPower == 1.0
jneat.JNEATGlobal.maxActivationCycles == 30
jneat.JNEATGlobal.numGenomes <= jneat.JNEATGlobal.numNetworks
===========================================================================
jneat.JNEATGlobal.NewLinkID():::ENTER
===========================================================================
jneat.JNEATGlobal.NewLinkID():::EXIT
jneat.JNEATGlobal.numGenes == orig(jneat.JNEATGlobal.numGenes)
jneat.JNEATGlobal.numGenomes == orig(jneat.JNEATGlobal.numGenomes)
jneat.JNEATGlobal.numNetworks == orig(jneat.JNEATGlobal.numNetworks)
jneat.JNEATGlobal.numNodes == orig(jneat.JNEATGlobal.numNodes)
jneat.JNEATGlobal.numSpecies == orig(jneat.JNEATGlobal.numSpecies)
jneat.JNEATGlobal.numTraits == orig(jneat.JNEATGlobal.numTraits)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_disjoint_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_excess_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_mutdiff_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_compat_threshold)
jneat.JNEATGlobal.p_dropoff_age == orig(jneat.JNEATGlobal.p_dropoff_age)
jneat.JNEATGlobal.p_dropoff_coeff == orig(jneat.JNEATGlobal.p_dropoff_coeff)
jneat.JNEATGlobal.p_age_youngOrganism == orig(jneat.JNEATGlobal.p_age_youngOrganism)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_age_significance)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_only_prob)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_weight_power)
jneat.JNEATGlobal.p_survival_threshold == orig(jneat.JNEATGlobal.p_survival_threshold)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_link_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_node_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_gene_reenable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_link_weights_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_enable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_reenable_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_link_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_node_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_random_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_recur_only_prob)
jneat.JNEATGlobal.p_newlink_tries == orig(jneat.JNEATGlobal.p_newlink_tries)
jneat.JNEATGlobal.p_interspecies_mate_rate == orig(jneat.JNEATGlobal.p_interspecies_mate_rate)
jneat.JNEATGlobal.p_mate_multipoint_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_prob)
jneat.JNEATGlobal.p_mate_multipoint_avg_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_avg_prob)
jneat.JNEATGlobal.p_mate_singlepoint_prob == orig(jneat.JNEATGlobal.p_mate_singlepoint_prob)
jneat.JNEATGlobal.p_mate_only_prob == orig(jneat.JNEATGlobal.p_mate_only_prob)
jneat.JNEATGlobal.p_babies_stolen == orig(jneat.JNEATGlobal.p_babies_stolen)
jneat.JNEATGlobal.numTraitParams == orig(jneat.JNEATGlobal.numTraitParams)
jneat.JNEATGlobal.traitParamMutProb == orig(jneat.JNEATGlobal.traitParamMutProb)
jneat.JNEATGlobal.traitMutationPower == orig(jneat.JNEATGlobal.traitMutationPower)
jneat.JNEATGlobal.maxActivationCycles == orig(jneat.JNEATGlobal.maxActivationCycles)
return == orig(jneat.JNEATGlobal.numLinks)
jneat.JNEATGlobal.numLinks - return - 1 == 0
===========================================================================
jneat.JNEATGlobal.NewNodeID():::ENTER
===========================================================================
jneat.JNEATGlobal.NewNodeID():::EXIT
jneat.JNEATGlobal.numGenes == orig(jneat.JNEATGlobal.numGenes)
jneat.JNEATGlobal.numGenomes == orig(jneat.JNEATGlobal.numGenomes)
jneat.JNEATGlobal.numNetworks == orig(jneat.JNEATGlobal.numNetworks)
jneat.JNEATGlobal.numLinks == orig(jneat.JNEATGlobal.numLinks)
jneat.JNEATGlobal.numSpecies == orig(jneat.JNEATGlobal.numSpecies)
jneat.JNEATGlobal.numTraits == orig(jneat.JNEATGlobal.numTraits)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_disjoint_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_excess_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_mutdiff_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_compat_threshold)
jneat.JNEATGlobal.p_dropoff_age == orig(jneat.JNEATGlobal.p_dropoff_age)
jneat.JNEATGlobal.p_dropoff_coeff == orig(jneat.JNEATGlobal.p_dropoff_coeff)
jneat.JNEATGlobal.p_age_youngOrganism == orig(jneat.JNEATGlobal.p_age_youngOrganism)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_age_significance)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_only_prob)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_weight_power)
jneat.JNEATGlobal.p_survival_threshold == orig(jneat.JNEATGlobal.p_survival_threshold)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_link_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_node_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_gene_reenable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_link_weights_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_enable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_reenable_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_link_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_node_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_random_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_recur_only_prob)
jneat.JNEATGlobal.p_newlink_tries == orig(jneat.JNEATGlobal.p_newlink_tries)
jneat.JNEATGlobal.p_interspecies_mate_rate == orig(jneat.JNEATGlobal.p_interspecies_mate_rate)
jneat.JNEATGlobal.p_mate_multipoint_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_prob)
jneat.JNEATGlobal.p_mate_multipoint_avg_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_avg_prob)
jneat.JNEATGlobal.p_mate_singlepoint_prob == orig(jneat.JNEATGlobal.p_mate_singlepoint_prob)
jneat.JNEATGlobal.p_mate_only_prob == orig(jneat.JNEATGlobal.p_mate_only_prob)
jneat.JNEATGlobal.p_babies_stolen == orig(jneat.JNEATGlobal.p_babies_stolen)
jneat.JNEATGlobal.numTraitParams == orig(jneat.JNEATGlobal.numTraitParams)
jneat.JNEATGlobal.traitParamMutProb == orig(jneat.JNEATGlobal.traitParamMutProb)
jneat.JNEATGlobal.traitMutationPower == orig(jneat.JNEATGlobal.traitMutationPower)
jneat.JNEATGlobal.maxActivationCycles == orig(jneat.JNEATGlobal.maxActivationCycles)
return == orig(jneat.JNEATGlobal.numNodes)
jneat.JNEATGlobal.numNodes - return - 1 == 0
===========================================================================
jneat.JNEATGlobal.NewTraitID():::ENTER
===========================================================================
jneat.JNEATGlobal.NewTraitID():::EXIT
jneat.JNEATGlobal.numGenes == orig(jneat.JNEATGlobal.numGenes)
jneat.JNEATGlobal.numGenomes == orig(jneat.JNEATGlobal.numGenomes)
jneat.JNEATGlobal.numNetworks == orig(jneat.JNEATGlobal.numNetworks)
jneat.JNEATGlobal.numNodes == orig(jneat.JNEATGlobal.numNodes)
jneat.JNEATGlobal.numLinks == orig(jneat.JNEATGlobal.numLinks)
jneat.JNEATGlobal.numSpecies == orig(jneat.JNEATGlobal.numSpecies)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_disjoint_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_excess_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_mutdiff_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_compat_threshold)
jneat.JNEATGlobal.p_dropoff_age == orig(jneat.JNEATGlobal.p_dropoff_age)
jneat.JNEATGlobal.p_dropoff_coeff == orig(jneat.JNEATGlobal.p_dropoff_coeff)
jneat.JNEATGlobal.p_age_youngOrganism == orig(jneat.JNEATGlobal.p_age_youngOrganism)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_age_significance)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_only_prob)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_weight_power)
jneat.JNEATGlobal.p_survival_threshold == orig(jneat.JNEATGlobal.p_survival_threshold)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_link_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_node_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_gene_reenable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_link_weights_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_enable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_reenable_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_link_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_node_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_random_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_recur_only_prob)
jneat.JNEATGlobal.p_newlink_tries == orig(jneat.JNEATGlobal.p_newlink_tries)
jneat.JNEATGlobal.p_interspecies_mate_rate == orig(jneat.JNEATGlobal.p_interspecies_mate_rate)
jneat.JNEATGlobal.p_mate_multipoint_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_prob)
jneat.JNEATGlobal.p_mate_multipoint_avg_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_avg_prob)
jneat.JNEATGlobal.p_mate_singlepoint_prob == orig(jneat.JNEATGlobal.p_mate_singlepoint_prob)
jneat.JNEATGlobal.p_mate_only_prob == orig(jneat.JNEATGlobal.p_mate_only_prob)
jneat.JNEATGlobal.p_babies_stolen == orig(jneat.JNEATGlobal.p_babies_stolen)
jneat.JNEATGlobal.numTraitParams == orig(jneat.JNEATGlobal.numTraitParams)
jneat.JNEATGlobal.traitParamMutProb == orig(jneat.JNEATGlobal.traitParamMutProb)
jneat.JNEATGlobal.traitMutationPower == orig(jneat.JNEATGlobal.traitMutationPower)
jneat.JNEATGlobal.maxActivationCycles == orig(jneat.JNEATGlobal.maxActivationCycles)
return == orig(jneat.JNEATGlobal.numTraits)
jneat.JNEATGlobal.numTraits - return - 1 == 0
===========================================================================
jneat.JNEATGlobal.derive_trait(jneat.Trait):::ENTER
jneat.JNEATGlobal.numTraitParams == size(arg0.params[])
arg0.id >= 0
arg0.params != null
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg0.params[] sorted by >=
size(arg0.params[]) == 8
jneat.JNEATGlobal.numTraits > arg0.id
===========================================================================
jneat.JNEATGlobal.derive_trait(jneat.Trait):::EXIT
jneat.JNEATGlobal.numGenes == orig(jneat.JNEATGlobal.numGenes)
jneat.JNEATGlobal.numGenomes == orig(jneat.JNEATGlobal.numGenomes)
jneat.JNEATGlobal.numNetworks == orig(jneat.JNEATGlobal.numNetworks)
jneat.JNEATGlobal.numNodes == orig(jneat.JNEATGlobal.numNodes)
jneat.JNEATGlobal.numLinks == orig(jneat.JNEATGlobal.numLinks)
jneat.JNEATGlobal.numSpecies == orig(jneat.JNEATGlobal.numSpecies)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_disjoint_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_excess_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_mutdiff_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_compat_threshold)
jneat.JNEATGlobal.p_dropoff_age == orig(jneat.JNEATGlobal.p_dropoff_age)
jneat.JNEATGlobal.p_dropoff_coeff == orig(jneat.JNEATGlobal.p_dropoff_coeff)
jneat.JNEATGlobal.p_age_youngOrganism == orig(jneat.JNEATGlobal.p_age_youngOrganism)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_age_significance)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_only_prob)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_weight_power)
jneat.JNEATGlobal.p_survival_threshold == orig(jneat.JNEATGlobal.p_survival_threshold)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_link_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_node_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_gene_reenable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_link_weights_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_enable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_reenable_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_link_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_node_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_random_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_recur_only_prob)
jneat.JNEATGlobal.p_newlink_tries == orig(jneat.JNEATGlobal.p_newlink_tries)
jneat.JNEATGlobal.p_interspecies_mate_rate == orig(jneat.JNEATGlobal.p_interspecies_mate_rate)
jneat.JNEATGlobal.p_mate_multipoint_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_prob)
jneat.JNEATGlobal.p_mate_multipoint_avg_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_avg_prob)
jneat.JNEATGlobal.p_mate_singlepoint_prob == orig(jneat.JNEATGlobal.p_mate_singlepoint_prob)
jneat.JNEATGlobal.p_mate_only_prob == orig(jneat.JNEATGlobal.p_mate_only_prob)
jneat.JNEATGlobal.p_babies_stolen == orig(jneat.JNEATGlobal.p_babies_stolen)
jneat.JNEATGlobal.numTraitParams == orig(jneat.JNEATGlobal.numTraitParams)
jneat.JNEATGlobal.numTraitParams == size(return.params[])
jneat.JNEATGlobal.traitParamMutProb == orig(jneat.JNEATGlobal.traitParamMutProb)
jneat.JNEATGlobal.traitMutationPower == orig(jneat.JNEATGlobal.traitMutationPower)
jneat.JNEATGlobal.maxActivationCycles == orig(jneat.JNEATGlobal.maxActivationCycles)
arg0.id == orig(arg0.id)
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
return.id == orig(jneat.JNEATGlobal.numTraits)
arg0.id >= 0
arg0.params != null
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg0.params[] sorted by >=
return != null
return.params != null
return.params[] elements one of { 0.0, 1.0 }
return.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
return.params[] sorted by >=
size(arg0.params[]) == 8
jneat.JNEATGlobal.numTraits > arg0.id
jneat.JNEATGlobal.numTraits - return.id - 1 == 0
arg0.id < return.id
arg0.params[] == return.params[] (elementwise)
===========================================================================
jneat.JNEATGlobal.fsigmoid(double, double):::ENTER
jneat.JNEATGlobal.numGenomes == 0
jneat.JNEATGlobal.numNetworks == 49
jneat.JNEATGlobal.numNodes == 1436
jneat.JNEATGlobal.numLinks == 904
jneat.JNEATGlobal.numTraits == 1999
arg1 == 4.924273
jneat.JNEATGlobal.p_disjoint_coeff != arg0
jneat.JNEATGlobal.p_age_significance > arg0
jneat.JNEATGlobal.p_survival_threshold != arg0
jneat.JNEATGlobal.p_mutate_add_link_prob != arg0
arg0 < arg1
===========================================================================
jneat.JNEATGlobal.fsigmoid(double, double):::EXIT
jneat.JNEATGlobal.numGenes == orig(jneat.JNEATGlobal.numGenes)
jneat.JNEATGlobal.numGenomes == orig(jneat.JNEATGlobal.numGenomes)
jneat.JNEATGlobal.numNetworks == orig(jneat.JNEATGlobal.numNetworks)
jneat.JNEATGlobal.numNodes == orig(jneat.JNEATGlobal.numNodes)
jneat.JNEATGlobal.numLinks == orig(jneat.JNEATGlobal.numLinks)
jneat.JNEATGlobal.numSpecies == orig(jneat.JNEATGlobal.numSpecies)
jneat.JNEATGlobal.numTraits == orig(jneat.JNEATGlobal.numTraits)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_disjoint_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_excess_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_mutdiff_coeff)
jneat.JNEATGlobal.p_disjoint_coeff == orig(jneat.JNEATGlobal.p_compat_threshold)
jneat.JNEATGlobal.p_dropoff_age == orig(jneat.JNEATGlobal.p_dropoff_age)
jneat.JNEATGlobal.p_dropoff_coeff == orig(jneat.JNEATGlobal.p_dropoff_coeff)
jneat.JNEATGlobal.p_age_youngOrganism == orig(jneat.JNEATGlobal.p_age_youngOrganism)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_age_significance)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_only_prob)
jneat.JNEATGlobal.p_age_significance == orig(jneat.JNEATGlobal.p_mutate_weight_power)
jneat.JNEATGlobal.p_survival_threshold == orig(jneat.JNEATGlobal.p_survival_threshold)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_link_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_add_node_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_gene_reenable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_link_weights_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_enable_prob)
jneat.JNEATGlobal.p_mutate_add_link_prob == orig(jneat.JNEATGlobal.p_mutate_toggle_reenable_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_link_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_node_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_mutate_random_trait_prob)
jneat.JNEATGlobal.p_mutate_link_trait_prob == orig(jneat.JNEATGlobal.p_recur_only_prob)
jneat.JNEATGlobal.p_newlink_tries == orig(jneat.JNEATGlobal.p_newlink_tries)
jneat.JNEATGlobal.p_interspecies_mate_rate == orig(jneat.JNEATGlobal.p_interspecies_mate_rate)
jneat.JNEATGlobal.p_mate_multipoint_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_prob)
jneat.JNEATGlobal.p_mate_multipoint_avg_prob == orig(jneat.JNEATGlobal.p_mate_multipoint_avg_prob)
jneat.JNEATGlobal.p_mate_singlepoint_prob == orig(jneat.JNEATGlobal.p_mate_singlepoint_prob)
jneat.JNEATGlobal.p_mate_only_prob == orig(jneat.JNEATGlobal.p_mate_only_prob)
jneat.JNEATGlobal.p_babies_stolen == orig(jneat.JNEATGlobal.p_babies_stolen)
jneat.JNEATGlobal.numTraitParams == orig(jneat.JNEATGlobal.numTraitParams)
jneat.JNEATGlobal.traitParamMutProb == orig(jneat.JNEATGlobal.traitParamMutProb)
jneat.JNEATGlobal.traitMutationPower == orig(jneat.JNEATGlobal.traitMutationPower)
jneat.JNEATGlobal.maxActivationCycles == orig(jneat.JNEATGlobal.maxActivationCycles)
jneat.JNEATGlobal.numGenomes == 0
jneat.JNEATGlobal.numNetworks == 49
jneat.JNEATGlobal.numNodes == 1436
jneat.JNEATGlobal.numLinks == 904
jneat.JNEATGlobal.numTraits == 1999
jneat.JNEATGlobal.p_disjoint_coeff != return
jneat.JNEATGlobal.p_disjoint_coeff != orig(arg0)
jneat.JNEATGlobal.p_age_significance > return
jneat.JNEATGlobal.p_age_significance > orig(arg0)
jneat.JNEATGlobal.p_survival_threshold != orig(arg0)
jneat.JNEATGlobal.p_mutate_add_link_prob != return
jneat.JNEATGlobal.p_mutate_add_link_prob != orig(arg0)
jneat.JNEATGlobal.p_mutate_link_trait_prob < return
return > orig(arg0)
return < orig(arg1)
===========================================================================
jneat.Link:::OBJECT
this.in_node.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == this.in_node.dup.fType
jneat.NodeFuncEnum.SIGMOID == this.in_node.analogue.fType
jneat.NodeFuncEnum.SIGMOID == this.out_node.fType
this.in_node.nType == this.in_node.dup.nType
this.in_node.nType == this.in_node.analogue.nType
jneat.NodeTypeEnum.NEURON == this.out_node.nType
jneat.NodeTypeEnum.NEURON == this.out_node.dup.nType
jneat.NodeTypeEnum.NEURON == this.out_node.analogue.nType
this.in_node.gNodeLabel == this.in_node.dup.gNodeLabel
this.in_node.gNodeLabel == this.in_node.analogue.gNodeLabel
this.in_node.id == this.in_node.dup.id
this.in_node.id == this.in_node.analogue.id
this.in_node.dup.fType == this.in_node.analogue.fType
this.in_node.dup.fType == this.out_node.dup.fType
this.in_node.dup.nType == this.in_node.analogue.nType
this.in_node.dup.gNodeLabel == this.in_node.analogue.gNodeLabel
this.in_node.dup.id == this.in_node.analogue.id
this.in_node.dup.nodeTrait == this.out_node.dup.nodeTrait
this.in_node.analogue.fType == this.out_node.analogue.fType
this.in_node.analogue.inner_level == this.out_node.analogue.inner_level
this.out_node.gNodeLabel == this.out_node.dup.gNodeLabel
this.out_node.gNodeLabel == this.out_node.analogue.gNodeLabel
this.out_node.id == this.out_node.dup.id
this.out_node.id == this.out_node.analogue.id
this.out_node.dup.nType == this.out_node.analogue.nType
this.out_node.dup.gNodeLabel == this.out_node.analogue.gNodeLabel
this.out_node.dup.id == this.out_node.analogue.id
this.weight != 0
this.bias == 0.0
this.in_node != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
this.in_node.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
this.in_node.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
this.in_node.activesum == 0.0
this.in_node.activation == 0.0
this.in_node.last_activation == 0.0
this.in_node.prior_activation == 0.0
this.in_node.active_flag == false
this.in_node.is_traversed == false
this.in_node.id >= 1
this.in_node.activation_count == 0
this.in_node.inner_level == 0
this.in_node.incoming != null
this.in_node.incoming[] elements != null
this.in_node.incoming[].getClass().getName() elements == jneat.Link.class
this.in_node.outgoing != null
this.in_node.outgoing[] elements != null
this.in_node.outgoing[].getClass().getName() elements == jneat.Link.class
this.in_node.nodeTrait != null
this.in_node.nodeTrait.id >= 0
this.in_node.nodeTrait.params != null
this.in_node.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.in_node.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.in_node.nodeTrait.params[] sorted by >=
this.in_node.dup.fType has only one value
this.in_node.dup.fType != null
this.in_node.dup.nType != null
this.in_node.dup.gNodeLabel != null
this.in_node.dup.activesum == 0.0
this.in_node.dup.activation == 0.0
this.in_node.dup.last_activation == 0.0
this.in_node.dup.prior_activation == 0.0
this.in_node.dup.active_flag == false
this.in_node.dup.is_traversed == false
this.in_node.dup.id >= 1
this.in_node.dup.activation_count == 0
this.in_node.dup.inner_level == 0
this.in_node.dup.incoming != null
this.in_node.dup.incoming[] == []
this.in_node.dup.incoming[].getClass().getName() == []
this.in_node.dup.outgoing != null
this.in_node.dup.outgoing[] == []
this.in_node.dup.outgoing[].getClass().getName() == []
this.in_node.dup.nodeTrait != null
this.in_node.dup.analogue != null
this.in_node.dup.params != null
this.in_node.dup.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.in_node.dup.params[] elements == 0.0
this.in_node.analogue.fType has only one value
this.in_node.analogue.fType != null
this.in_node.analogue.nType != null
this.in_node.analogue.gNodeLabel != null
this.in_node.analogue.prior_activation >= 0.0
this.in_node.analogue.id >= 1
this.in_node.analogue.activation_count one of { 0, 20 }
this.in_node.analogue.inner_level == 0
this.in_node.analogue.incoming != null
this.in_node.analogue.incoming[] elements != null
this.in_node.analogue.incoming[].getClass().getName() elements == jneat.Link.class
this.in_node.analogue.outgoing != null
this.in_node.analogue.outgoing[] elements != null
this.in_node.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
this.in_node.analogue.nodeTrait != null
this.in_node.analogue.dup == null
this.in_node.analogue.analogue == null
this.in_node.analogue.params != null
this.in_node.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.in_node.analogue.params[] elements == 0.0
this.in_node.params != null
this.in_node.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.in_node.params[] elements == 0.0
this.out_node != null
this.out_node.gNodeLabel != null
this.out_node.activesum == 0.0
this.out_node.activation == 0.0
this.out_node.last_activation == 0.0
this.out_node.prior_activation == 0.0
this.out_node.active_flag == false
this.out_node.is_traversed == false
this.out_node.id >= 2
this.out_node.activation_count == 0
this.out_node.inner_level == 0
this.out_node.incoming != null
this.out_node.incoming[] elements != null
this.out_node.incoming[].getClass().getName() elements == jneat.Link.class
this.out_node.outgoing != null
this.out_node.outgoing[] elements has only one value
this.out_node.outgoing[] elements != null
this.out_node.outgoing[].getClass().getName() elements == jneat.Link.class
this.out_node.outgoing[].getClass().getName() one of { [], [jneat.Link] }
this.out_node.nodeTrait != null
this.out_node.nodeTrait.id >= 0
this.out_node.nodeTrait.params != null
this.out_node.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.out_node.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.out_node.nodeTrait.params[] sorted by >=
this.out_node.dup.nType has only one value
this.out_node.dup.nType != null
this.out_node.dup.gNodeLabel != null
this.out_node.dup.activesum == 0.0
this.out_node.dup.activation == 0.0
this.out_node.dup.last_activation == 0.0
this.out_node.dup.prior_activation == 0.0
this.out_node.dup.active_flag == false
this.out_node.dup.is_traversed == false
this.out_node.dup.id >= 2
this.out_node.dup.activation_count == 0
this.out_node.dup.inner_level == 0
this.out_node.dup.incoming != null
this.out_node.dup.incoming[] == []
this.out_node.dup.incoming[].getClass().getName() == []
this.out_node.dup.outgoing != null
this.out_node.dup.outgoing[] == []
this.out_node.dup.outgoing[].getClass().getName() == []
this.out_node.dup.analogue != null
this.out_node.dup.params != null
this.out_node.dup.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.out_node.dup.params[] elements == 0.0
this.out_node.analogue.nType has only one value
this.out_node.analogue.nType != null
this.out_node.analogue.gNodeLabel != null
this.out_node.analogue.activation >= 0.0
this.out_node.analogue.last_activation >= 0.0
this.out_node.analogue.prior_activation >= 0.0
this.out_node.analogue.id >= 2
this.out_node.analogue.activation_count one of { 0, 20 }
this.out_node.analogue.incoming != null
this.out_node.analogue.incoming[] elements != null
this.out_node.analogue.incoming[].getClass().getName() elements == jneat.Link.class
this.out_node.analogue.outgoing != null
this.out_node.analogue.outgoing[] elements != null
this.out_node.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
this.out_node.analogue.nodeTrait != null
this.out_node.analogue.dup == null
this.out_node.analogue.analogue == null
this.out_node.analogue.params != null
this.out_node.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.out_node.analogue.params[] elements == 0.0
this.out_node.params != null
this.out_node.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.out_node.params[] elements == 0.0
this.linkTrait.id >= 0
this.linkTrait.params != null
this.linkTrait.params[] elements one of { 0.0, 1.0 }
this.linkTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.linkTrait.params[] sorted by >=
this.recurrent == false
this.time_delay == false
this.is_traversed == false
this.params == null
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(this.in_node.outgoing[]) one of { 0, 1, 2 }
size(this.in_node.nodeTrait.params[]) == 8
size(this.in_node.dup.params[]) == 8
size(this.in_node.analogue.params[]) == 8
size(this.in_node.params[]) == 8
size(this.out_node.outgoing[]) one of { 0, 1 }
size(this.out_node.nodeTrait.params[]) == 8
size(this.out_node.dup.params[]) == 8
size(this.out_node.analogue.params[]) == 8
size(this.out_node.params[]) == 8
size(this.linkTrait.params[]) == 8
this.weight != this.in_node.analogue.activesum
this.weight != this.in_node.analogue.activation
this.weight != this.in_node.analogue.last_activation
this.weight != this.in_node.analogue.prior_activation
this.weight != this.out_node.analogue.activesum
this.weight != this.out_node.analogue.activation
this.weight != this.out_node.analogue.last_activation
this.weight != this.out_node.analogue.prior_activation
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
this.in_node.id != this.out_node.id
this.in_node.id < this.out_node.dup.id
this.in_node.id != this.out_node.analogue.id
this.in_node.nodeTrait.id <= this.linkTrait.id
this.in_node.dup.id < this.out_node.id
this.in_node.dup.id < this.out_node.dup.id
this.in_node.dup.id < this.out_node.analogue.id
this.in_node.analogue.id != this.out_node.id
this.in_node.analogue.id < this.out_node.dup.id
this.in_node.analogue.id != this.out_node.analogue.id
this.out_node.nodeTrait.id <= this.linkTrait.id
this.out_node.analogue.activesum <= this.out_node.analogue.activation
===========================================================================
jneat.Link.Link(double, jneat.NNode, jneat.NNode, boolean):::ENTER
arg1.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg2.fType
jneat.NodeTypeEnum.NEURON == arg2.nType
arg0 != 0
arg1 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg1.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg1.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg1.activesum == 0.0
arg1.activation == 0.0
arg1.last_activation == 0.0
arg1.prior_activation == 0.0
arg1.active_flag == false
arg1.is_traversed == false
arg1.id >= 1
arg1.activation_count == 0
arg1.inner_level == 0
arg1.incoming != null
arg1.incoming[] elements != null
arg1.incoming[].getClass().getName() elements == jneat.Link.class
arg1.outgoing != null
arg1.outgoing[] elements != null
arg1.outgoing[].getClass().getName() elements == jneat.Link.class
arg1.nodeTrait != null
arg1.nodeTrait.params != null
arg1.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg1.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg1.nodeTrait.params[] sorted by >=
arg1.dup == null
arg1.analogue == null
arg1.params != null
arg1.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements == 0.0
arg2 != null
arg2.gNodeLabel != null
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 2
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] elements != null
arg2.incoming[].getClass().getName() elements == jneat.Link.class
arg2.outgoing != null
arg2.outgoing[] elements has only one value
arg2.outgoing[] elements != null
arg2.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.outgoing[].getClass().getName() one of { [], [jneat.Link] }
arg2.nodeTrait != null
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue == null
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3 == false
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg1.outgoing[]) one of { 0, 1, 2 }
size(arg1.nodeTrait.params[]) == 8
size(arg1.params[]) == 8
size(arg2.outgoing[]) one of { 0, 1 }
size(arg2.nodeTrait.params[]) == 8
size(arg2.params[]) == 8
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
arg1.id != arg2.id
arg1.nodeTrait.id != arg2.nodeTrait.id
===========================================================================
jneat.Link.Link(double, jneat.NNode, jneat.NNode, boolean):::EXIT
this.weight == orig(arg0)
this.in_node == orig(arg1)
jneat.NodeFuncEnum.SIGMOID == arg1.fType
jneat.NodeFuncEnum.SIGMOID == arg2.fType
jneat.NodeFuncEnum.SIGMOID == orig(arg1.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(arg2.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.in_node.nType == arg1.nType
jneat.NodeTypeEnum.NEURON == arg2.nType
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.NEURON == orig(arg2.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.in_node.gNodeLabel == arg1.gNodeLabel
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.in_node.activesum == arg1.activesum
this.in_node.activation == arg1.activation
this.in_node.last_activation == arg1.last_activation
this.in_node.prior_activation == arg1.prior_activation
this.in_node.active_flag == arg1.active_flag
this.in_node.is_traversed == arg1.is_traversed
this.in_node.id == arg1.id
this.in_node.activation_count == arg1.activation_count
this.in_node.inner_level == arg1.inner_level
this.in_node.incoming == arg1.incoming
this.in_node.outgoing == arg1.outgoing
this.in_node.nodeTrait == arg1.nodeTrait
this.in_node.nodeTrait.id == arg1.nodeTrait.id
this.in_node.nodeTrait.params == arg1.nodeTrait.params
this.in_node.analogue == this.out_node.analogue
this.in_node.params == arg1.params
this.out_node == orig(arg2)
this.out_node.gNodeLabel == arg2.gNodeLabel
this.out_node.activesum == arg2.activesum
this.out_node.activation == arg2.activation
this.out_node.last_activation == arg2.last_activation
this.out_node.prior_activation == arg2.prior_activation
this.out_node.active_flag == arg2.active_flag
this.out_node.is_traversed == arg2.is_traversed
this.out_node.id == arg2.id
this.out_node.activation_count == arg2.activation_count
this.out_node.inner_level == arg2.inner_level
this.out_node.incoming == arg2.incoming
this.out_node.outgoing == arg2.outgoing
this.out_node.nodeTrait == arg2.nodeTrait
this.out_node.nodeTrait.id == arg2.nodeTrait.id
this.out_node.nodeTrait.params == arg2.nodeTrait.params
this.out_node.params == arg2.params
this.recurrent == orig(arg3)
arg1.nType == orig(arg1.nType)
arg1.gNodeLabel == orig(arg1.gNodeLabel)
arg1.activesum == orig(arg1.activesum)
arg1.activation == orig(arg1.activation)
arg1.last_activation == orig(arg1.last_activation)
arg1.prior_activation == orig(arg1.prior_activation)
arg1.active_flag == orig(arg1.active_flag)
arg1.is_traversed == orig(arg1.is_traversed)
arg1.id == orig(arg1.id)
arg1.activation_count == orig(arg1.activation_count)
arg1.inner_level == orig(arg1.inner_level)
arg1.incoming == orig(arg1.incoming)
arg1.incoming[] == orig(arg1.incoming[])
arg1.outgoing == orig(arg1.outgoing)
arg1.outgoing[] == orig(arg1.outgoing[])
arg1.nodeTrait == orig(arg1.nodeTrait)
arg1.nodeTrait.id == orig(arg1.nodeTrait.id)
arg1.nodeTrait.params == orig(arg1.nodeTrait.params)
arg1.nodeTrait.params[] == orig(arg1.nodeTrait.params[])
arg1.dup == orig(arg1.dup)
arg1.analogue == orig(arg1.analogue)
arg1.params == orig(arg1.params)
arg1.params[] == orig(arg1.params[])
arg2.gNodeLabel == orig(arg2.gNodeLabel)
arg2.activesum == orig(arg2.activesum)
arg2.activation == orig(arg2.activation)
arg2.last_activation == orig(arg2.last_activation)
arg2.prior_activation == orig(arg2.prior_activation)
arg2.active_flag == orig(arg2.active_flag)
arg2.is_traversed == orig(arg2.is_traversed)
arg2.id == orig(arg2.id)
arg2.activation_count == orig(arg2.activation_count)
arg2.inner_level == orig(arg2.inner_level)
arg2.incoming == orig(arg2.incoming)
arg2.incoming[] == orig(arg2.incoming[])
arg2.outgoing == orig(arg2.outgoing)
arg2.outgoing[] == orig(arg2.outgoing[])
arg2.nodeTrait == orig(arg2.nodeTrait)
arg2.nodeTrait.id == orig(arg2.nodeTrait.id)
arg2.nodeTrait.params == orig(arg2.nodeTrait.params)
arg2.nodeTrait.params[] == orig(arg2.nodeTrait.params[])
arg2.dup == orig(arg2.dup)
arg2.analogue == orig(arg2.analogue)
arg2.params == orig(arg2.params)
arg2.params[] == orig(arg2.params[])
this.in_node.dup == null
this.in_node.analogue == null
this.out_node.dup == null
this.linkTrait == null
arg1.nType != null
arg1.gNodeLabel != null
arg1.activesum == 0.0
arg1.activation == 0.0
arg1.last_activation == 0.0
arg1.prior_activation == 0.0
arg1.active_flag == false
arg1.is_traversed == false
arg1.id >= 1
arg1.activation_count == 0
arg1.inner_level == 0
arg1.incoming != null
arg1.incoming[] elements != null
arg1.incoming[].getClass().getName() elements == jneat.Link.class
arg1.outgoing != null
arg1.outgoing[] elements != null
arg1.outgoing[].getClass().getName() elements == jneat.Link.class
arg1.nodeTrait != null
arg1.nodeTrait.params != null
arg1.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg1.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg1.nodeTrait.params[] sorted by >=
arg1.dup == null
arg1.analogue == null
arg1.params != null
arg1.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements == 0.0
arg2.gNodeLabel != null
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 2
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] elements != null
arg2.incoming[].getClass().getName() elements == jneat.Link.class
arg2.outgoing != null
arg2.outgoing[] elements has only one value
arg2.outgoing[] elements != null
arg2.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.outgoing[].getClass().getName() one of { [], [jneat.Link] }
arg2.nodeTrait != null
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue == null
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
size(arg1.outgoing[]) one of { 0, 1, 2 }
size(arg1.nodeTrait.params[]) == 8
size(arg1.params[]) == 8
size(arg2.outgoing[]) one of { 0, 1 }
size(arg2.nodeTrait.params[]) == 8
size(arg2.params[]) == 8
arg1.id != arg2.id
arg1.nodeTrait.id != arg2.nodeTrait.id
===========================================================================
jneat.Link.Link(jneat.Trait, double, jneat.NNode, jneat.NNode, boolean):::ENTER
arg0.id == arg2.nodeTrait.id
arg0.id == arg3.nodeTrait.id
arg0.params == arg2.nodeTrait.params
arg0.params == arg3.nodeTrait.params
arg2.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg2.analogue.fType
jneat.NodeFuncEnum.SIGMOID == arg3.fType
arg2.nType == arg2.analogue.nType
jneat.NodeTypeEnum.NEURON == arg3.nType
jneat.NodeTypeEnum.NEURON == arg3.analogue.nType
arg2.gNodeLabel == arg2.analogue.gNodeLabel
arg2.id == arg2.analogue.id
arg2.analogue.fType == arg3.analogue.fType
arg2.analogue.activesum == arg2.analogue.activation
arg2.analogue.activesum == arg2.analogue.last_activation
arg2.analogue.activesum == arg2.analogue.prior_activation
arg2.analogue.activesum == arg3.analogue.activesum
arg2.analogue.activesum == arg3.analogue.activation
arg2.analogue.activesum == arg3.analogue.last_activation
arg2.analogue.activesum == arg3.analogue.prior_activation
arg2.analogue.inner_level == arg3.analogue.inner_level
arg3.gNodeLabel == arg3.analogue.gNodeLabel
arg3.id == arg3.analogue.id
arg0.id >= 0
arg0.params != null
arg0.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] sorted by >=
arg1 != 0
arg2 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg2.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg2.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 1
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] elements != null
arg2.incoming[].getClass().getName() elements == jneat.Link.class
arg2.outgoing != null
arg2.outgoing[] elements != null
arg2.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.nodeTrait != null
arg2.nodeTrait.id >= 0
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue.fType has only one value
arg2.analogue.fType != null
arg2.analogue.nType != null
arg2.analogue.gNodeLabel != null
arg2.analogue.activesum == 0.0
arg2.analogue.active_flag == false
arg2.analogue.id >= 1
arg2.analogue.activation_count == 0
arg2.analogue.inner_level == 0
arg2.analogue.incoming != null
arg2.analogue.incoming[] elements != null
arg2.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg2.analogue.outgoing != null
arg2.analogue.outgoing[] elements != null
arg2.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.analogue.nodeTrait != null
arg2.analogue.dup == null
arg2.analogue.analogue == null
arg2.analogue.params != null
arg2.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.analogue.params[] elements == 0.0
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3 != null
arg3.gNodeLabel != null
arg3.activesum == 0.0
arg3.activation == 0.0
arg3.last_activation == 0.0
arg3.prior_activation == 0.0
arg3.active_flag == false
arg3.is_traversed == false
arg3.id >= 2
arg3.activation_count == 0
arg3.inner_level == 0
arg3.incoming != null
arg3.incoming[] elements != null
arg3.incoming[].getClass().getName() elements == jneat.Link.class
arg3.outgoing != null
arg3.outgoing[] elements has only one value
arg3.outgoing[] elements != null
arg3.outgoing[].getClass().getName() elements == jneat.Link.class
arg3.outgoing[].getClass().getName() one of { [], [jneat.Link] }
arg3.nodeTrait != null
arg3.nodeTrait.id >= 0
arg3.nodeTrait.params != null
arg3.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg3.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg3.nodeTrait.params[] sorted by >=
arg3.dup == null
arg3.analogue.nType has only one value
arg3.analogue.nType != null
arg3.analogue.gNodeLabel != null
arg3.analogue.active_flag == false
arg3.analogue.id >= 2
arg3.analogue.activation_count == 0
arg3.analogue.incoming != null
arg3.analogue.incoming[] elements != null
arg3.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg3.analogue.outgoing != null
arg3.analogue.outgoing[] elements != null
arg3.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg3.analogue.nodeTrait != null
arg3.analogue.dup == null
arg3.analogue.analogue == null
arg3.analogue.params != null
arg3.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.analogue.params[] elements == 0.0
arg3.params != null
arg3.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.params[] elements == 0.0
arg4 == false
size(arg0.params[]) == 8
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.outgoing[]) one of { 0, 1, 2 }
size(arg2.nodeTrait.params[]) == 8
size(arg2.analogue.incoming[]) one of { 0, 1, 2 }
size(arg2.analogue.params[]) == 8
size(arg2.params[]) == 8
size(arg3.outgoing[]) one of { 0, 1 }
size(arg3.nodeTrait.params[]) == 8
size(arg3.analogue.outgoing[]) one of { 0, 1, 2 }
size(arg3.analogue.params[]) == 8
size(arg3.params[]) == 8
arg1 != arg2.analogue.activesum
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
arg2.id != arg3.id
arg2.id < arg3.analogue.id
arg2.analogue.id < arg3.id
arg2.analogue.id < arg3.analogue.id
===========================================================================
jneat.Link.Link(jneat.Trait, double, jneat.NNode, jneat.NNode, boolean):::EXIT
this.weight == orig(arg1)
this.in_node == orig(arg2)
jneat.NodeFuncEnum.SIGMOID == arg2.fType
jneat.NodeFuncEnum.SIGMOID == arg2.analogue.fType
jneat.NodeFuncEnum.SIGMOID == arg3.fType
jneat.NodeFuncEnum.SIGMOID == orig(arg2.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(arg3.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.in_node.nType == arg2.nType
jneat.NodeTypeEnum.NEURON == arg3.nType
jneat.NodeTypeEnum.NEURON == arg3.analogue.nType
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.NEURON == orig(arg3.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.in_node.gNodeLabel == arg2.gNodeLabel
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.in_node.activesum == arg2.activesum
this.in_node.activation == arg2.activation
this.in_node.last_activation == arg2.last_activation
this.in_node.prior_activation == arg2.prior_activation
this.in_node.active_flag == arg2.active_flag
this.in_node.is_traversed == arg2.is_traversed
this.in_node.id == arg2.id
this.in_node.activation_count == arg2.activation_count
this.in_node.inner_level == arg2.inner_level
this.in_node.incoming == arg2.incoming
this.in_node.outgoing == arg2.outgoing
this.in_node.nodeTrait == arg2.nodeTrait
this.in_node.nodeTrait.id == arg2.nodeTrait.id
this.in_node.nodeTrait.params == arg2.nodeTrait.params
this.in_node.analogue == arg2.analogue
this.in_node.analogue.fType == arg2.analogue.fType
this.in_node.analogue.nType == arg2.analogue.nType
this.in_node.analogue.gNodeLabel == arg2.analogue.gNodeLabel
this.in_node.analogue.activesum == arg2.analogue.activesum
this.in_node.analogue.activation == arg2.analogue.activesum
this.in_node.analogue.last_activation == arg2.analogue.activesum
this.in_node.analogue.prior_activation == arg2.analogue.activesum
this.in_node.analogue.active_flag == arg2.analogue.active_flag
this.in_node.analogue.is_traversed == arg2.analogue.is_traversed
this.in_node.analogue.id == arg2.analogue.id
this.in_node.analogue.activation_count == arg2.analogue.activation_count
this.in_node.analogue.inner_level == arg2.analogue.inner_level
this.in_node.analogue.incoming == arg2.analogue.incoming
this.in_node.analogue.outgoing == arg2.analogue.outgoing
this.in_node.analogue.nodeTrait == arg2.analogue.nodeTrait
this.in_node.analogue.params == arg2.analogue.params
this.in_node.params == arg2.params
this.out_node == orig(arg3)
this.out_node.gNodeLabel == arg3.gNodeLabel
this.out_node.activesum == arg3.activesum
this.out_node.activation == arg3.activation
this.out_node.last_activation == arg3.last_activation
this.out_node.prior_activation == arg3.prior_activation
this.out_node.active_flag == arg3.active_flag
this.out_node.is_traversed == arg3.is_traversed
this.out_node.id == arg3.id
this.out_node.activation_count == arg3.activation_count
this.out_node.inner_level == arg3.inner_level
this.out_node.incoming == arg3.incoming
this.out_node.outgoing == arg3.outgoing
this.out_node.nodeTrait == arg3.nodeTrait
this.out_node.nodeTrait.id == arg3.nodeTrait.id
this.out_node.nodeTrait.params == arg3.nodeTrait.params
this.out_node.analogue == arg3.analogue
this.out_node.analogue.fType == arg2.analogue.fType
this.out_node.analogue.nType == arg3.analogue.nType
this.out_node.analogue.gNodeLabel == arg3.analogue.gNodeLabel
this.out_node.analogue.activesum == arg2.analogue.activesum
this.out_node.analogue.activation == arg2.analogue.activesum
this.out_node.analogue.last_activation == arg2.analogue.activesum
this.out_node.analogue.prior_activation == arg2.analogue.activesum
this.out_node.analogue.active_flag == arg3.analogue.active_flag
this.out_node.analogue.is_traversed == arg3.analogue.is_traversed
this.out_node.analogue.id == arg3.analogue.id
this.out_node.analogue.activation_count == arg3.analogue.activation_count
this.out_node.analogue.inner_level == arg2.analogue.inner_level
this.out_node.analogue.incoming == arg3.analogue.incoming
this.out_node.analogue.outgoing == arg3.analogue.outgoing
this.out_node.analogue.nodeTrait == arg3.analogue.nodeTrait
this.out_node.analogue.params == arg3.analogue.params
this.out_node.params == arg3.params
this.linkTrait == orig(arg0)
this.linkTrait.id == arg0.id
this.linkTrait.params == arg0.params
this.recurrent == orig(arg4)
arg0.id == arg2.nodeTrait.id
arg0.id == arg3.nodeTrait.id
arg0.id == orig(arg0.id)
arg0.params == arg2.nodeTrait.params
arg0.params == arg3.nodeTrait.params
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
arg2.nType == arg2.analogue.nType
arg2.nType == orig(arg2.nType)
arg2.gNodeLabel == arg2.analogue.gNodeLabel
arg2.gNodeLabel == orig(arg2.gNodeLabel)
arg2.activesum == orig(arg2.activesum)
arg2.activation == orig(arg2.activation)
arg2.last_activation == orig(arg2.last_activation)
arg2.prior_activation == orig(arg2.prior_activation)
arg2.active_flag == orig(arg2.active_flag)
arg2.is_traversed == orig(arg2.is_traversed)
arg2.id == arg2.analogue.id
arg2.id == orig(arg2.id)
arg2.activation_count == orig(arg2.activation_count)
arg2.inner_level == orig(arg2.inner_level)
arg2.incoming == orig(arg2.incoming)
arg2.incoming[] == orig(arg2.incoming[])
arg2.outgoing == orig(arg2.outgoing)
arg2.outgoing[] == orig(arg2.outgoing[])
arg2.nodeTrait == orig(arg2.nodeTrait)
arg2.nodeTrait.id == orig(arg2.nodeTrait.id)
arg2.nodeTrait.params == orig(arg2.nodeTrait.params)
arg2.nodeTrait.params[] == orig(arg2.nodeTrait.params[])
arg2.dup == orig(arg2.dup)
arg2.analogue == orig(arg2.analogue)
arg2.analogue.fType == arg3.analogue.fType
arg2.analogue.fType == orig(arg2.analogue.fType)
arg2.analogue.fType == orig(arg3.analogue.fType)
arg2.analogue.nType == orig(arg2.analogue.nType)
arg2.analogue.gNodeLabel == orig(arg2.analogue.gNodeLabel)
arg2.analogue.activesum == arg2.analogue.activation
arg2.analogue.activesum == arg2.analogue.last_activation
arg2.analogue.activesum == arg2.analogue.prior_activation
arg2.analogue.activesum == arg3.analogue.activesum
arg2.analogue.activesum == arg3.analogue.activation
arg2.analogue.activesum == arg3.analogue.last_activation
arg2.analogue.activesum == arg3.analogue.prior_activation
arg2.analogue.activesum == orig(arg2.analogue.activesum)
arg2.analogue.activesum == orig(arg2.analogue.activation)
arg2.analogue.activesum == orig(arg2.analogue.last_activation)
arg2.analogue.activesum == orig(arg2.analogue.prior_activation)
arg2.analogue.activesum == orig(arg3.analogue.activesum)
arg2.analogue.activesum == orig(arg3.analogue.activation)
arg2.analogue.activesum == orig(arg3.analogue.last_activation)
arg2.analogue.activesum == orig(arg3.analogue.prior_activation)
arg2.analogue.active_flag == orig(arg2.analogue.active_flag)
arg2.analogue.is_traversed == orig(arg2.analogue.is_traversed)
arg2.analogue.id == orig(arg2.analogue.id)
arg2.analogue.activation_count == orig(arg2.analogue.activation_count)
arg2.analogue.inner_level == arg3.analogue.inner_level
arg2.analogue.inner_level == orig(arg2.analogue.inner_level)
arg2.analogue.inner_level == orig(arg3.analogue.inner_level)
arg2.analogue.incoming == orig(arg2.analogue.incoming)
arg2.analogue.incoming[] == orig(arg2.analogue.incoming[])
arg2.analogue.outgoing == orig(arg2.analogue.outgoing)
arg2.analogue.outgoing[] == orig(arg2.analogue.outgoing[])
arg2.analogue.nodeTrait == orig(arg2.analogue.nodeTrait)
arg2.analogue.dup == orig(arg2.analogue.dup)
arg2.analogue.analogue == orig(arg2.analogue.analogue)
arg2.analogue.params == orig(arg2.analogue.params)
arg2.analogue.params[] == orig(arg2.analogue.params[])
arg2.params == orig(arg2.params)
arg2.params[] == orig(arg2.params[])
arg3.gNodeLabel == arg3.analogue.gNodeLabel
arg3.gNodeLabel == orig(arg3.gNodeLabel)
arg3.activesum == orig(arg3.activesum)
arg3.activation == orig(arg3.activation)
arg3.last_activation == orig(arg3.last_activation)
arg3.prior_activation == orig(arg3.prior_activation)
arg3.active_flag == orig(arg3.active_flag)
arg3.is_traversed == orig(arg3.is_traversed)
arg3.id == arg3.analogue.id
arg3.id == orig(arg3.id)
arg3.activation_count == orig(arg3.activation_count)
arg3.inner_level == orig(arg3.inner_level)
arg3.incoming == orig(arg3.incoming)
arg3.incoming[] == orig(arg3.incoming[])
arg3.outgoing == orig(arg3.outgoing)
arg3.outgoing[] == orig(arg3.outgoing[])
arg3.nodeTrait == orig(arg3.nodeTrait)
arg3.nodeTrait.id == orig(arg3.nodeTrait.id)
arg3.nodeTrait.params == orig(arg3.nodeTrait.params)
arg3.nodeTrait.params[] == orig(arg3.nodeTrait.params[])
arg3.dup == orig(arg3.dup)
arg3.analogue == orig(arg3.analogue)
arg3.analogue.nType == orig(arg3.analogue.nType)
arg3.analogue.gNodeLabel == orig(arg3.analogue.gNodeLabel)
arg3.analogue.active_flag == orig(arg3.analogue.active_flag)
arg3.analogue.is_traversed == orig(arg3.analogue.is_traversed)
arg3.analogue.id == orig(arg3.analogue.id)
arg3.analogue.activation_count == orig(arg3.analogue.activation_count)
arg3.analogue.incoming == orig(arg3.analogue.incoming)
arg3.analogue.incoming[] == orig(arg3.analogue.incoming[])
arg3.analogue.outgoing == orig(arg3.analogue.outgoing)
arg3.analogue.outgoing[] == orig(arg3.analogue.outgoing[])
arg3.analogue.nodeTrait == orig(arg3.analogue.nodeTrait)
arg3.analogue.dup == orig(arg3.analogue.dup)
arg3.analogue.analogue == orig(arg3.analogue.analogue)
arg3.analogue.params == orig(arg3.analogue.params)
arg3.analogue.params[] == orig(arg3.analogue.params[])
arg3.params == orig(arg3.params)
arg3.params[] == orig(arg3.params[])
this.in_node.dup == null
this.out_node.dup == null
this.linkTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.id >= 0
arg0.params != null
arg0.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] sorted by >=
arg2.nType != null
arg2.gNodeLabel != null
arg2.activesum == 0.0
arg2.activation == 0.0
arg2.last_activation == 0.0
arg2.prior_activation == 0.0
arg2.active_flag == false
arg2.is_traversed == false
arg2.id >= 1
arg2.activation_count == 0
arg2.inner_level == 0
arg2.incoming != null
arg2.incoming[] elements != null
arg2.incoming[].getClass().getName() elements == jneat.Link.class
arg2.outgoing != null
arg2.outgoing[] elements != null
arg2.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.nodeTrait != null
arg2.nodeTrait.id >= 0
arg2.nodeTrait.params != null
arg2.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg2.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg2.nodeTrait.params[] sorted by >=
arg2.dup == null
arg2.analogue.fType has only one value
arg2.analogue.fType != null
arg2.analogue.nType != null
arg2.analogue.gNodeLabel != null
arg2.analogue.activesum == 0.0
arg2.analogue.active_flag == false
arg2.analogue.id >= 1
arg2.analogue.activation_count == 0
arg2.analogue.inner_level == 0
arg2.analogue.incoming != null
arg2.analogue.incoming[] elements != null
arg2.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg2.analogue.outgoing != null
arg2.analogue.outgoing[] elements != null
arg2.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg2.analogue.nodeTrait != null
arg2.analogue.dup == null
arg2.analogue.analogue == null
arg2.analogue.params != null
arg2.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.analogue.params[] elements == 0.0
arg2.params != null
arg2.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements == 0.0
arg3.gNodeLabel != null
arg3.activesum == 0.0
arg3.activation == 0.0
arg3.last_activation == 0.0
arg3.prior_activation == 0.0
arg3.active_flag == false
arg3.is_traversed == false
arg3.id >= 2
arg3.activation_count == 0
arg3.inner_level == 0
arg3.incoming != null
arg3.incoming[] elements != null
arg3.incoming[].getClass().getName() elements == jneat.Link.class
arg3.outgoing != null
arg3.outgoing[] elements has only one value
arg3.outgoing[] elements != null
arg3.outgoing[].getClass().getName() elements == jneat.Link.class
arg3.outgoing[].getClass().getName() one of { [], [jneat.Link] }
arg3.nodeTrait != null
arg3.nodeTrait.id >= 0
arg3.nodeTrait.params != null
arg3.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg3.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg3.nodeTrait.params[] sorted by >=
arg3.dup == null
arg3.analogue.nType has only one value
arg3.analogue.nType != null
arg3.analogue.gNodeLabel != null
arg3.analogue.active_flag == false
arg3.analogue.id >= 2
arg3.analogue.activation_count == 0
arg3.analogue.incoming != null
arg3.analogue.incoming[] elements != null
arg3.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg3.analogue.outgoing != null
arg3.analogue.outgoing[] elements != null
arg3.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg3.analogue.nodeTrait != null
arg3.analogue.dup == null
arg3.analogue.analogue == null
arg3.analogue.params != null
arg3.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.analogue.params[] elements == 0.0
arg3.params != null
arg3.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg3.params[] elements == 0.0
size(this.in_node.analogue.incoming[]) one of { 0, 1, 2 }
size(this.out_node.analogue.outgoing[]) one of { 0, 1, 2 }
size(arg0.params[]) == 8
size(arg2.outgoing[]) one of { 0, 1, 2 }
size(arg2.nodeTrait.params[]) == 8
size(arg2.analogue.incoming[]) one of { 0, 1, 2 }
size(arg2.analogue.params[]) == 8
size(arg2.params[]) == 8
size(arg3.outgoing[]) one of { 0, 1 }
size(arg3.nodeTrait.params[]) == 8
size(arg3.analogue.outgoing[]) one of { 0, 1, 2 }
size(arg3.analogue.params[]) == 8
size(arg3.params[]) == 8
this.weight != arg2.analogue.activesum
arg2.id != arg3.id
arg2.id < arg3.analogue.id
arg2.analogue.id < arg3.id
arg2.analogue.id < arg3.analogue.id
===========================================================================
jneat.Link.SaveLink():::ENTER
jneat.NodeFuncEnum.SIGMOID == this.out_node.analogue.fType
this.in_node.incoming[] == []
this.in_node.incoming[].getClass().getName() == []
this.in_node.outgoing[] == []
this.in_node.outgoing[].getClass().getName() == []
this.in_node.analogue != null
this.in_node.analogue.is_traversed == false
this.out_node.incoming[] == []
this.out_node.incoming[].getClass().getName() == []
this.out_node.outgoing[] == []
this.out_node.outgoing[].getClass().getName() == []
this.out_node.analogue != null
this.out_node.analogue.is_traversed == false
size(this.in_node.analogue.outgoing[]) one of { 1, 2, 3 }
this.in_node.nodeTrait.id < this.linkTrait.id
this.out_node.nodeTrait.id < this.linkTrait.id
===========================================================================
jneat.Link.SaveLink():::EXIT
this.id == orig(this.id)
this.weight == orig(this.weight)
this.bias == orig(this.bias)
this.in_node == orig(this.in_node)
jneat.NodeFuncEnum.SIGMOID == this.out_node.analogue.fType
jneat.NodeFuncEnum.SIGMOID == orig(this.in_node.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(this.in_node.analogue.fType)
jneat.NodeFuncEnum.SIGMOID == orig(this.out_node.fType)
jneat.NodeFuncEnum.SIGMOID == orig(this.out_node.analogue.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.in_node.nType == orig(this.in_node.nType)
this.in_node.nType == orig(this.in_node.analogue.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.NEURON == orig(this.out_node.nType)
jneat.NodeTypeEnum.NEURON == orig(this.out_node.analogue.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.in_node.gNodeLabel == orig(this.in_node.gNodeLabel)
this.in_node.gNodeLabel == orig(this.in_node.analogue.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.in_node.activesum == orig(this.in_node.activesum)
this.in_node.activation == orig(this.in_node.activation)
this.in_node.last_activation == orig(this.in_node.last_activation)
this.in_node.prior_activation == orig(this.in_node.prior_activation)
this.in_node.active_flag == orig(this.in_node.active_flag)
this.in_node.is_traversed == orig(this.in_node.is_traversed)
this.in_node.id == orig(this.in_node.id)
this.in_node.id == orig(this.in_node.analogue.id)
this.in_node.activation_count == orig(this.in_node.activation_count)
this.in_node.inner_level == orig(this.in_node.inner_level)
this.in_node.incoming == orig(this.in_node.incoming)
this.in_node.incoming[] == orig(this.in_node.incoming[])
this.in_node.outgoing == orig(this.in_node.outgoing)
this.in_node.outgoing[] == orig(this.in_node.outgoing[])
this.in_node.nodeTrait == orig(this.in_node.nodeTrait)
this.in_node.nodeTrait.id == orig(this.in_node.nodeTrait.id)
this.in_node.nodeTrait.params == orig(this.in_node.nodeTrait.params)
this.in_node.nodeTrait.params[] == orig(this.in_node.nodeTrait.params[])
this.in_node.dup == orig(this.in_node.dup)
this.in_node.dup.fType == orig(this.in_node.dup.fType)
this.in_node.dup.fType == orig(this.out_node.dup.fType)
this.in_node.dup.nType == orig(this.in_node.dup.nType)
this.in_node.dup.gNodeLabel == orig(this.in_node.dup.gNodeLabel)
this.in_node.dup.activesum == orig(this.in_node.dup.activesum)
this.in_node.dup.activation == orig(this.in_node.dup.activation)
this.in_node.dup.last_activation == orig(this.in_node.dup.last_activation)
this.in_node.dup.prior_activation == orig(this.in_node.dup.prior_activation)
this.in_node.dup.active_flag == orig(this.in_node.dup.active_flag)
this.in_node.dup.is_traversed == orig(this.in_node.dup.is_traversed)
this.in_node.dup.id == orig(this.in_node.dup.id)
this.in_node.dup.activation_count == orig(this.in_node.dup.activation_count)
this.in_node.dup.inner_level == orig(this.in_node.dup.inner_level)
this.in_node.dup.incoming == orig(this.in_node.dup.incoming)
this.in_node.dup.incoming[] == orig(this.in_node.dup.incoming[])
this.in_node.dup.outgoing == orig(this.in_node.dup.outgoing)
this.in_node.dup.outgoing[] == orig(this.in_node.dup.outgoing[])
this.in_node.dup.nodeTrait == orig(this.in_node.dup.nodeTrait)
this.in_node.dup.nodeTrait == orig(this.out_node.dup.nodeTrait)
this.in_node.dup.dup == orig(this.in_node.dup.dup)
this.in_node.dup.analogue == orig(this.in_node.dup.analogue)
this.in_node.dup.params == orig(this.in_node.dup.params)
this.in_node.dup.params[] == orig(this.in_node.dup.params[])
this.in_node.analogue == orig(this.in_node.analogue)
this.in_node.analogue.activesum == orig(this.in_node.analogue.activesum)
this.in_node.analogue.activation == orig(this.in_node.analogue.activation)
this.in_node.analogue.last_activation == orig(this.in_node.analogue.last_activation)
this.in_node.analogue.prior_activation == orig(this.in_node.analogue.prior_activation)
this.in_node.analogue.active_flag == orig(this.in_node.analogue.active_flag)
this.in_node.analogue.is_traversed == orig(this.in_node.analogue.is_traversed)
this.in_node.analogue.activation_count == orig(this.in_node.analogue.activation_count)
this.in_node.analogue.inner_level == orig(this.in_node.analogue.inner_level)
this.in_node.analogue.inner_level == orig(this.out_node.analogue.inner_level)
this.in_node.analogue.incoming == orig(this.in_node.analogue.incoming)
this.in_node.analogue.incoming[] == orig(this.in_node.analogue.incoming[])
this.in_node.analogue.outgoing == orig(this.in_node.analogue.outgoing)
this.in_node.analogue.outgoing[] == orig(this.in_node.analogue.outgoing[])
this.in_node.analogue.nodeTrait == orig(this.in_node.analogue.nodeTrait)
this.in_node.analogue.dup == orig(this.in_node.analogue.dup)
this.in_node.analogue.analogue == orig(this.in_node.analogue.analogue)
this.in_node.analogue.params == orig(this.in_node.analogue.params)
this.in_node.analogue.params[] == orig(this.in_node.analogue.params[])
this.in_node.params == orig(this.in_node.params)
this.in_node.params[] == orig(this.in_node.params[])
this.out_node == orig(this.out_node)
this.out_node.gNodeLabel == orig(this.out_node.gNodeLabel)
this.out_node.gNodeLabel == orig(this.out_node.analogue.gNodeLabel)
this.out_node.activesum == orig(this.out_node.activesum)
this.out_node.activation == orig(this.out_node.activation)
this.out_node.last_activation == orig(this.out_node.last_activation)
this.out_node.prior_activation == orig(this.out_node.prior_activation)
this.out_node.active_flag == orig(this.out_node.active_flag)
this.out_node.is_traversed == orig(this.out_node.is_traversed)
this.out_node.id == orig(this.out_node.id)
this.out_node.id == orig(this.out_node.analogue.id)
this.out_node.activation_count == orig(this.out_node.activation_count)
this.out_node.inner_level == orig(this.out_node.inner_level)
this.out_node.incoming == orig(this.out_node.incoming)
this.out_node.incoming[] == orig(this.out_node.incoming[])
this.out_node.outgoing == orig(this.out_node.outgoing)
this.out_node.outgoing[] == orig(this.out_node.outgoing[])
this.out_node.nodeTrait == orig(this.out_node.nodeTrait)
this.out_node.nodeTrait.id == orig(this.out_node.nodeTrait.id)
this.out_node.nodeTrait.params == orig(this.out_node.nodeTrait.params)
this.out_node.nodeTrait.params[] == orig(this.out_node.nodeTrait.params[])
this.out_node.dup == orig(this.out_node.dup)
this.out_node.dup.nType == orig(this.out_node.dup.nType)
this.out_node.dup.gNodeLabel == orig(this.out_node.dup.gNodeLabel)
this.out_node.dup.activesum == orig(this.out_node.dup.activesum)
this.out_node.dup.activation == orig(this.out_node.dup.activation)
this.out_node.dup.last_activation == orig(this.out_node.dup.last_activation)
this.out_node.dup.prior_activation == orig(this.out_node.dup.prior_activation)
this.out_node.dup.active_flag == orig(this.out_node.dup.active_flag)
this.out_node.dup.is_traversed == orig(this.out_node.dup.is_traversed)
this.out_node.dup.id == orig(this.out_node.dup.id)
this.out_node.dup.activation_count == orig(this.out_node.dup.activation_count)
this.out_node.dup.inner_level == orig(this.out_node.dup.inner_level)
this.out_node.dup.incoming == orig(this.out_node.dup.incoming)
this.out_node.dup.incoming[] == orig(this.out_node.dup.incoming[])
this.out_node.dup.outgoing == orig(this.out_node.dup.outgoing)
this.out_node.dup.outgoing[] == orig(this.out_node.dup.outgoing[])
this.out_node.dup.dup == orig(this.out_node.dup.dup)
this.out_node.dup.analogue == orig(this.out_node.dup.analogue)
this.out_node.dup.params == orig(this.out_node.dup.params)
this.out_node.dup.params[] == orig(this.out_node.dup.params[])
this.out_node.analogue == orig(this.out_node.analogue)
this.out_node.analogue.activesum == orig(this.out_node.analogue.activesum)
this.out_node.analogue.activation == orig(this.out_node.analogue.activation)
this.out_node.analogue.last_activation == orig(this.out_node.analogue.last_activation)
this.out_node.analogue.prior_activation == orig(this.out_node.analogue.prior_activation)
this.out_node.analogue.active_flag == orig(this.out_node.analogue.active_flag)
this.out_node.analogue.is_traversed == orig(this.out_node.analogue.is_traversed)
this.out_node.analogue.activation_count == orig(this.out_node.analogue.activation_count)
this.out_node.analogue.incoming == orig(this.out_node.analogue.incoming)
this.out_node.analogue.incoming[] == orig(this.out_node.analogue.incoming[])
this.out_node.analogue.outgoing == orig(this.out_node.analogue.outgoing)
this.out_node.analogue.outgoing[] == orig(this.out_node.analogue.outgoing[])
this.out_node.analogue.nodeTrait == orig(this.out_node.analogue.nodeTrait)
this.out_node.analogue.dup == orig(this.out_node.analogue.dup)
this.out_node.analogue.analogue == orig(this.out_node.analogue.analogue)
this.out_node.analogue.params == orig(this.out_node.analogue.params)
this.out_node.analogue.params[] == orig(this.out_node.analogue.params[])
this.out_node.params == orig(this.out_node.params)
this.out_node.params[] == orig(this.out_node.params[])
this.linkTrait == orig(this.linkTrait)
this.linkTrait.id == orig(this.linkTrait.id)
this.linkTrait.params == orig(this.linkTrait.params)
this.linkTrait.params[] == orig(this.linkTrait.params[])
this.recurrent == orig(this.recurrent)
this.time_delay == orig(this.time_delay)
this.is_traversed == orig(this.is_traversed)
this.params == orig(this.params)
this.in_node.incoming[] == []
this.in_node.incoming[].getClass().getName() == []
this.in_node.outgoing[] == []
this.in_node.outgoing[].getClass().getName() == []
this.in_node.analogue != null
this.in_node.analogue.is_traversed == false
this.out_node.incoming[] == []
this.out_node.incoming[].getClass().getName() == []
this.out_node.outgoing[] == []
this.out_node.outgoing[].getClass().getName() == []
this.out_node.analogue != null
this.out_node.analogue.is_traversed == false
return != null
size(this.in_node.analogue.outgoing[]) one of { 1, 2, 3 }
this.in_node.nodeTrait.id < this.linkTrait.id
this.out_node.nodeTrait.id < this.linkTrait.id
===========================================================================
jneat.MutationTypeEnum:::OBJECT
===========================================================================
jneat.MutationTypeEnum.MutationTypeEnum(java.lang.String, int):::ENTER
arg0.toString one of { "COLD_GAUSSIAN", "GAUSSIAN" }
arg1 one of { 0, 1 }
===========================================================================
jneat.MutationTypeEnum.MutationTypeEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "COLD_GAUSSIAN", "GAUSSIAN" }
===========================================================================
jneat.NNode:::OBJECT
this.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == this.dup.fType
jneat.NodeFuncEnum.SIGMOID == this.dup.dup.fType
jneat.NodeFuncEnum.SIGMOID == this.analogue.fType
this.nType == this.dup.nType
this.nType == this.dup.dup.nType
this.nType == this.analogue.nType
this.gNodeLabel == this.dup.gNodeLabel
this.gNodeLabel == this.dup.dup.gNodeLabel
this.gNodeLabel == this.analogue.gNodeLabel
this.id == this.dup.id
this.id == this.dup.dup.id
this.id == this.analogue.id
this.nodeTrait.id == this.dup.nodeTrait.id
this.dup.fType == this.dup.dup.fType
this.dup.fType == this.dup.analogue.fType
this.dup.fType == this.analogue.fType
this.dup.nType == this.dup.dup.nType
this.dup.nType == this.dup.analogue.nType
this.dup.nType == this.analogue.nType
this.dup.gNodeLabel == this.dup.dup.gNodeLabel
this.dup.gNodeLabel == this.dup.analogue.gNodeLabel
this.dup.gNodeLabel == this.analogue.gNodeLabel
this.dup.id == this.dup.dup.id
this.dup.id == this.dup.analogue.id
this.dup.id == this.analogue.id
this.dup.dup.fType == this.analogue.fType
this.dup.dup.nType == this.analogue.nType
this.dup.dup.gNodeLabel == this.analogue.gNodeLabel
this.dup.dup.id == this.analogue.id
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
this.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
this.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
this.activation_count >= 0
this.incoming != null
this.incoming[] elements != null
this.incoming[].getClass().getName() elements == jneat.Link.class
this.outgoing != null
this.outgoing[] elements != null
this.outgoing[].getClass().getName() elements == jneat.Link.class
this.nodeTrait.id >= 0
this.nodeTrait.params != null
this.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.nodeTrait.params[] sorted by >=
this.dup.fType has only one value
this.dup.fType != null
this.dup.nType != null
this.dup.gNodeLabel != null
this.dup.activesum == 0.0
this.dup.activation == 0.0
this.dup.last_activation == 0.0
this.dup.prior_activation == 0.0
this.dup.active_flag == false
this.dup.is_traversed == false
this.dup.id >= 1
this.dup.activation_count == 0
this.dup.inner_level == 0
this.dup.incoming != null
this.dup.incoming[] == []
this.dup.incoming[].getClass().getName() == []
this.dup.outgoing != null
this.dup.outgoing[] == []
this.dup.outgoing[].getClass().getName() == []
this.dup.nodeTrait != null
this.dup.nodeTrait.params != null
this.dup.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.dup.nodeTrait.params[] sorted by >=
this.dup.dup.fType has only one value
this.dup.dup.activesum == 0.0
this.dup.dup.activation == 0.0
this.dup.dup.last_activation == 0.0
this.dup.dup.prior_activation == 0.0
this.dup.dup.active_flag == false
this.dup.dup.is_traversed == false
this.dup.dup.id one of { 1, 7 }
this.dup.dup.activation_count == 0
this.dup.dup.inner_level == 0
this.dup.dup.incoming[] == []
this.dup.dup.incoming[].getClass().getName() == []
this.dup.dup.outgoing[] == []
this.dup.dup.outgoing[].getClass().getName() == []
this.dup.dup.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup.dup.params[] elements == 0.0
this.dup.analogue != null
this.dup.analogue.activesum == 0.0
this.dup.analogue.activation == 0.0
this.dup.analogue.last_activation == 0.0
this.dup.analogue.prior_activation == 0.0
this.dup.analogue.active_flag == false
this.dup.analogue.is_traversed == false
this.dup.analogue.activation_count == 0
this.dup.analogue.inner_level == 0
this.dup.analogue.incoming != null
this.dup.analogue.incoming[] elements != null
this.dup.analogue.incoming[].getClass().getName() elements == jneat.Link.class
this.dup.analogue.outgoing != null
this.dup.analogue.outgoing[] elements != null
this.dup.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
this.dup.analogue.nodeTrait != null
this.dup.analogue.dup == null
this.dup.analogue.analogue == null
this.dup.analogue.params != null
this.dup.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup.analogue.params[] elements == 0.0
this.dup.params != null
this.dup.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup.params[] elements == 0.0
this.analogue.fType has only one value
this.analogue.fType != null
this.analogue.nType != null
this.analogue.gNodeLabel != null
this.analogue.prior_activation >= 0.0
this.analogue.is_traversed == false
this.analogue.id >= 1
this.analogue.activation_count one of { 0, 20 }
this.analogue.inner_level == 0
this.analogue.incoming != null
this.analogue.incoming[] elements != null
this.analogue.incoming[].getClass().getName() elements == jneat.Link.class
this.analogue.outgoing != null
this.analogue.outgoing[] elements != null
this.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
this.analogue.nodeTrait != null
this.analogue.nodeTrait.params != null
this.analogue.nodeTrait.params[] elements one of { 0.0, 1.0 }
this.analogue.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.analogue.nodeTrait.params[] sorted by >=
this.analogue.dup == null
this.analogue.analogue == null
this.analogue.params != null
this.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.analogue.params[] elements == 0.0
this.params != null
this.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.params[] elements == 0.0
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(this.nodeTrait.params[]) == 8
size(this.dup.nodeTrait.params[]) == 8
size(this.dup.dup.params[]) == 8
size(this.dup.analogue.incoming[]) one of { 0, 1, 2 }
size(this.dup.analogue.params[]) == 8
size(this.dup.params[]) == 8
size(this.analogue.nodeTrait.params[]) == 8
size(this.analogue.params[]) == 8
size(this.params[]) == 8
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
this.activesum <= this.analogue.prior_activation
this.activation <= this.analogue.prior_activation
this.last_activation <= this.analogue.prior_activation
this.prior_activation <= this.analogue.prior_activation
this.nodeTrait.id < this.analogue.nodeTrait.id
this.dup.nodeTrait.id < this.analogue.nodeTrait.id
===========================================================================
jneat.NNode.LoadSensor(double):::ENTER
this.nType == jneat.NodeTypeEnum.SENSOR
this.gNodeLabel == jneat.NodeLabelEnum.BIAS
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.id == 1
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
arg0 != 0
size(this.outgoing[]) one of { 1, 2, 3 }
this.activesum != arg0
this.activation != arg0
this.last_activation != arg0
this.prior_activation != arg0
===========================================================================
jneat.NNode.LoadSensor(double):::EXIT210
===========================================================================
jneat.NNode.LoadSensor(double):::EXIT210;condition="return == true"
===========================================================================
jneat.NNode.LoadSensor(double):::EXIT
jneat.NodeFuncEnum.SIGMOID == orig(this.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.nType == jneat.NodeTypeEnum.SENSOR
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(this.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == jneat.NodeLabelEnum.BIAS
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(this.gNodeLabel)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == orig(this.activesum)
this.activation == orig(arg0)
this.last_activation == orig(this.activation)
this.prior_activation == orig(this.last_activation)
this.active_flag == orig(this.active_flag)
this.is_traversed == orig(this.is_traversed)
this.id == orig(this.id)
this.inner_level == orig(this.inner_level)
this.incoming == orig(this.incoming)
this.incoming[] == orig(this.incoming[])
this.outgoing == orig(this.outgoing)
this.outgoing[] == orig(this.outgoing[])
this.nodeTrait == orig(this.nodeTrait)
this.nodeTrait.id == orig(this.nodeTrait.id)
this.nodeTrait.params == orig(this.nodeTrait.params)
this.nodeTrait.params[] == orig(this.nodeTrait.params[])
this.dup == orig(this.dup)
this.analogue == orig(this.analogue)
this.params == orig(this.params)
this.params[] == orig(this.params[])
this.activesum == 0.0
this.activation != 0
this.active_flag == false
this.is_traversed == false
this.id == 1
this.activation_count >= 1
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
return == true
size(this.outgoing[]) one of { 1, 2, 3 }
this.activesum != this.activation
this.activation != this.last_activation
this.activation != this.prior_activation
this.activation != orig(this.prior_activation)
this.activation_count - orig(this.activation_count) - 1 == 0
===========================================================================
jneat.NNode.LoadSensor(double):::EXIT;condition="return == true"
===========================================================================
jneat.NNode.NNode(jneat.NNode, jneat.Trait):::ENTER
arg0.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == arg0.dup.fType
jneat.NodeFuncEnum.SIGMOID == arg0.analogue.fType
arg0.nType == arg0.dup.nType
arg0.nType == arg0.analogue.nType
arg0.gNodeLabel == arg0.dup.gNodeLabel
arg0.gNodeLabel == arg0.analogue.gNodeLabel
arg0.id == arg0.dup.id
arg0.id == arg0.analogue.id
arg0.nodeTrait.id == arg1.id
arg0.dup.fType == arg0.analogue.fType
arg0.dup.nType == arg0.analogue.nType
arg0.dup.gNodeLabel == arg0.analogue.gNodeLabel
arg0.dup.id == arg0.analogue.id
arg0 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
arg0.nType != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg0.gNodeLabel != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id >= 1
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.id >= 0
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg0.nodeTrait.params[] sorted by >=
arg0.dup.fType has only one value
arg0.dup.fType != null
arg0.dup.nType != null
arg0.dup.gNodeLabel != null
arg0.dup.activesum == 0.0
arg0.dup.activation == 0.0
arg0.dup.last_activation == 0.0
arg0.dup.prior_activation == 0.0
arg0.dup.active_flag == false
arg0.dup.is_traversed == false
arg0.dup.id >= 1
arg0.dup.activation_count == 0
arg0.dup.inner_level == 0
arg0.dup.incoming != null
arg0.dup.incoming[] == []
arg0.dup.incoming[].getClass().getName() == []
arg0.dup.outgoing != null
arg0.dup.outgoing[] == []
arg0.dup.outgoing[].getClass().getName() == []
arg0.dup.nodeTrait != null
arg0.dup.dup == null
arg0.dup.analogue != null
arg0.dup.params != null
arg0.dup.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.dup.params[] elements == 0.0
arg0.analogue.fType has only one value
arg0.analogue.fType != null
arg0.analogue.nType != null
arg0.analogue.gNodeLabel != null
arg0.analogue.prior_activation >= 0.0
arg0.analogue.id >= 1
arg0.analogue.activation_count >= 0
arg0.analogue.incoming != null
arg0.analogue.incoming[] elements != null
arg0.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg0.analogue.outgoing != null
arg0.analogue.outgoing[] elements != null
arg0.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg0.analogue.nodeTrait != null
arg0.analogue.dup == null
arg0.analogue.analogue == null
arg0.analogue.params != null
arg0.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.analogue.params[] elements == 0.0
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
arg1.params != null
arg1.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements one of { 0.0, 1.0 }
arg1.params[] sorted by >=
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.dup.params[]) == 8
size(arg0.analogue.params[]) == 8
size(arg0.params[]) == 8
size(arg1.params[]) == 8
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.NNode.NNode(jneat.NNode, jneat.Trait):::EXIT
jneat.NodeFuncEnum.SIGMOID == arg0.fType
jneat.NodeFuncEnum.SIGMOID == arg0.dup.fType
jneat.NodeFuncEnum.SIGMOID == arg0.analogue.fType
jneat.NodeFuncEnum.SIGMOID == orig(arg0.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.nType == arg0.nType
this.nType == arg0.dup.nType
this.nType == arg0.analogue.nType
this.nType == orig(arg0.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == arg0.gNodeLabel
this.gNodeLabel == arg0.dup.gNodeLabel
this.gNodeLabel == arg0.analogue.gNodeLabel
this.gNodeLabel == orig(arg0.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.id == arg0.id
this.id == arg0.dup.id
this.id == arg0.analogue.id
this.id == orig(arg0.id)
this.nodeTrait == orig(arg1)
this.nodeTrait.id == arg1.id
this.nodeTrait.params == arg1.params
arg0.activesum == orig(arg0.activesum)
arg0.activation == orig(arg0.activation)
arg0.last_activation == orig(arg0.last_activation)
arg0.prior_activation == orig(arg0.prior_activation)
arg0.active_flag == orig(arg0.active_flag)
arg0.is_traversed == orig(arg0.is_traversed)
arg0.activation_count == orig(arg0.activation_count)
arg0.inner_level == orig(arg0.inner_level)
arg0.incoming == orig(arg0.incoming)
arg0.incoming[] == orig(arg0.incoming[])
arg0.outgoing == orig(arg0.outgoing)
arg0.outgoing[] == orig(arg0.outgoing[])
arg0.nodeTrait == orig(arg0.nodeTrait)
arg0.nodeTrait.id == arg1.id
arg0.nodeTrait.id == orig(arg0.nodeTrait.id)
arg0.nodeTrait.params == orig(arg0.nodeTrait.params)
arg0.nodeTrait.params[] == orig(arg0.nodeTrait.params[])
arg0.dup == orig(arg0.dup)
arg0.dup.fType == arg0.analogue.fType
arg0.dup.fType == orig(arg0.dup.fType)
arg0.dup.nType == arg0.analogue.nType
arg0.dup.nType == orig(arg0.dup.nType)
arg0.dup.gNodeLabel == arg0.analogue.gNodeLabel
arg0.dup.gNodeLabel == orig(arg0.dup.gNodeLabel)
arg0.dup.activesum == orig(arg0.dup.activesum)
arg0.dup.activation == orig(arg0.dup.activation)
arg0.dup.last_activation == orig(arg0.dup.last_activation)
arg0.dup.prior_activation == orig(arg0.dup.prior_activation)
arg0.dup.active_flag == orig(arg0.dup.active_flag)
arg0.dup.is_traversed == orig(arg0.dup.is_traversed)
arg0.dup.id == arg0.analogue.id
arg0.dup.id == orig(arg0.dup.id)
arg0.dup.activation_count == orig(arg0.dup.activation_count)
arg0.dup.inner_level == orig(arg0.dup.inner_level)
arg0.dup.incoming == orig(arg0.dup.incoming)
arg0.dup.incoming[] == orig(arg0.dup.incoming[])
arg0.dup.outgoing == orig(arg0.dup.outgoing)
arg0.dup.outgoing[] == orig(arg0.dup.outgoing[])
arg0.dup.nodeTrait == orig(arg0.dup.nodeTrait)
arg0.dup.dup == orig(arg0.dup.dup)
arg0.dup.analogue == orig(arg0.dup.analogue)
arg0.dup.params == orig(arg0.dup.params)
arg0.dup.params[] == orig(arg0.dup.params[])
arg0.analogue == orig(arg0.analogue)
arg0.analogue.fType == orig(arg0.analogue.fType)
arg0.analogue.nType == orig(arg0.analogue.nType)
arg0.analogue.gNodeLabel == orig(arg0.analogue.gNodeLabel)
arg0.analogue.activesum == orig(arg0.analogue.activesum)
arg0.analogue.activation == orig(arg0.analogue.activation)
arg0.analogue.last_activation == orig(arg0.analogue.last_activation)
arg0.analogue.prior_activation == orig(arg0.analogue.prior_activation)
arg0.analogue.active_flag == orig(arg0.analogue.active_flag)
arg0.analogue.is_traversed == orig(arg0.analogue.is_traversed)
arg0.analogue.id == orig(arg0.analogue.id)
arg0.analogue.activation_count == orig(arg0.analogue.activation_count)
arg0.analogue.inner_level == orig(arg0.analogue.inner_level)
arg0.analogue.incoming == orig(arg0.analogue.incoming)
arg0.analogue.incoming[] == orig(arg0.analogue.incoming[])
arg0.analogue.outgoing == orig(arg0.analogue.outgoing)
arg0.analogue.outgoing[] == orig(arg0.analogue.outgoing[])
arg0.analogue.nodeTrait == orig(arg0.analogue.nodeTrait)
arg0.analogue.dup == orig(arg0.analogue.dup)
arg0.analogue.analogue == orig(arg0.analogue.analogue)
arg0.analogue.params == orig(arg0.analogue.params)
arg0.analogue.params[] == orig(arg0.analogue.params[])
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
arg1.id == orig(arg1.id)
arg1.params == orig(arg1.params)
arg1.params[] == orig(arg1.params[])
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.id >= 1
this.activation_count == 0
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.outgoing[] == []
this.outgoing[].getClass().getName() == []
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.id >= 0
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg0.nodeTrait.params[] sorted by >=
arg0.dup.fType has only one value
arg0.dup.fType != null
arg0.dup.nType != null
arg0.dup.gNodeLabel != null
arg0.dup.activesum == 0.0
arg0.dup.activation == 0.0
arg0.dup.last_activation == 0.0
arg0.dup.prior_activation == 0.0
arg0.dup.active_flag == false
arg0.dup.is_traversed == false
arg0.dup.id >= 1
arg0.dup.activation_count == 0
arg0.dup.inner_level == 0
arg0.dup.incoming != null
arg0.dup.incoming[] == []
arg0.dup.incoming[].getClass().getName() == []
arg0.dup.outgoing != null
arg0.dup.outgoing[] == []
arg0.dup.outgoing[].getClass().getName() == []
arg0.dup.nodeTrait != null
arg0.dup.dup == null
arg0.dup.analogue != null
arg0.dup.params != null
arg0.dup.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.dup.params[] elements == 0.0
arg0.analogue.fType has only one value
arg0.analogue.fType != null
arg0.analogue.nType != null
arg0.analogue.gNodeLabel != null
arg0.analogue.prior_activation >= 0.0
arg0.analogue.id >= 1
arg0.analogue.activation_count >= 0
arg0.analogue.incoming != null
arg0.analogue.incoming[] elements != null
arg0.analogue.incoming[].getClass().getName() elements == jneat.Link.class
arg0.analogue.outgoing != null
arg0.analogue.outgoing[] elements != null
arg0.analogue.outgoing[].getClass().getName() elements == jneat.Link.class
arg0.analogue.nodeTrait != null
arg0.analogue.dup == null
arg0.analogue.analogue == null
arg0.analogue.params != null
arg0.analogue.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.analogue.params[] elements == 0.0
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
arg1.params != null
arg1.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg1.params[] elements one of { 0.0, 1.0 }
arg1.params[] sorted by >=
size(arg0.nodeTrait.params[]) == 8
size(arg0.dup.params[]) == 8
size(arg0.analogue.params[]) == 8
size(arg0.params[]) == 8
size(arg1.params[]) == 8
this.activesum <= arg0.analogue.prior_activation
===========================================================================
jneat.NNode.NNode(jneat.NodeTypeEnum, int, jneat.NodeLabelEnum):::ENTER
arg0 != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg1 >= 1
arg2 != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.NNode.NNode(jneat.NodeTypeEnum, int, jneat.NodeLabelEnum):::EXIT
this.nType == orig(arg0)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(arg2)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.id == orig(arg1)
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.id >= 1
this.activation_count == 0
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.outgoing[] == []
this.outgoing[].getClass().getName() == []
this.nodeTrait == null
this.dup == null
this.analogue == null
===========================================================================
jneat.NNode.NNode(jneat.NodeTypeEnum, jneat.NodeLabelEnum, jneat.Trait):::ENTER
arg0 != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg1 != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.params != null
arg2.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements one of { 0.0, 1.0 }
arg2.params[] sorted by >=
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.params[]) == 8
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.NNode.NNode(jneat.NodeTypeEnum, jneat.NodeLabelEnum, jneat.Trait):::EXIT
this.nType == orig(arg0)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(arg1)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.nodeTrait == orig(arg2)
this.nodeTrait.id == arg2.id
this.nodeTrait.params == arg2.params
arg2.id == orig(arg2.id)
arg2.params == orig(arg2.params)
arg2.params[] == orig(arg2.params[])
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.activation_count == 0
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.outgoing[] == []
this.outgoing[].getClass().getName() == []
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
arg2.params != null
arg2.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements one of { 0.0, 1.0 }
arg2.params[] sorted by >=
size(arg2.params[]) == 8
===========================================================================
jneat.NNode.NNode(jneat.NodeTypeEnum, jneat.NodeLabelEnum, jneat.Trait, int):::ENTER
arg0 != null
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
arg1 != null
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg2.params != null
arg2.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements one of { 0.0, 1.0 }
arg2.params[] sorted by >=
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg2.params[]) == 8
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.NNode.NNode(jneat.NodeTypeEnum, jneat.NodeLabelEnum, jneat.Trait, int):::EXIT
this.nType == orig(arg0)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(arg1)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.id == orig(arg3)
this.nodeTrait == orig(arg2)
this.nodeTrait.id == arg2.id
this.nodeTrait.params == arg2.params
arg2.id == orig(arg2.id)
arg2.params == orig(arg2.params)
arg2.params[] == orig(arg2.params[])
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.activation_count == 0
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.outgoing[] == []
this.outgoing[].getClass().getName() == []
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
arg2.params != null
arg2.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg2.params[] elements one of { 0.0, 1.0 }
arg2.params[] sorted by >=
size(arg2.params[]) == 8
===========================================================================
jneat.NNode.SaveNode():::ENTER
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.id >= 1
this.activation_count == 0
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.outgoing[] == []
this.outgoing[].getClass().getName() == []
this.nodeTrait != null
this.analogue != null
===========================================================================
jneat.NNode.SaveNode():::EXIT
jneat.NodeFuncEnum.SIGMOID == orig(this.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.SIGMOID == orig(this.analogue.fType)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.nType == orig(this.nType)
this.nType == orig(this.analogue.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(this.gNodeLabel)
this.gNodeLabel == orig(this.analogue.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.activesum == orig(this.activesum)
this.activesum == orig(this.activation)
this.activesum == orig(this.last_activation)
this.activesum == orig(this.prior_activation)
this.active_flag == orig(this.active_flag)
this.is_traversed == orig(this.is_traversed)
this.id == orig(this.id)
this.id == orig(this.analogue.id)
this.activation_count == orig(this.activation_count)
this.inner_level == orig(this.inner_level)
this.incoming == orig(this.incoming)
this.incoming[] == orig(this.incoming[])
this.outgoing == orig(this.outgoing)
this.outgoing[] == orig(this.outgoing[])
this.nodeTrait == orig(this.nodeTrait)
this.nodeTrait.id == orig(this.nodeTrait.id)
this.nodeTrait.params == orig(this.nodeTrait.params)
this.nodeTrait.params[] == orig(this.nodeTrait.params[])
this.dup == orig(this.dup)
this.dup.fType == orig(this.dup.fType)
this.dup.fType == orig(this.dup.analogue.fType)
this.dup.nType == orig(this.dup.nType)
this.dup.nType == orig(this.dup.analogue.nType)
this.dup.gNodeLabel == orig(this.dup.gNodeLabel)
this.dup.gNodeLabel == orig(this.dup.analogue.gNodeLabel)
this.dup.activesum == orig(this.dup.activesum)
this.dup.activation == orig(this.dup.activation)
this.dup.last_activation == orig(this.dup.last_activation)
this.dup.prior_activation == orig(this.dup.prior_activation)
this.dup.active_flag == orig(this.dup.active_flag)
this.dup.is_traversed == orig(this.dup.is_traversed)
this.dup.id == orig(this.dup.id)
this.dup.id == orig(this.dup.analogue.id)
this.dup.activation_count == orig(this.dup.activation_count)
this.dup.inner_level == orig(this.dup.inner_level)
this.dup.incoming == orig(this.dup.incoming)
this.dup.incoming[] == orig(this.dup.incoming[])
this.dup.outgoing == orig(this.dup.outgoing)
this.dup.outgoing[] == orig(this.dup.outgoing[])
this.dup.nodeTrait == orig(this.dup.nodeTrait)
this.dup.nodeTrait.id == orig(this.dup.nodeTrait.id)
this.dup.nodeTrait.params == orig(this.dup.nodeTrait.params)
this.dup.nodeTrait.params[] == orig(this.dup.nodeTrait.params[])
this.dup.dup == orig(this.dup.dup)
this.dup.dup.fType == orig(this.dup.dup.fType)
this.dup.dup.nType == orig(this.dup.dup.nType)
this.dup.dup.gNodeLabel == orig(this.dup.dup.gNodeLabel)
this.dup.dup.activesum == orig(this.dup.dup.activesum)
this.dup.dup.activation == orig(this.dup.dup.activation)
this.dup.dup.last_activation == orig(this.dup.dup.last_activation)
this.dup.dup.prior_activation == orig(this.dup.dup.prior_activation)
this.dup.dup.active_flag == orig(this.dup.dup.active_flag)
this.dup.dup.is_traversed == orig(this.dup.dup.is_traversed)
this.dup.dup.id == orig(this.dup.dup.id)
this.dup.dup.activation_count == orig(this.dup.dup.activation_count)
this.dup.dup.inner_level == orig(this.dup.dup.inner_level)
this.dup.dup.incoming == orig(this.dup.dup.incoming)
this.dup.dup.incoming[] == orig(this.dup.dup.incoming[])
this.dup.dup.outgoing == orig(this.dup.dup.outgoing)
this.dup.dup.outgoing[] == orig(this.dup.dup.outgoing[])
this.dup.dup.nodeTrait == orig(this.dup.dup.nodeTrait)
this.dup.dup.dup == orig(this.dup.dup.dup)
this.dup.dup.analogue == orig(this.dup.dup.analogue)
this.dup.dup.params == orig(this.dup.dup.params)
this.dup.dup.params[] == orig(this.dup.dup.params[])
this.dup.analogue == orig(this.dup.analogue)
this.dup.analogue.activesum == orig(this.dup.analogue.activesum)
this.dup.analogue.activation == orig(this.dup.analogue.activation)
this.dup.analogue.last_activation == orig(this.dup.analogue.last_activation)
this.dup.analogue.prior_activation == orig(this.dup.analogue.prior_activation)
this.dup.analogue.active_flag == orig(this.dup.analogue.active_flag)
this.dup.analogue.is_traversed == orig(this.dup.analogue.is_traversed)
this.dup.analogue.activation_count == orig(this.dup.analogue.activation_count)
this.dup.analogue.inner_level == orig(this.dup.analogue.inner_level)
this.dup.analogue.incoming == orig(this.dup.analogue.incoming)
this.dup.analogue.incoming[] == orig(this.dup.analogue.incoming[])
this.dup.analogue.outgoing == orig(this.dup.analogue.outgoing)
this.dup.analogue.outgoing[] == orig(this.dup.analogue.outgoing[])
this.dup.analogue.nodeTrait == orig(this.dup.analogue.nodeTrait)
this.dup.analogue.dup == orig(this.dup.analogue.dup)
this.dup.analogue.analogue == orig(this.dup.analogue.analogue)
this.dup.analogue.params == orig(this.dup.analogue.params)
this.dup.analogue.params[] == orig(this.dup.analogue.params[])
this.dup.params == orig(this.dup.params)
this.dup.params[] == orig(this.dup.params[])
this.analogue == orig(this.analogue)
this.analogue.activesum == orig(this.analogue.activesum)
this.analogue.activation == orig(this.analogue.activation)
this.analogue.last_activation == orig(this.analogue.last_activation)
this.analogue.prior_activation == orig(this.analogue.prior_activation)
this.analogue.active_flag == orig(this.analogue.active_flag)
this.analogue.is_traversed == orig(this.analogue.is_traversed)
this.analogue.activation_count == orig(this.analogue.activation_count)
this.analogue.inner_level == orig(this.analogue.inner_level)
this.analogue.incoming == orig(this.analogue.incoming)
this.analogue.incoming[] == orig(this.analogue.incoming[])
this.analogue.outgoing == orig(this.analogue.outgoing)
this.analogue.outgoing[] == orig(this.analogue.outgoing[])
this.analogue.nodeTrait == orig(this.analogue.nodeTrait)
this.analogue.nodeTrait.id == orig(this.analogue.nodeTrait.id)
this.analogue.nodeTrait.params == orig(this.analogue.nodeTrait.params)
this.analogue.nodeTrait.params[] == orig(this.analogue.nodeTrait.params[])
this.analogue.dup == orig(this.analogue.dup)
this.analogue.analogue == orig(this.analogue.analogue)
this.analogue.params == orig(this.analogue.params)
this.analogue.params[] == orig(this.analogue.params[])
this.params == orig(this.params)
this.params[] == orig(this.params[])
this.activesum == 0.0
this.active_flag == false
this.is_traversed == false
this.id >= 1
this.activation_count == 0
this.inner_level == 0
this.incoming[] == []
this.incoming[].getClass().getName() == []
this.outgoing[] == []
this.outgoing[].getClass().getName() == []
this.nodeTrait != null
this.analogue != null
return != null
===========================================================================
jneat.NNode.depth(int, int):::ENTER
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.activesum == 0.0
this.active_flag == false
this.activation_count == 0
this.inner_level == 0
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
arg0 one of { 0, 1, 2 }
arg1 one of { 0, 1, 2 }
===========================================================================
jneat.NNode.depth(int, int):::EXIT223
this.nType == jneat.NodeTypeEnum.SENSOR
jneat.NodeTypeEnum.SENSOR == orig(this.nType)
this.gNodeLabel == jneat.NodeLabelEnum.BIAS
jneat.NodeLabelEnum.BIAS == orig(this.gNodeLabel)
return == orig(arg0)
this.is_traversed == true
this.id == 1
this.incoming[] == []
this.incoming[].getClass().getName() == []
return one of { 1, 2 }
orig(arg1) one of { 0, 1 }
size(this.outgoing[]) one of { 1, 2, 3 }
return > orig(arg1)
===========================================================================
jneat.NNode.depth(int, int):::EXIT247
this.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == orig(this.nType)
===========================================================================
jneat.NNode.depth(int, int):::EXIT
jneat.NodeFuncEnum.SIGMOID == orig(this.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.nType == orig(this.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(this.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.activesum == orig(this.activesum)
this.activesum == orig(this.activation)
this.activesum == orig(this.last_activation)
this.activesum == orig(this.prior_activation)
this.active_flag == orig(this.active_flag)
this.is_traversed == orig(this.is_traversed)
this.id == orig(this.id)
this.activation_count == orig(this.activation_count)
this.inner_level == orig(this.inner_level)
this.incoming == orig(this.incoming)
this.incoming[] == orig(this.incoming[])
this.outgoing == orig(this.outgoing)
this.outgoing[] == orig(this.outgoing[])
this.nodeTrait == orig(this.nodeTrait)
this.nodeTrait.id == orig(this.nodeTrait.id)
this.nodeTrait.params == orig(this.nodeTrait.params)
this.nodeTrait.params[] == orig(this.nodeTrait.params[])
this.dup == orig(this.dup)
this.analogue == orig(this.analogue)
this.params == orig(this.params)
this.params[] == orig(this.params[])
this.activesum == 0.0
this.active_flag == false
this.activation_count == 0
this.inner_level == 0
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
return >= orig(arg1)
===========================================================================
jneat.NNode.getActivation():::ENTER
this.id >= 1
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
===========================================================================
jneat.NNode.getActivation():::EXIT163
this.activation_count >= 1
this.inner_level one of { 0, 1, 2 }
===========================================================================
jneat.NNode.getActivation():::EXIT164
this.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == orig(this.nType)
this.gNodeLabel == jneat.NodeLabelEnum.HIDDEN
jneat.NodeLabelEnum.HIDDEN == orig(this.gNodeLabel)
this.last_activation == return
this.prior_activation == return
return == orig(this.last_activation)
return == orig(this.prior_activation)
this.id >= 2
this.activation_count == 0
return == 0.0
size(this.outgoing[]) one of { 1, 2, 3 }
===========================================================================
jneat.NNode.getActivation():::EXIT
jneat.NodeFuncEnum.SIGMOID == orig(this.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.nType == orig(this.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(this.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == orig(this.activesum)
this.activation == return
this.last_activation == orig(this.last_activation)
this.prior_activation == orig(this.prior_activation)
this.active_flag == orig(this.active_flag)
this.is_traversed == orig(this.is_traversed)
this.id == orig(this.id)
this.activation_count == orig(this.activation_count)
this.inner_level == orig(this.inner_level)
this.incoming == orig(this.incoming)
this.incoming[] == orig(this.incoming[])
this.outgoing == orig(this.outgoing)
this.outgoing[] == orig(this.outgoing[])
this.nodeTrait == orig(this.nodeTrait)
this.nodeTrait.id == orig(this.nodeTrait.id)
this.nodeTrait.params == orig(this.nodeTrait.params)
this.nodeTrait.params[] == orig(this.nodeTrait.params[])
this.dup == orig(this.dup)
this.analogue == orig(this.analogue)
this.params == orig(this.params)
this.params[] == orig(this.params[])
return == orig(this.activation)
(this.activation_count == 0)  ==>  (return == 0.0)
(this.activation_count == 0)  ==>  (size(this.outgoing[]) one of { 1, 2, 3 })
(this.activation_count == 0)  ==>  (this.gNodeLabel == jneat.NodeLabelEnum.HIDDEN)
(this.activation_count == 0)  ==>  (this.gNodeLabel has only one value)
(this.activation_count == 0)  ==>  (this.id >= 2)
(this.activation_count == 0)  ==>  (this.last_activation == 0.0)
(this.activation_count == 0)  ==>  (this.last_activation == return)
(this.activation_count == 0)  ==>  (this.nType == jneat.NodeTypeEnum.NEURON)
(this.activation_count == 0)  ==>  (this.nType has only one value)
(this.activation_count == 0)  ==>  (this.prior_activation == 0.0)
(this.activation_count == 0)  ==>  (this.prior_activation == return)
this.id >= 1
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
===========================================================================
jneat.NNode.mark(int):::ENTER
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.activesum == 0.0
this.active_flag == false
this.id >= 1
this.activation_count == 0
this.inner_level == 0
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
arg0 one of { 0, 1, 2 }
===========================================================================
jneat.NNode.mark(int):::EXIT181
this.nType == jneat.NodeTypeEnum.SENSOR
jneat.NodeTypeEnum.SENSOR == orig(this.nType)
this.gNodeLabel == jneat.NodeLabelEnum.BIAS
jneat.NodeLabelEnum.BIAS == orig(this.gNodeLabel)
this.is_traversed == true
this.id == 1
this.incoming[] == []
this.incoming[].getClass().getName() == []
orig(arg0) one of { 1, 2 }
size(this.outgoing[]) one of { 1, 2, 3 }
===========================================================================
jneat.NNode.mark(int):::EXIT181;condition="return == true"
===========================================================================
jneat.NNode.mark(int):::EXIT197
this.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == orig(this.nType)
===========================================================================
jneat.NNode.mark(int):::EXIT197;condition="return == true"
===========================================================================
jneat.NNode.mark(int):::EXIT
jneat.NodeFuncEnum.SIGMOID == orig(this.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
this.nType == orig(this.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
this.gNodeLabel == orig(this.gNodeLabel)
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
this.activesum == this.activation
this.activesum == this.last_activation
this.activesum == this.prior_activation
this.activesum == orig(this.activesum)
this.activesum == orig(this.activation)
this.activesum == orig(this.last_activation)
this.activesum == orig(this.prior_activation)
this.active_flag == orig(this.active_flag)
this.is_traversed == orig(this.is_traversed)
this.id == orig(this.id)
this.activation_count == orig(this.activation_count)
this.inner_level == orig(this.inner_level)
this.incoming == orig(this.incoming)
this.incoming[] == orig(this.incoming[])
this.outgoing == orig(this.outgoing)
this.outgoing[] == orig(this.outgoing[])
this.nodeTrait == orig(this.nodeTrait)
this.nodeTrait.id == orig(this.nodeTrait.id)
this.nodeTrait.params == orig(this.nodeTrait.params)
this.nodeTrait.params[] == orig(this.nodeTrait.params[])
this.dup == orig(this.dup)
this.analogue == orig(this.analogue)
this.params == orig(this.params)
this.params[] == orig(this.params[])
this.activesum == 0.0
this.active_flag == false
this.id >= 1
this.activation_count == 0
this.inner_level == 0
this.nodeTrait != null
this.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.dup == null
this.analogue == null
return == true
===========================================================================
jneat.NNode.mark(int):::EXIT;condition="return == true"
===========================================================================
jneat.Network:::OBJECT
this == this.genotype.phenotype
this.inputs == this.genotype.phenotype.inputs
this.outputs == this.genotype.phenotype.outputs
this.allNodes == this.genotype.phenotype.allNodes
this.genotype == this.genotype.phenotype.genotype
this.genotype.phenotype.net_id == this.genotype.genome_id
this.genotype.phenotype.status == jneat.NetworkStatusEnum.NORMAL
this.genotype.genome_id == this.net_id
this.status == jneat.NetworkStatusEnum.NORMAL
this.inputs != null
this.inputs[] elements != null
this.inputs[].getClass().getName() elements == jneat.NNode.class
this.inputs[].getClass().getName() one of { [], [jneat.NNode] }
this.outputs != null
this.outputs[] elements != null
this.outputs[].getClass().getName() elements == jneat.NNode.class
this.outputs[].getClass().getName() one of { [], [jneat.NNode] }
this.allNodes != null
this.allNodes[] elements != null
this.allNodes[].getClass().getName() elements == jneat.NNode.class
this.genotype.phenotype != null
this.genotype.phenotype.inputs != null
this.genotype.phenotype.inputs[] elements != null
this.genotype.phenotype.inputs[].getClass().getName() == [jneat.NNode]
this.genotype.phenotype.inputs[].getClass().getName() elements == jneat.NNode.class
this.genotype.phenotype.outputs != null
this.genotype.phenotype.outputs[] elements != null
this.genotype.phenotype.outputs[].getClass().getName() == [jneat.NNode]
this.genotype.phenotype.outputs[].getClass().getName() elements == jneat.NNode.class
this.genotype.phenotype.allNodes != null
this.genotype.phenotype.allNodes[] elements != null
this.genotype.phenotype.allNodes[].getClass().getName() elements == jneat.NNode.class
this.genotype.phenotype.genotype != null
this.genotype.phenotype.status has only one value
this.genotype.phenotype.status != null
this.genotype.genome_id >= 0
this.genotype.genes != null
this.genotype.genes[] elements != null
this.genotype.genes[].getClass().getName() elements == jneat.Gene.class
this.genotype.traits != null
this.genotype.traits[] elements != null
this.genotype.traits[].getClass().getName() == [jneat.Trait]
this.genotype.traits[].getClass().getName() elements == jneat.Trait.class
this.genotype.nodes != null
this.genotype.nodes[] elements != null
this.genotype.nodes[].getClass().getName() elements == jneat.NNode.class
this.net_id >= 0
jneat.NetworkStatusEnum.NORMAL has only one value
jneat.NetworkStatusEnum.NORMAL != null
jneat.NetworkStatusEnum.HAS_LOOP has only one value
jneat.NetworkStatusEnum.HAS_LOOP != null
jneat.NetworkStatusEnum.$VALUES has only one value
jneat.NetworkStatusEnum.$VALUES != null
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == jneat.NetworkStatusEnum[].class
jneat.NetworkStatusEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NetworkStatusEnum.$VALUES[] elements != null
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() == [jneat.NetworkStatusEnum, jneat.NetworkStatusEnum]
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() elements == jneat.NetworkStatusEnum.class
size(this.inputs[]) one of { 0, 1 }
size(this.outputs[]) one of { 0, 1 }
size(this.genotype.phenotype.inputs[]) == 1
size(this.genotype.phenotype.outputs[]) == 1
size(this.genotype.phenotype.allNodes[]) >= 2
size(this.genotype.genes[]) >= 1
size(this.genotype.traits[]) == 1
size(this.genotype.nodes[]) >= 2
size(jneat.NetworkStatusEnum.$VALUES[]) == 2
===========================================================================
jneat.Network.ActivateNetwork():::ENTER
this.genotype.phenotype.net_id == this.net_id
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.ActivateNetwork():::EXIT148
===========================================================================
jneat.Network.ActivateNetwork():::EXIT148;condition="return == true"
===========================================================================
jneat.Network.ActivateNetwork():::EXIT
this.inputs == orig(this.inputs)
this.inputs == orig(this.genotype.phenotype.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.outputs == orig(this.genotype.phenotype.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.allNodes == orig(this.genotype.phenotype.allNodes)
this.allNodes[] == orig(this.allNodes[])
this.genotype == orig(this.genotype)
this.genotype == orig(this.genotype.phenotype.genotype)
this.genotype.phenotype == orig(this)
this.genotype.phenotype == orig(this.genotype.phenotype)
this.genotype.phenotype.inputs[] == orig(this.genotype.phenotype.inputs[])
this.genotype.phenotype.outputs[] == orig(this.genotype.phenotype.outputs[])
this.genotype.phenotype.allNodes[] == orig(this.genotype.phenotype.allNodes[])
this.genotype.phenotype.net_id == this.net_id
this.genotype.genes == orig(this.genotype.genes)
this.genotype.genes[] == orig(this.genotype.genes[])
this.genotype.traits == orig(this.genotype.traits)
this.genotype.traits[] == orig(this.genotype.traits[])
this.genotype.nodes == orig(this.genotype.nodes)
this.genotype.nodes[] == orig(this.genotype.nodes[])
this.net_id == orig(this.genotype.phenotype.net_id)
this.net_id == orig(this.genotype.genome_id)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.genotype.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
return == true
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.ActivateNetwork():::EXIT;condition="return == true"
===========================================================================
jneat.Network.IsMinimal():::ENTER
this.genotype.phenotype.net_id == this.net_id
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
size(this.inputs[]) == 1
size(this.outputs[]) == 1
===========================================================================
jneat.Network.IsMinimal():::EXIT215
(return == true)  ==>  (size(this.allNodes[]) >= 2)
(return == true)  ==>  (size(this.genotype.nodes[]) >= 2)
(return == true)  ==>  (size(this.genotype.phenotype.allNodes[]) >= 2)
===========================================================================
jneat.Network.IsMinimal():::EXIT215;condition="return == true"
===========================================================================
jneat.Network.IsMinimal():::EXIT215;condition="not(return == true)"
===========================================================================
jneat.Network.IsMinimal():::EXIT
this.inputs == orig(this.inputs)
this.inputs == orig(this.genotype.phenotype.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.outputs == orig(this.genotype.phenotype.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.allNodes == orig(this.genotype.phenotype.allNodes)
this.allNodes[] == orig(this.allNodes[])
this.genotype == orig(this.genotype)
this.genotype == orig(this.genotype.phenotype.genotype)
this.genotype.phenotype == orig(this)
this.genotype.phenotype == orig(this.genotype.phenotype)
this.genotype.phenotype.inputs[] == orig(this.genotype.phenotype.inputs[])
this.genotype.phenotype.outputs[] == orig(this.genotype.phenotype.outputs[])
this.genotype.phenotype.allNodes[] == orig(this.genotype.phenotype.allNodes[])
this.genotype.phenotype.net_id == this.net_id
this.genotype.genes == orig(this.genotype.genes)
this.genotype.genes[] == orig(this.genotype.genes[])
this.genotype.traits == orig(this.genotype.traits)
this.genotype.traits[] == orig(this.genotype.traits[])
this.genotype.nodes == orig(this.genotype.nodes)
this.genotype.nodes[] == orig(this.genotype.nodes[])
this.net_id == orig(this.genotype.phenotype.net_id)
this.net_id == orig(this.genotype.genome_id)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.genotype.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
(return == true)  ==>  (size(this.allNodes[]) >= 2)
(return == true)  ==>  (size(this.genotype.nodes[]) >= 2)
(return == true)  ==>  (size(this.genotype.phenotype.allNodes[]) >= 2)
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
size(this.inputs[]) == 1
size(this.outputs[]) == 1
===========================================================================
jneat.Network.IsMinimal():::EXIT;condition="return == true"
return == true
===========================================================================
jneat.Network.IsMinimal():::EXIT;condition="not(return == true)"
return == false
===========================================================================
jneat.Network.IsStabilized(int):::ENTER
this.genotype.phenotype.net_id == this.net_id
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
arg0 one of { 1, 2, 3 }
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.IsStabilized(int):::EXIT318
===========================================================================
jneat.Network.IsStabilized(int):::EXIT
this.inputs == orig(this.inputs)
this.inputs == orig(this.genotype.phenotype.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.outputs == orig(this.genotype.phenotype.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.allNodes == orig(this.genotype.phenotype.allNodes)
this.allNodes[] == orig(this.allNodes[])
this.genotype == orig(this.genotype)
this.genotype == orig(this.genotype.phenotype.genotype)
this.genotype.phenotype == orig(this)
this.genotype.phenotype == orig(this.genotype.phenotype)
this.genotype.phenotype.inputs[] == orig(this.genotype.phenotype.inputs[])
this.genotype.phenotype.outputs[] == orig(this.genotype.phenotype.outputs[])
this.genotype.phenotype.allNodes[] == orig(this.genotype.phenotype.allNodes[])
this.genotype.phenotype.net_id == this.net_id
this.genotype.genes == orig(this.genotype.genes)
this.genotype.genes[] == orig(this.genotype.genes[])
this.genotype.traits == orig(this.genotype.traits)
this.genotype.traits[] == orig(this.genotype.traits[])
this.genotype.nodes == orig(this.genotype.nodes)
this.genotype.nodes[] == orig(this.genotype.nodes[])
this.net_id == orig(this.genotype.phenotype.net_id)
this.net_id == orig(this.genotype.genome_id)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.genotype.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
return == orig(arg0)
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
return one of { 1, 2, 3 }
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.Network(int):::ENTER
arg0 >= 0
===========================================================================
jneat.Network.Network(int):::EXIT
this.net_id == orig(arg0)
this.inputs[] == []
this.inputs[].getClass().getName() == []
this.outputs[] == []
this.outputs[].getClass().getName() == []
this.allNodes[] == []
this.allNodes[].getClass().getName() == []
this.genotype == null
===========================================================================
jneat.Network.Network(java.util.Vector, java.util.Vector, int):::ENTER
arg0 != null
arg0[] == []
arg0[].getClass().getName() == []
arg1 != null
arg1[] == []
arg1[].getClass().getName() == []
arg2 >= 0
===========================================================================
jneat.Network.Network(java.util.Vector, java.util.Vector, int):::EXIT
this.inputs == orig(arg0)
this.outputs == orig(arg1)
this.net_id == orig(arg2)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
this.inputs[] == []
this.inputs[].getClass().getName() == []
this.outputs[] == []
this.outputs[].getClass().getName() == []
this.allNodes[] == []
this.allNodes[].getClass().getName() == []
this.genotype == null
arg0[] == []
arg0[].getClass().getName() == []
arg1[] == []
arg1[].getClass().getName() == []
===========================================================================
jneat.Network.OutputsOff():::ENTER
this.genotype.phenotype.net_id == this.net_id
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.OutputsOff():::EXIT157
return == true
===========================================================================
jneat.Network.OutputsOff():::EXIT157;condition="return == true"
===========================================================================
jneat.Network.OutputsOff():::EXIT160
return == false
===========================================================================
jneat.Network.OutputsOff():::EXIT160;condition="not(return == true)"
===========================================================================
jneat.Network.OutputsOff():::EXIT
this.inputs == orig(this.inputs)
this.inputs == orig(this.genotype.phenotype.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.outputs == orig(this.genotype.phenotype.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.allNodes == orig(this.genotype.phenotype.allNodes)
this.allNodes[] == orig(this.allNodes[])
this.genotype == orig(this.genotype)
this.genotype == orig(this.genotype.phenotype.genotype)
this.genotype.phenotype == orig(this)
this.genotype.phenotype == orig(this.genotype.phenotype)
this.genotype.phenotype.inputs[] == orig(this.genotype.phenotype.inputs[])
this.genotype.phenotype.outputs[] == orig(this.genotype.phenotype.outputs[])
this.genotype.phenotype.allNodes[] == orig(this.genotype.phenotype.allNodes[])
this.genotype.phenotype.net_id == this.net_id
this.genotype.genes == orig(this.genotype.genes)
this.genotype.genes[] == orig(this.genotype.genes[])
this.genotype.traits == orig(this.genotype.traits)
this.genotype.traits[] == orig(this.genotype.traits[])
this.genotype.nodes == orig(this.genotype.nodes)
this.genotype.nodes[] == orig(this.genotype.nodes[])
this.net_id == orig(this.genotype.phenotype.net_id)
this.net_id == orig(this.genotype.genome_id)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.genotype.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.OutputsOff():::EXIT;condition="return == true"
return == true
===========================================================================
jneat.Network.OutputsOff():::EXIT;condition="not(return == true)"
return == false
===========================================================================
jneat.Network.attachHidden(jneat.NNode):::ENTER
arg0.fType == jneat.NodeFuncEnum.SIGMOID
arg0.nType == jneat.NodeTypeEnum.NEURON
arg0.gNodeLabel == jneat.NodeLabelEnum.HIDDEN
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[] elements has only one value
this.genotype == null
arg0 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id >= 2
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg0.nodeTrait.params[] sorted by >=
arg0.dup == null
arg0.analogue == null
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
size(this.inputs[]) == 1
size(this.allNodes[]) >= 1
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeFuncEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.Network.attachHidden(jneat.NNode):::EXIT
this.inputs == orig(this.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.genotype == orig(this.genotype)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
arg0.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == orig(arg0.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
arg0.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == orig(arg0.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
arg0.gNodeLabel == jneat.NodeLabelEnum.HIDDEN
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(arg0.gNodeLabel)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
arg0.activesum == orig(arg0.activesum)
arg0.activation == orig(arg0.activation)
arg0.last_activation == orig(arg0.last_activation)
arg0.prior_activation == orig(arg0.prior_activation)
arg0.active_flag == orig(arg0.active_flag)
arg0.is_traversed == orig(arg0.is_traversed)
arg0.id == orig(arg0.id)
arg0.activation_count == orig(arg0.activation_count)
arg0.inner_level == orig(arg0.inner_level)
arg0.incoming == orig(arg0.incoming)
arg0.incoming[] == orig(arg0.incoming[])
arg0.outgoing == orig(arg0.outgoing)
arg0.outgoing[] == orig(arg0.outgoing[])
arg0.nodeTrait == orig(arg0.nodeTrait)
arg0.nodeTrait.id == orig(arg0.nodeTrait.id)
arg0.nodeTrait.params == orig(arg0.nodeTrait.params)
arg0.nodeTrait.params[] == orig(arg0.nodeTrait.params[])
arg0.dup == orig(arg0.dup)
arg0.analogue == orig(arg0.analogue)
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
size(this.allNodes[])-1 == orig(size(this.allNodes[]))
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[] elements has only one value
this.genotype == null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id >= 2
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg0.nodeTrait.params[] sorted by >=
arg0.dup == null
arg0.analogue == null
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
size(this.inputs[]) == 1
size(this.allNodes[]) >= 2
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeFuncEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.Network.attachInput(jneat.NNode):::ENTER
arg0.fType == jneat.NodeFuncEnum.SIGMOID
arg0.nType == jneat.NodeTypeEnum.SENSOR
arg0.gNodeLabel == jneat.NodeLabelEnum.BIAS
this.inputs[] == []
this.inputs[].getClass().getName() == []
this.outputs[] == []
this.outputs[].getClass().getName() == []
this.allNodes[] == []
this.allNodes[].getClass().getName() == []
this.genotype == null
arg0 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id == 1
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] sorted by >=
arg0.dup == null
arg0.analogue == null
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeFuncEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.Network.attachInput(jneat.NNode):::EXIT
this.inputs == orig(this.inputs)
this.outputs == orig(this.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.genotype == orig(this.genotype)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
arg0.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == orig(arg0.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
arg0.nType == jneat.NodeTypeEnum.SENSOR
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(arg0.nType)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
arg0.gNodeLabel == jneat.NodeLabelEnum.BIAS
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(arg0.gNodeLabel)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
arg0.activesum == orig(arg0.activesum)
arg0.activation == orig(arg0.activation)
arg0.last_activation == orig(arg0.last_activation)
arg0.prior_activation == orig(arg0.prior_activation)
arg0.active_flag == orig(arg0.active_flag)
arg0.is_traversed == orig(arg0.is_traversed)
arg0.id == orig(arg0.id)
arg0.activation_count == orig(arg0.activation_count)
arg0.inner_level == orig(arg0.inner_level)
arg0.incoming == orig(arg0.incoming)
arg0.incoming[] == orig(arg0.incoming[])
arg0.outgoing == orig(arg0.outgoing)
arg0.outgoing[] == orig(arg0.outgoing[])
arg0.nodeTrait == orig(arg0.nodeTrait)
arg0.nodeTrait.id == orig(arg0.nodeTrait.id)
arg0.nodeTrait.params == orig(arg0.nodeTrait.params)
arg0.nodeTrait.params[] == orig(arg0.nodeTrait.params[])
arg0.dup == orig(arg0.dup)
arg0.analogue == orig(arg0.analogue)
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
size(this.inputs[])-1 == orig(size(this.inputs[]))
size(this.allNodes[])-1 == orig(size(this.allNodes[]))
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[] == []
this.outputs[].getClass().getName() == []
this.allNodes[].getClass().getName() == [jneat.NNode]
this.genotype == null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id == 1
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] sorted by >=
arg0.dup == null
arg0.analogue == null
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
size(this.inputs[]) == 1
size(this.allNodes[]) == 1
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeFuncEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.Network.attachOutput(jneat.NNode):::ENTER
arg0.fType == jneat.NodeFuncEnum.SIGMOID
arg0.nType == jneat.NodeTypeEnum.NEURON
arg0.gNodeLabel == jneat.NodeLabelEnum.OUTPUT
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[] == []
this.outputs[].getClass().getName() == []
this.genotype == null
arg0 != null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id == 7
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] sorted by >=
arg0.dup == null
arg0.analogue == null
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
size(this.inputs[]) == 1
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeFuncEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.Network.attachOutput(jneat.NNode):::EXIT
this.inputs == orig(this.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.allNodes == orig(this.allNodes)
this.genotype == orig(this.genotype)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
arg0.fType == jneat.NodeFuncEnum.SIGMOID
jneat.NodeFuncEnum.SIGMOID == orig(arg0.fType)
jneat.NodeFuncEnum.SIGMOID == orig(jneat.NodeFuncEnum.SIGMOID)
jneat.NodeFuncEnum.OTHER == orig(jneat.NodeFuncEnum.OTHER)
jneat.NodeFuncEnum.$VALUES == orig(jneat.NodeFuncEnum.$VALUES)
jneat.NodeFuncEnum.$VALUES.getClass().getName() == orig(jneat.NodeFuncEnum.$VALUES.getClass().getName())
jneat.NodeFuncEnum.$VALUES[] == orig(jneat.NodeFuncEnum.$VALUES[])
arg0.nType == jneat.NodeTypeEnum.NEURON
jneat.NodeTypeEnum.NEURON == orig(arg0.nType)
jneat.NodeTypeEnum.NEURON == orig(jneat.NodeTypeEnum.NEURON)
jneat.NodeTypeEnum.SENSOR == orig(jneat.NodeTypeEnum.SENSOR)
jneat.NodeTypeEnum.$VALUES == orig(jneat.NodeTypeEnum.$VALUES)
jneat.NodeTypeEnum.$VALUES.getClass().getName() == orig(jneat.NodeTypeEnum.$VALUES.getClass().getName())
jneat.NodeTypeEnum.$VALUES[] == orig(jneat.NodeTypeEnum.$VALUES[])
arg0.gNodeLabel == jneat.NodeLabelEnum.OUTPUT
jneat.NodeLabelEnum.INPUT == orig(jneat.NodeLabelEnum.INPUT)
jneat.NodeLabelEnum.BIAS == orig(jneat.NodeLabelEnum.BIAS)
jneat.NodeLabelEnum.HIDDEN == orig(jneat.NodeLabelEnum.HIDDEN)
jneat.NodeLabelEnum.OUTPUT == orig(arg0.gNodeLabel)
jneat.NodeLabelEnum.OUTPUT == orig(jneat.NodeLabelEnum.OUTPUT)
jneat.NodeLabelEnum.$VALUES == orig(jneat.NodeLabelEnum.$VALUES)
jneat.NodeLabelEnum.$VALUES.getClass().getName() == orig(jneat.NodeLabelEnum.$VALUES.getClass().getName())
jneat.NodeLabelEnum.$VALUES[] == orig(jneat.NodeLabelEnum.$VALUES[])
arg0.activesum == orig(arg0.activesum)
arg0.activation == orig(arg0.activation)
arg0.last_activation == orig(arg0.last_activation)
arg0.prior_activation == orig(arg0.prior_activation)
arg0.active_flag == orig(arg0.active_flag)
arg0.is_traversed == orig(arg0.is_traversed)
arg0.id == orig(arg0.id)
arg0.activation_count == orig(arg0.activation_count)
arg0.inner_level == orig(arg0.inner_level)
arg0.incoming == orig(arg0.incoming)
arg0.incoming[] == orig(arg0.incoming[])
arg0.outgoing == orig(arg0.outgoing)
arg0.outgoing[] == orig(arg0.outgoing[])
arg0.nodeTrait == orig(arg0.nodeTrait)
arg0.nodeTrait.id == orig(arg0.nodeTrait.id)
arg0.nodeTrait.params == orig(arg0.nodeTrait.params)
arg0.nodeTrait.params[] == orig(arg0.nodeTrait.params[])
arg0.dup == orig(arg0.dup)
arg0.analogue == orig(arg0.analogue)
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
size(this.outputs[])-1 == orig(size(this.outputs[]))
size(this.allNodes[])-1 == orig(size(this.allNodes[]))
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype == null
jneat.NodeFuncEnum.SIGMOID has only one value
jneat.NodeFuncEnum.SIGMOID != null
jneat.NodeFuncEnum.OTHER has only one value
jneat.NodeFuncEnum.OTHER != null
jneat.NodeFuncEnum.$VALUES has only one value
jneat.NodeFuncEnum.$VALUES != null
jneat.NodeFuncEnum.$VALUES.getClass().getName() == jneat.NodeFuncEnum[].class
jneat.NodeFuncEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeFuncEnum.$VALUES[] elements != null
jneat.NodeFuncEnum.$VALUES[].getClass().getName() == [jneat.NodeFuncEnum, jneat.NodeFuncEnum]
jneat.NodeFuncEnum.$VALUES[].getClass().getName() elements == jneat.NodeFuncEnum.class
jneat.NodeTypeEnum.NEURON has only one value
jneat.NodeTypeEnum.NEURON != null
jneat.NodeTypeEnum.SENSOR has only one value
jneat.NodeTypeEnum.SENSOR != null
jneat.NodeTypeEnum.$VALUES has only one value
jneat.NodeTypeEnum.$VALUES != null
jneat.NodeTypeEnum.$VALUES.getClass().getName() == jneat.NodeTypeEnum[].class
jneat.NodeTypeEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NodeTypeEnum.$VALUES[] elements != null
jneat.NodeTypeEnum.$VALUES[].getClass().getName() == [jneat.NodeTypeEnum, jneat.NodeTypeEnum]
jneat.NodeTypeEnum.$VALUES[].getClass().getName() elements == jneat.NodeTypeEnum.class
jneat.NodeLabelEnum.INPUT has only one value
jneat.NodeLabelEnum.INPUT != null
jneat.NodeLabelEnum.BIAS has only one value
jneat.NodeLabelEnum.BIAS != null
jneat.NodeLabelEnum.HIDDEN has only one value
jneat.NodeLabelEnum.HIDDEN != null
jneat.NodeLabelEnum.OUTPUT has only one value
jneat.NodeLabelEnum.OUTPUT != null
jneat.NodeLabelEnum.$VALUES has only one value
jneat.NodeLabelEnum.$VALUES != null
jneat.NodeLabelEnum.$VALUES.getClass().getName() == jneat.NodeLabelEnum[].class
jneat.NodeLabelEnum.$VALUES[] contains no nulls and has only one value, of length 4
jneat.NodeLabelEnum.$VALUES[] elements != null
jneat.NodeLabelEnum.$VALUES[].getClass().getName() == [jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum, jneat.NodeLabelEnum]
jneat.NodeLabelEnum.$VALUES[].getClass().getName() elements == jneat.NodeLabelEnum.class
arg0.activesum == 0.0
arg0.activation == 0.0
arg0.last_activation == 0.0
arg0.prior_activation == 0.0
arg0.active_flag == false
arg0.is_traversed == false
arg0.id == 7
arg0.activation_count == 0
arg0.inner_level == 0
arg0.incoming != null
arg0.incoming[] == []
arg0.incoming[].getClass().getName() == []
arg0.outgoing != null
arg0.outgoing[] == []
arg0.outgoing[].getClass().getName() == []
arg0.nodeTrait != null
arg0.nodeTrait.params != null
arg0.nodeTrait.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.nodeTrait.params[] elements one of { 0.0, 1.0 }
arg0.nodeTrait.params[] sorted by >=
arg0.dup == null
arg0.analogue == null
arg0.params != null
arg0.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements == 0.0
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(jneat.NodeFuncEnum.$VALUES[]) == 2
size(jneat.NodeTypeEnum.$VALUES[]) == 2
size(jneat.NodeLabelEnum.$VALUES[]) == 4
size(arg0.nodeTrait.params[]) == 8
size(arg0.params[]) == 8
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeFuncEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NetworkStatusEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeTypeEnum.$VALUES.getClass().getName()
jneat.NodeFuncEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
jneat.NodeTypeEnum.$VALUES.getClass().getName() != jneat.NodeLabelEnum.$VALUES.getClass().getName()
===========================================================================
jneat.Network.max_depth():::ENTER
this.genotype.phenotype.net_id == this.net_id
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.Network.max_depth():::EXIT
this.inputs == orig(this.inputs)
this.inputs == orig(this.genotype.phenotype.inputs)
this.inputs[] == orig(this.inputs[])
this.outputs == orig(this.outputs)
this.outputs == orig(this.genotype.phenotype.outputs)
this.outputs[] == orig(this.outputs[])
this.allNodes == orig(this.allNodes)
this.allNodes == orig(this.genotype.phenotype.allNodes)
this.allNodes[] == orig(this.allNodes[])
this.genotype == orig(this.genotype)
this.genotype == orig(this.genotype.phenotype.genotype)
this.genotype.phenotype == orig(this)
this.genotype.phenotype == orig(this.genotype.phenotype)
this.genotype.phenotype.inputs[] == orig(this.genotype.phenotype.inputs[])
this.genotype.phenotype.outputs[] == orig(this.genotype.phenotype.outputs[])
this.genotype.phenotype.allNodes[] == orig(this.genotype.phenotype.allNodes[])
this.genotype.phenotype.net_id == this.net_id
this.genotype.genes == orig(this.genotype.genes)
this.genotype.genes[] == orig(this.genotype.genes[])
this.genotype.traits == orig(this.genotype.traits)
this.genotype.traits[] == orig(this.genotype.traits[])
this.genotype.nodes == orig(this.genotype.nodes)
this.genotype.nodes[] == orig(this.genotype.nodes[])
this.net_id == orig(this.genotype.phenotype.net_id)
this.net_id == orig(this.genotype.genome_id)
this.net_id == orig(this.net_id)
jneat.NetworkStatusEnum.NORMAL == orig(this.genotype.phenotype.status)
jneat.NetworkStatusEnum.NORMAL == orig(this.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.inputs[].getClass().getName() == [jneat.NNode]
this.outputs[].getClass().getName() == [jneat.NNode]
this.genotype != null
return one of { 1, 2, 3 }
size(this.inputs[]) == 1
size(this.outputs[]) == 1
size(this.allNodes[]) >= 2
===========================================================================
jneat.NetworkStatusEnum:::OBJECT
===========================================================================
jneat.NetworkStatusEnum.NetworkStatusEnum(java.lang.String, int):::ENTER
arg0.toString one of { "HAS_LOOP", "NORMAL" }
arg1 one of { 0, 1 }
===========================================================================
jneat.NetworkStatusEnum.NetworkStatusEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "HAS_LOOP", "NORMAL" }
===========================================================================
jneat.NodeFuncEnum:::OBJECT
===========================================================================
jneat.NodeFuncEnum.NodeFuncEnum(java.lang.String, int):::ENTER
arg0.toString one of { "OTHER", "SIGMOID" }
arg1 one of { 0, 1 }
===========================================================================
jneat.NodeFuncEnum.NodeFuncEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "OTHER", "SIGMOID" }
===========================================================================
jneat.NodeLabelEnum:::OBJECT
===========================================================================
jneat.NodeLabelEnum.NodeLabelEnum(java.lang.String, int):::ENTER
===========================================================================
jneat.NodeLabelEnum.NodeLabelEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
jneat.NodeTypeEnum:::OBJECT
===========================================================================
jneat.NodeTypeEnum.NodeTypeEnum(java.lang.String, int):::ENTER
arg0.toString one of { "NEURON", "SENSOR" }
arg1 one of { 0, 1 }
===========================================================================
jneat.NodeTypeEnum.NodeTypeEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "NEURON", "SENSOR" }
===========================================================================
jneat.Organism:::OBJECT
this.generation == 1
this.checkout == false
this.fitAveragedOver == 0
this.high_fit == 0.0
this.orig_fitness == 0.0
this.error == 0.0
this.winner == false
this.champion == false
this.pop_champ == false
this.pop_champ_child == false
this.mate_baby == false
this.eliminate == false
this.net != null
this.net.inputs != null
this.net.inputs[] elements != null
this.net.inputs[].getClass().getName() == [jneat.NNode]
this.net.inputs[].getClass().getName() elements == jneat.NNode.class
this.net.outputs != null
this.net.outputs[] elements != null
this.net.outputs[].getClass().getName() == [jneat.NNode]
this.net.outputs[].getClass().getName() elements == jneat.NNode.class
this.net.allNodes != null
this.net.allNodes[] elements != null
this.net.allNodes[].getClass().getName() elements == jneat.NNode.class
this.net.genotype != null
this.net.genotype.phenotype != null
this.net.genotype.genome_id >= 0
this.net.genotype.genes != null
this.net.genotype.genes[] elements != null
this.net.genotype.genes[].getClass().getName() elements == jneat.Gene.class
this.net.genotype.traits != null
this.net.genotype.traits[] elements != null
this.net.genotype.traits[].getClass().getName() == [jneat.Trait]
this.net.genotype.traits[].getClass().getName() elements == jneat.Trait.class
this.net.genotype.nodes != null
this.net.genotype.nodes[] elements != null
this.net.genotype.nodes[].getClass().getName() elements == jneat.NNode.class
this.net.net_id >= 0
this.net.status has only one value
this.net.status != null
jneat.NetworkStatusEnum.NORMAL has only one value
jneat.NetworkStatusEnum.NORMAL != null
jneat.NetworkStatusEnum.HAS_LOOP has only one value
jneat.NetworkStatusEnum.HAS_LOOP != null
jneat.NetworkStatusEnum.$VALUES has only one value
jneat.NetworkStatusEnum.$VALUES != null
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == jneat.NetworkStatusEnum[].class
jneat.NetworkStatusEnum.$VALUES[] contains no nulls and has only one value, of length 2
jneat.NetworkStatusEnum.$VALUES[] elements != null
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() == [jneat.NetworkStatusEnum, jneat.NetworkStatusEnum]
jneat.NetworkStatusEnum.$VALUES[].getClass().getName() elements == jneat.NetworkStatusEnum.class
this.genome != null
this.genome.phenotype != null
this.genome.phenotype.inputs != null
this.genome.phenotype.inputs[] elements != null
this.genome.phenotype.inputs[].getClass().getName() == [jneat.NNode]
this.genome.phenotype.inputs[].getClass().getName() elements == jneat.NNode.class
this.genome.phenotype.outputs != null
this.genome.phenotype.outputs[] elements != null
this.genome.phenotype.outputs[].getClass().getName() == [jneat.NNode]
this.genome.phenotype.outputs[].getClass().getName() elements == jneat.NNode.class
this.genome.phenotype.allNodes != null
this.genome.phenotype.allNodes[] elements != null
this.genome.phenotype.allNodes[].getClass().getName() elements == jneat.NNode.class
this.genome.phenotype.genotype != null
this.genome.phenotype.net_id >= 0
this.genome.phenotype.status has only one value
this.genome.phenotype.status != null
this.genome.genome_id >= 0
this.genome.genes != null
this.genome.genes[] elements != null
this.genome.genes[].getClass().getName() elements == jneat.Gene.class
this.genome.traits != null
this.genome.traits[] elements != null
this.genome.traits[].getClass().getName() == [jneat.Trait]
this.genome.traits[].getClass().getName() elements == jneat.Trait.class
this.genome.nodes != null
this.genome.nodes[] elements != null
this.genome.nodes[].getClass().getName() elements == jneat.NNode.class
this.species.id >= 1
this.species.age one of { 1, 2 }
this.species.age_lastimprovement one of { 0, 1 }
this.species.expected_offspring >= 0
this.species.newSpecies == false
this.species.beenChecked == false
this.species.organisms != null
this.species.organisms[] elements != null
this.species.organisms[].getClass().getName() elements == jneat.Organism.class
this.expected_offspring == 0.0
this.super_champ_offspring == 0
size(this.net.inputs[]) == 1
size(this.net.outputs[]) == 1
size(this.net.allNodes[]) >= 2
size(this.net.genotype.genes[]) >= 1
size(this.net.genotype.traits[]) == 1
size(this.net.genotype.nodes[]) >= 2
size(jneat.NetworkStatusEnum.$VALUES[]) == 2
size(this.genome.phenotype.inputs[]) == 1
size(this.genome.phenotype.outputs[]) == 1
size(this.genome.phenotype.allNodes[]) >= 2
size(this.genome.genes[]) >= 1
size(this.genome.traits[]) == 1
size(this.genome.nodes[]) >= 2
size(this.species.organisms[]) >= 1
===========================================================================
jneat.Organism.Organism(double, jneat.Genome, int):::ENTER
arg0 == 0.0
arg1 != null
arg1.phenotype == null
arg1.genome_id >= 0
arg1.genes != null
arg1.genes[] elements != null
arg1.genes[].getClass().getName() elements == jneat.Gene.class
arg1.traits != null
arg1.traits[] elements != null
arg1.traits[].getClass().getName() == [jneat.Trait]
arg1.traits[].getClass().getName() elements == jneat.Trait.class
arg1.nodes != null
arg1.nodes[] elements != null
arg1.nodes[].getClass().getName() elements == jneat.NNode.class
arg2 == 1
size(arg1.genes[]) >= 1
size(arg1.traits[]) == 1
size(arg1.nodes[]) >= 2
===========================================================================
jneat.Organism.Organism(double, jneat.Genome, int):::EXIT
arg1.genome_id == orig(arg1.genome_id)
arg1.genes == orig(arg1.genes)
arg1.genes[] == orig(arg1.genes[])
arg1.traits == orig(arg1.traits)
arg1.traits[] == orig(arg1.traits[])
arg1.nodes == orig(arg1.nodes)
arg1.nodes[] == orig(arg1.nodes[])
this.fitness == 0.0
this.mut_struct_baby == false
this.species == null
arg1.phenotype != null
arg1.phenotype.inputs != null
arg1.phenotype.inputs[] elements != null
arg1.phenotype.inputs[].getClass().getName() == [jneat.NNode]
arg1.phenotype.inputs[].getClass().getName() elements == jneat.NNode.class
arg1.phenotype.outputs != null
arg1.phenotype.outputs[] elements != null
arg1.phenotype.outputs[].getClass().getName() == [jneat.NNode]
arg1.phenotype.outputs[].getClass().getName() elements == jneat.NNode.class
arg1.phenotype.allNodes != null
arg1.phenotype.allNodes[] elements != null
arg1.phenotype.allNodes[].getClass().getName() elements == jneat.NNode.class
arg1.phenotype.genotype != null
arg1.phenotype.net_id >= 0
arg1.phenotype.status has only one value
arg1.phenotype.status != null
arg1.genome_id >= 0
arg1.genes != null
arg1.genes[] elements != null
arg1.genes[].getClass().getName() elements == jneat.Gene.class
arg1.traits != null
arg1.traits[] elements != null
arg1.traits[].getClass().getName() == [jneat.Trait]
arg1.traits[].getClass().getName() elements == jneat.Trait.class
arg1.nodes != null
arg1.nodes[] elements != null
arg1.nodes[].getClass().getName() elements == jneat.NNode.class
size(arg1.phenotype.inputs[]) == 1
size(arg1.phenotype.outputs[]) == 1
size(arg1.phenotype.allNodes[]) >= 2
size(arg1.genes[]) >= 1
size(arg1.traits[]) == 1
size(arg1.nodes[]) >= 2
===========================================================================
jneat.Organism.SaveOrgHeader():::ENTER
this.fitness one of { 0.0, 0.1 }
this.mut_struct_baby == false
this.net.allNodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.net.genotype.genome_id == 0
this.net.genotype.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene]
this.net.genotype.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.net.net_id == 0
this.genome.phenotype.allNodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.genome.phenotype.net_id == 0
this.genome.genome_id == 0
this.genome.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene]
this.genome.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.species.id one of { 1, 2 }
this.species.avg_fitness one of { 0.0, 0.5 }
this.species.max_fitness one of { 0.0, 0.65 }
this.species.max_fitness_ever one of { 0.0, 0.65 }
this.species.expected_offspring one of { 0, 2 }
this.species.organisms[].getClass().getName() one of { [jneat.Organism], [jneat.Organism, jneat.Organism] }
size(this.net.allNodes[]) one of { 4, 7 }
size(this.net.genotype.genes[]) == 3
size(this.net.genotype.nodes[]) one of { 4, 7 }
size(this.genome.phenotype.allNodes[]) one of { 4, 7 }
size(this.genome.genes[]) == 3
size(this.genome.nodes[]) one of { 4, 7 }
size(this.species.organisms[]) one of { 1, 2 }
===========================================================================
jneat.Organism.SaveOrgHeader():::EXIT
this.generation == orig(this.generation)
this.checkout == orig(this.checkout)
this.fitness == orig(this.fitness)
this.fitAveragedOver == orig(this.fitAveragedOver)
this.high_fit == orig(this.high_fit)
this.orig_fitness == orig(this.orig_fitness)
this.error == orig(this.error)
this.winner == orig(this.winner)
this.champion == orig(this.champion)
this.pop_champ == orig(this.pop_champ)
this.pop_champ_child == orig(this.pop_champ_child)
this.mut_struct_baby == orig(this.mut_struct_baby)
this.mate_baby == orig(this.mate_baby)
this.eliminate == orig(this.eliminate)
this.net == orig(this.net)
this.net.inputs == orig(this.net.inputs)
this.net.inputs[] == orig(this.net.inputs[])
this.net.outputs == orig(this.net.outputs)
this.net.outputs[] == orig(this.net.outputs[])
this.net.allNodes == orig(this.net.allNodes)
this.net.allNodes[] == orig(this.net.allNodes[])
this.net.genotype == orig(this.net.genotype)
this.net.genotype.phenotype == orig(this.net.genotype.phenotype)
this.net.genotype.genome_id == orig(this.net.genotype.genome_id)
this.net.genotype.genes == orig(this.net.genotype.genes)
this.net.genotype.genes[] == orig(this.net.genotype.genes[])
this.net.genotype.traits == orig(this.net.genotype.traits)
this.net.genotype.traits[] == orig(this.net.genotype.traits[])
this.net.genotype.nodes == orig(this.net.genotype.nodes)
this.net.genotype.nodes[] == orig(this.net.genotype.nodes[])
this.net.net_id == orig(this.net.net_id)
this.net.status == orig(this.net.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome == orig(this.genome)
this.genome.phenotype == orig(this.genome.phenotype)
this.genome.phenotype.inputs == orig(this.genome.phenotype.inputs)
this.genome.phenotype.inputs[] == orig(this.genome.phenotype.inputs[])
this.genome.phenotype.outputs == orig(this.genome.phenotype.outputs)
this.genome.phenotype.outputs[] == orig(this.genome.phenotype.outputs[])
this.genome.phenotype.allNodes == orig(this.genome.phenotype.allNodes)
this.genome.phenotype.allNodes[] == orig(this.genome.phenotype.allNodes[])
this.genome.phenotype.genotype == orig(this.genome.phenotype.genotype)
this.genome.phenotype.net_id == orig(this.genome.phenotype.net_id)
this.genome.phenotype.status == orig(this.genome.phenotype.status)
this.genome.genome_id == orig(this.genome.genome_id)
this.genome.genes == orig(this.genome.genes)
this.genome.genes[] == orig(this.genome.genes[])
this.genome.traits == orig(this.genome.traits)
this.genome.traits[] == orig(this.genome.traits[])
this.genome.nodes == orig(this.genome.nodes)
this.genome.nodes[] == orig(this.genome.nodes[])
this.species == orig(this.species)
this.species.id == orig(this.species.id)
this.species.age == orig(this.species.age)
this.species.avg_fitness == orig(this.species.avg_fitness)
this.species.max_fitness == orig(this.species.max_fitness)
this.species.max_fitness_ever == orig(this.species.max_fitness_ever)
this.species.age_lastimprovement == orig(this.species.age_lastimprovement)
this.species.expected_offspring == orig(this.species.expected_offspring)
this.species.newSpecies == orig(this.species.newSpecies)
this.species.beenChecked == orig(this.species.beenChecked)
this.species.organisms == orig(this.species.organisms)
this.species.organisms[] == orig(this.species.organisms[])
this.expected_offspring == orig(this.expected_offspring)
this.super_champ_offspring == orig(this.super_champ_offspring)
this.fitness one of { 0.0, 0.1 }
this.mut_struct_baby == false
this.net.allNodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.net.genotype.genome_id == 0
this.net.genotype.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene]
this.net.genotype.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.net.net_id == 0
this.genome.phenotype.allNodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.genome.phenotype.net_id == 0
this.genome.genome_id == 0
this.genome.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene]
this.genome.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
this.species.id one of { 1, 2 }
this.species.avg_fitness one of { 0.0, 0.5 }
this.species.max_fitness one of { 0.0, 0.65 }
this.species.max_fitness_ever one of { 0.0, 0.65 }
this.species.expected_offspring one of { 0, 2 }
this.species.organisms[].getClass().getName() one of { [jneat.Organism], [jneat.Organism, jneat.Organism] }
return.toString == "# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n"
size(this.net.allNodes[]) one of { 4, 7 }
size(this.net.genotype.genes[]) == 3
size(this.net.genotype.nodes[]) one of { 4, 7 }
size(this.genome.phenotype.allNodes[]) one of { 4, 7 }
size(this.genome.genes[]) == 3
size(this.genome.nodes[]) one of { 4, 7 }
size(this.species.organisms[]) one of { 1, 2 }
===========================================================================
jneat.Organism.SaveOrganism():::ENTER
this.species != null
===========================================================================
jneat.Organism.SaveOrganism():::EXIT
this.generation == orig(this.generation)
this.checkout == orig(this.checkout)
this.fitness == orig(this.fitness)
this.fitAveragedOver == orig(this.fitAveragedOver)
this.high_fit == orig(this.high_fit)
this.orig_fitness == orig(this.orig_fitness)
this.error == orig(this.error)
this.winner == orig(this.winner)
this.champion == orig(this.champion)
this.pop_champ == orig(this.pop_champ)
this.pop_champ_child == orig(this.pop_champ_child)
this.mut_struct_baby == orig(this.mut_struct_baby)
this.mate_baby == orig(this.mate_baby)
this.eliminate == orig(this.eliminate)
this.net == orig(this.net)
this.net.inputs == orig(this.net.inputs)
this.net.inputs[] == orig(this.net.inputs[])
this.net.outputs == orig(this.net.outputs)
this.net.outputs[] == orig(this.net.outputs[])
this.net.allNodes == orig(this.net.allNodes)
this.net.allNodes[] == orig(this.net.allNodes[])
this.net.genotype == orig(this.net.genotype)
this.net.genotype.phenotype == orig(this.net.genotype.phenotype)
this.net.genotype.genome_id == orig(this.net.genotype.genome_id)
this.net.genotype.genes == orig(this.net.genotype.genes)
this.net.genotype.genes[] == orig(this.net.genotype.genes[])
this.net.genotype.traits == orig(this.net.genotype.traits)
this.net.genotype.traits[] == orig(this.net.genotype.traits[])
this.net.genotype.nodes == orig(this.net.genotype.nodes)
this.net.genotype.nodes[] == orig(this.net.genotype.nodes[])
this.net.net_id == orig(this.net.net_id)
this.net.status == orig(this.net.status)
jneat.NetworkStatusEnum.NORMAL == orig(jneat.NetworkStatusEnum.NORMAL)
jneat.NetworkStatusEnum.HAS_LOOP == orig(jneat.NetworkStatusEnum.HAS_LOOP)
jneat.NetworkStatusEnum.$VALUES == orig(jneat.NetworkStatusEnum.$VALUES)
jneat.NetworkStatusEnum.$VALUES.getClass().getName() == orig(jneat.NetworkStatusEnum.$VALUES.getClass().getName())
jneat.NetworkStatusEnum.$VALUES[] == orig(jneat.NetworkStatusEnum.$VALUES[])
this.genome == orig(this.genome)
this.genome.phenotype == orig(this.genome.phenotype)
this.genome.phenotype.inputs == orig(this.genome.phenotype.inputs)
this.genome.phenotype.inputs[] == orig(this.genome.phenotype.inputs[])
this.genome.phenotype.outputs == orig(this.genome.phenotype.outputs)
this.genome.phenotype.outputs[] == orig(this.genome.phenotype.outputs[])
this.genome.phenotype.allNodes == orig(this.genome.phenotype.allNodes)
this.genome.phenotype.allNodes[] == orig(this.genome.phenotype.allNodes[])
this.genome.phenotype.genotype == orig(this.genome.phenotype.genotype)
this.genome.phenotype.net_id == orig(this.genome.phenotype.net_id)
this.genome.phenotype.status == orig(this.genome.phenotype.status)
this.genome.genome_id == orig(this.genome.genome_id)
this.genome.genes == orig(this.genome.genes)
this.genome.genes[] == orig(this.genome.genes[])
this.genome.traits == orig(this.genome.traits)
this.genome.traits[] == orig(this.genome.traits[])
this.genome.nodes == orig(this.genome.nodes)
this.genome.nodes[] == orig(this.genome.nodes[])
this.species == orig(this.species)
this.species.id == orig(this.species.id)
this.species.age == orig(this.species.age)
this.species.avg_fitness == orig(this.species.avg_fitness)
this.species.max_fitness == orig(this.species.max_fitness)
this.species.max_fitness_ever == orig(this.species.max_fitness_ever)
this.species.age_lastimprovement == orig(this.species.age_lastimprovement)
this.species.expected_offspring == orig(this.species.expected_offspring)
this.species.newSpecies == orig(this.species.newSpecies)
this.species.beenChecked == orig(this.species.beenChecked)
this.species.organisms == orig(this.species.organisms)
this.species.organisms[] == orig(this.species.organisms[])
this.expected_offspring == orig(this.expected_offspring)
this.super_champ_offspring == orig(this.super_champ_offspring)
this.species != null
return != null
===========================================================================
jneat.OrganismComparator:::OBJECT
===========================================================================
jneat.OrganismComparator.OrganismComparator():::EXIT
===========================================================================
jneat.OrganismComparator.compare(jneat.Organism, jneat.Organism):::ENTER
arg0 != null
arg0.generation == 1
arg0.checkout == false
arg0.fitness one of { 0.35, 0.65 }
arg0.fitAveragedOver == 0
arg0.high_fit == 0.0
arg0.orig_fitness one of { 0.35, 0.65 }
arg0.error == 0.0
arg0.winner == false
arg0.champion == false
arg0.pop_champ == false
arg0.pop_champ_child == false
arg0.mut_struct_baby == false
arg0.mate_baby == false
arg0.eliminate == false
arg0.net != null
arg0.net.inputs != null
arg0.net.inputs[] elements != null
arg0.net.inputs[].getClass().getName() == [jneat.NNode]
arg0.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.outputs != null
arg0.net.outputs[] elements != null
arg0.net.outputs[].getClass().getName() == [jneat.NNode]
arg0.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.allNodes != null
arg0.net.allNodes[] elements != null
arg0.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg0.net.genotype != null
arg0.net.status has only one value
arg0.net.status != null
arg0.genome != null
arg0.genome.phenotype != null
arg0.genome.genes != null
arg0.genome.genes[] elements != null
arg0.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg0.genome.traits != null
arg0.genome.traits[] elements != null
arg0.genome.traits[].getClass().getName() == [jneat.Trait]
arg0.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg0.genome.nodes != null
arg0.genome.nodes[] elements != null
arg0.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg0.species != null
arg0.species.age == 1
arg0.species.avg_fitness == 0.0
arg0.species.max_fitness == 0.0
arg0.species.max_fitness_ever == 0.0
arg0.species.age_lastimprovement == 0
arg0.species.expected_offspring == 0
arg0.species.newSpecies == false
arg0.species.beenChecked == false
arg0.species.organisms != null
arg0.species.organisms[] elements != null
arg0.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.expected_offspring == 0.0
arg0.super_champ_offspring == 0
arg1 != null
arg1.generation == 1
arg1.checkout == false
arg1.fitness one of { 0.35, 0.65 }
arg1.fitAveragedOver == 0
arg1.high_fit == 0.0
arg1.orig_fitness one of { 0.35, 0.65 }
arg1.error == 0.0
arg1.winner == false
arg1.champion == false
arg1.pop_champ == false
arg1.pop_champ_child == false
arg1.mut_struct_baby == false
arg1.mate_baby == false
arg1.eliminate == false
arg1.net != null
arg1.net.inputs != null
arg1.net.inputs[] elements != null
arg1.net.inputs[].getClass().getName() == [jneat.NNode]
arg1.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.outputs != null
arg1.net.outputs[] elements != null
arg1.net.outputs[].getClass().getName() == [jneat.NNode]
arg1.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.allNodes != null
arg1.net.allNodes[] elements != null
arg1.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg1.net.genotype != null
arg1.net.status has only one value
arg1.net.status != null
arg1.genome != null
arg1.genome.phenotype != null
arg1.genome.genes != null
arg1.genome.genes[] elements != null
arg1.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg1.genome.traits != null
arg1.genome.traits[] elements != null
arg1.genome.traits[].getClass().getName() == [jneat.Trait]
arg1.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg1.genome.nodes != null
arg1.genome.nodes[] elements != null
arg1.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg1.species != null
arg1.species.age == 1
arg1.species.avg_fitness == 0.0
arg1.species.max_fitness == 0.0
arg1.species.max_fitness_ever == 0.0
arg1.species.age_lastimprovement == 0
arg1.species.expected_offspring == 0
arg1.species.newSpecies == false
arg1.species.beenChecked == false
arg1.species.organisms != null
arg1.species.organisms[] elements != null
arg1.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.expected_offspring == 0.0
arg1.super_champ_offspring == 0
size(arg0.net.inputs[]) == 1
size(arg0.net.outputs[]) == 1
size(arg0.genome.genes[]) one of { 1, 2, 3 }
size(arg0.genome.traits[]) == 1
size(arg0.species.organisms[]) one of { 2, 9, 10 }
size(arg1.net.inputs[]) == 1
size(arg1.net.outputs[]) == 1
size(arg1.genome.genes[]) one of { 1, 2, 3 }
size(arg1.genome.traits[]) == 1
size(arg1.species.organisms[]) one of { 2, 9, 10 }
===========================================================================
jneat.OrganismComparator.compare(jneat.Organism, jneat.Organism):::EXIT10
arg0.fitness == 0.65
arg0.orig_fitness == 0.65
arg0.net.allNodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg0.net.net_id one of { 9, 20 }
arg0.genome.genome_id one of { 9, 20 }
arg0.genome.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene] }
arg0.genome.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg0.species.id one of { 2, 3 }
arg0.species.organisms[].getClass().getName() one of { [jneat.Organism, jneat.Organism], [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism] }
arg1.fitness == 0.35
arg1.orig_fitness == 0.35
arg1.net.allNodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg1.net.net_id one of { 1, 2, 5 }
arg1.genome.genome_id one of { 1, 2, 5 }
arg1.genome.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene, jneat.Gene] }
arg1.genome.nodes[].getClass().getName() one of { [jneat.NNode, jneat.NNode], [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode] }
arg1.species.id one of { 2, 3 }
arg1.species.organisms[].getClass().getName() one of { [jneat.Organism, jneat.Organism], [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism] }
return == -1
size(arg0.net.allNodes[]) one of { 2, 7 }
size(arg0.genome.genes[]) one of { 1, 3 }
size(arg0.genome.nodes[]) one of { 2, 7 }
size(arg0.species.organisms[]) one of { 2, 9 }
size(arg1.net.allNodes[]) one of { 2, 6 }
size(arg1.genome.genes[]) one of { 1, 3 }
size(arg1.genome.nodes[]) one of { 2, 6 }
size(arg1.species.organisms[]) one of { 2, 9 }
===========================================================================
jneat.OrganismComparator.compare(jneat.Organism, jneat.Organism):::EXIT12
arg0.genome.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene] }
arg1.genome.genes[].getClass().getName() one of { [jneat.Gene], [jneat.Gene, jneat.Gene] }
return == 0
size(arg0.genome.genes[]) one of { 1, 2 }
size(arg1.genome.genes[]) one of { 1, 2 }
===========================================================================
jneat.OrganismComparator.compare(jneat.Organism, jneat.Organism):::EXIT
arg0.generation == orig(arg0.generation)
arg0.checkout == orig(arg0.checkout)
arg0.fitness == orig(arg0.fitness)
arg0.fitAveragedOver == orig(arg0.fitAveragedOver)
arg0.high_fit == orig(arg0.high_fit)
arg0.orig_fitness == orig(arg0.orig_fitness)
arg0.error == orig(arg0.error)
arg0.winner == orig(arg0.winner)
arg0.champion == orig(arg0.champion)
arg0.pop_champ == orig(arg0.pop_champ)
arg0.pop_champ_child == orig(arg0.pop_champ_child)
arg0.mut_struct_baby == orig(arg0.mut_struct_baby)
arg0.mate_baby == orig(arg0.mate_baby)
arg0.eliminate == orig(arg0.eliminate)
arg0.net == orig(arg0.net)
arg0.net.inputs == orig(arg0.net.inputs)
arg0.net.inputs[] == orig(arg0.net.inputs[])
arg0.net.outputs == orig(arg0.net.outputs)
arg0.net.outputs[] == orig(arg0.net.outputs[])
arg0.net.allNodes == orig(arg0.net.allNodes)
arg0.net.allNodes[] == orig(arg0.net.allNodes[])
arg0.net.genotype == orig(arg0.net.genotype)
arg0.net.net_id == orig(arg0.net.net_id)
arg0.net.status == orig(arg0.net.status)
arg0.genome == orig(arg0.genome)
arg0.genome.phenotype == orig(arg0.genome.phenotype)
arg0.genome.genome_id == orig(arg0.genome.genome_id)
arg0.genome.genes == orig(arg0.genome.genes)
arg0.genome.genes[] == orig(arg0.genome.genes[])
arg0.genome.traits == orig(arg0.genome.traits)
arg0.genome.traits[] == orig(arg0.genome.traits[])
arg0.genome.nodes == orig(arg0.genome.nodes)
arg0.genome.nodes[] == orig(arg0.genome.nodes[])
arg0.species == orig(arg0.species)
arg0.species.id == orig(arg0.species.id)
arg0.species.age == orig(arg0.species.age)
arg0.species.avg_fitness == orig(arg0.species.avg_fitness)
arg0.species.max_fitness == orig(arg0.species.max_fitness)
arg0.species.max_fitness_ever == orig(arg0.species.max_fitness_ever)
arg0.species.age_lastimprovement == orig(arg0.species.age_lastimprovement)
arg0.species.expected_offspring == orig(arg0.species.expected_offspring)
arg0.species.newSpecies == orig(arg0.species.newSpecies)
arg0.species.beenChecked == orig(arg0.species.beenChecked)
arg0.species.organisms == orig(arg0.species.organisms)
arg0.species.organisms[] == orig(arg0.species.organisms[])
arg0.expected_offspring == orig(arg0.expected_offspring)
arg0.super_champ_offspring == orig(arg0.super_champ_offspring)
arg1.generation == orig(arg1.generation)
arg1.checkout == orig(arg1.checkout)
arg1.fitness == orig(arg1.fitness)
arg1.fitAveragedOver == orig(arg1.fitAveragedOver)
arg1.high_fit == orig(arg1.high_fit)
arg1.orig_fitness == orig(arg1.orig_fitness)
arg1.error == orig(arg1.error)
arg1.winner == orig(arg1.winner)
arg1.champion == orig(arg1.champion)
arg1.pop_champ == orig(arg1.pop_champ)
arg1.pop_champ_child == orig(arg1.pop_champ_child)
arg1.mut_struct_baby == orig(arg1.mut_struct_baby)
arg1.mate_baby == orig(arg1.mate_baby)
arg1.eliminate == orig(arg1.eliminate)
arg1.net == orig(arg1.net)
arg1.net.inputs == orig(arg1.net.inputs)
arg1.net.inputs[] == orig(arg1.net.inputs[])
arg1.net.outputs == orig(arg1.net.outputs)
arg1.net.outputs[] == orig(arg1.net.outputs[])
arg1.net.allNodes == orig(arg1.net.allNodes)
arg1.net.allNodes[] == orig(arg1.net.allNodes[])
arg1.net.genotype == orig(arg1.net.genotype)
arg1.net.net_id == orig(arg1.net.net_id)
arg1.net.status == orig(arg1.net.status)
arg1.genome == orig(arg1.genome)
arg1.genome.phenotype == orig(arg1.genome.phenotype)
arg1.genome.genome_id == orig(arg1.genome.genome_id)
arg1.genome.genes == orig(arg1.genome.genes)
arg1.genome.genes[] == orig(arg1.genome.genes[])
arg1.genome.traits == orig(arg1.genome.traits)
arg1.genome.traits[] == orig(arg1.genome.traits[])
arg1.genome.nodes == orig(arg1.genome.nodes)
arg1.genome.nodes[] == orig(arg1.genome.nodes[])
arg1.species == orig(arg1.species)
arg1.species.id == orig(arg1.species.id)
arg1.species.age == orig(arg1.species.age)
arg1.species.avg_fitness == orig(arg1.species.avg_fitness)
arg1.species.max_fitness == orig(arg1.species.max_fitness)
arg1.species.max_fitness_ever == orig(arg1.species.max_fitness_ever)
arg1.species.age_lastimprovement == orig(arg1.species.age_lastimprovement)
arg1.species.expected_offspring == orig(arg1.species.expected_offspring)
arg1.species.newSpecies == orig(arg1.species.newSpecies)
arg1.species.beenChecked == orig(arg1.species.beenChecked)
arg1.species.organisms == orig(arg1.species.organisms)
arg1.species.organisms[] == orig(arg1.species.organisms[])
arg1.expected_offspring == orig(arg1.expected_offspring)
arg1.super_champ_offspring == orig(arg1.super_champ_offspring)
arg0.generation == 1
arg0.checkout == false
arg0.fitness one of { 0.35, 0.65 }
arg0.fitAveragedOver == 0
arg0.high_fit == 0.0
arg0.orig_fitness one of { 0.35, 0.65 }
arg0.error == 0.0
arg0.winner == false
arg0.champion == false
arg0.pop_champ == false
arg0.pop_champ_child == false
arg0.mut_struct_baby == false
arg0.mate_baby == false
arg0.eliminate == false
arg0.net != null
arg0.net.inputs != null
arg0.net.inputs[] elements != null
arg0.net.inputs[].getClass().getName() == [jneat.NNode]
arg0.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.outputs != null
arg0.net.outputs[] elements != null
arg0.net.outputs[].getClass().getName() == [jneat.NNode]
arg0.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.allNodes != null
arg0.net.allNodes[] elements != null
arg0.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg0.net.genotype != null
arg0.net.status has only one value
arg0.net.status != null
arg0.genome != null
arg0.genome.phenotype != null
arg0.genome.genes != null
arg0.genome.genes[] elements != null
arg0.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg0.genome.traits != null
arg0.genome.traits[] elements != null
arg0.genome.traits[].getClass().getName() == [jneat.Trait]
arg0.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg0.genome.nodes != null
arg0.genome.nodes[] elements != null
arg0.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg0.species != null
arg0.species.age == 1
arg0.species.avg_fitness == 0.0
arg0.species.max_fitness == 0.0
arg0.species.max_fitness_ever == 0.0
arg0.species.age_lastimprovement == 0
arg0.species.expected_offspring == 0
arg0.species.newSpecies == false
arg0.species.beenChecked == false
arg0.species.organisms != null
arg0.species.organisms[] elements != null
arg0.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.expected_offspring == 0.0
arg0.super_champ_offspring == 0
arg1.generation == 1
arg1.checkout == false
arg1.fitness one of { 0.35, 0.65 }
arg1.fitAveragedOver == 0
arg1.high_fit == 0.0
arg1.orig_fitness one of { 0.35, 0.65 }
arg1.error == 0.0
arg1.winner == false
arg1.champion == false
arg1.pop_champ == false
arg1.pop_champ_child == false
arg1.mut_struct_baby == false
arg1.mate_baby == false
arg1.eliminate == false
arg1.net != null
arg1.net.inputs != null
arg1.net.inputs[] elements != null
arg1.net.inputs[].getClass().getName() == [jneat.NNode]
arg1.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.outputs != null
arg1.net.outputs[] elements != null
arg1.net.outputs[].getClass().getName() == [jneat.NNode]
arg1.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.allNodes != null
arg1.net.allNodes[] elements != null
arg1.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg1.net.genotype != null
arg1.net.status has only one value
arg1.net.status != null
arg1.genome != null
arg1.genome.phenotype != null
arg1.genome.genes != null
arg1.genome.genes[] elements != null
arg1.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg1.genome.traits != null
arg1.genome.traits[] elements != null
arg1.genome.traits[].getClass().getName() == [jneat.Trait]
arg1.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg1.genome.nodes != null
arg1.genome.nodes[] elements != null
arg1.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg1.species != null
arg1.species.age == 1
arg1.species.avg_fitness == 0.0
arg1.species.max_fitness == 0.0
arg1.species.max_fitness_ever == 0.0
arg1.species.age_lastimprovement == 0
arg1.species.expected_offspring == 0
arg1.species.newSpecies == false
arg1.species.beenChecked == false
arg1.species.organisms != null
arg1.species.organisms[] elements != null
arg1.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.expected_offspring == 0.0
arg1.super_champ_offspring == 0
return one of { -1, 0 }
size(arg0.net.inputs[]) == 1
size(arg0.net.outputs[]) == 1
size(arg0.genome.genes[]) one of { 1, 2, 3 }
size(arg0.genome.traits[]) == 1
size(arg0.species.organisms[]) one of { 2, 9, 10 }
size(arg1.net.inputs[]) == 1
size(arg1.net.outputs[]) == 1
size(arg1.genome.genes[]) one of { 1, 2, 3 }
size(arg1.genome.traits[]) == 1
size(arg1.species.organisms[]) one of { 2, 9, 10 }
===========================================================================
jneat.Population:::OBJECT
this.max_fitness_this_epoch == this.highest_fitness
this has only one value
this.organisms has only one value
this.organisms != null
this.organisms[] elements != null
this.organisms[].getClass().getName() elements == jneat.Organism.class
this.organisms[].getClass().getName() one of { [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism], [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism] }
this.species has only one value
this.species != null
this.species[] elements != null
this.species[].getClass().getName() elements == jneat.Species.class
this.innovations has only one value
this.innovations != null
this.innovations[] elements has only one value
this.innovations[] elements != null
this.innovations[].getClass().getName() elements == jneat.Innovation.class
this.innovations[].getClass().getName() one of { [], [jneat.Innovation] }
this.cur_node_id one of { 8, 9 }
this.cur_innov_num one of { 50, 51, 52 }
this.population_size == 50
this.last_species one of { 0, 30, 31 }
this.final_gen == 0
this.mean_fitness one of { 0.0, 0.46399999999999997 }
this.max_fitness_this_epoch one of { 0.0, 0.85 }
this.variance == 0.0
this.standard_deviation == 0.0
this.avg_fit_eliminated one of { 0.0, 0.4884615384615385 }
this.winnergen == 0
this.highest_last_changed == 0
size(this.organisms[]) one of { 37, 50 }
size(this.innovations[]) one of { 0, 1 }
this.cur_node_id < this.cur_innov_num
this.mean_fitness <= this.max_fitness_this_epoch
this.mean_fitness <= this.avg_fit_eliminated
this.max_fitness_this_epoch >= this.avg_fit_eliminated
===========================================================================
jneat.Population.AddSpecies(jneat.Species, jneat.Organism):::ENTER
this.last_species == arg0.id
this.final_gen == arg1.net.net_id
this.final_gen == arg1.genome.genome_id
arg1.fitness == arg1.orig_fitness
arg1.net == arg1.genome.phenotype
arg1.net.genotype == arg1.genome
this.organisms[] contains no nulls and has only one value, of length 37
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] contains no nulls and has only one value, of length 1
this.innovations[].getClass().getName() == [jneat.Innovation]
this.cur_node_id == 9
this.cur_innov_num == 52
this.last_species == 30
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
arg0 has only one value
arg0.age == 1
arg0.avg_fitness == 0.0
arg0.max_fitness == 0.0
arg0.max_fitness_ever == 0.0
arg0.age_lastimprovement == 0
arg0.expected_offspring == 0
arg0.newSpecies == true
arg0.beenChecked == false
arg0.organisms has only one value
arg0.organisms[] == []
arg0.organisms[].getClass().getName() == []
arg1 has only one value
arg1.generation == 1
arg1.checkout == false
arg1.fitness == 0.0
arg1.fitAveragedOver == 0
arg1.high_fit == 0.0
arg1.error == 0.0
arg1.winner == false
arg1.champion == false
arg1.pop_champ == false
arg1.pop_champ_child == false
arg1.mut_struct_baby == true
arg1.mate_baby == false
arg1.eliminate == false
arg1.net has only one value
arg1.net.inputs has only one value
arg1.net.inputs[] contains no nulls and has only one value, of length 1
arg1.net.inputs[] elements has only one value
arg1.net.inputs[].getClass().getName() == [jneat.NNode]
arg1.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.outputs has only one value
arg1.net.outputs[] contains no nulls and has only one value, of length 1
arg1.net.outputs[] elements has only one value
arg1.net.outputs[].getClass().getName() == [jneat.NNode]
arg1.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.allNodes has only one value
arg1.net.allNodes[] contains no nulls and has only one value, of length 8
arg1.net.allNodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg1.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg1.net.status has only one value
arg1.genome has only one value
arg1.genome.genes has only one value
arg1.genome.genes[] contains no nulls and has only one value, of length 8
arg1.genome.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
arg1.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg1.genome.traits has only one value
arg1.genome.traits[] contains no nulls and has only one value, of length 1
arg1.genome.traits[] elements has only one value
arg1.genome.traits[].getClass().getName() == [jneat.Trait]
arg1.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg1.genome.nodes has only one value
arg1.genome.nodes[] contains no nulls and has only one value, of length 8
arg1.genome.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg1.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg1.species == null
arg1.expected_offspring == 0.0
arg1.super_champ_offspring == 0
size(this.organisms[]) == 37
size(this.species[]) == 30
size(this.innovations[]) == 1
size(arg1.net.inputs[]) == 1
size(arg1.net.outputs[]) == 1
size(arg1.net.allNodes[]) == 8
size(arg1.genome.genes[]) == 8
size(arg1.genome.traits[]) == 1
size(arg1.genome.nodes[]) == 8
===========================================================================
jneat.Population.AddSpecies(jneat.Species, jneat.Organism):::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_node_id == orig(this.cur_node_id)
this.cur_innov_num == orig(this.cur_innov_num)
this.population_size == orig(this.population_size)
this.final_gen == arg1.net.net_id
this.final_gen == arg1.genome.genome_id
this.final_gen == orig(this.final_gen)
this.final_gen == orig(arg1.net.net_id)
this.final_gen == orig(arg1.genome.genome_id)
this.mean_fitness == orig(this.mean_fitness)
this.max_fitness_this_epoch == orig(this.max_fitness_this_epoch)
this.max_fitness_this_epoch == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.avg_fit_eliminated == orig(this.avg_fit_eliminated)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
arg0.id == arg1.species.id
arg0.id == orig(this.last_species)
arg0.id == orig(arg0.id)
arg0.age == arg1.species.age
arg0.age == orig(arg0.age)
arg0.avg_fitness == arg1.species.avg_fitness
arg0.avg_fitness == orig(arg0.avg_fitness)
arg0.max_fitness == arg1.species.max_fitness
arg0.max_fitness == orig(arg0.max_fitness)
arg0.max_fitness_ever == arg1.species.max_fitness_ever
arg0.max_fitness_ever == orig(arg0.max_fitness_ever)
arg0.age_lastimprovement == arg1.species.age_lastimprovement
arg0.age_lastimprovement == orig(arg0.age_lastimprovement)
arg0.expected_offspring == arg1.species.expected_offspring
arg0.expected_offspring == orig(arg0.expected_offspring)
arg0.newSpecies == arg1.species.newSpecies
arg0.newSpecies == orig(arg0.newSpecies)
arg0.beenChecked == orig(arg0.beenChecked)
arg0.organisms == arg1.species.organisms
arg0.organisms == orig(arg0.organisms)
arg1.generation == orig(arg1.generation)
arg1.checkout == orig(arg1.checkout)
arg1.fitness == arg1.orig_fitness
arg1.fitness == orig(arg1.fitness)
arg1.fitness == orig(arg1.orig_fitness)
arg1.fitAveragedOver == orig(arg1.fitAveragedOver)
arg1.high_fit == orig(arg1.high_fit)
arg1.error == orig(arg1.error)
arg1.winner == orig(arg1.winner)
arg1.champion == orig(arg1.champion)
arg1.pop_champ == orig(arg1.pop_champ)
arg1.pop_champ_child == orig(arg1.pop_champ_child)
arg1.mut_struct_baby == orig(arg1.mut_struct_baby)
arg1.mate_baby == orig(arg1.mate_baby)
arg1.eliminate == orig(arg1.eliminate)
arg1.net == arg1.genome.phenotype
arg1.net == orig(arg1.net)
arg1.net == orig(arg1.genome.phenotype)
arg1.net.inputs == orig(arg1.net.inputs)
arg1.net.inputs[] == orig(arg1.net.inputs[])
arg1.net.outputs == orig(arg1.net.outputs)
arg1.net.outputs[] == orig(arg1.net.outputs[])
arg1.net.allNodes == orig(arg1.net.allNodes)
arg1.net.allNodes[] == orig(arg1.net.allNodes[])
arg1.net.genotype == arg1.genome
arg1.net.status == orig(arg1.net.status)
arg1.genome == orig(arg1.net.genotype)
arg1.genome == orig(arg1.genome)
arg1.genome.genes == orig(arg1.genome.genes)
arg1.genome.genes[] == orig(arg1.genome.genes[])
arg1.genome.traits == orig(arg1.genome.traits)
arg1.genome.traits[] == orig(arg1.genome.traits[])
arg1.genome.nodes == orig(arg1.genome.nodes)
arg1.genome.nodes[] == orig(arg1.genome.nodes[])
arg1.species == orig(arg0)
arg1.expected_offspring == orig(arg1.expected_offspring)
arg1.super_champ_offspring == orig(arg1.super_champ_offspring)
size(this.species[])-1 == orig(size(this.species[]))
size(arg0.organisms[])-1 == orig(size(arg0.organisms[]))
this.organisms[] contains no nulls and has only one value, of length 37
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 31
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] contains no nulls and has only one value, of length 1
this.innovations[].getClass().getName() == [jneat.Innovation]
this.cur_node_id == 9
this.cur_innov_num == 52
this.last_species == 31
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
arg0.id == 30
arg0.age == 1
arg0.avg_fitness == 0.0
arg0.max_fitness == 0.0
arg0.max_fitness_ever == 0.0
arg0.age_lastimprovement == 0
arg0.expected_offspring == 0
arg0.newSpecies == true
arg0.beenChecked == false
arg0.organisms has only one value
arg0.organisms[] contains no nulls and has only one value, of length 1
arg0.organisms[] elements has only one value
arg0.organisms[].getClass().getName() == [jneat.Organism]
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.generation == 1
arg1.checkout == false
arg1.fitness == 0.0
arg1.fitAveragedOver == 0
arg1.high_fit == 0.0
arg1.error == 0.0
arg1.winner == false
arg1.champion == false
arg1.pop_champ == false
arg1.pop_champ_child == false
arg1.mut_struct_baby == true
arg1.mate_baby == false
arg1.eliminate == false
arg1.net has only one value
arg1.net.inputs has only one value
arg1.net.inputs[] contains no nulls and has only one value, of length 1
arg1.net.inputs[] elements has only one value
arg1.net.inputs[].getClass().getName() == [jneat.NNode]
arg1.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.outputs has only one value
arg1.net.outputs[] contains no nulls and has only one value, of length 1
arg1.net.outputs[] elements has only one value
arg1.net.outputs[].getClass().getName() == [jneat.NNode]
arg1.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg1.net.allNodes has only one value
arg1.net.allNodes[] contains no nulls and has only one value, of length 8
arg1.net.allNodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg1.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg1.net.status has only one value
arg1.genome has only one value
arg1.genome.genes has only one value
arg1.genome.genes[] contains no nulls and has only one value, of length 8
arg1.genome.genes[].getClass().getName() == [jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene, jneat.Gene]
arg1.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg1.genome.traits has only one value
arg1.genome.traits[] contains no nulls and has only one value, of length 1
arg1.genome.traits[] elements has only one value
arg1.genome.traits[].getClass().getName() == [jneat.Trait]
arg1.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg1.genome.nodes has only one value
arg1.genome.nodes[] contains no nulls and has only one value, of length 8
arg1.genome.nodes[].getClass().getName() == [jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode, jneat.NNode]
arg1.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg1.species has only one value
arg1.species.beenChecked == false
arg1.species.organisms[] contains no nulls and has only one value, of length 1
arg1.species.organisms[] elements has only one value
arg1.species.organisms[].getClass().getName() == [jneat.Organism]
arg1.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.expected_offspring == 0.0
arg1.super_champ_offspring == 0
size(this.organisms[]) == 37
size(this.species[]) == 31
size(this.innovations[]) == 1
size(arg0.organisms[]) == 1
size(arg1.net.inputs[]) == 1
size(arg1.net.outputs[]) == 1
size(arg1.net.allNodes[]) == 8
size(arg1.genome.genes[]) == 8
size(arg1.genome.traits[]) == 1
size(arg1.genome.nodes[]) == 8
size(arg1.species.organisms[]) == 1
===========================================================================
jneat.Population.Population(int, int, int, int, boolean, double):::ENTER
arg1 == arg2
arg0 == 50
arg1 == 1
arg3 == 5
arg4 == false
arg5 == 0.1
===========================================================================
jneat.Population.Population(int, int, int, int, boolean, double):::EXIT
this.population_size == orig(arg0)
this.mean_fitness == this.max_fitness_this_epoch
this.mean_fitness == this.avg_fit_eliminated
this.mean_fitness == this.highest_fitness
this.organisms[] contains no nulls and has only one value, of length 50
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 8
this.cur_innov_num == 50
this.last_species == 30
this.mean_fitness == 0.0
size(this.organisms[]) == 50
size(this.species[]) == 30
===========================================================================
jneat.Population.SavePopHeader():::ENTER
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_innov_num one of { 50, 52 }
this.last_species one of { 30, 31 }
size(this.organisms[]) == 50
size(this.species[]) one of { 21, 30 }
===========================================================================
jneat.Population.SavePopHeader():::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.species[] == orig(this.species[])
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_node_id == orig(this.cur_node_id)
this.cur_innov_num == orig(this.cur_innov_num)
this.population_size == orig(this.population_size)
this.last_species == orig(this.last_species)
this.final_gen == orig(this.final_gen)
this.mean_fitness == orig(this.mean_fitness)
this.max_fitness_this_epoch == orig(this.max_fitness_this_epoch)
this.max_fitness_this_epoch == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.avg_fit_eliminated == orig(this.avg_fit_eliminated)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_innov_num one of { 50, 52 }
this.last_species one of { 30, 31 }
return.toString == "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n"
size(this.organisms[]) == 50
size(this.species[]) one of { 21, 30 }
===========================================================================
jneat.Population.SavePopulation():::ENTER
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_innov_num one of { 50, 52 }
this.last_species one of { 30, 31 }
size(this.organisms[]) == 50
size(this.species[]) one of { 21, 30 }
===========================================================================
jneat.Population.SavePopulation():::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.species[] == orig(this.species[])
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_node_id == orig(this.cur_node_id)
this.cur_innov_num == orig(this.cur_innov_num)
this.population_size == orig(this.population_size)
this.last_species == orig(this.last_species)
this.final_gen == orig(this.final_gen)
this.mean_fitness == orig(this.mean_fitness)
this.max_fitness_this_epoch == orig(this.max_fitness_this_epoch)
this.max_fitness_this_epoch == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.avg_fit_eliminated == orig(this.avg_fit_eliminated)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_innov_num one of { 50, 52 }
this.last_species one of { 30, 31 }
return.toString one of { "# Population information follows:\n50, 8, 0, 0.0, 0, 30, 0.0, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.717292308807373, true, Link, 14, 0.0, false, false, -0.717292308807373, 1, 2\nGene, 14, 0.1983301043510437, true, Link, 15, 0.0, false, false, 0.1983301043510437, 1, 3\nGene, 43, 0.6492539644241333, true, Link, 16, 0.0, false, false, 0.6492539644241333, 2, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.08258217573165894, true, Link, 29, 0.0, false, false, -0.08258217573165894, 1, 2\nGene, 22, 0.18210095167160034, true, Link, 30, 0.0, false, false, 0.18210095167160034, 2, 4\nGene, 42, -0.8264488577842712, true, Link, 31, 0.0, false, false, -0.8264488577842712, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7149022817611694, true, Link, 50, 0.0, false, false, -0.7149022817611694, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 55, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.9194443821907043, true, Link, 82, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, true, Link, 83, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 84, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 85, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 86, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 87, 0.0, false, false, 0.539691150188446, 4, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 100, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 143, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 144, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.6832627654075623, true, Link, 157, 0.0, false, false, -0.6832627654075623, 1, 5\nGene, 46, 0.854897141456604, true, Link, 158, 0.0, false, false, 0.854897141456604, 5, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.3185303807258606, true, Link, 163, 0.0, false, false, -0.3185303807258606, 1, 2\nGene, 39, -0.30332618951797485, true, Link, 164, 0.0, false, false, -0.30332618951797485, 5, 6\nGene, 43, 0.2281017303466797, true, Link, 165, 0.0, false, false, 0.2281017303466797, 2, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 172, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2728215456008911, true, Link, 175, 0.0, false, false, -0.2728215456008911, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.07785695791244507, true, Link, 180, 0.0, false, false, -0.07785695791244507, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5553820729255676, true, Link, 183, 0.0, false, false, -0.5553820729255676, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 186, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 189, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 194, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 195, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 216, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 217, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 218, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.029299497604370117, true, Link, 227, 0.0, false, false, -0.029299497604370117, 1, 2\nGene, 29, -0.7627831697463989, true, Link, 228, 0.0, false, false, -0.7627831697463989, 2, 5\nGene, 43, 0.5649425387382507, true, Link, 229, 0.0, false, false, 0.5649425387382507, 2, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.20184582471847534, true, Link, 236, 0.0, false, false, -0.20184582471847534, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 247, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 248, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 263, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 264, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 265, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 274, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 281, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 282, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 289, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 290, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 323, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 324, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.05779367685317993, true, Link, 339, 0.0, false, false, 0.05779367685317993, 1, 2\nGene, 42, -0.07745212316513062, true, Link, 340, 0.0, false, false, -0.07745212316513062, 1, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 365, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 374, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 375, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6425018906593323, true, Link, 386, 0.0, false, false, 0.6425018906593323, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 419, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 420, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 421, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 450, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 451, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 452, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 463, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 464, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 525, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 526, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 527, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 528, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 529, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 530, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 531, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 532, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 533, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 534, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 557, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 558, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7482502460479736, true, Link, 585, 0.0, false, false, -0.7482502460479736, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 590, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 591, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 592, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 593, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.5206215977668762, true, Link, 618, 0.0, false, false, -0.5206215977668762, 1, 2\nGene, 43, 0.3696298599243164, true, Link, 619, 0.0, false, false, 0.3696298599243164, 2, 7\nGene, 45, 0.9405050873756409, true, Link, 620, 0.0, false, false, 0.9405050873756409, 4, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.45, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 645, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 646, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 647, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 648, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 649, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 650, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 651, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.42423272132873535, true, Link, 666, 0.0, false, false, 0.42423272132873535, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 35, -0.17567026615142822, true, Link, 683, 0.0, false, false, -0.17567026615142822, 1, 6\nGene, 47, 0.8128328323364258, true, Link, 684, 0.0, false, false, 0.8128328323364258, 6, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.7369576692581177, true, Link, 695, 0.0, false, false, -0.7369576692581177, 1, 2\nGene, 43, 0.6672573089599609, true, Link, 696, 0.0, false, false, 0.6672573089599609, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 713, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 714, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 715, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 716, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 717, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.49643999338150024, true, Link, 746, 0.0, false, false, 0.49643999338150024, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4714950919151306, true, Link, 753, 0.0, false, false, 0.4714950919151306, 1, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 794, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 795, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 796, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 797, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 798, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 799, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, 0.018456339836120605, true, Link, 844, 0.0, false, false, 0.018456339836120605, 2, 3\nGene, 21, -0.06704694032669067, true, Link, 845, 0.0, false, false, -0.06704694032669067, 1, 4\nGene, 28, 0.11384767293930054, true, Link, 846, 0.0, false, false, 0.11384767293930054, 1, 5\nGene, 31, 0.5835185050964355, true, Link, 847, 0.0, false, false, 0.5835185050964355, 4, 5\nGene, 35, 0.4916512966156006, true, Link, 848, 0.0, false, false, 0.4916512966156006, 1, 6\nGene, 43, -0.043931543827056885, true, Link, 849, 0.0, false, false, -0.043931543827056885, 2, 7\nGene, 44, -0.5604459643363953, true, Link, 850, 0.0, false, false, -0.5604459643363953, 3, 7\nGene, 47, 0.5101136565208435, true, Link, 851, 0.0, false, false, 0.5101136565208435, 6, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.4839916229248047, true, Link, 870, 0.0, false, false, 0.4839916229248047, 1, 2\nGene, 42, 0.2852809429168701, true, Link, 871, 0.0, false, false, 0.2852809429168701, 1, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6666633486747742, true, Link, 876, 0.0, false, false, 0.6666633486747742, 1, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 895, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 896, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7803419828414917, true, Link, 901, 0.0, false, false, -0.7803419828414917, 1, 7\n\n>END ORGANISMS<\n\nSpecies, 1, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 0\n\nSpecies, 2, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 1, 20\n\nSpecies, 3, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 2, 5, 9, 10, 11, 12, 18, 34, 49\n\nSpecies, 4, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 3, 13, 14, 21, 26, 28, 38, 42, 43, 47\n\nSpecies, 5, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 4\n\nSpecies, 6, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 6\n\nSpecies, 7, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 7\n\nSpecies, 8, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 8\n\nSpecies, 9, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 15, 25\n\nSpecies, 10, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 16\n\nSpecies, 11, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 17\n\nSpecies, 12, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 19\n\nSpecies, 13, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 22\n\nSpecies, 14, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 23\n\nSpecies, 15, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 24\n\nSpecies, 16, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 27\n\nSpecies, 17, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 29\n\nSpecies, 18, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 30\n\nSpecies, 19, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 31, 46\n\nSpecies, 20, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 32\n\nSpecies, 21, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 33\n\nSpecies, 22, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 35\n\nSpecies, 23, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 36\n\nSpecies, 24, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 37\n\nSpecies, 25, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 39\n\nSpecies, 26, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 40\n\nSpecies, 27, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 41\n\nSpecies, 28, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 44\n\nSpecies, 29, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 45\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 48\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n", "# Population information follows:\n52, 9, 0, 0.85, 0, 31, 0.46399999999999997, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 960, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 961, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 962, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.06806677579879761, false, Link, 966, 0.0, false, false, 0.06806677579879761, 1, 2\nGene, 22, 0.6450504660606384, true, Link, 967, 0.0, false, false, 0.6450504660606384, 2, 4\nGene, 42, 0.24832302331924438, true, Link, 968, 0.0, false, false, 0.24832302331924438, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 971, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 973, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 975, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 977, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.46649229526519775, true, Link, 979, 0.0, false, false, 0.46649229526519775, 1, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7208651900291443, true, Link, 981, 0.0, false, false, -0.7208651900291443, 1, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 983, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 985, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 987, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 989, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 991, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 993, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 995, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 997, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 999, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 1001, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1003, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1005, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1007, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1009, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1011, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1013, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1015, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 1017, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 1018, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1097, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1098, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1101, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1102, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 1021, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 1022, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 1023, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 1027, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 1028, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 904, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 905, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 908, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 909, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 1105, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 1106, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 1109, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 1110, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 1113, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 1114, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 1031, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 1032, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 1033, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 1117, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 1118, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 1119, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1037, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1038, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1041, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1042, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, false, Link, 1045, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1046, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 912, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 913, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 914, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 915, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 916, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 917, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 918, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 919, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 920, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 921, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 932, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 933, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 934, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 935, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 936, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 937, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 938, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 939, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 940, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 941, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 1123, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 1124, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 1048, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 1049, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 1050, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 1051, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 1083, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 1084, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 1085, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 1086, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 1087, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 1088, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 1089, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 1127, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 1128, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 1129, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 1130, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 1131, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 1071, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 1072, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 1073, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 1074, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 1075, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 1076, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 952, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 953, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 956, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 957, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nNode, 8, SIGMOID, NEURON, HIDDEN\nGene, 14, -0.9194443821907043, true, Link, 1056, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, false, Link, 1057, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 1058, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 1059, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 1060, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 1061, 0.0, false, false, 0.539691150188446, 4, 7\nGene, 50, 0.0, true, Link, 1062, 0.0, false, false, 1.0, 3, 8\nGene, 51, 0.0, true, Link, 1063, 0.0, false, false, -0.6613249182701111, 8, 4\n\n>END ORGANISMS<\n\nSpecies, 2, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 0, 1\n\nSpecies, 3, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n\nSpecies, 6, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 25\n\nSpecies, 9, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 26, 27\n\nSpecies, 10, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 28\n\nSpecies, 12, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 29\n\nSpecies, 13, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 30, 31\n\nSpecies, 14, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 32\n\nSpecies, 15, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 33\n\nSpecies, 16, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 34\n\nSpecies, 17, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 35\n\nSpecies, 18, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 36\n\nSpecies, 19, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 37, 38, 39\n\nSpecies, 20, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 40, 41\n\nSpecies, 21, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 42\n\nSpecies, 22, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 43\n\nSpecies, 24, 2, 1, 0.45, 0.45, false\n<Species Orgs>, 44\n\nSpecies, 27, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 45\n\nSpecies, 28, 2, 1, 0.55, 0.55, false\n<Species Orgs>, 46\n\nSpecies, 30, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 47, 48\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 49\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n" }
size(this.organisms[]) == 50
size(this.species[]) one of { 21, 30 }
===========================================================================
jneat.Population.SavePopulationToFile(java.nio.file.Path):::ENTER
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_innov_num one of { 50, 52 }
this.last_species one of { 30, 31 }
arg0.getClass().getName() == sun.nio.fs.UnixPath.class
size(this.organisms[]) == 50
size(this.species[]) one of { 21, 30 }
===========================================================================
jneat.Population.SavePopulationToFile(java.nio.file.Path):::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.species[] == orig(this.species[])
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_node_id == orig(this.cur_node_id)
this.cur_innov_num == orig(this.cur_innov_num)
this.population_size == orig(this.population_size)
this.last_species == orig(this.last_species)
this.final_gen == orig(this.final_gen)
this.mean_fitness == orig(this.mean_fitness)
this.max_fitness_this_epoch == orig(this.max_fitness_this_epoch)
this.max_fitness_this_epoch == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.avg_fit_eliminated == orig(this.avg_fit_eliminated)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_innov_num one of { 50, 52 }
this.last_species one of { 30, 31 }
size(this.organisms[]) == 50
size(this.species[]) one of { 21, 30 }
===========================================================================
jneat.Population.epoch():::ENTER
this.mean_fitness == this.max_fitness_this_epoch
this.mean_fitness == this.avg_fit_eliminated
this.mean_fitness == this.highest_fitness
this.organisms[] contains no nulls and has only one value, of length 50
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 8
this.cur_innov_num == 50
this.last_species == 30
this.mean_fitness == 0.0
size(this.organisms[]) == 50
size(this.species[]) == 30
===========================================================================
jneat.Population.epoch():::EXIT
this.organisms == orig(this.organisms)
this.species == orig(this.species)
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.population_size == orig(this.population_size)
this.final_gen == orig(this.final_gen)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
size(this.organisms[]) == orig(size(this.organisms[]))
this.organisms[] contains no nulls and has only one value, of length 50
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 21
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 9
this.cur_innov_num == 52
this.last_species == 31
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
return has only one value
return.toString == "Species fitness adjustment:\nSpecies 1 fitness changes from 0.0 to 0.1\nSpecies 2 fitness changes from 0.0 to 0.5\nSpecies 3 fitness changes from 0.0 to 0.3833333333333334\nSpecies 4 fitness changes from 0.0 to 0.6500000000000001\nSpecies 5 fitness changes from 0.0 to 0.55\nSpecies 6 fitness changes from 0.0 to 0.65\nSpecies 7 fitness changes from 0.0 to 0.1\nSpecies 8 fitness changes from 0.0 to 0.1\nSpecies 9 fitness changes from 0.0 to 0.35\nSpecies 10 fitness changes from 0.0 to 0.65\nSpecies 11 fitness changes from 0.0 to 0.1\nSpecies 12 fitness changes from 0.0 to 0.65\nSpecies 13 fitness changes from 0.0 to 0.85\nSpecies 14 fitness changes from 0.0 to 0.35\nSpecies 15 fitness changes from 0.0 to 0.35\nSpecies 16 fitness changes from 0.0 to 0.35\nSpecies 17 fitness changes from 0.0 to 0.65\nSpecies 18 fitness changes from 0.0 to 0.35\nSpecies 19 fitness changes from 0.0 to 0.65\nSpecies 20 fitness changes from 0.0 to 0.85\nSpecies 21 fitness changes from 0.0 to 0.35\nSpecies 22 fitness changes from 0.0 to 0.65\nSpecies 23 fitness changes from 0.0 to 0.1\nSpecies 24 fitness changes from 0.0 to 0.45\nSpecies 25 fitness changes from 0.0 to 0.1\nSpecies 26 fitness changes from 0.0 to 0.1\nSpecies 27 fitness changes from 0.0 to 0.35\nSpecies 28 fitness changes from 0.0 to 0.55\nSpecies 29 fitness changes from 0.0 to 0.1\nSpecies 30 fitness changes from 0.0 to 0.85\n\nAverage population fitness: 0.46399999999999997\n\nBaby allotment:\nOrganism 0 of species 1 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 1 of species 2 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 2 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 3 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 4 of species 5 with fitness 0.55 has 1.185344827586207 babies.\nOrganism 5 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 6 of species 6 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 7 of species 7 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 8 of species 8 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 9 of species 3 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 10 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 11 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 12 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 13 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 14 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 15 of species 9 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 16 of species 10 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 17 of species 11 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 18 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 19 of species 12 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 20 of species 2 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 21 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 22 of species 13 with fitness 0.85 has 1.831896551724138 babies.\nOrganism 23 of species 14 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 24 of species 15 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 25 of species 9 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 26 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 27 of species 16 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 28 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 29 of species 17 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 30 of species 18 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 31 of species 19 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 32 of species 20 with fitness 0.85 has 1.831896551724138 babies.\nOrganism 33 of species 21 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 34 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 35 of species 22 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 36 of species 23 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 37 of species 24 with fitness 0.45 has 0.9698275862068967 babies.\nOrganism 38 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 39 of species 25 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 40 of species 26 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 41 of species 27 with fitness 0.35 has 0.7543103448275862 babies.\nOrganism 42 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 43 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 44 of species 28 with fitness 0.55 has 1.185344827586207 babies.\nOrganism 45 of species 29 with fitness 0.1 has 0.21551724137931036 babies.\nOrganism 46 of species 19 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 47 of species 4 with fitness 0.65 has 1.4008620689655173 babies.\nOrganism 48 of species 30 with fitness 0.85 has 1.831896551724138 babies.\nOrganism 49 of species 3 with fitness 0.35 has 0.7543103448275862 babies.\nExpected population is below target population size.  Adding 2 organisms.\n\nPopulation has a new highest fitness: 0.85 in organism 22\nEliminating organism 1 from species 2 with fitness 0.35\nEliminating organism 11 from species 3 with fitness 0.35\nEliminating organism 12 from species 3 with fitness 0.35\nEliminating organism 18 from species 3 with fitness 0.35\nEliminating organism 25 from species 9 with fitness 0.35\nEliminating organism 28 from species 4 with fitness 0.65\nEliminating organism 34 from species 3 with fitness 0.35\nEliminating organism 38 from species 4 with fitness 0.65\nEliminating organism 42 from species 4 with fitness 0.65\nEliminating organism 43 from species 4 with fitness 0.65\nEliminating organism 46 from species 19 with fitness 0.65\nEliminating organism 47 from species 4 with fitness 0.65\nEliminating organism 49 from species 3 with fitness 0.35\n"
size(this.organisms[]) == 50
size(this.species[]) == 21
===========================================================================
jneat.Population.getCurInnov_Inc():::ENTER
this.organisms[] contains no nulls and has only one value, of length 37
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 9
this.cur_innov_num one of { 50, 51 }
this.last_species == 30
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
size(this.organisms[]) == 37
size(this.species[]) == 30
===========================================================================
jneat.Population.getCurInnov_Inc():::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.species[] == orig(this.species[])
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_node_id == orig(this.cur_node_id)
this.population_size == orig(this.population_size)
this.last_species == orig(this.last_species)
this.final_gen == orig(this.final_gen)
this.mean_fitness == orig(this.mean_fitness)
this.max_fitness_this_epoch == orig(this.max_fitness_this_epoch)
this.max_fitness_this_epoch == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.avg_fit_eliminated == orig(this.avg_fit_eliminated)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
return == orig(this.cur_innov_num)
this.organisms[] contains no nulls and has only one value, of length 37
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 9
this.cur_innov_num one of { 51, 52 }
this.last_species == 30
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
return one of { 50, 51 }
size(this.organisms[]) == 37
size(this.species[]) == 30
===========================================================================
jneat.Population.getCurNodeID_Inc():::ENTER
this.organisms[] contains no nulls and has only one value, of length 37
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 8
this.cur_innov_num == 50
this.last_species == 30
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
size(this.organisms[]) == 37
size(this.species[]) == 30
===========================================================================
jneat.Population.getCurNodeID_Inc():::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.species[] == orig(this.species[])
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_innov_num == orig(this.cur_innov_num)
this.population_size == orig(this.population_size)
this.last_species == orig(this.last_species)
this.final_gen == orig(this.final_gen)
this.mean_fitness == orig(this.mean_fitness)
this.max_fitness_this_epoch == orig(this.max_fitness_this_epoch)
this.max_fitness_this_epoch == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.avg_fit_eliminated == orig(this.avg_fit_eliminated)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
return == orig(this.cur_node_id)
this.organisms[] contains no nulls and has only one value, of length 37
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 9
this.cur_innov_num == 50
this.last_species == 30
this.mean_fitness == 0.46399999999999997
this.max_fitness_this_epoch == 0.85
this.avg_fit_eliminated == 0.4884615384615385
return == 8
size(this.organisms[]) == 37
size(this.species[]) == 30
===========================================================================
jneat.Population.speciate():::ENTER
this.mean_fitness == this.max_fitness_this_epoch
this.mean_fitness == this.avg_fit_eliminated
this.mean_fitness == this.highest_fitness
this.organisms[] contains no nulls and has only one value, of length 50
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] == []
this.species[].getClass().getName() == []
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 8
this.cur_innov_num == 50
this.last_species == 0
this.mean_fitness == 0.0
size(this.organisms[]) == 50
===========================================================================
jneat.Population.speciate():::EXIT
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.species == orig(this.species)
this.innovations == orig(this.innovations)
this.innovations[] == orig(this.innovations[])
this.cur_node_id == orig(this.cur_node_id)
this.cur_innov_num == orig(this.cur_innov_num)
this.population_size == orig(this.population_size)
this.final_gen == orig(this.final_gen)
this.mean_fitness == this.max_fitness_this_epoch
this.mean_fitness == this.avg_fit_eliminated
this.mean_fitness == this.highest_fitness
this.mean_fitness == orig(this.mean_fitness)
this.mean_fitness == orig(this.max_fitness_this_epoch)
this.mean_fitness == orig(this.avg_fit_eliminated)
this.mean_fitness == orig(this.highest_fitness)
this.variance == orig(this.variance)
this.standard_deviation == orig(this.standard_deviation)
this.winnergen == orig(this.winnergen)
this.highest_last_changed == orig(this.highest_last_changed)
this.organisms[] contains no nulls and has only one value, of length 50
this.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
this.species[] contains no nulls and has only one value, of length 30
this.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
this.innovations[] == []
this.innovations[].getClass().getName() == []
this.cur_node_id == 8
this.cur_innov_num == 50
this.last_species == 30
this.mean_fitness == 0.0
size(this.organisms[]) == 50
size(this.species[]) == 30
===========================================================================
jneat.Species:::OBJECT
this.id >= 1
this.age one of { 1, 2 }
this.age_lastimprovement one of { 0, 1 }
this.expected_offspring >= 0
this.beenChecked == false
this.organisms != null
this.organisms[] elements != null
this.organisms[].getClass().getName() elements == jneat.Organism.class
===========================================================================
jneat.Species.AdjustFitness():::ENTER
this.age == 1
this.avg_fitness == 0.0
this.max_fitness == 0.0
this.max_fitness_ever == 0.0
this.age_lastimprovement == 0
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.AdjustFitness():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
size(this.organisms[]) == orig(size(this.organisms[]))
this.age == 1
this.age_lastimprovement == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
this.avg_fitness > orig(this.avg_fitness)
this.max_fitness > orig(this.max_fitness)
this.max_fitness_ever > orig(this.max_fitness_ever)
===========================================================================
jneat.Species.ComputeAvgFitness():::ENTER
this.age == 1
this.avg_fitness == 0.0
this.max_fitness == 0.0
this.age_lastimprovement == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.ComputeAvgFitness():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.age == 1
this.max_fitness == 0.0
this.age_lastimprovement == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
this.avg_fitness > orig(this.avg_fitness)
===========================================================================
jneat.Species.ComputeMaxFitness():::ENTER
this.age == 1
this.max_fitness == 0.0
this.age_lastimprovement == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.ComputeMaxFitness():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.age == 1
this.age_lastimprovement == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
this.max_fitness > orig(this.max_fitness)
===========================================================================
jneat.Species.CountOffspringFloat():::ENTER
this.age == 1
this.age_lastimprovement == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.CountOffspringFloat():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.age == 1
this.age_lastimprovement == 1
this.newSpecies == false
size(this.organisms[]) >= 1
this.expected_offspring >= orig(this.expected_offspring)
===========================================================================
jneat.Species.PrintSpecies():::ENTER
this.age == 1
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.PrintSpecies():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.age == 1
this.expected_offspring == 0
this.newSpecies == false
return != null
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.RemoveOrganism(jneat.Organism):::ENTER
this.age == 1
this.age_lastimprovement == 1
this.newSpecies == false
arg0 != null
arg0.generation == 1
arg0.checkout == false
arg0.fitAveragedOver == 0
arg0.high_fit == 0.0
arg0.error == 0.0
arg0.winner == false
arg0.pop_champ_child == false
arg0.mut_struct_baby == false
arg0.mate_baby == false
arg0.net != null
arg0.net.inputs != null
arg0.net.inputs[] elements != null
arg0.net.inputs[].getClass().getName() == [jneat.NNode]
arg0.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.outputs != null
arg0.net.outputs[] elements != null
arg0.net.outputs[].getClass().getName() == [jneat.NNode]
arg0.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.allNodes != null
arg0.net.allNodes[] elements != null
arg0.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg0.net.genotype != null
arg0.net.status has only one value
arg0.net.status != null
arg0.genome != null
arg0.genome.phenotype != null
arg0.genome.genes != null
arg0.genome.genes[] elements != null
arg0.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg0.genome.traits != null
arg0.genome.traits[] elements != null
arg0.genome.traits[].getClass().getName() == [jneat.Trait]
arg0.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg0.genome.nodes != null
arg0.genome.nodes[] elements != null
arg0.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg0.species != null
arg0.species.age == 1
arg0.species.age_lastimprovement == 1
arg0.species.expected_offspring >= 0
arg0.species.newSpecies == false
arg0.species.beenChecked == false
arg0.species.organisms != null
arg0.species.organisms[] elements != null
arg0.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.super_champ_offspring == 0
size(this.organisms[]) >= 1
size(arg0.net.inputs[]) == 1
size(arg0.net.outputs[]) == 1
size(arg0.net.allNodes[]) >= 2
size(arg0.genome.genes[]) >= 1
size(arg0.genome.traits[]) == 1
size(arg0.genome.nodes[]) >= 2
size(arg0.species.organisms[]) >= 1
===========================================================================
jneat.Species.RemoveOrganism(jneat.Organism):::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
arg0.generation == orig(arg0.generation)
arg0.checkout == orig(arg0.checkout)
arg0.fitness == orig(arg0.fitness)
arg0.fitAveragedOver == orig(arg0.fitAveragedOver)
arg0.high_fit == orig(arg0.high_fit)
arg0.orig_fitness == orig(arg0.orig_fitness)
arg0.error == orig(arg0.error)
arg0.winner == orig(arg0.winner)
arg0.champion == orig(arg0.champion)
arg0.pop_champ == orig(arg0.pop_champ)
arg0.pop_champ_child == orig(arg0.pop_champ_child)
arg0.mut_struct_baby == orig(arg0.mut_struct_baby)
arg0.mate_baby == orig(arg0.mate_baby)
arg0.eliminate == orig(arg0.eliminate)
arg0.net == orig(arg0.net)
arg0.net.inputs == orig(arg0.net.inputs)
arg0.net.inputs[] == orig(arg0.net.inputs[])
arg0.net.outputs == orig(arg0.net.outputs)
arg0.net.outputs[] == orig(arg0.net.outputs[])
arg0.net.allNodes == orig(arg0.net.allNodes)
arg0.net.allNodes[] == orig(arg0.net.allNodes[])
arg0.net.genotype == orig(arg0.net.genotype)
arg0.net.net_id == orig(arg0.net.net_id)
arg0.net.status == orig(arg0.net.status)
arg0.genome == orig(arg0.genome)
arg0.genome.phenotype == orig(arg0.genome.phenotype)
arg0.genome.genome_id == orig(arg0.genome.genome_id)
arg0.genome.genes == orig(arg0.genome.genes)
arg0.genome.genes[] == orig(arg0.genome.genes[])
arg0.genome.traits == orig(arg0.genome.traits)
arg0.genome.traits[] == orig(arg0.genome.traits[])
arg0.genome.nodes == orig(arg0.genome.nodes)
arg0.genome.nodes[] == orig(arg0.genome.nodes[])
arg0.species == orig(arg0.species)
arg0.species.id == orig(arg0.species.id)
arg0.species.age == orig(arg0.species.age)
arg0.species.avg_fitness == orig(arg0.species.avg_fitness)
arg0.species.max_fitness == orig(arg0.species.max_fitness)
arg0.species.max_fitness_ever == orig(arg0.species.max_fitness_ever)
arg0.species.age_lastimprovement == orig(arg0.species.age_lastimprovement)
arg0.species.expected_offspring == orig(arg0.species.expected_offspring)
arg0.species.newSpecies == orig(arg0.species.newSpecies)
arg0.species.beenChecked == orig(arg0.species.beenChecked)
arg0.species.organisms == orig(arg0.species.organisms)
arg0.expected_offspring == orig(arg0.expected_offspring)
arg0.super_champ_offspring == orig(arg0.super_champ_offspring)
size(this.organisms[]) == orig(size(this.organisms[]))-1
size(arg0.species.organisms[]) == orig(size(arg0.species.organisms[]))-1
this.age == 1
this.age_lastimprovement == 1
this.newSpecies == false
arg0.generation == 1
arg0.checkout == false
arg0.fitAveragedOver == 0
arg0.high_fit == 0.0
arg0.error == 0.0
arg0.winner == false
arg0.pop_champ_child == false
arg0.mut_struct_baby == false
arg0.mate_baby == false
arg0.net != null
arg0.net.inputs != null
arg0.net.inputs[] elements != null
arg0.net.inputs[].getClass().getName() == [jneat.NNode]
arg0.net.inputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.outputs != null
arg0.net.outputs[] elements != null
arg0.net.outputs[].getClass().getName() == [jneat.NNode]
arg0.net.outputs[].getClass().getName() elements == jneat.NNode.class
arg0.net.allNodes != null
arg0.net.allNodes[] elements != null
arg0.net.allNodes[].getClass().getName() elements == jneat.NNode.class
arg0.net.genotype != null
arg0.net.status has only one value
arg0.net.status != null
arg0.genome != null
arg0.genome.phenotype != null
arg0.genome.genes != null
arg0.genome.genes[] elements != null
arg0.genome.genes[].getClass().getName() elements == jneat.Gene.class
arg0.genome.traits != null
arg0.genome.traits[] elements != null
arg0.genome.traits[].getClass().getName() == [jneat.Trait]
arg0.genome.traits[].getClass().getName() elements == jneat.Trait.class
arg0.genome.nodes != null
arg0.genome.nodes[] elements != null
arg0.genome.nodes[].getClass().getName() elements == jneat.NNode.class
arg0.species != null
arg0.species.age == 1
arg0.species.age_lastimprovement == 1
arg0.species.expected_offspring >= 0
arg0.species.newSpecies == false
arg0.species.beenChecked == false
arg0.species.organisms != null
arg0.species.organisms[] elements != null
arg0.species.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.super_champ_offspring == 0
size(arg0.net.inputs[]) == 1
size(arg0.net.outputs[]) == 1
size(arg0.net.allNodes[]) >= 2
size(arg0.genome.genes[]) >= 1
size(arg0.genome.traits[]) == 1
size(arg0.genome.nodes[]) >= 2
===========================================================================
jneat.Species.SaveSpecies():::ENTER
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.SaveSpecies():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.newSpecies == false
return != null
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.Species(int):::ENTER
===========================================================================
jneat.Species.Species(int):::EXIT
this.age == 1
this.avg_fitness == 0.0
this.max_fitness == 0.0
this.max_fitness_ever == 0.0
this.age_lastimprovement == 0
this.expected_offspring == 0
this.newSpecies == false
this.organisms[] == []
this.organisms[].getClass().getName() == []
===========================================================================
jneat.Species.Species(int, boolean):::ENTER
===========================================================================
jneat.Species.Species(int, boolean):::EXIT
this.age == 1
this.avg_fitness == 0.0
this.max_fitness == 0.0
this.max_fitness_ever == 0.0
this.age_lastimprovement == 0
this.expected_offspring == 0
this.organisms[] == []
this.organisms[].getClass().getName() == []
===========================================================================
jneat.Species.TimeSinceImprovement():::ENTER
this.age == 1
this.avg_fitness == 0.0
this.max_fitness == 0.0
this.max_fitness_ever == 0.0
this.age_lastimprovement == 0
this.expected_offspring == 0
this.newSpecies == false
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.TimeSinceImprovement():::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
this.organisms[] == orig(this.organisms[])
this.age == 1
this.avg_fitness == 0.0
this.max_fitness == 0.0
this.max_fitness_ever == 0.0
this.age_lastimprovement == 0
this.expected_offspring == 0
this.newSpecies == false
return == 1
size(this.organisms[]) >= 1
===========================================================================
jneat.Species.reproduce(int, jneat.Population, java.util.Vector):::ENTER
this.age == 1
this.age_lastimprovement == 1
this.newSpecies == false
arg0 == 1
arg1 has only one value
arg1 != null
arg1.organisms has only one value
arg1.organisms != null
arg1.organisms[] contains no nulls and has only one value, of length 37
arg1.organisms[] elements != null
arg1.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg1.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.species has only one value
arg1.species != null
arg1.species[] elements != null
arg1.species[].getClass().getName() elements == jneat.Species.class
arg1.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
arg1.innovations has only one value
arg1.innovations != null
arg1.innovations[] elements has only one value
arg1.innovations[] elements != null
arg1.innovations[].getClass().getName() elements == jneat.Innovation.class
arg1.innovations[].getClass().getName() one of { [], [jneat.Innovation] }
arg1.cur_node_id one of { 8, 9 }
arg1.cur_innov_num one of { 50, 52 }
arg1.population_size == 50
arg1.last_species one of { 30, 31 }
arg1.final_gen == 0
arg1.mean_fitness == 0.46399999999999997
arg1.max_fitness_this_epoch == 0.85
arg1.variance == 0.0
arg1.standard_deviation == 0.0
arg1.avg_fit_eliminated == 0.4884615384615385
arg1.winnergen == 0
arg1.highest_fitness == 0.85
arg1.highest_last_changed == 0
arg2 has only one value
arg2 != null
arg2[] contains no nulls and has only one value, of length 30
arg2[] elements != null
arg2[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
arg2[].getClass().getName() elements == jneat.Species.class
size(this.organisms[]) one of { 1, 4, 5 }
size(arg1.organisms[]) == 37
size(arg1.species[]) one of { 30, 31 }
size(arg1.innovations[]) one of { 0, 1 }
size(arg2[]) == 30
===========================================================================
jneat.Species.reproduce(int, jneat.Population, java.util.Vector):::EXIT463
===========================================================================
jneat.Species.reproduce(int, jneat.Population, java.util.Vector):::EXIT463;condition="return == true"
===========================================================================
jneat.Species.reproduce(int, jneat.Population, java.util.Vector):::EXIT
this.id == orig(this.id)
this.age == orig(this.age)
this.avg_fitness == orig(this.avg_fitness)
this.max_fitness == orig(this.max_fitness)
this.max_fitness_ever == orig(this.max_fitness_ever)
this.age_lastimprovement == orig(this.age_lastimprovement)
this.expected_offspring == orig(this.expected_offspring)
this.newSpecies == orig(this.newSpecies)
this.beenChecked == orig(this.beenChecked)
this.organisms == orig(this.organisms)
arg1.organisms == orig(arg1.organisms)
arg1.organisms[] == orig(arg1.organisms[])
arg1.species == orig(arg1.species)
arg1.innovations == orig(arg1.innovations)
arg1.population_size == orig(arg1.population_size)
arg1.final_gen == orig(arg1.final_gen)
arg1.mean_fitness == orig(arg1.mean_fitness)
arg1.max_fitness_this_epoch == orig(arg1.max_fitness_this_epoch)
arg1.variance == orig(arg1.variance)
arg1.standard_deviation == orig(arg1.standard_deviation)
arg1.avg_fit_eliminated == orig(arg1.avg_fit_eliminated)
arg1.winnergen == orig(arg1.winnergen)
arg1.highest_fitness == orig(arg1.highest_fitness)
arg1.highest_last_changed == orig(arg1.highest_last_changed)
arg2[] == orig(arg2[])
this.age == 1
this.age_lastimprovement == 1
this.newSpecies == false
arg1.organisms has only one value
arg1.organisms != null
arg1.organisms[] contains no nulls and has only one value, of length 37
arg1.organisms[] elements != null
arg1.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg1.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.species has only one value
arg1.species != null
arg1.species[] elements != null
arg1.species[].getClass().getName() elements == jneat.Species.class
arg1.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
arg1.innovations has only one value
arg1.innovations != null
arg1.innovations[] elements has only one value
arg1.innovations[] elements != null
arg1.innovations[].getClass().getName() elements == jneat.Innovation.class
arg1.innovations[].getClass().getName() one of { [], [jneat.Innovation] }
arg1.cur_node_id one of { 8, 9 }
arg1.cur_innov_num one of { 50, 52 }
arg1.population_size == 50
arg1.last_species one of { 30, 31 }
arg1.final_gen == 0
arg1.mean_fitness == 0.46399999999999997
arg1.max_fitness_this_epoch == 0.85
arg1.variance == 0.0
arg1.standard_deviation == 0.0
arg1.avg_fit_eliminated == 0.4884615384615385
arg1.winnergen == 0
arg1.highest_fitness == 0.85
arg1.highest_last_changed == 0
arg2[] contains no nulls and has only one value, of length 30
arg2[] elements != null
arg2[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
arg2[].getClass().getName() elements == jneat.Species.class
return == true
size(this.organisms[]) >= 1
size(arg1.organisms[]) == 37
size(arg1.species[]) one of { 30, 31 }
size(arg1.innovations[]) one of { 0, 1 }
arg1.cur_node_id >= orig(arg1.cur_node_id)
arg1.cur_innov_num >= orig(arg1.cur_innov_num)
arg1.last_species >= orig(arg1.last_species)
size(this.organisms[]) >= orig(size(this.organisms[]))
size(this.organisms[])-1 >= orig(size(this.organisms[]))-1
size(arg1.species[]) >= orig(size(arg1.species[]))
size(arg1.species[])-1 <= orig(size(arg1.species[]))
size(arg1.species[])-1 >= orig(size(arg1.species[]))-1
size(arg1.innovations[]) >= orig(size(arg1.innovations[]))
size(arg1.innovations[])-1 <= orig(size(arg1.innovations[]))
size(arg1.innovations[])-1 >= orig(size(arg1.innovations[]))-1
===========================================================================
jneat.Species.reproduce(int, jneat.Population, java.util.Vector):::EXIT;condition="return == true"
===========================================================================
jneat.SpeciesComparator:::OBJECT
this has only one value
===========================================================================
jneat.SpeciesComparator.SpeciesComparator():::EXIT
===========================================================================
jneat.SpeciesComparator.compare(jneat.Species, jneat.Species):::ENTER
arg0 != null
arg0.age == 1
arg0.age_lastimprovement == 1
arg0.expected_offspring >= 0
arg0.newSpecies == false
arg0.beenChecked == false
arg0.organisms != null
arg0.organisms[] elements != null
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg1 != null
arg1.id >= 1
arg1.age == 1
arg1.age_lastimprovement == 1
arg1.expected_offspring >= 0
arg1.newSpecies == false
arg1.beenChecked == false
arg1.organisms != null
arg1.organisms[] elements != null
arg1.organisms[].getClass().getName() elements == jneat.Organism.class
size(arg0.organisms[]) >= 1
size(arg1.organisms[]) >= 1
===========================================================================
jneat.SpeciesComparator.compare(jneat.Species, jneat.Species):::EXIT13
arg0.expected_offspring one of { 0, 1, 2 }
arg0.organisms[].getClass().getName() one of { [jneat.Organism], [jneat.Organism, jneat.Organism] }
arg1.expected_offspring one of { 1, 2, 16 }
return == 1
size(arg0.organisms[]) one of { 1, 2 }
size(arg1.organisms[]) one of { 1, 2, 10 }
===========================================================================
jneat.SpeciesComparator.compare(jneat.Species, jneat.Species):::EXIT14
arg0.expected_offspring >= 1
return == -1
size(arg1.organisms[]) one of { 1, 2, 9 }
===========================================================================
jneat.SpeciesComparator.compare(jneat.Species, jneat.Species):::EXIT16
return == 0
===========================================================================
jneat.SpeciesComparator.compare(jneat.Species, jneat.Species):::EXIT
arg0.id == orig(arg0.id)
arg0.age == orig(arg0.age)
arg0.avg_fitness == orig(arg0.avg_fitness)
arg0.max_fitness == orig(arg0.max_fitness)
arg0.max_fitness_ever == orig(arg0.max_fitness_ever)
arg0.age_lastimprovement == orig(arg0.age_lastimprovement)
arg0.expected_offspring == orig(arg0.expected_offspring)
arg0.newSpecies == orig(arg0.newSpecies)
arg0.beenChecked == orig(arg0.beenChecked)
arg0.organisms == orig(arg0.organisms)
arg0.organisms[] == orig(arg0.organisms[])
arg1.id == orig(arg1.id)
arg1.age == orig(arg1.age)
arg1.avg_fitness == orig(arg1.avg_fitness)
arg1.max_fitness == orig(arg1.max_fitness)
arg1.max_fitness_ever == orig(arg1.max_fitness_ever)
arg1.age_lastimprovement == orig(arg1.age_lastimprovement)
arg1.expected_offspring == orig(arg1.expected_offspring)
arg1.newSpecies == orig(arg1.newSpecies)
arg1.beenChecked == orig(arg1.beenChecked)
arg1.organisms == orig(arg1.organisms)
arg1.organisms[] == orig(arg1.organisms[])
arg0.age == 1
arg0.age_lastimprovement == 1
arg0.expected_offspring >= 0
arg0.newSpecies == false
arg0.beenChecked == false
arg0.organisms != null
arg0.organisms[] elements != null
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.id >= 1
arg1.age == 1
arg1.age_lastimprovement == 1
arg1.expected_offspring >= 0
arg1.newSpecies == false
arg1.beenChecked == false
arg1.organisms != null
arg1.organisms[] elements != null
arg1.organisms[].getClass().getName() elements == jneat.Organism.class
return one of { -1, 0, 1 }
size(arg0.organisms[]) >= 1
size(arg1.organisms[]) >= 1
===========================================================================
jneat.Trait:::OBJECT
this.id >= 0
this.params != null
this.params[] elements one of { 0.0, 1.0 }
this.params[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.params[] sorted by >=
size(this.params[]) == 8
===========================================================================
jneat.Trait.Trait():::EXIT
this.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.params[] elements == 0.0
===========================================================================
jneat.Trait.Trait(jneat.Trait):::ENTER
arg0 != null
arg0.params != null
arg0.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] sorted by >=
size(arg0.params[]) == 8
===========================================================================
jneat.Trait.Trait(jneat.Trait):::EXIT
this.id == arg0.id
this.id == orig(arg0.id)
arg0.params == orig(arg0.params)
arg0.params[] == orig(arg0.params[])
this.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params != null
arg0.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg0.params[] elements one of { 0.0, 1.0 }
arg0.params[] sorted by >=
size(arg0.params[]) == 8
===========================================================================
jneat.Trait.setTraitParam(int, double):::ENTER
this.params[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.params[] elements == 0.0
arg0 == 0
arg1 == 1.0
===========================================================================
jneat.Trait.setTraitParam(int, double):::EXIT60
===========================================================================
jneat.Trait.setTraitParam(int, double):::EXIT
this.id == orig(this.id)
this.params == orig(this.params)
size(this.params[]) == orig(size(this.params[]))
this.params[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.params[] >= orig(this.params[]) (elementwise)
orig(arg1) in this.params[]
this.params[] elements <= orig(arg1)
===========================================================================
spotting.SpotRecords:::OBJECT
this has only one value
this.records has only one value
this.records[] == []
this.records[].getClass().getName() == []
===========================================================================
spotting.SpotRecords.SpotRecords():::EXIT
===========================================================================
testbed.JNEATtest.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
testbed.JNEATtest.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
testbed.JNEATtest.test5fitness(double, boolean):::ENTER
arg0 != 0
===========================================================================
testbed.JNEATtest.test5fitness(double, boolean):::EXIT126
return == 1.0
orig(arg0) one of { 0.8057771325111389, 0.9280426502227783, 0.9970095157623291 }
orig(arg1) == true
===========================================================================
testbed.JNEATtest.test5fitness(double, boolean):::EXIT127
return == 0.0
orig(arg0) one of { 0.8057771325111389, 0.9280426502227783, 0.9970095157623291 }
orig(arg1) == false
===========================================================================
testbed.JNEATtest.test5fitness(double, boolean):::EXIT130
return == 1.0
orig(arg1) == false
===========================================================================
testbed.JNEATtest.test5fitness(double, boolean):::EXIT131
return == 0.0
orig(arg1) == true
===========================================================================
testbed.JNEATtest.test5fitness(double, boolean):::EXIT
return one of { 0.0, 1.0 }
===========================================================================
testbed.JNEATtest.test5sensors(jneat.Population, int):::ENTER
arg0 has only one value
arg0.organisms has only one value
arg0.organisms[] contains no nulls and has only one value, of length 50
arg0.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.species has only one value
arg0.species[] contains no nulls and has only one value, of length 30
arg0.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
arg0.species[].getClass().getName() elements == jneat.Species.class
arg0.innovations has only one value
arg0.innovations[] == []
arg0.innovations[].getClass().getName() == []
arg0.cur_node_id == 8
arg0.cur_innov_num == 50
arg0.population_size == 50
arg0.last_species == 30
arg0.final_gen == 0
arg0.mean_fitness == 0.0
arg0.max_fitness_this_epoch == 0.0
arg0.variance == 0.0
arg0.standard_deviation == 0.0
arg0.avg_fit_eliminated == 0.0
arg0.winnergen == 0
arg0.highest_fitness == 0.0
arg0.highest_last_changed == 0
arg1 == 20
size(arg0.organisms[]) == 50
size(arg0.species[]) == 30
===========================================================================
testbed.JNEATtest.test5sensors(jneat.Population, int):::EXIT
arg0.organisms == orig(arg0.organisms)
arg0.organisms[] == orig(arg0.organisms[])
arg0.species == orig(arg0.species)
arg0.species[] == orig(arg0.species[])
arg0.innovations == orig(arg0.innovations)
arg0.innovations[] == orig(arg0.innovations[])
arg0.cur_node_id == orig(arg0.cur_node_id)
arg0.cur_innov_num == orig(arg0.cur_innov_num)
arg0.population_size == orig(arg0.population_size)
arg0.last_species == orig(arg0.last_species)
arg0.final_gen == orig(arg0.final_gen)
arg0.mean_fitness == orig(arg0.mean_fitness)
arg0.max_fitness_this_epoch == orig(arg0.max_fitness_this_epoch)
arg0.variance == orig(arg0.variance)
arg0.standard_deviation == orig(arg0.standard_deviation)
arg0.avg_fit_eliminated == orig(arg0.avg_fit_eliminated)
arg0.winnergen == orig(arg0.winnergen)
arg0.highest_fitness == orig(arg0.highest_fitness)
arg0.highest_last_changed == orig(arg0.highest_last_changed)
arg0.organisms has only one value
arg0.organisms[] contains no nulls and has only one value, of length 50
arg0.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg0.organisms[].getClass().getName() elements == jneat.Organism.class
arg0.species has only one value
arg0.species[] contains no nulls and has only one value, of length 30
arg0.species[].getClass().getName() == [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species]
arg0.species[].getClass().getName() elements == jneat.Species.class
arg0.innovations has only one value
arg0.innovations[] == []
arg0.innovations[].getClass().getName() == []
arg0.cur_node_id == 8
arg0.cur_innov_num == 50
arg0.population_size == 50
arg0.last_species == 30
arg0.final_gen == 0
arg0.mean_fitness == 0.0
arg0.max_fitness_this_epoch == 0.0
arg0.variance == 0.0
arg0.standard_deviation == 0.0
arg0.avg_fit_eliminated == 0.0
arg0.winnergen == 0
arg0.highest_fitness == 0.0
arg0.highest_last_changed == 0
size(arg0.organisms[]) == 50
size(arg0.species[]) == 30
===========================================================================
testbed.JNEATtest.testSave(java.lang.String, jneat.Population):::ENTER
arg1.max_fitness_this_epoch == arg1.highest_fitness
arg0.toString one of { "src/saves/pop1.txt", "src/saves/pop2.txt" }
arg1 has only one value
arg1.organisms has only one value
arg1.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg1.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.species has only one value
arg1.species[].getClass().getName() elements == jneat.Species.class
arg1.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
arg1.innovations has only one value
arg1.innovations[] == []
arg1.innovations[].getClass().getName() == []
arg1.cur_node_id one of { 8, 9 }
arg1.cur_innov_num one of { 50, 52 }
arg1.population_size == 50
arg1.last_species one of { 30, 31 }
arg1.final_gen == 0
arg1.mean_fitness one of { 0.0, 0.46399999999999997 }
arg1.max_fitness_this_epoch one of { 0.0, 0.85 }
arg1.variance == 0.0
arg1.standard_deviation == 0.0
arg1.avg_fit_eliminated one of { 0.0, 0.4884615384615385 }
arg1.winnergen == 0
arg1.highest_last_changed == 0
size(arg1.organisms[]) == 50
size(arg1.species[]) one of { 21, 30 }
===========================================================================
testbed.JNEATtest.testSave(java.lang.String, jneat.Population):::EXIT
arg0.toString == orig(arg0.toString)
arg1.organisms == orig(arg1.organisms)
arg1.organisms[] == orig(arg1.organisms[])
arg1.species == orig(arg1.species)
arg1.species[] == orig(arg1.species[])
arg1.innovations == orig(arg1.innovations)
arg1.innovations[] == orig(arg1.innovations[])
arg1.cur_node_id == orig(arg1.cur_node_id)
arg1.cur_innov_num == orig(arg1.cur_innov_num)
arg1.population_size == orig(arg1.population_size)
arg1.last_species == orig(arg1.last_species)
arg1.final_gen == orig(arg1.final_gen)
arg1.mean_fitness == orig(arg1.mean_fitness)
arg1.max_fitness_this_epoch == arg1.highest_fitness
arg1.max_fitness_this_epoch == orig(arg1.max_fitness_this_epoch)
arg1.max_fitness_this_epoch == orig(arg1.highest_fitness)
arg1.variance == orig(arg1.variance)
arg1.standard_deviation == orig(arg1.standard_deviation)
arg1.avg_fit_eliminated == orig(arg1.avg_fit_eliminated)
arg1.winnergen == orig(arg1.winnergen)
arg1.highest_last_changed == orig(arg1.highest_last_changed)
arg0.toString one of { "src/saves/pop1.txt", "src/saves/pop2.txt" }
arg1.organisms has only one value
arg1.organisms[].getClass().getName() == [jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism, jneat.Organism]
arg1.organisms[].getClass().getName() elements == jneat.Organism.class
arg1.species has only one value
arg1.species[].getClass().getName() elements == jneat.Species.class
arg1.species[].getClass().getName() one of { [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species], [jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species, jneat.Species] }
arg1.innovations has only one value
arg1.innovations[] == []
arg1.innovations[].getClass().getName() == []
arg1.cur_node_id one of { 8, 9 }
arg1.cur_innov_num one of { 50, 52 }
arg1.population_size == 50
arg1.last_species one of { 30, 31 }
arg1.final_gen == 0
arg1.mean_fitness one of { 0.0, 0.46399999999999997 }
arg1.max_fitness_this_epoch one of { 0.0, 0.85 }
arg1.variance == 0.0
arg1.standard_deviation == 0.0
arg1.avg_fit_eliminated one of { 0.0, 0.4884615384615385 }
arg1.winnergen == 0
arg1.highest_last_changed == 0
size(arg1.organisms[]) == 50
size(arg1.species[]) one of { 21, 30 }
===========================================================================
unit.FitnessTypeEnum:::OBJECT
===========================================================================
unit.FitnessTypeEnum.FitnessTypeEnum(java.lang.String, int):::ENTER
===========================================================================
unit.FitnessTypeEnum.FitnessTypeEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
unit.OrganismTypeEnum:::OBJECT
===========================================================================
unit.OrganismTypeEnum.OrganismTypeEnum(java.lang.String, int):::ENTER
===========================================================================
unit.OrganismTypeEnum.OrganismTypeEnum(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
utilities.FIO:::CLASS
utilities.FIO.cSet has only one value
utilities.FIO.cSet != null
utilities.FIO.cSet.getClass().getName() == sun.nio.cs.US_ASCII.class
utilities.FIO.readFinger == 0
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption):::ENTER
arg0.getClass().getName() == sun.nio.fs.UnixPath.class
arg1.toString == "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n"
arg2 has only one value
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption):::EXIT
utilities.FIO.cSet == orig(utilities.FIO.cSet)
utilities.FIO.cSet.getClass().getName() == orig(utilities.FIO.cSet.getClass().getName())
utilities.FIO.readFinger == orig(utilities.FIO.readFinger)
arg1.toString == orig(arg1.toString)
arg1.toString == "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n"
return == false
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption):::EXIT;condition="not(return == true)"
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption, boolean):::ENTER
arg0.getClass().getName() == sun.nio.fs.UnixPath.class
arg1.toString one of { "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n", "# Population information follows:\n50, 8, 0, 0.0, 0, 30, 0.0, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.717292308807373, true, Link, 14, 0.0, false, false, -0.717292308807373, 1, 2\nGene, 14, 0.1983301043510437, true, Link, 15, 0.0, false, false, 0.1983301043510437, 1, 3\nGene, 43, 0.6492539644241333, true, Link, 16, 0.0, false, false, 0.6492539644241333, 2, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.08258217573165894, true, Link, 29, 0.0, false, false, -0.08258217573165894, 1, 2\nGene, 22, 0.18210095167160034, true, Link, 30, 0.0, false, false, 0.18210095167160034, 2, 4\nGene, 42, -0.8264488577842712, true, Link, 31, 0.0, false, false, -0.8264488577842712, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7149022817611694, true, Link, 50, 0.0, false, false, -0.7149022817611694, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 55, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.9194443821907043, true, Link, 82, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, true, Link, 83, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 84, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 85, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 86, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 87, 0.0, false, false, 0.539691150188446, 4, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 100, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 143, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 144, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.6832627654075623, true, Link, 157, 0.0, false, false, -0.6832627654075623, 1, 5\nGene, 46, 0.854897141456604, true, Link, 158, 0.0, false, false, 0.854897141456604, 5, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.3185303807258606, true, Link, 163, 0.0, false, false, -0.3185303807258606, 1, 2\nGene, 39, -0.30332618951797485, true, Link, 164, 0.0, false, false, -0.30332618951797485, 5, 6\nGene, 43, 0.2281017303466797, true, Link, 165, 0.0, false, false, 0.2281017303466797, 2, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 172, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2728215456008911, true, Link, 175, 0.0, false, false, -0.2728215456008911, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.07785695791244507, true, Link, 180, 0.0, false, false, -0.07785695791244507, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5553820729255676, true, Link, 183, 0.0, false, false, -0.5553820729255676, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 186, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 189, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 194, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 195, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 216, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 217, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 218, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.029299497604370117, true, Link, 227, 0.0, false, false, -0.029299497604370117, 1, 2\nGene, 29, -0.7627831697463989, true, Link, 228, 0.0, false, false, -0.7627831697463989, 2, 5\nGene, 43, 0.5649425387382507, true, Link, 229, 0.0, false, false, 0.5649425387382507, 2, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.20184582471847534, true, Link, 236, 0.0, false, false, -0.20184582471847534, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 247, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 248, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 263, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 264, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 265, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 274, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 281, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 282, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 289, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 290, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 323, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 324, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.05779367685317993, true, Link, 339, 0.0, false, false, 0.05779367685317993, 1, 2\nGene, 42, -0.07745212316513062, true, Link, 340, 0.0, false, false, -0.07745212316513062, 1, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 365, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 374, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 375, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6425018906593323, true, Link, 386, 0.0, false, false, 0.6425018906593323, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 419, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 420, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 421, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 450, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 451, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 452, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 463, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 464, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 525, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 526, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 527, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 528, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 529, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 530, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 531, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 532, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 533, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 534, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 557, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 558, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7482502460479736, true, Link, 585, 0.0, false, false, -0.7482502460479736, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 590, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 591, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 592, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 593, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.5206215977668762, true, Link, 618, 0.0, false, false, -0.5206215977668762, 1, 2\nGene, 43, 0.3696298599243164, true, Link, 619, 0.0, false, false, 0.3696298599243164, 2, 7\nGene, 45, 0.9405050873756409, true, Link, 620, 0.0, false, false, 0.9405050873756409, 4, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.45, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 645, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 646, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 647, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 648, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 649, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 650, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 651, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.42423272132873535, true, Link, 666, 0.0, false, false, 0.42423272132873535, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 35, -0.17567026615142822, true, Link, 683, 0.0, false, false, -0.17567026615142822, 1, 6\nGene, 47, 0.8128328323364258, true, Link, 684, 0.0, false, false, 0.8128328323364258, 6, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.7369576692581177, true, Link, 695, 0.0, false, false, -0.7369576692581177, 1, 2\nGene, 43, 0.6672573089599609, true, Link, 696, 0.0, false, false, 0.6672573089599609, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 713, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 714, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 715, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 716, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 717, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.49643999338150024, true, Link, 746, 0.0, false, false, 0.49643999338150024, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4714950919151306, true, Link, 753, 0.0, false, false, 0.4714950919151306, 1, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 794, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 795, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 796, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 797, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 798, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 799, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, 0.018456339836120605, true, Link, 844, 0.0, false, false, 0.018456339836120605, 2, 3\nGene, 21, -0.06704694032669067, true, Link, 845, 0.0, false, false, -0.06704694032669067, 1, 4\nGene, 28, 0.11384767293930054, true, Link, 846, 0.0, false, false, 0.11384767293930054, 1, 5\nGene, 31, 0.5835185050964355, true, Link, 847, 0.0, false, false, 0.5835185050964355, 4, 5\nGene, 35, 0.4916512966156006, true, Link, 848, 0.0, false, false, 0.4916512966156006, 1, 6\nGene, 43, -0.043931543827056885, true, Link, 849, 0.0, false, false, -0.043931543827056885, 2, 7\nGene, 44, -0.5604459643363953, true, Link, 850, 0.0, false, false, -0.5604459643363953, 3, 7\nGene, 47, 0.5101136565208435, true, Link, 851, 0.0, false, false, 0.5101136565208435, 6, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.4839916229248047, true, Link, 870, 0.0, false, false, 0.4839916229248047, 1, 2\nGene, 42, 0.2852809429168701, true, Link, 871, 0.0, false, false, 0.2852809429168701, 1, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6666633486747742, true, Link, 876, 0.0, false, false, 0.6666633486747742, 1, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 895, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 896, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7803419828414917, true, Link, 901, 0.0, false, false, -0.7803419828414917, 1, 7\n\n>END ORGANISMS<\n\nSpecies, 1, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 0\n\nSpecies, 2, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 1, 20\n\nSpecies, 3, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 2, 5, 9, 10, 11, 12, 18, 34, 49\n\nSpecies, 4, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 3, 13, 14, 21, 26, 28, 38, 42, 43, 47\n\nSpecies, 5, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 4\n\nSpecies, 6, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 6\n\nSpecies, 7, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 7\n\nSpecies, 8, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 8\n\nSpecies, 9, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 15, 25\n\nSpecies, 10, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 16\n\nSpecies, 11, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 17\n\nSpecies, 12, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 19\n\nSpecies, 13, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 22\n\nSpecies, 14, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 23\n\nSpecies, 15, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 24\n\nSpecies, 16, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 27\n\nSpecies, 17, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 29\n\nSpecies, 18, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 30\n\nSpecies, 19, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 31, 46\n\nSpecies, 20, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 32\n\nSpecies, 21, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 33\n\nSpecies, 22, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 35\n\nSpecies, 23, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 36\n\nSpecies, 24, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 37\n\nSpecies, 25, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 39\n\nSpecies, 26, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 40\n\nSpecies, 27, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 41\n\nSpecies, 28, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 44\n\nSpecies, 29, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 45\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 48\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n", "# Population information follows:\n52, 9, 0, 0.85, 0, 31, 0.46399999999999997, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 960, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 961, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 962, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.06806677579879761, false, Link, 966, 0.0, false, false, 0.06806677579879761, 1, 2\nGene, 22, 0.6450504660606384, true, Link, 967, 0.0, false, false, 0.6450504660606384, 2, 4\nGene, 42, 0.24832302331924438, true, Link, 968, 0.0, false, false, 0.24832302331924438, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 971, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 973, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 975, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 977, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.46649229526519775, true, Link, 979, 0.0, false, false, 0.46649229526519775, 1, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7208651900291443, true, Link, 981, 0.0, false, false, -0.7208651900291443, 1, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 983, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 985, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 987, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 989, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 991, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 993, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 995, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 997, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 999, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 1001, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1003, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1005, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1007, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1009, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1011, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1013, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1015, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 1017, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 1018, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1097, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1098, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1101, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1102, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 1021, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 1022, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 1023, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 1027, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 1028, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 904, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 905, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 908, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 909, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 1105, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 1106, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 1109, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 1110, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 1113, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 1114, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 1031, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 1032, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 1033, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 1117, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 1118, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 1119, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1037, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1038, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1041, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1042, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, false, Link, 1045, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1046, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 912, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 913, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 914, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 915, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 916, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 917, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 918, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 919, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 920, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 921, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 932, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 933, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 934, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 935, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 936, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 937, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 938, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 939, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 940, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 941, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 1123, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 1124, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 1048, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 1049, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 1050, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 1051, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 1083, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 1084, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 1085, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 1086, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 1087, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 1088, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 1089, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 1127, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 1128, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 1129, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 1130, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 1131, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 1071, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 1072, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 1073, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 1074, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 1075, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 1076, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 952, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 953, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 956, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 957, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nNode, 8, SIGMOID, NEURON, HIDDEN\nGene, 14, -0.9194443821907043, true, Link, 1056, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, false, Link, 1057, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 1058, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 1059, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 1060, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 1061, 0.0, false, false, 0.539691150188446, 4, 7\nGene, 50, 0.0, true, Link, 1062, 0.0, false, false, 1.0, 3, 8\nGene, 51, 0.0, true, Link, 1063, 0.0, false, false, -0.6613249182701111, 8, 4\n\n>END ORGANISMS<\n\nSpecies, 2, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 0, 1\n\nSpecies, 3, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n\nSpecies, 6, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 25\n\nSpecies, 9, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 26, 27\n\nSpecies, 10, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 28\n\nSpecies, 12, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 29\n\nSpecies, 13, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 30, 31\n\nSpecies, 14, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 32\n\nSpecies, 15, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 33\n\nSpecies, 16, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 34\n\nSpecies, 17, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 35\n\nSpecies, 18, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 36\n\nSpecies, 19, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 37, 38, 39\n\nSpecies, 20, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 40, 41\n\nSpecies, 21, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 42\n\nSpecies, 22, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 43\n\nSpecies, 24, 2, 1, 0.45, 0.45, false\n<Species Orgs>, 44\n\nSpecies, 27, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 45\n\nSpecies, 28, 2, 1, 0.55, 0.55, false\n<Species Orgs>, 46\n\nSpecies, 30, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 47, 48\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 49\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n" }
arg3 == true
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption, boolean):::EXIT46
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption, boolean):::EXIT46;condition="not(return == true)"
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption, boolean):::EXIT
utilities.FIO.cSet == orig(utilities.FIO.cSet)
utilities.FIO.cSet.getClass().getName() == orig(utilities.FIO.cSet.getClass().getName())
utilities.FIO.readFinger == orig(utilities.FIO.readFinger)
arg1.toString == orig(arg1.toString)
arg1.toString one of { "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n", "# Population information follows:\n50, 8, 0, 0.0, 0, 30, 0.0, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.717292308807373, true, Link, 14, 0.0, false, false, -0.717292308807373, 1, 2\nGene, 14, 0.1983301043510437, true, Link, 15, 0.0, false, false, 0.1983301043510437, 1, 3\nGene, 43, 0.6492539644241333, true, Link, 16, 0.0, false, false, 0.6492539644241333, 2, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.08258217573165894, true, Link, 29, 0.0, false, false, -0.08258217573165894, 1, 2\nGene, 22, 0.18210095167160034, true, Link, 30, 0.0, false, false, 0.18210095167160034, 2, 4\nGene, 42, -0.8264488577842712, true, Link, 31, 0.0, false, false, -0.8264488577842712, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7149022817611694, true, Link, 50, 0.0, false, false, -0.7149022817611694, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 55, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.9194443821907043, true, Link, 82, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, true, Link, 83, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 84, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 85, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 86, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 87, 0.0, false, false, 0.539691150188446, 4, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 100, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 143, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 144, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.6832627654075623, true, Link, 157, 0.0, false, false, -0.6832627654075623, 1, 5\nGene, 46, 0.854897141456604, true, Link, 158, 0.0, false, false, 0.854897141456604, 5, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.3185303807258606, true, Link, 163, 0.0, false, false, -0.3185303807258606, 1, 2\nGene, 39, -0.30332618951797485, true, Link, 164, 0.0, false, false, -0.30332618951797485, 5, 6\nGene, 43, 0.2281017303466797, true, Link, 165, 0.0, false, false, 0.2281017303466797, 2, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 172, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2728215456008911, true, Link, 175, 0.0, false, false, -0.2728215456008911, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.07785695791244507, true, Link, 180, 0.0, false, false, -0.07785695791244507, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5553820729255676, true, Link, 183, 0.0, false, false, -0.5553820729255676, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 186, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 189, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 194, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 195, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 216, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 217, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 218, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.029299497604370117, true, Link, 227, 0.0, false, false, -0.029299497604370117, 1, 2\nGene, 29, -0.7627831697463989, true, Link, 228, 0.0, false, false, -0.7627831697463989, 2, 5\nGene, 43, 0.5649425387382507, true, Link, 229, 0.0, false, false, 0.5649425387382507, 2, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.20184582471847534, true, Link, 236, 0.0, false, false, -0.20184582471847534, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 247, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 248, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 263, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 264, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 265, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 274, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 281, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 282, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 289, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 290, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 323, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 324, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.05779367685317993, true, Link, 339, 0.0, false, false, 0.05779367685317993, 1, 2\nGene, 42, -0.07745212316513062, true, Link, 340, 0.0, false, false, -0.07745212316513062, 1, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 365, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 374, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 375, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6425018906593323, true, Link, 386, 0.0, false, false, 0.6425018906593323, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 419, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 420, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 421, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 450, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 451, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 452, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 463, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 464, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 525, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 526, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 527, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 528, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 529, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 530, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 531, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 532, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 533, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 534, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 557, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 558, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7482502460479736, true, Link, 585, 0.0, false, false, -0.7482502460479736, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 590, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 591, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 592, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 593, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.5206215977668762, true, Link, 618, 0.0, false, false, -0.5206215977668762, 1, 2\nGene, 43, 0.3696298599243164, true, Link, 619, 0.0, false, false, 0.3696298599243164, 2, 7\nGene, 45, 0.9405050873756409, true, Link, 620, 0.0, false, false, 0.9405050873756409, 4, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.45, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 645, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 646, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 647, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 648, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 649, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 650, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 651, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.42423272132873535, true, Link, 666, 0.0, false, false, 0.42423272132873535, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 35, -0.17567026615142822, true, Link, 683, 0.0, false, false, -0.17567026615142822, 1, 6\nGene, 47, 0.8128328323364258, true, Link, 684, 0.0, false, false, 0.8128328323364258, 6, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.7369576692581177, true, Link, 695, 0.0, false, false, -0.7369576692581177, 1, 2\nGene, 43, 0.6672573089599609, true, Link, 696, 0.0, false, false, 0.6672573089599609, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 713, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 714, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 715, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 716, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 717, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.49643999338150024, true, Link, 746, 0.0, false, false, 0.49643999338150024, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4714950919151306, true, Link, 753, 0.0, false, false, 0.4714950919151306, 1, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 794, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 795, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 796, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 797, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 798, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 799, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, 0.018456339836120605, true, Link, 844, 0.0, false, false, 0.018456339836120605, 2, 3\nGene, 21, -0.06704694032669067, true, Link, 845, 0.0, false, false, -0.06704694032669067, 1, 4\nGene, 28, 0.11384767293930054, true, Link, 846, 0.0, false, false, 0.11384767293930054, 1, 5\nGene, 31, 0.5835185050964355, true, Link, 847, 0.0, false, false, 0.5835185050964355, 4, 5\nGene, 35, 0.4916512966156006, true, Link, 848, 0.0, false, false, 0.4916512966156006, 1, 6\nGene, 43, -0.043931543827056885, true, Link, 849, 0.0, false, false, -0.043931543827056885, 2, 7\nGene, 44, -0.5604459643363953, true, Link, 850, 0.0, false, false, -0.5604459643363953, 3, 7\nGene, 47, 0.5101136565208435, true, Link, 851, 0.0, false, false, 0.5101136565208435, 6, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.4839916229248047, true, Link, 870, 0.0, false, false, 0.4839916229248047, 1, 2\nGene, 42, 0.2852809429168701, true, Link, 871, 0.0, false, false, 0.2852809429168701, 1, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6666633486747742, true, Link, 876, 0.0, false, false, 0.6666633486747742, 1, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 895, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 896, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7803419828414917, true, Link, 901, 0.0, false, false, -0.7803419828414917, 1, 7\n\n>END ORGANISMS<\n\nSpecies, 1, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 0\n\nSpecies, 2, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 1, 20\n\nSpecies, 3, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 2, 5, 9, 10, 11, 12, 18, 34, 49\n\nSpecies, 4, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 3, 13, 14, 21, 26, 28, 38, 42, 43, 47\n\nSpecies, 5, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 4\n\nSpecies, 6, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 6\n\nSpecies, 7, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 7\n\nSpecies, 8, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 8\n\nSpecies, 9, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 15, 25\n\nSpecies, 10, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 16\n\nSpecies, 11, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 17\n\nSpecies, 12, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 19\n\nSpecies, 13, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 22\n\nSpecies, 14, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 23\n\nSpecies, 15, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 24\n\nSpecies, 16, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 27\n\nSpecies, 17, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 29\n\nSpecies, 18, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 30\n\nSpecies, 19, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 31, 46\n\nSpecies, 20, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 32\n\nSpecies, 21, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 33\n\nSpecies, 22, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 35\n\nSpecies, 23, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 36\n\nSpecies, 24, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 37\n\nSpecies, 25, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 39\n\nSpecies, 26, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 40\n\nSpecies, 27, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 41\n\nSpecies, 28, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 44\n\nSpecies, 29, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 45\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 48\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n", "# Population information follows:\n52, 9, 0, 0.85, 0, 31, 0.46399999999999997, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 960, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 961, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 962, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.06806677579879761, false, Link, 966, 0.0, false, false, 0.06806677579879761, 1, 2\nGene, 22, 0.6450504660606384, true, Link, 967, 0.0, false, false, 0.6450504660606384, 2, 4\nGene, 42, 0.24832302331924438, true, Link, 968, 0.0, false, false, 0.24832302331924438, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 971, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 973, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 975, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 977, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.46649229526519775, true, Link, 979, 0.0, false, false, 0.46649229526519775, 1, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7208651900291443, true, Link, 981, 0.0, false, false, -0.7208651900291443, 1, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 983, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 985, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 987, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 989, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 991, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 993, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 995, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 997, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 999, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 1001, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1003, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1005, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1007, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1009, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1011, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1013, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1015, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 1017, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 1018, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1097, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1098, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1101, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1102, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 1021, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 1022, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 1023, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 1027, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 1028, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 904, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 905, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 908, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 909, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 1105, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 1106, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 1109, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 1110, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 1113, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 1114, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 1031, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 1032, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 1033, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 1117, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 1118, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 1119, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1037, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1038, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1041, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1042, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, false, Link, 1045, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1046, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 912, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 913, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 914, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 915, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 916, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 917, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 918, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 919, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 920, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 921, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 932, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 933, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 934, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 935, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 936, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 937, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 938, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 939, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 940, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 941, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 1123, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 1124, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 1048, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 1049, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 1050, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 1051, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 1083, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 1084, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 1085, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 1086, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 1087, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 1088, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 1089, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 1127, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 1128, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 1129, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 1130, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 1131, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 1071, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 1072, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 1073, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 1074, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 1075, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 1076, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 952, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 953, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 956, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 957, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nNode, 8, SIGMOID, NEURON, HIDDEN\nGene, 14, -0.9194443821907043, true, Link, 1056, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, false, Link, 1057, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 1058, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 1059, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 1060, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 1061, 0.0, false, false, 0.539691150188446, 4, 7\nGene, 50, 0.0, true, Link, 1062, 0.0, false, false, 1.0, 3, 8\nGene, 51, 0.0, true, Link, 1063, 0.0, false, false, -0.6613249182701111, 8, 4\n\n>END ORGANISMS<\n\nSpecies, 2, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 0, 1\n\nSpecies, 3, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n\nSpecies, 6, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 25\n\nSpecies, 9, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 26, 27\n\nSpecies, 10, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 28\n\nSpecies, 12, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 29\n\nSpecies, 13, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 30, 31\n\nSpecies, 14, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 32\n\nSpecies, 15, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 33\n\nSpecies, 16, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 34\n\nSpecies, 17, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 35\n\nSpecies, 18, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 36\n\nSpecies, 19, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 37, 38, 39\n\nSpecies, 20, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 40, 41\n\nSpecies, 21, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 42\n\nSpecies, 22, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 43\n\nSpecies, 24, 2, 1, 0.45, 0.45, false\n<Species Orgs>, 44\n\nSpecies, 27, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 45\n\nSpecies, 28, 2, 1, 0.55, 0.55, false\n<Species Orgs>, 46\n\nSpecies, 30, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 47, 48\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 49\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n" }
return == false
===========================================================================
utilities.FIO.BWriteFile(java.nio.file.Path, java.lang.String, java.nio.file.StandardOpenOption, boolean):::EXIT;condition="not(return == true)"
===========================================================================
utilities.FIO.appendFile(java.nio.file.Path, java.lang.String):::ENTER
arg0.getClass().getName() == sun.nio.fs.UnixPath.class
arg1.toString one of { "# Population information follows:\n50, 8, 0, 0.0, 0, 30, 0.0, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.717292308807373, true, Link, 14, 0.0, false, false, -0.717292308807373, 1, 2\nGene, 14, 0.1983301043510437, true, Link, 15, 0.0, false, false, 0.1983301043510437, 1, 3\nGene, 43, 0.6492539644241333, true, Link, 16, 0.0, false, false, 0.6492539644241333, 2, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.08258217573165894, true, Link, 29, 0.0, false, false, -0.08258217573165894, 1, 2\nGene, 22, 0.18210095167160034, true, Link, 30, 0.0, false, false, 0.18210095167160034, 2, 4\nGene, 42, -0.8264488577842712, true, Link, 31, 0.0, false, false, -0.8264488577842712, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7149022817611694, true, Link, 50, 0.0, false, false, -0.7149022817611694, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 55, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.9194443821907043, true, Link, 82, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, true, Link, 83, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 84, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 85, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 86, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 87, 0.0, false, false, 0.539691150188446, 4, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 100, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 143, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 144, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.6832627654075623, true, Link, 157, 0.0, false, false, -0.6832627654075623, 1, 5\nGene, 46, 0.854897141456604, true, Link, 158, 0.0, false, false, 0.854897141456604, 5, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.3185303807258606, true, Link, 163, 0.0, false, false, -0.3185303807258606, 1, 2\nGene, 39, -0.30332618951797485, true, Link, 164, 0.0, false, false, -0.30332618951797485, 5, 6\nGene, 43, 0.2281017303466797, true, Link, 165, 0.0, false, false, 0.2281017303466797, 2, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 172, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2728215456008911, true, Link, 175, 0.0, false, false, -0.2728215456008911, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.07785695791244507, true, Link, 180, 0.0, false, false, -0.07785695791244507, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5553820729255676, true, Link, 183, 0.0, false, false, -0.5553820729255676, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 186, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 189, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 194, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 195, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 216, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 217, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 218, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.029299497604370117, true, Link, 227, 0.0, false, false, -0.029299497604370117, 1, 2\nGene, 29, -0.7627831697463989, true, Link, 228, 0.0, false, false, -0.7627831697463989, 2, 5\nGene, 43, 0.5649425387382507, true, Link, 229, 0.0, false, false, 0.5649425387382507, 2, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.20184582471847534, true, Link, 236, 0.0, false, false, -0.20184582471847534, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 247, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 248, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 263, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 264, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 265, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 274, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 281, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 282, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 289, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 290, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 323, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 324, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.05779367685317993, true, Link, 339, 0.0, false, false, 0.05779367685317993, 1, 2\nGene, 42, -0.07745212316513062, true, Link, 340, 0.0, false, false, -0.07745212316513062, 1, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 365, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 374, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 375, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6425018906593323, true, Link, 386, 0.0, false, false, 0.6425018906593323, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 419, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 420, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 421, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 450, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 451, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 452, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 463, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 464, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 525, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 526, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 527, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 528, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 529, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 530, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 531, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 532, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 533, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 534, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 557, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 558, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7482502460479736, true, Link, 585, 0.0, false, false, -0.7482502460479736, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 590, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 591, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 592, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 593, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.5206215977668762, true, Link, 618, 0.0, false, false, -0.5206215977668762, 1, 2\nGene, 43, 0.3696298599243164, true, Link, 619, 0.0, false, false, 0.3696298599243164, 2, 7\nGene, 45, 0.9405050873756409, true, Link, 620, 0.0, false, false, 0.9405050873756409, 4, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.45, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 645, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 646, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 647, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 648, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 649, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 650, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 651, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.42423272132873535, true, Link, 666, 0.0, false, false, 0.42423272132873535, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 35, -0.17567026615142822, true, Link, 683, 0.0, false, false, -0.17567026615142822, 1, 6\nGene, 47, 0.8128328323364258, true, Link, 684, 0.0, false, false, 0.8128328323364258, 6, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.7369576692581177, true, Link, 695, 0.0, false, false, -0.7369576692581177, 1, 2\nGene, 43, 0.6672573089599609, true, Link, 696, 0.0, false, false, 0.6672573089599609, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 713, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 714, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 715, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 716, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 717, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.49643999338150024, true, Link, 746, 0.0, false, false, 0.49643999338150024, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4714950919151306, true, Link, 753, 0.0, false, false, 0.4714950919151306, 1, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 794, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 795, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 796, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 797, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 798, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 799, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, 0.018456339836120605, true, Link, 844, 0.0, false, false, 0.018456339836120605, 2, 3\nGene, 21, -0.06704694032669067, true, Link, 845, 0.0, false, false, -0.06704694032669067, 1, 4\nGene, 28, 0.11384767293930054, true, Link, 846, 0.0, false, false, 0.11384767293930054, 1, 5\nGene, 31, 0.5835185050964355, true, Link, 847, 0.0, false, false, 0.5835185050964355, 4, 5\nGene, 35, 0.4916512966156006, true, Link, 848, 0.0, false, false, 0.4916512966156006, 1, 6\nGene, 43, -0.043931543827056885, true, Link, 849, 0.0, false, false, -0.043931543827056885, 2, 7\nGene, 44, -0.5604459643363953, true, Link, 850, 0.0, false, false, -0.5604459643363953, 3, 7\nGene, 47, 0.5101136565208435, true, Link, 851, 0.0, false, false, 0.5101136565208435, 6, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.4839916229248047, true, Link, 870, 0.0, false, false, 0.4839916229248047, 1, 2\nGene, 42, 0.2852809429168701, true, Link, 871, 0.0, false, false, 0.2852809429168701, 1, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6666633486747742, true, Link, 876, 0.0, false, false, 0.6666633486747742, 1, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 895, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 896, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7803419828414917, true, Link, 901, 0.0, false, false, -0.7803419828414917, 1, 7\n\n>END ORGANISMS<\n\nSpecies, 1, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 0\n\nSpecies, 2, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 1, 20\n\nSpecies, 3, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 2, 5, 9, 10, 11, 12, 18, 34, 49\n\nSpecies, 4, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 3, 13, 14, 21, 26, 28, 38, 42, 43, 47\n\nSpecies, 5, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 4\n\nSpecies, 6, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 6\n\nSpecies, 7, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 7\n\nSpecies, 8, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 8\n\nSpecies, 9, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 15, 25\n\nSpecies, 10, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 16\n\nSpecies, 11, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 17\n\nSpecies, 12, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 19\n\nSpecies, 13, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 22\n\nSpecies, 14, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 23\n\nSpecies, 15, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 24\n\nSpecies, 16, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 27\n\nSpecies, 17, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 29\n\nSpecies, 18, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 30\n\nSpecies, 19, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 31, 46\n\nSpecies, 20, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 32\n\nSpecies, 21, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 33\n\nSpecies, 22, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 35\n\nSpecies, 23, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 36\n\nSpecies, 24, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 37\n\nSpecies, 25, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 39\n\nSpecies, 26, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 40\n\nSpecies, 27, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 41\n\nSpecies, 28, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 44\n\nSpecies, 29, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 45\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 48\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n", "# Population information follows:\n52, 9, 0, 0.85, 0, 31, 0.46399999999999997, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 960, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 961, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 962, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.06806677579879761, false, Link, 966, 0.0, false, false, 0.06806677579879761, 1, 2\nGene, 22, 0.6450504660606384, true, Link, 967, 0.0, false, false, 0.6450504660606384, 2, 4\nGene, 42, 0.24832302331924438, true, Link, 968, 0.0, false, false, 0.24832302331924438, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 971, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 973, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 975, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 977, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.46649229526519775, true, Link, 979, 0.0, false, false, 0.46649229526519775, 1, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7208651900291443, true, Link, 981, 0.0, false, false, -0.7208651900291443, 1, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 983, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 985, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 987, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 989, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 991, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 993, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 995, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 997, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 999, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 1001, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1003, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1005, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1007, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1009, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1011, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1013, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1015, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 1017, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 1018, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1097, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1098, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1101, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1102, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 1021, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 1022, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 1023, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 1027, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 1028, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 904, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 905, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 908, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 909, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 1105, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 1106, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 1109, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 1110, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 1113, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 1114, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 1031, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 1032, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 1033, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 1117, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 1118, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 1119, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1037, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1038, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1041, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1042, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, false, Link, 1045, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1046, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 912, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 913, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 914, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 915, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 916, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 917, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 918, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 919, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 920, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 921, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 932, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 933, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 934, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 935, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 936, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 937, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 938, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 939, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 940, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 941, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 1123, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 1124, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 1048, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 1049, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 1050, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 1051, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 1083, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 1084, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 1085, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 1086, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 1087, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 1088, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 1089, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 1127, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 1128, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 1129, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 1130, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 1131, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 1071, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 1072, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 1073, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 1074, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 1075, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 1076, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 952, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 953, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 956, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 957, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nNode, 8, SIGMOID, NEURON, HIDDEN\nGene, 14, -0.9194443821907043, true, Link, 1056, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, false, Link, 1057, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 1058, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 1059, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 1060, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 1061, 0.0, false, false, 0.539691150188446, 4, 7\nGene, 50, 0.0, true, Link, 1062, 0.0, false, false, 1.0, 3, 8\nGene, 51, 0.0, true, Link, 1063, 0.0, false, false, -0.6613249182701111, 8, 4\n\n>END ORGANISMS<\n\nSpecies, 2, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 0, 1\n\nSpecies, 3, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n\nSpecies, 6, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 25\n\nSpecies, 9, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 26, 27\n\nSpecies, 10, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 28\n\nSpecies, 12, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 29\n\nSpecies, 13, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 30, 31\n\nSpecies, 14, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 32\n\nSpecies, 15, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 33\n\nSpecies, 16, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 34\n\nSpecies, 17, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 35\n\nSpecies, 18, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 36\n\nSpecies, 19, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 37, 38, 39\n\nSpecies, 20, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 40, 41\n\nSpecies, 21, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 42\n\nSpecies, 22, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 43\n\nSpecies, 24, 2, 1, 0.45, 0.45, false\n<Species Orgs>, 44\n\nSpecies, 27, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 45\n\nSpecies, 28, 2, 1, 0.55, 0.55, false\n<Species Orgs>, 46\n\nSpecies, 30, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 47, 48\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 49\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n" }
===========================================================================
utilities.FIO.appendFile(java.nio.file.Path, java.lang.String):::EXIT
utilities.FIO.cSet == orig(utilities.FIO.cSet)
utilities.FIO.cSet.getClass().getName() == orig(utilities.FIO.cSet.getClass().getName())
utilities.FIO.readFinger == orig(utilities.FIO.readFinger)
arg1.toString == orig(arg1.toString)
arg1.toString one of { "# Population information follows:\n50, 8, 0, 0.0, 0, 30, 0.0, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.717292308807373, true, Link, 14, 0.0, false, false, -0.717292308807373, 1, 2\nGene, 14, 0.1983301043510437, true, Link, 15, 0.0, false, false, 0.1983301043510437, 1, 3\nGene, 43, 0.6492539644241333, true, Link, 16, 0.0, false, false, 0.6492539644241333, 2, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.08258217573165894, true, Link, 29, 0.0, false, false, -0.08258217573165894, 1, 2\nGene, 22, 0.18210095167160034, true, Link, 30, 0.0, false, false, 0.18210095167160034, 2, 4\nGene, 42, -0.8264488577842712, true, Link, 31, 0.0, false, false, -0.8264488577842712, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7149022817611694, true, Link, 50, 0.0, false, false, -0.7149022817611694, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 55, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.9194443821907043, true, Link, 82, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, true, Link, 83, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 84, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 85, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 86, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 87, 0.0, false, false, 0.539691150188446, 4, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 100, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 143, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 144, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.6832627654075623, true, Link, 157, 0.0, false, false, -0.6832627654075623, 1, 5\nGene, 46, 0.854897141456604, true, Link, 158, 0.0, false, false, 0.854897141456604, 5, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.3185303807258606, true, Link, 163, 0.0, false, false, -0.3185303807258606, 1, 2\nGene, 39, -0.30332618951797485, true, Link, 164, 0.0, false, false, -0.30332618951797485, 5, 6\nGene, 43, 0.2281017303466797, true, Link, 165, 0.0, false, false, 0.2281017303466797, 2, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 172, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2728215456008911, true, Link, 175, 0.0, false, false, -0.2728215456008911, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.07785695791244507, true, Link, 180, 0.0, false, false, -0.07785695791244507, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5553820729255676, true, Link, 183, 0.0, false, false, -0.5553820729255676, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 186, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 189, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 194, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 195, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 216, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 217, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 218, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.029299497604370117, true, Link, 227, 0.0, false, false, -0.029299497604370117, 1, 2\nGene, 29, -0.7627831697463989, true, Link, 228, 0.0, false, false, -0.7627831697463989, 2, 5\nGene, 43, 0.5649425387382507, true, Link, 229, 0.0, false, false, 0.5649425387382507, 2, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.20184582471847534, true, Link, 236, 0.0, false, false, -0.20184582471847534, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 247, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 248, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 263, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 264, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 265, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 274, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 281, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 282, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 289, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 290, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 323, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 324, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.05779367685317993, true, Link, 339, 0.0, false, false, 0.05779367685317993, 1, 2\nGene, 42, -0.07745212316513062, true, Link, 340, 0.0, false, false, -0.07745212316513062, 1, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 365, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 374, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 375, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6425018906593323, true, Link, 386, 0.0, false, false, 0.6425018906593323, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 419, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 420, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 421, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 450, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 451, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 452, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 463, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 464, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 525, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 526, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 527, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 528, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 529, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 530, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 531, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 532, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 533, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 534, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 557, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 558, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7482502460479736, true, Link, 585, 0.0, false, false, -0.7482502460479736, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 590, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 591, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 592, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 593, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.5206215977668762, true, Link, 618, 0.0, false, false, -0.5206215977668762, 1, 2\nGene, 43, 0.3696298599243164, true, Link, 619, 0.0, false, false, 0.3696298599243164, 2, 7\nGene, 45, 0.9405050873756409, true, Link, 620, 0.0, false, false, 0.9405050873756409, 4, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.45, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 645, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 646, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 647, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 648, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 649, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 650, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 651, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.42423272132873535, true, Link, 666, 0.0, false, false, 0.42423272132873535, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 35, -0.17567026615142822, true, Link, 683, 0.0, false, false, -0.17567026615142822, 1, 6\nGene, 47, 0.8128328323364258, true, Link, 684, 0.0, false, false, 0.8128328323364258, 6, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.7369576692581177, true, Link, 695, 0.0, false, false, -0.7369576692581177, 1, 2\nGene, 43, 0.6672573089599609, true, Link, 696, 0.0, false, false, 0.6672573089599609, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 713, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 714, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 715, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 716, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 717, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.49643999338150024, true, Link, 746, 0.0, false, false, 0.49643999338150024, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4714950919151306, true, Link, 753, 0.0, false, false, 0.4714950919151306, 1, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.55, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 794, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 795, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 796, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 797, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 798, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 799, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.1, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, 0.018456339836120605, true, Link, 844, 0.0, false, false, 0.018456339836120605, 2, 3\nGene, 21, -0.06704694032669067, true, Link, 845, 0.0, false, false, -0.06704694032669067, 1, 4\nGene, 28, 0.11384767293930054, true, Link, 846, 0.0, false, false, 0.11384767293930054, 1, 5\nGene, 31, 0.5835185050964355, true, Link, 847, 0.0, false, false, 0.5835185050964355, 4, 5\nGene, 35, 0.4916512966156006, true, Link, 848, 0.0, false, false, 0.4916512966156006, 1, 6\nGene, 43, -0.043931543827056885, true, Link, 849, 0.0, false, false, -0.043931543827056885, 2, 7\nGene, 44, -0.5604459643363953, true, Link, 850, 0.0, false, false, -0.5604459643363953, 3, 7\nGene, 47, 0.5101136565208435, true, Link, 851, 0.0, false, false, 0.5101136565208435, 6, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.4839916229248047, true, Link, 870, 0.0, false, false, 0.4839916229248047, 1, 2\nGene, 42, 0.2852809429168701, true, Link, 871, 0.0, false, false, 0.2852809429168701, 1, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.65, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.6666633486747742, true, Link, 876, 0.0, false, false, 0.6666633486747742, 1, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.85, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 895, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 896, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.35, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7803419828414917, true, Link, 901, 0.0, false, false, -0.7803419828414917, 1, 7\n\n>END ORGANISMS<\n\nSpecies, 1, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 0\n\nSpecies, 2, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 1, 20\n\nSpecies, 3, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 2, 5, 9, 10, 11, 12, 18, 34, 49\n\nSpecies, 4, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 3, 13, 14, 21, 26, 28, 38, 42, 43, 47\n\nSpecies, 5, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 4\n\nSpecies, 6, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 6\n\nSpecies, 7, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 7\n\nSpecies, 8, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 8\n\nSpecies, 9, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 15, 25\n\nSpecies, 10, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 16\n\nSpecies, 11, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 17\n\nSpecies, 12, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 19\n\nSpecies, 13, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 22\n\nSpecies, 14, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 23\n\nSpecies, 15, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 24\n\nSpecies, 16, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 27\n\nSpecies, 17, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 29\n\nSpecies, 18, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 30\n\nSpecies, 19, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 31, 46\n\nSpecies, 20, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 32\n\nSpecies, 21, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 33\n\nSpecies, 22, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 35\n\nSpecies, 23, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 36\n\nSpecies, 24, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 37\n\nSpecies, 25, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 39\n\nSpecies, 26, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 40\n\nSpecies, 27, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 41\n\nSpecies, 28, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 44\n\nSpecies, 29, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 45\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 48\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n", "# Population information follows:\n52, 9, 0, 0.85, 0, 31, 0.46399999999999997, 50, 0.0, 0.0, 0\n# Organism data format follows:\n# 'Organism', ID, champion, eliminate, error, expected_offspring, fitness, generation, high_fit, mate_baby, mut_struct_baby, orig_fitness, pop_champ, pop_champ_child, super_champ_offspring, winner, checkout\n#    + Genome\n\nOrganism, 0, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.14668864011764526, true, Link, 960, 0.0, false, false, 0.14668864011764526, 1, 2\nGene, 22, 0.30768412351608276, true, Link, 961, 0.0, false, false, 0.30768412351608276, 2, 4\nGene, 42, 0.969582736492157, true, Link, 962, 0.0, false, false, 0.969582736492157, 1, 7\n\nOrganism, 1, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.06806677579879761, false, Link, 966, 0.0, false, false, 0.06806677579879761, 1, 2\nGene, 22, 0.6450504660606384, true, Link, 967, 0.0, false, false, 0.6450504660606384, 2, 4\nGene, 42, 0.24832302331924438, true, Link, 968, 0.0, false, false, 0.24832302331924438, 1, 7\n\nOrganism, 2, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.2598400115966797, true, Link, 971, 0.0, false, false, 0.2598400115966797, 1, 7\n\nOrganism, 3, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 973, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 4, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 975, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 5, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5693936347961426, true, Link, 977, 0.0, false, false, -0.5693936347961426, 1, 7\n\nOrganism, 6, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.46649229526519775, true, Link, 979, 0.0, false, false, 0.46649229526519775, 1, 7\n\nOrganism, 7, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.7208651900291443, true, Link, 981, 0.0, false, false, -0.7208651900291443, 1, 7\n\nOrganism, 8, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.5001235008239746, true, Link, 983, 0.0, false, false, -0.5001235008239746, 1, 7\n\nOrganism, 9, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 985, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 10, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 987, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 11, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 989, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 12, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 991, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 13, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.4822087287902832, true, Link, 993, 0.0, false, false, 0.4822087287902832, 1, 7\n\nOrganism, 14, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 995, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 15, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 997, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 16, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 999, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 17, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.35195934772491455, true, Link, 1001, 0.0, false, false, 0.35195934772491455, 1, 7\n\nOrganism, 18, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1003, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 19, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1005, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 20, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1007, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 21, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1009, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 22, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.3732588291168213, true, Link, 1011, 0.0, false, false, 0.3732588291168213, 1, 7\n\nOrganism, 23, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.34394824504852295, true, Link, 1013, 0.0, false, false, 0.34394824504852295, 1, 7\n\nOrganism, 24, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.5496545433998108, true, Link, 1015, 0.0, false, false, 0.5496545433998108, 1, 7\n\nOrganism, 25, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, 0.980894923210144, true, Link, 1017, 0.0, false, false, 0.980894923210144, 1, 7\nGene, 44, -0.5501809120178223, true, Link, 1018, 0.0, false, false, -0.5501809120178223, 3, 7\n\nOrganism, 26, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1097, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1098, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 27, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, -0.8618932962417603, true, Link, 1101, 0.0, false, false, -0.8618932962417603, 1, 2\nGene, 42, -0.6407424211502075, true, Link, 1102, 0.0, false, false, -0.6407424211502075, 1, 7\n\nOrganism, 28, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8846521973609924, true, Link, 1021, 0.0, false, false, -0.8846521973609924, 2, 3\nGene, 28, -0.8942457437515259, true, Link, 1022, 0.0, false, false, -0.8942457437515259, 1, 5\nGene, 42, 0.5971726775169373, true, Link, 1023, 0.0, false, false, 0.5971726775169373, 1, 7\n\nOrganism, 29, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 28, -0.37556707859039307, true, Link, 1027, 0.0, false, false, -0.37556707859039307, 1, 5\nGene, 42, 0.9333183169364929, true, Link, 1028, 0.0, false, false, 0.9333183169364929, 1, 7\n\nOrganism, 30, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 904, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 905, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 31, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.05602741241455078, true, Link, 908, 0.0, false, false, -0.05602741241455078, 1, 4\nGene, 45, -0.5620343089103699, true, Link, 909, 0.0, false, false, -0.5620343089103699, 4, 7\n\nOrganism, 32, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 23, -0.7975105047225952, true, Link, 1105, 0.0, false, false, -0.7975105047225952, 3, 4\nGene, 42, -0.32000017166137695, true, Link, 1106, 0.0, false, false, -0.32000017166137695, 1, 7\n\nOrganism, 33, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 42, -0.2860126495361328, true, Link, 1109, 0.0, false, false, -0.2860126495361328, 1, 7\nGene, 43, -0.14478445053100586, true, Link, 1110, 0.0, false, false, -0.14478445053100586, 2, 7\n\nOrganism, 34, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 22, 0.8610668778419495, true, Link, 1113, 0.0, false, false, 0.8610668778419495, 2, 4\nGene, 42, -0.1929863691329956, true, Link, 1114, 0.0, false, false, -0.1929863691329956, 1, 7\n\nOrganism, 35, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 30, 0.459944486618042, true, Link, 1031, 0.0, false, false, 0.459944486618042, 3, 5\nGene, 42, 0.9136521816253662, true, Link, 1032, 0.0, false, false, 0.9136521816253662, 1, 7\nGene, 44, -0.15466845035552979, true, Link, 1033, 0.0, false, false, -0.15466845035552979, 3, 7\n\nOrganism, 36, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 15, -0.8580699563026428, true, Link, 1117, 0.0, false, false, -0.8580699563026428, 2, 3\nGene, 42, -0.39245033264160156, true, Link, 1118, 0.0, false, false, -0.39245033264160156, 1, 7\nGene, 43, -0.07453709840774536, true, Link, 1119, 0.0, false, false, -0.07453709840774536, 2, 7\n\nOrganism, 37, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1037, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1038, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 38, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, true, Link, 1041, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1042, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 39, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.7981333136558533, false, Link, 1045, 0.0, false, false, 0.7981333136558533, 1, 2\nGene, 42, 0.7519705295562744, true, Link, 1046, 0.0, false, false, 0.7519705295562744, 1, 7\n\nOrganism, 40, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 912, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 913, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 914, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 915, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 916, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 917, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 918, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 919, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 920, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 921, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 41, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.12991666793823242, true, Link, 932, 0.0, false, false, 0.12991666793823242, 1, 2\nGene, 14, -0.31157124042510986, true, Link, 933, 0.0, false, false, -0.31157124042510986, 1, 3\nGene, 15, 0.10737359523773193, true, Link, 934, 0.0, false, false, 0.10737359523773193, 2, 3\nGene, 23, -0.4917745590209961, true, Link, 935, 0.0, false, false, -0.4917745590209961, 3, 4\nGene, 29, -0.6277919411659241, true, Link, 936, 0.0, false, false, -0.6277919411659241, 2, 5\nGene, 30, -0.31411200761795044, true, Link, 937, 0.0, false, false, -0.31411200761795044, 3, 5\nGene, 37, -0.6069355010986328, true, Link, 938, 0.0, false, false, -0.6069355010986328, 3, 6\nGene, 39, 0.6115352511405945, true, Link, 939, 0.0, false, false, 0.6115352511405945, 5, 6\nGene, 42, -0.17132800817489624, true, Link, 940, 0.0, false, false, -0.17132800817489624, 1, 7\nGene, 43, -0.85494464635849, true, Link, 941, 0.0, false, false, -0.85494464635849, 2, 7\n\nOrganism, 42, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 36, 0.25132256746292114, true, Link, 1123, 0.0, false, false, 0.25132256746292114, 2, 6\nGene, 42, -0.7499359250068665, true, Link, 1124, 0.0, false, false, -0.7499359250068665, 1, 7\n\nOrganism, 43, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, -0.11598807573318481, true, Link, 1048, 0.0, false, false, -0.11598807573318481, 1, 3\nGene, 42, 0.3600207567214966, true, Link, 1049, 0.0, false, false, 0.3600207567214966, 1, 7\nGene, 45, -0.10958021879196167, true, Link, 1050, 0.0, false, false, -0.10958021879196167, 4, 7\nGene, 47, -0.15370917320251465, true, Link, 1051, 0.0, false, false, -0.15370917320251465, 6, 7\n\nOrganism, 44, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.9502725005149841, true, Link, 1083, 0.0, false, false, -0.9502725005149841, 1, 4\nGene, 22, 0.6052643656730652, true, Link, 1084, 0.0, false, false, 0.6052643656730652, 2, 4\nGene, 23, -0.6490944623947144, true, Link, 1085, 0.0, false, false, -0.6490944623947144, 3, 4\nGene, 42, 0.6921048164367676, true, Link, 1086, 0.0, false, false, 0.6921048164367676, 1, 7\nGene, 43, 0.7825374603271484, true, Link, 1087, 0.0, false, false, 0.7825374603271484, 2, 7\nGene, 44, -0.03773254156112671, true, Link, 1088, 0.0, false, false, -0.03773254156112671, 3, 7\nGene, 45, 0.3832792639732361, true, Link, 1089, 0.0, false, false, 0.3832792639732361, 4, 7\n\nOrganism, 45, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 21, -0.4360460638999939, true, Link, 1127, 0.0, false, false, -0.4360460638999939, 1, 4\nGene, 29, -0.19744545221328735, true, Link, 1128, 0.0, false, false, -0.19744545221328735, 2, 5\nGene, 36, 0.4147331714630127, true, Link, 1129, 0.0, false, false, 0.4147331714630127, 2, 6\nGene, 37, -0.5876519680023193, true, Link, 1130, 0.0, false, false, -0.5876519680023193, 3, 6\nGene, 42, -0.688992440700531, true, Link, 1131, 0.0, false, false, -0.688992440700531, 1, 7\n\nOrganism, 46, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 14, 0.42286425828933716, true, Link, 1071, 0.0, false, false, 0.42286425828933716, 1, 3\nGene, 15, 0.3287163972854614, true, Link, 1072, 0.0, false, false, 0.3287163972854614, 2, 3\nGene, 21, -0.5753845572471619, true, Link, 1073, 0.0, false, false, -0.5753845572471619, 1, 4\nGene, 22, 0.3019465208053589, true, Link, 1074, 0.0, false, false, 0.3019465208053589, 2, 4\nGene, 42, -0.9955231547355652, true, Link, 1075, 0.0, false, false, -0.9955231547355652, 1, 7\nGene, 44, -0.7049606442451477, true, Link, 1076, 0.0, false, false, -0.7049606442451477, 3, 7\n\nOrganism, 47, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 952, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 953, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 48, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, false, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nGene, 7, 0.943003237247467, true, Link, 956, 0.0, false, false, 0.943003237247467, 1, 2\nGene, 43, -0.3041144013404846, true, Link, 957, 0.0, false, false, -0.3041144013404846, 2, 7\n\nOrganism, 49, false, false, 0.0, 0.0, 0.0, 1, 0.0, false, true, 0.0, false, false, 0, false, false\nNode, 1, SIGMOID, SENSOR, BIAS\nNode, 2, SIGMOID, NEURON, HIDDEN\nNode, 3, SIGMOID, NEURON, HIDDEN\nNode, 4, SIGMOID, NEURON, HIDDEN\nNode, 5, SIGMOID, NEURON, HIDDEN\nNode, 6, SIGMOID, NEURON, HIDDEN\nNode, 7, SIGMOID, NEURON, OUTPUT\nNode, 8, SIGMOID, NEURON, HIDDEN\nGene, 14, -0.9194443821907043, true, Link, 1056, 0.0, false, false, -0.9194443821907043, 1, 3\nGene, 23, -0.6613249182701111, false, Link, 1057, 0.0, false, false, -0.6613249182701111, 3, 4\nGene, 35, -0.8947228789329529, true, Link, 1058, 0.0, false, false, -0.8947228789329529, 1, 6\nGene, 36, -0.2015223503112793, true, Link, 1059, 0.0, false, false, -0.2015223503112793, 2, 6\nGene, 42, 0.6392595767974854, true, Link, 1060, 0.0, false, false, 0.6392595767974854, 1, 7\nGene, 45, 0.539691150188446, true, Link, 1061, 0.0, false, false, 0.539691150188446, 4, 7\nGene, 50, 0.0, true, Link, 1062, 0.0, false, false, 1.0, 3, 8\nGene, 51, 0.0, true, Link, 1063, 0.0, false, false, -0.6613249182701111, 8, 4\n\n>END ORGANISMS<\n\nSpecies, 2, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 0, 1\n\nSpecies, 3, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n\nSpecies, 6, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 25\n\nSpecies, 9, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 26, 27\n\nSpecies, 10, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 28\n\nSpecies, 12, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 29\n\nSpecies, 13, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 30, 31\n\nSpecies, 14, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 32\n\nSpecies, 15, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 33\n\nSpecies, 16, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 34\n\nSpecies, 17, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 35\n\nSpecies, 18, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 36\n\nSpecies, 19, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 37, 38, 39\n\nSpecies, 20, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 40, 41\n\nSpecies, 21, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 42\n\nSpecies, 22, 2, 1, 0.65, 0.65, false\n<Species Orgs>, 43\n\nSpecies, 24, 2, 1, 0.45, 0.45, false\n<Species Orgs>, 44\n\nSpecies, 27, 2, 1, 0.35, 0.35, false\n<Species Orgs>, 45\n\nSpecies, 28, 2, 1, 0.55, 0.55, false\n<Species Orgs>, 46\n\nSpecies, 30, 2, 1, 0.85, 0.85, false\n<Species Orgs>, 47, 48\n\nSpecies, 30, 1, 0, 0.0, 0.0, false\n<Species Orgs>, 49\n\n\n>END SPECIES<\n\n\n>END INNOVATIONS<\n\n" }
return == false
===========================================================================
utilities.FIO.appendFile(java.nio.file.Path, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
utilities.FIO.newFile(java.lang.String):::ENTER
arg0.toString one of { "src/saves/pop1.txt", "src/saves/pop2.txt" }
===========================================================================
utilities.FIO.newFile(java.lang.String):::EXIT78
===========================================================================
utilities.FIO.newFile(java.lang.String):::EXIT
utilities.FIO.cSet == orig(utilities.FIO.cSet)
utilities.FIO.cSet.getClass().getName() == orig(utilities.FIO.cSet.getClass().getName())
utilities.FIO.readFinger == orig(utilities.FIO.readFinger)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "src/saves/pop1.txt", "src/saves/pop2.txt" }
return == null
===========================================================================
utilities.FIO.overwriteFile(java.nio.file.Path, java.lang.String):::ENTER
arg0.getClass().getName() == sun.nio.fs.UnixPath.class
arg1.toString == "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n"
===========================================================================
utilities.FIO.overwriteFile(java.nio.file.Path, java.lang.String):::EXIT
utilities.FIO.cSet == orig(utilities.FIO.cSet)
utilities.FIO.cSet.getClass().getName() == orig(utilities.FIO.cSet.getClass().getName())
utilities.FIO.readFinger == orig(utilities.FIO.readFinger)
arg1.toString == orig(arg1.toString)
arg1.toString == "# Population data format follows:\n# cur_innov_num, cur_node_id, final_gen, highest_fitness, highest_last_changed, last_species, mean_fitness, population_size, standard_deviation, variance, winnergen\n#    + All Organisms\n#    + All Species\n#    + All Innovations\n"
return == false
===========================================================================
utilities.FIO.overwriteFile(java.nio.file.Path, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
utilities.MersenneTwister:::CLASS
===========================================================================
utilities.MersenneTwister:::OBJECT
this has only one value
this.mag01[] == [0, -1727483681]
this.mag01[] elements one of { -1727483681, 0 }
this.mag01[] sorted by >
this.__nextNextGaussian == 0.0
this.__haveNextNextGaussian == false
size(this.mt[]) == 624
size(this.mag01[]) == 2
===========================================================================
utilities.MersenneTwister.MersenneTwister():::EXIT
this.mt has only one value
this.mt[] == [163948990, 1862575607, -1688199152, 915687709, 527195509, 1308064814, 1835148689, 1958928855, -795304074, -1312848334, -1968201478, -1154008605, -336970031, -1094243609, -1563723417, 201388520, -1154705256, -629629229, -700188638, -1652453864, 1407122006, -145599640, 235678797, -1063407752, 293342879, -1004676140, 290376429, -2027297636, -1489911694, 430758989, 624107391, 2038391866, -1115480473, 1623329530, 894150697, 1760971088, 1671317017, 194805661, 240410135, 340028986, 429033226, 1784258843, 1279883628, -1192018644, 938918226, 51193735, 1191761777, -438833313, -1731351684, 844961511, -1001609131, 1521381409, -1313645356, -364108125, -1089020586, 499336795, -1892780769, -909395542, 56275175, 633629278, -1812183726, 147794125, -265564641, -1520874165, -275345651, -363401529, 829364118, -510815119, -395668674, 2105719894, 1438637465, -1318009537, 2075555417, -793130751, 485253140, -113730513, 1948068264, -630464262, 449053579, 839371046, 1874965070, -201285508, -1852028563, -335650786, 429289669, -870913266, -1305497225, 150708352, -1750412584, -47064485, -1427358446, 1196533675, 597106798, 905750979, 1809667405, 1712083803, 451808482, -1224865909, 620776047, -1644444370, 84760256, -2131756507, -1768058679, 1479787390, 1820596355, 80297395, -917560567, -213963427, -1396296574, -1412745491, -602172487, 453366481, -1227553307, -1081805932, -1494654816, -1153969571, -1858873617, -470572810, 318021151, -906364494, -166314931, -1959950017, -1005335925, -588664797, -2007786212, 2078542675, -767206952, -345004314, -811571751, -2118133373, 983423335, -9444058, -2000079587, 749243584, -1424865210, -255924389, -1735958976, 178750099, 1862021001, 1806076211, 1887298374, -348345712, -197331059, -1452627563, 1123530787, 1580455931, 1222574132, 1955230332, -280031003, 948355411, -1209749163, 2105706218, 857734735, -1830773564, -135409480, -1364955806, 1661437820, -1981457938, 705676986, -257363455, -768045718, 1574697998, -99124851, 1982985129, -424539668, 1696060144, 316682939, -1263069330, 2075724356, 979565282, 897445332, 1874938191, 1889446514, -2064266484, 1946524468, 1622710680, -1305052403, 683840668, 378543678, 45948201, 1633055457, 1320497941, -614540390, -585071340, -55651893, 1538575521, 137780186, -812652611, 1694309554, -1726144932, 2052016596, -1868685624, -1134411662, -363897615, -1934938564, -2030408391, 635350027, 1933100060, 1864623415, 458052885, 1469959953, 1854030361, 1030417474, -1049851691, 1793491770, 63527444, 640761522, 987299593, 492269661, -1389618558, -1508575918, 851220835, -399278109, 719344693, -1593534785, -693789080, -905198577, 1860355477, -230676418, -1098676756, -1642973758, -1808599651, -1998192743, 2042940422, -469418333, -84584959, 2145386924, 1543585572, 1296807805, 1484046545, 1726964470, -1591133350, 1701741216, -1494699154, -641231226, -185692060, -1271457649, -1111808626, 415350058, 1456544897, -264192144, 807736400, 615502978, 967207485, 1898811397, -1456998775, -2122209075, 1831297442, -1824603833, 303246898, -1062732620, 92644398, -1747426014, -94501219, -285922476, 1582082386, -534693441, 421880877, -1483236413, -277758680, -1505188357, 290110786, -695009776, 1216047494, 2061165131, 58384955, 908711249, -1025473792, -507163589, 1579748133, -1692161470, -219255729, 1981376268, 2105974322, 1747629617, 799642115, -820037821, -291369643, -2073277948, -1065325707, 1684442278, -900997636, 263523765, -759740796, 415109983, 385121432, 1833599254, 958086706, -412726054, -1335135298, -1787279794, 1378248991, 2134542330, 549059116, -680181630, -263291636, -1890754797, -1226990626, -790938890, -1312923436, -272057446, -1278876278, 2074171350, 965392386, -801002502, 247470958, -931483240, 11601498, 649309366, -313881853, 1338759222, -1348289046, 1949177280, -2078679202, -499032954, -504385868, 1662049903, -1716346717, -1948874301, 732144484, 1908145076, -1227805526, 704939914, -317172555, -1461136622, -1036069227, 1773858932, -1331528592, 600972354, 819099987, 993806857, 1957103576, 738736873, -1356533702, 262717286, -1077208435, 1782645435, 1093770931, -1252073588, 1492333145, -1102318068, 1560777435, -1115055272, -1562151463, -1697860673, 1159598058, -288486383, 1748919925, 1117684000, -1886741406, -1778445506, -2054048757, 1679022573, -1595390083, 1382034813, -2035462321, -1997832251, 2126244328, 1102052179, -1893004607, 336763735, -740697668, -1296883515, 916942574, -1695669422, 1208598525, 863673306, 666708081, -1352896763, -1542222284, -565443904, -1194560670, -100145580, -540839736, -1727716211, 1937831138, 186849799, -671611588, -1469986219, 4089038, 640812226, -812272633, -1618859246, -2066313521, -1632826015, 1478837392, -1000560713, -1808171129, -661619203, 1583391931, -312571672, 536791358, -1578527490, 1153869045, -481187378, -2085505940, 1705840370, -1494486420, 685081844, -217052717, 2135175328, -195798506, -602945317, -492972341, 531547772, -980374399, -302800160, 2071969830, -867389445, 339027569, 597796143, -394963930, 1767178549, 77221665, 2065752739, -1213194871, 722996343, 1785306004, -1660936085, 826539024, 1982268404, -164254130, 495975175, -2007643542, 469927088, 1188072217, 2019473954, 166800506, -1404446770, 1949454633, -580882826, 1398485720, -1591725491, -2134302244, 126626888, -1812463077, -1264109935, 1144140980, -1829328353, -551181272, -807286353, -323641707, 866113768, -1216561853, -1102744223, 921586892, 1555135034, -938750458, -66324807, 249029411, 1571772817, 812947, -2124969533, 277390314, -653859048, 119775854, -1140984530, 1469728805, 1232452606, -1257790362, 834232640, 2079236109, 153064074, -1197036479, 96916287, 154603692, 525967790, 698673529, 491839377, 562286346, -1542255928, 1875860873, 76918912, -1107090343, 137301185, 766137088, 1872609500, -142713330, 1401623039, 141625621, -301476823, -1631113101, 1016698743, 1927836374, -1827971145, 329752910, -946379860, 1356594418, 265148615, 1185548140, 252265707, -352914014, -2142694543, -1000195764, -258677479, -720416975, -2100690262, -1481181639, -1265518023, 902106682, -2030982954, -1635970663, 1426122525, 650980355, -1818953177, 1722253202, -1537211911, 751639810, 343967174, 246791963, -1363748187, 934847714, -1505492694, -443883831, 814350772, -45612537, 882438552, 1422502653, 1559581554, -1030260378, -1015221279, 33434675, -2007778007, -378362110, 1923247729, 1816101949, -1602795078, -913600601, 1365930436, 1313100234, 1363601961, 1264700379, -1633478378, -28271879, 764604600, -757894481, 142494708, -198865571, -250997200, -1639903430, 1264057140, 160987910, 1210630524, 1309359472, 677886133, -608715126, 104103727, -653306194, 858442085, 862684158, -1761606820, 1415619645, -811013676, 1806258940, 404890875, -1306530766, 290316572, 2029375033, -2015472058, -1564578045, -1819257195, -2006320444, -328341424, 1995838962, -1099254253, -128978966, -1706272221, 524433980, -1376839708, 1114146295, -1800961464, 316015469, 171946301, -1247439794, 1690579002, -187458426, 971173817, -488532162, 463163987, 1201334274, -1034148237, 1274879093, 641880074, -45813703, -631778518, 918962806, 1325621464, 756570344, 545734100, 1446894321, 1562497790, 825997290, 560057250, 1794968379, 1735227956, 403347004, -1841863680, -395474657, -514124190, 814792604, -1393944860, 652615959, 471949165, -1925776036, -1176811918, -649806707, -1863818140, 1345598621, -721141780, -462609748, 1298618477, -754208513, -1405636144, 887131199, 1901989441, 1937498535, 254533350, -1763571417, 1511353091, -976925643, 2048522682, -889086924, 1841107745, -2135642609]
this.mti == 624
this.mag01 has only one value
===========================================================================
utilities.MersenneTwister.MersenneTwister(long):::ENTER
arg0 == 1743920671166L
===========================================================================
utilities.MersenneTwister.MersenneTwister(long):::EXIT
this.mt has only one value
this.mt[] == [163948990, 1862575607, -1688199152, 915687709, 527195509, 1308064814, 1835148689, 1958928855, -795304074, -1312848334, -1968201478, -1154008605, -336970031, -1094243609, -1563723417, 201388520, -1154705256, -629629229, -700188638, -1652453864, 1407122006, -145599640, 235678797, -1063407752, 293342879, -1004676140, 290376429, -2027297636, -1489911694, 430758989, 624107391, 2038391866, -1115480473, 1623329530, 894150697, 1760971088, 1671317017, 194805661, 240410135, 340028986, 429033226, 1784258843, 1279883628, -1192018644, 938918226, 51193735, 1191761777, -438833313, -1731351684, 844961511, -1001609131, 1521381409, -1313645356, -364108125, -1089020586, 499336795, -1892780769, -909395542, 56275175, 633629278, -1812183726, 147794125, -265564641, -1520874165, -275345651, -363401529, 829364118, -510815119, -395668674, 2105719894, 1438637465, -1318009537, 2075555417, -793130751, 485253140, -113730513, 1948068264, -630464262, 449053579, 839371046, 1874965070, -201285508, -1852028563, -335650786, 429289669, -870913266, -1305497225, 150708352, -1750412584, -47064485, -1427358446, 1196533675, 597106798, 905750979, 1809667405, 1712083803, 451808482, -1224865909, 620776047, -1644444370, 84760256, -2131756507, -1768058679, 1479787390, 1820596355, 80297395, -917560567, -213963427, -1396296574, -1412745491, -602172487, 453366481, -1227553307, -1081805932, -1494654816, -1153969571, -1858873617, -470572810, 318021151, -906364494, -166314931, -1959950017, -1005335925, -588664797, -2007786212, 2078542675, -767206952, -345004314, -811571751, -2118133373, 983423335, -9444058, -2000079587, 749243584, -1424865210, -255924389, -1735958976, 178750099, 1862021001, 1806076211, 1887298374, -348345712, -197331059, -1452627563, 1123530787, 1580455931, 1222574132, 1955230332, -280031003, 948355411, -1209749163, 2105706218, 857734735, -1830773564, -135409480, -1364955806, 1661437820, -1981457938, 705676986, -257363455, -768045718, 1574697998, -99124851, 1982985129, -424539668, 1696060144, 316682939, -1263069330, 2075724356, 979565282, 897445332, 1874938191, 1889446514, -2064266484, 1946524468, 1622710680, -1305052403, 683840668, 378543678, 45948201, 1633055457, 1320497941, -614540390, -585071340, -55651893, 1538575521, 137780186, -812652611, 1694309554, -1726144932, 2052016596, -1868685624, -1134411662, -363897615, -1934938564, -2030408391, 635350027, 1933100060, 1864623415, 458052885, 1469959953, 1854030361, 1030417474, -1049851691, 1793491770, 63527444, 640761522, 987299593, 492269661, -1389618558, -1508575918, 851220835, -399278109, 719344693, -1593534785, -693789080, -905198577, 1860355477, -230676418, -1098676756, -1642973758, -1808599651, -1998192743, 2042940422, -469418333, -84584959, 2145386924, 1543585572, 1296807805, 1484046545, 1726964470, -1591133350, 1701741216, -1494699154, -641231226, -185692060, -1271457649, -1111808626, 415350058, 1456544897, -264192144, 807736400, 615502978, 967207485, 1898811397, -1456998775, -2122209075, 1831297442, -1824603833, 303246898, -1062732620, 92644398, -1747426014, -94501219, -285922476, 1582082386, -534693441, 421880877, -1483236413, -277758680, -1505188357, 290110786, -695009776, 1216047494, 2061165131, 58384955, 908711249, -1025473792, -507163589, 1579748133, -1692161470, -219255729, 1981376268, 2105974322, 1747629617, 799642115, -820037821, -291369643, -2073277948, -1065325707, 1684442278, -900997636, 263523765, -759740796, 415109983, 385121432, 1833599254, 958086706, -412726054, -1335135298, -1787279794, 1378248991, 2134542330, 549059116, -680181630, -263291636, -1890754797, -1226990626, -790938890, -1312923436, -272057446, -1278876278, 2074171350, 965392386, -801002502, 247470958, -931483240, 11601498, 649309366, -313881853, 1338759222, -1348289046, 1949177280, -2078679202, -499032954, -504385868, 1662049903, -1716346717, -1948874301, 732144484, 1908145076, -1227805526, 704939914, -317172555, -1461136622, -1036069227, 1773858932, -1331528592, 600972354, 819099987, 993806857, 1957103576, 738736873, -1356533702, 262717286, -1077208435, 1782645435, 1093770931, -1252073588, 1492333145, -1102318068, 1560777435, -1115055272, -1562151463, -1697860673, 1159598058, -288486383, 1748919925, 1117684000, -1886741406, -1778445506, -2054048757, 1679022573, -1595390083, 1382034813, -2035462321, -1997832251, 2126244328, 1102052179, -1893004607, 336763735, -740697668, -1296883515, 916942574, -1695669422, 1208598525, 863673306, 666708081, -1352896763, -1542222284, -565443904, -1194560670, -100145580, -540839736, -1727716211, 1937831138, 186849799, -671611588, -1469986219, 4089038, 640812226, -812272633, -1618859246, -2066313521, -1632826015, 1478837392, -1000560713, -1808171129, -661619203, 1583391931, -312571672, 536791358, -1578527490, 1153869045, -481187378, -2085505940, 1705840370, -1494486420, 685081844, -217052717, 2135175328, -195798506, -602945317, -492972341, 531547772, -980374399, -302800160, 2071969830, -867389445, 339027569, 597796143, -394963930, 1767178549, 77221665, 2065752739, -1213194871, 722996343, 1785306004, -1660936085, 826539024, 1982268404, -164254130, 495975175, -2007643542, 469927088, 1188072217, 2019473954, 166800506, -1404446770, 1949454633, -580882826, 1398485720, -1591725491, -2134302244, 126626888, -1812463077, -1264109935, 1144140980, -1829328353, -551181272, -807286353, -323641707, 866113768, -1216561853, -1102744223, 921586892, 1555135034, -938750458, -66324807, 249029411, 1571772817, 812947, -2124969533, 277390314, -653859048, 119775854, -1140984530, 1469728805, 1232452606, -1257790362, 834232640, 2079236109, 153064074, -1197036479, 96916287, 154603692, 525967790, 698673529, 491839377, 562286346, -1542255928, 1875860873, 76918912, -1107090343, 137301185, 766137088, 1872609500, -142713330, 1401623039, 141625621, -301476823, -1631113101, 1016698743, 1927836374, -1827971145, 329752910, -946379860, 1356594418, 265148615, 1185548140, 252265707, -352914014, -2142694543, -1000195764, -258677479, -720416975, -2100690262, -1481181639, -1265518023, 902106682, -2030982954, -1635970663, 1426122525, 650980355, -1818953177, 1722253202, -1537211911, 751639810, 343967174, 246791963, -1363748187, 934847714, -1505492694, -443883831, 814350772, -45612537, 882438552, 1422502653, 1559581554, -1030260378, -1015221279, 33434675, -2007778007, -378362110, 1923247729, 1816101949, -1602795078, -913600601, 1365930436, 1313100234, 1363601961, 1264700379, -1633478378, -28271879, 764604600, -757894481, 142494708, -198865571, -250997200, -1639903430, 1264057140, 160987910, 1210630524, 1309359472, 677886133, -608715126, 104103727, -653306194, 858442085, 862684158, -1761606820, 1415619645, -811013676, 1806258940, 404890875, -1306530766, 290316572, 2029375033, -2015472058, -1564578045, -1819257195, -2006320444, -328341424, 1995838962, -1099254253, -128978966, -1706272221, 524433980, -1376839708, 1114146295, -1800961464, 316015469, 171946301, -1247439794, 1690579002, -187458426, 971173817, -488532162, 463163987, 1201334274, -1034148237, 1274879093, 641880074, -45813703, -631778518, 918962806, 1325621464, 756570344, 545734100, 1446894321, 1562497790, 825997290, 560057250, 1794968379, 1735227956, 403347004, -1841863680, -395474657, -514124190, 814792604, -1393944860, 652615959, 471949165, -1925776036, -1176811918, -649806707, -1863818140, 1345598621, -721141780, -462609748, 1298618477, -754208513, -1405636144, 887131199, 1901989441, 1937498535, 254533350, -1763571417, 1511353091, -976925643, 2048522682, -889086924, 1841107745, -2135642609]
this.mti == 624
this.mag01 has only one value
===========================================================================
utilities.MersenneTwister.next(int):::ENTER
this.mt has only one value
this.mt != null
this.mti >= 1
this.mag01 has only one value
this.mag01 != null
arg0 one of { 24, 31, 32 }
===========================================================================
utilities.MersenneTwister.next(int):::EXIT
this.mt == orig(this.mt)
this.mag01 == orig(this.mag01)
this.mag01[] == orig(this.mag01[])
this.__nextNextGaussian == orig(this.__nextNextGaussian)
this.__haveNextNextGaussian == orig(this.__haveNextNextGaussian)
size(this.mt[]) == orig(size(this.mt[]))
this.mt has only one value
this.mt != null
this.mti >= 1
this.mag01 has only one value
this.mag01 != null
return != 0
this.mti != orig(this.mti)
===========================================================================
utilities.MersenneTwister.nextFloat():::ENTER
this.mt has only one value
this.mt != null
this.mti >= 1
this.mag01 has only one value
this.mag01 != null
===========================================================================
utilities.MersenneTwister.nextFloat():::EXIT
this.mt == orig(this.mt)
this.mag01 == orig(this.mag01)
this.mag01[] == orig(this.mag01[])
this.__nextNextGaussian == orig(this.__nextNextGaussian)
this.__haveNextNextGaussian == orig(this.__haveNextNextGaussian)
size(this.mt[]) == orig(size(this.mt[]))
this.mt has only one value
this.mt != null
this.mti >= 1
this.mag01 has only one value
this.mag01 != null
this.mti != orig(this.mti)
===========================================================================
utilities.MersenneTwister.nextInt(int):::ENTER
this.mt has only one value
this.mt != null
this.mag01 has only one value
this.mag01 != null
===========================================================================
utilities.MersenneTwister.nextInt(int):::EXIT459
this.mt[] == orig(this.mt[])
this.mt[] one of { [-1878217801, -1554670936, 423671659, -1561632658, 1168999890, 1929549554, -509724358, -1532614658, 847644159, 1192208122, 728037319, 577487681, 956438163, 591247280, -1709358995, -651752299, -1796190588, 2086695871, 776416377, 819576221, -1279268639, 906071207, 1644108185, 1777226933, -52345646, 725034673, 762716767, 1474477553, -1933000804, -33182994, 1170191860, 1360613613, 1913503000, -1975056430, 834904110, 1991159275, 791759736, 1166730369, 1804441183, -768701456, 1819481038, 586605995, -386539229, -795751415, -1834367979, -1634406552, 851398144, -1040965363, 1319529492, 1950472978, -417821981, -762661873, -411939046, 1836387421, -1559887930, -1679365121, -1216073219, -1940819316, 1108928054, -1552937037, 738104964, -1387500801, -1468235521, -368968183, 1089353804, 1934382928, 1707505004, 1547631398, -1903893444, 216570887, 88786530, 1244416068, -733985067, 909460113, 834900391, -1305164495, -1740338416, 886549248, 1878946917, -2105325941, 1867774443, 1068290840, 1375427269, -759780969, -1378069562, 14116990, -73525360, 1958221572, 462436842, 1447182708, -1545282450, -1827260327, 556156623, 955495318, -198470456, 1228742417, -925762376, -333608603, 1265451755, -78285005, -1007501333, 572907899, 447111850, -1617883390, -1020518274, 342974764, 1512828940, 478104717, 2067675996, 132278478, -2115930533, -327809120, -1084765203, 1521835486, 219080857, 1800868087, -1243399168, -620650140, 461066448, 1650359475, -250252007, 1797265505, 1869518952, 1257892034, -1723640208, 1883565100, -1858634609, 446602562, -1312429261, -1990422767, 531655442, 1955762096, -94751453, -1270115915, 438790977, 693745435, -1868918669, 647029926, -502208533, -993862038, 134638294, 1702614223, 1978293081, 42449194, 1135320747, -203256673, -1481493597, 1910681805, -727547723, 1597459251, 152462513, 646438278, 2068166232, -106901710, 121021962, -1908817383, -49242582, 1821715692, -994295778, -1486968498, 1795471597, 1001691881, 161161948, 938532913, -1962430345, -211921323, 1683648009, 1279109875, -1895887914, 1159052961, -1754704513, -1607791875, 1936288071, -1918003803, 1736107938, 788581314, -797437784, 1879676924, 1799234793, -1292794780, 2097831411, -2122214715, 1881108098, -1595067822, 1236461436, -1127747095, -1784119534, -1555464326, -1399918908, -1564345123, -2006642466, -550539734, 398379786, 1572575881, -545588828, 1725795734, -1048998338, 1769396990, -531007445, 1940126280, 2070498836, -1933655900, -1674426087, 1355553767, -1455279837, 1816663166, 2009321695, -624834438, 282681468, 1342577487, -518465351, -1004833927, 134179275, -193072070, -659931528, -1826809387, 353647713, 1950391598, 314069220, 1654766137, 2135693048, -9730153, 1056034525, -1058056507, -1897323886, -1167009480, -1026296252, 1280311146, -1828526497, 311304106, -909325072, -1142044494, -1179558971, -447129205, -1386864929, -2040539611, 126900038, 92802106, 1248538196, 1543438929, -1139099715, -1668892906, -1798702831, 1293444103, -520888394, -1962976381, 819796977, -776014701, -1256396470, 1549800954, 1429003194, 82399290, -1989791173, 1738165560, 636509109, 1070448334, -115794685, -527005750, -1219844479, -1509022524, 411858400, -1053518496, 713417701, -10523566, -409567683, -1017306394, 1750341542, 377926333, -1362052807, -1609174039, 1322822518, -1275207473, -787438397, -1982608729, 116306845, 1288318754, -942678718, 661315862, -524267567, -472559714, -363396388, 368818657, 1985952712, 7481394, 1286249702, 2022007941, -1251870005, 2093821358, -768280222, 1891094819, -533888620, 1920427363, 2081601483, -161042746, -984811075, -427044468, -595077511, 672602834, 1448434322, 543889056, -452454487, 1479427484, -1181204010, -24631007, 1117259605, -1921009407, 792559676, 2110443942, 577433751, -829834162, 978956855, -1979228079, -1434955558, 1229230709, 1330409518, -1337960737, -1269919807, -797645021, 1090851765, 664602437, 1128254307, 676915503, -2088861722, 1932499128, -1500824308, 548430047, 697947340, -15503043, 832829004, 872196937, -738312649, 1521557176, 12293093, 169005870, -1191851762, 847451710, -1081381640, 726911926, -1189683005, 78933294, -1129801328, 1216334638, 1340533429, 1817930585, -2100140935, 1281509580, 634025661, -2075836095, -918690303, -1885097418, -883477934, -1216571865, -427211811, 1578320769, -1793371585, -1434534551, 1044777673, 1261623798, -2103199335, -2020924202, 315803355, -179276305, 376648348, -317781059, 1579472551, -570938355, -983021659, 721968385, -674351012, -1136744761, 802564433, 1850648394, 1735949433, -192664130, -939183214, 1483956229, -24745524, -2042443009, 1625781936, 2098848224, -869755181, 900037655, 617182481, -1114969619, -1268588145, -1123921641, 702993402, 185556022, -966199608, 1607740945, 1334210900, 2041550445, 1722232178, -1940424425, -867762955, 775891885, 265054659, -987142839, -1353640085, -800065970, -2069165092, -927543922, -142493128, 971695004, -728858828, -977581034, -1762808753, -1591876430, 133204523, -427565320, 1347022771, 1514250590, 1504673273, 19608195, -300734404, -580395989, 1658709356, -1366235034, 686346645, -380468354, 921996382, 1131650435, -1857671965, 20720677, 1185252085, 740785941, 295115700, 1639987159, -1680054630, -1313687940, -1825829307, 1304341827, 659547487, -1395720610, -180094871, 1379681765, 1326091452, 394813916, -1726380108, 1251106205, 2061193051, 284651368, 614267059, 553497912, -130313536, 1150498125, -1643703983, -1042044472, 378750776, -1732813331, -469842867, -920346317, -883599177, 515067514, 418969770, 682771462, 1462177672, -232341824, 57620442, -1987939279, 2100040581, 579685388, 193534025, -1861052840, -1276674949, 1665739650, -1171705578, 1782365812, -925888637, 2095843877, 1678401671, -478130778, -1985674077, 1451607108, -1796604830, -1344062812, -340757988, 785744157, 421812928, 1105078280, 1557061099, 276817135, -589493817, -786461306, 111227984, 618644657, 1389118606, 1418538037, 2068532446, 1357912453, 1874539151, -101664078, 212278053, 757274669, 1573515645, -72877067, -1450223451, 1086133725, -1781185572, -1946091251, 1438681444, -61705771, -1686336756, -27197454, 1713388101, 754613116, -1909970886, 1202017779, 116063757, 118287782, 760105033, 444935989, -1873756916, 21739012, -756456268, 1589699590, 256173307, -1653844363, 1005091932, -638249729, 2110846416, -1198316276, 2044381252, 1369938281, -1941145831, -980757161, 117626245, -967348711, 1522368497, 1729464546, 1526064828, -572765451, -1070776510, -1651741925, 28721025, 1598794384, 1124170503, 816747199, -821561820, -1493136160, -1200366324, 76973762, -480303338, -278505158, 717329158, -659324176, 1708383717, 919259332, -334788253, -385180613, 1534602281, 1341754874, 2050500665, -1487275201, 66436389, -2026414901, 813091782, -1124996783, 885243360, -1243270288, 164275112, -1052273981, 1587257411, 1518903518, 485209808, 1493311052, -892971300, 1446336184, 1075259521, 1347154306, 694205731, 1497674116, -1907706975, 1689340335, -254315403, 747554972, 1440465549, 45362679, 2023307453, -1101585231, -102489168, 1523612792, -104882527, -1545895892, -624391960, -1378958853, -1754578218, -761505845, 649235315, 1629512174, -339348986, -1244384076, 1209898493, 1596202840, 153232912, 2124466628, 1075758016, 2057555778, -1955834757, -1292468620, 735600448, -1127941402, 1746042629, 139493169, -1143204438, 1414133838, 692638641, -289122812, 2134707122, 1094963105, -1413398166, -999707591, -1340879669, 345175340, -1702092028, 821316436, -1328337726, 1627260152, 396963490, -931144449, 1149608601, 1226287260, 1697291715, -1631417145], [2036726421, 192809702, 1035637815, -1888937842, -1619059143, 792818240, -1895422059, -988055838, -1187765779, 322005920, -802673290, 1957179037, 1353425144, 266505696, -902165431, -1600498273, -41746014, -361689207, 2097050619, -604609451, 335991097, -1321462329, 1170577937, 1255370511, 2120100475, 1726985031, -260538561, -760126549, -890162960, -1495523564, 701598298, -2085819368, -929610026, -1181621560, 579727920, 976532501, 681347223, -1066650677, 50573432, -620589747, -1646731205, -1765467665, -912487421, -1512042126, 646326517, 2079041232, -898680751, 1599855334, -429979967, -91011759, 37699903, 1788353191, 998856608, 1060388425, -1479371004, 1246606764, -1459889798, 731801030, -1929197922, -689056916, 1275090300, -1051103872, -2027914111, 1690394271, -1495391619, -2077516834, -1109973358, -1728770026, -2041302710, -1836602435, -1891086615, -604052711, -1695345299, -103124994, -1461745012, 1204760910, 1538696093, -1109366112, -1025685141, 1252051726, 1558749969, -673853809, -1866675028, -422314019, -776038109, -2063891073, 1702972459, 760041925, -75821661, -874742078, -1260214039, 1893923466, -1539803559, -41924185, -1741648212, -34213851, -638562911, -899031806, -840487706, -1980306583, -1855552279, 329167705, -35833766, 536815783, -882603716, -1841853298, -1809684039, -1901087778, -330075547, 1095137867, -383802903, 103158681, 957804861, 854231146, -265952764, -1661128351, -1140748515, 513981669, -1332096203, -364558666, 559885879, 501628242, -1856631047, 2023838764, 1716493866, 2021458886, 402041500, 152648959, -442579526, 617989003, -1946909705, 583522992, -463930976, 2130215922, -996956805, 1100688264, 2039609975, -1502717867, 1372964625, 902985546, 1326560631, -1039332362, -751154687, 2144792422, 50160387, -1782996365, 1219412622, -2095472542, 1031232457, -1784450241, 243757491, -1459174819, -1463102417, 838160193, -394039121, -1658650641, -577010540, -1575911821, 874071253, -1395649891, -1025746367, -365850023, -112784907, -1426274088, 1589215560, 426681078, 7717790, 1254581337, -396974592, 1126162996, 1548428735, -214399416, -1139635301, 1198611506, -437303402, 1745614611, -429301071, -865005670, 1475260943, -1239024451, -1760726590, 1170660299, -1062365088, 161203629, 280139947, 1519119613, 578918832, 1447366843, 1725396897, -926467279, 1244101005, -750011972, 1531337578, 918933157, -432375590, 635311524, -2040901602, -2091492995, 1610487158, 2047507885, 349147185, 1348512501, -861267708, -926048888, 563322171, 1272408768, 194448684, 470989825, -1192728127, 1472839084, -1062769447, 560208265, 59106734, 395209917, -859806965, -394600724, 1409705165, 510529458, 491888900, 894369729, 1224876227, 648472002, -1019815522, 1173978758, 1587521728, 1756006877, -2054807382, -1679797105, 177719301, 1622079982, -1751297662, -699442884, -829293697, 662109137, 160350562, 333476418, -610089461, 20964216, -572917766, -805184982, 1174022532, 207577509, -1925714186, -1679955192, 29439161, 188103085, 2069990987, -2146874152, 1140996324, 875276901, 2067667142, -108716514, 1107380335, -156022613, -1780949298, 1680198792, 1411080987, 238645210, -129825341, -21590681, 437670407, -1752726053, -738260189, -1202283492, 315437035, 1982354631, 1672480973, -958113517, 1978352358, -1436690277, 297805204, 243511105, -1029158476, 520656726, -993498895, 1009009823, 81299052, -720540385, 854963797, 1687549884, 156107016, 1012235453, -538055183, 1768079825, -570600927, 870759787, 1966802278, -1406932240, -1368951212, -17750214, 59228679, 341376826, 1697823326, 515752246, 357619435, -2131401591, -803312800, 315618627, 1522252128, -1192090196, -632831659, -1804874801, 1406904438, -1755772466, -845593502, -325101398, 1997732727, 1768746193, 624054426, 999048990, -1930122071, 1674532607, 1337354030, 1733234935, 1470392949, 2011745876, -441335851, -167183147, -417302886, 372717159, -1921613036, -140971542, -1963484559, 647471185, -974280257, -1792186158, -675658648, 394798657, 2042863020, 655109742, -759852090, 417227370, 19602483, -1449794158, 544360004, -83596615, 326785732, 1120102867, -411821467, 717344454, -975819719, -30742237, 182601582, -916196220, -2124296435, -1280865734, -1372442568, -1893198820, 1788897456, -164979329, 1938502915, 827118751, 1551859886, -1618330019, 744038307, 756744005, 930524340, -601593329, -1459264056, -562885139, 2074223594, -14430365, 1828674787, -27981042, -81053796, 1902666754, 2144442316, 55915422, 1176268718, -679823207, 565746307, 1520640246, 1539994562, -1692106637, 644627514, 1105094401, 733126879, 1903371329, -1397211869, 213997164, 213430128, 1796256706, 1697100858, -403697745, -2127237234, -2080441479, 1937515026, -1352559401, -1072182858, -911623683, -1398924902, -252894518, 1463889291, -1713137679, 1644908419, 854052275, -208592567, -1783386428, 612393068, 519322412, 1952210861, 302857458, -309774873, -2095873461, 1630832599, 2065608751, 1864085569, -935833514, 171840317, 1056133219, -1624768181, 1398332029, -1478063036, 2025879967, -1692927331, -1699434868, -472750626, 841568989, -840175248, -576839999, -808849065, 1453206958, -1979471375, -584703147, 848962953, -542724074, -1427279933, 1147782136, 894628742, 784682108, -620626230, -1244574981, -68658817, -1777343934, 67845309, -553361370, 97143602, -1105645594, -550497419, -1174017638, 450521260, -1352919171, 581682079, 1561502579, 1808994994, -1427669405, -1403597998, 1264334703, -816963617, 1642127585, 2124171231, -970775280, -1885665470, -498400482, -1966075453, 695078784, -982506227, 189931588, 2010440800, 1125425007, 1617321960, 50066851, 765969433, 700251495, 521462659, 1590657341, -767292500, -239270095, -1638043091, -1465028310, 1650100183, 1378093312, 115811360, -2034975168, -860766358, 179180002, 905947100, -575558029, 2012394830, -1147529740, 593581529, 1990795686, -350257484, 1949306797, -804445942, 2122188427, -1791253025, -610950869, 402830250, -957427005, 1961620672, 333044741, -1127380706, -1377496519, -1964105962, -1767995520, 720274840, 322262680, 483097942, -867088858, -1172092004, -1976048071, -949426897, 494676451, -211925664, -2104117594, -1436219163, 1543163720, 1777717217, -1507684392, 1655155932, -629620490, -1403033690, 1673188013, 1514534945, 1851388811, -1409721481, -1676368, -92033086, 322843262, 2044602327, -1518479469, 2076162402, 213078575, 676462495, 2057812521, 363757109, 1322485322, 1186919264, -2061077286, 252376023, 2062220933, -1936065793, 447024262, -680347663, -117842866, 2051191822, 687927085, -1779547888, 167849194, -1695434636, -796917939, -1749684776, -1505827950, -1236161034, 1199278581, -2122562763, -2070039232, -336984242, -1162370777, 1424607162, -793810654, -520880045, 890278348, -1349435815, 1272773007, 1597519025, -2028682978, -568348980, 1558529712, 1487675541, -2018451188, -211503206, -667849478, 2014771699, -277808436, -231170911, -1359669669, 1730871279, 282183518, -1084606866, -1971868428, -2059613627, -1237280923, -2097775068, -383489432, -109626235, -2032041783, -1579720971, -1378206581, 834457304, -33578531, -1383645903, 662849424, 153777269, 300270467, 1591406788, -1581200384, -1299430497, -1781228409, 1856415460, -1919552650, 1710269849, 433721951, 109695045, 1146418722, -523468145, -900617295, -1427387354, -128677923, -1727175259, -1935047613, 1770230504, -524141056, 1606241349, 2067644074, -379773444, 681731234, -975601234, -1791955126, 1259697504, -1399369458, 1612094316, 438516664, 2062044588, -1860722725, -551019897, 1813996569, -554636456, 1544384926, -274693467, 599053987, -1196177043, 371944668] }
return one of { 0, 1, 4 }
orig(arg0) one of { 1, 2, 8 }
this.mti - orig(this.mti) - 1 == 0
===========================================================================
utilities.MersenneTwister.nextInt(int):::EXIT468
===========================================================================
utilities.MersenneTwister.nextInt(int):::EXIT
this.mt == orig(this.mt)
this.mag01 == orig(this.mag01)
this.mag01[] == orig(this.mag01[])
this.__nextNextGaussian == orig(this.__nextNextGaussian)
this.__haveNextNextGaussian == orig(this.__haveNextNextGaussian)
size(this.mt[]) == orig(size(this.mt[]))
this.mt has only one value
this.mt != null
this.mag01 has only one value
this.mag01 != null
return >= 0
this.mt[] <= orig(this.mt[]) (lexically)
this.mti != orig(this.mti)
===========================================================================
utilities.MersenneTwister.setSeed(long):::ENTER
this.mt[] == [163948990, 1862575607, -1688199152, 915687709, 527195509, 1308064814, 1835148689, 1958928855, -795304074, -1312848334, -1968201478, -1154008605, -336970031, -1094243609, -1563723417, 201388520, -1154705256, -629629229, -700188638, -1652453864, 1407122006, -145599640, 235678797, -1063407752, 293342879, -1004676140, 290376429, -2027297636, -1489911694, 430758989, 624107391, 2038391866, -1115480473, 1623329530, 894150697, 1760971088, 1671317017, 194805661, 240410135, 340028986, 429033226, 1784258843, 1279883628, -1192018644, 938918226, 51193735, 1191761777, -438833313, -1731351684, 844961511, -1001609131, 1521381409, -1313645356, -364108125, -1089020586, 499336795, -1892780769, -909395542, 56275175, 633629278, -1812183726, 147794125, -265564641, -1520874165, -275345651, -363401529, 829364118, -510815119, -395668674, 2105719894, 1438637465, -1318009537, 2075555417, -793130751, 485253140, -113730513, 1948068264, -630464262, 449053579, 839371046, 1874965070, -201285508, -1852028563, -335650786, 429289669, -870913266, -1305497225, 150708352, -1750412584, -47064485, -1427358446, 1196533675, 597106798, 905750979, 1809667405, 1712083803, 451808482, -1224865909, 620776047, -1644444370, 84760256, -2131756507, -1768058679, 1479787390, 1820596355, 80297395, -917560567, -213963427, -1396296574, -1412745491, -602172487, 453366481, -1227553307, -1081805932, -1494654816, -1153969571, -1858873617, -470572810, 318021151, -906364494, -166314931, -1959950017, -1005335925, -588664797, -2007786212, 2078542675, -767206952, -345004314, -811571751, -2118133373, 983423335, -9444058, -2000079587, 749243584, -1424865210, -255924389, -1735958976, 178750099, 1862021001, 1806076211, 1887298374, -348345712, -197331059, -1452627563, 1123530787, 1580455931, 1222574132, 1955230332, -280031003, 948355411, -1209749163, 2105706218, 857734735, -1830773564, -135409480, -1364955806, 1661437820, -1981457938, 705676986, -257363455, -768045718, 1574697998, -99124851, 1982985129, -424539668, 1696060144, 316682939, -1263069330, 2075724356, 979565282, 897445332, 1874938191, 1889446514, -2064266484, 1946524468, 1622710680, -1305052403, 683840668, 378543678, 45948201, 1633055457, 1320497941, -614540390, -585071340, -55651893, 1538575521, 137780186, -812652611, 1694309554, -1726144932, 2052016596, -1868685624, -1134411662, -363897615, -1934938564, -2030408391, 635350027, 1933100060, 1864623415, 458052885, 1469959953, 1854030361, 1030417474, -1049851691, 1793491770, 63527444, 640761522, 987299593, 492269661, -1389618558, -1508575918, 851220835, -399278109, 719344693, -1593534785, -693789080, -905198577, 1860355477, -230676418, -1098676756, -1642973758, -1808599651, -1998192743, 2042940422, -469418333, -84584959, 2145386924, 1543585572, 1296807805, 1484046545, 1726964470, -1591133350, 1701741216, -1494699154, -641231226, -185692060, -1271457649, -1111808626, 415350058, 1456544897, -264192144, 807736400, 615502978, 967207485, 1898811397, -1456998775, -2122209075, 1831297442, -1824603833, 303246898, -1062732620, 92644398, -1747426014, -94501219, -285922476, 1582082386, -534693441, 421880877, -1483236413, -277758680, -1505188357, 290110786, -695009776, 1216047494, 2061165131, 58384955, 908711249, -1025473792, -507163589, 1579748133, -1692161470, -219255729, 1981376268, 2105974322, 1747629617, 799642115, -820037821, -291369643, -2073277948, -1065325707, 1684442278, -900997636, 263523765, -759740796, 415109983, 385121432, 1833599254, 958086706, -412726054, -1335135298, -1787279794, 1378248991, 2134542330, 549059116, -680181630, -263291636, -1890754797, -1226990626, -790938890, -1312923436, -272057446, -1278876278, 2074171350, 965392386, -801002502, 247470958, -931483240, 11601498, 649309366, -313881853, 1338759222, -1348289046, 1949177280, -2078679202, -499032954, -504385868, 1662049903, -1716346717, -1948874301, 732144484, 1908145076, -1227805526, 704939914, -317172555, -1461136622, -1036069227, 1773858932, -1331528592, 600972354, 819099987, 993806857, 1957103576, 738736873, -1356533702, 262717286, -1077208435, 1782645435, 1093770931, -1252073588, 1492333145, -1102318068, 1560777435, -1115055272, -1562151463, -1697860673, 1159598058, -288486383, 1748919925, 1117684000, -1886741406, -1778445506, -2054048757, 1679022573, -1595390083, 1382034813, -2035462321, -1997832251, 2126244328, 1102052179, -1893004607, 336763735, -740697668, -1296883515, 916942574, -1695669422, 1208598525, 863673306, 666708081, -1352896763, -1542222284, -565443904, -1194560670, -100145580, -540839736, -1727716211, 1937831138, 186849799, -671611588, -1469986219, 4089038, 640812226, -812272633, -1618859246, -2066313521, -1632826015, 1478837392, -1000560713, -1808171129, -661619203, 1583391931, -312571672, 536791358, -1578527490, 1153869045, -481187378, -2085505940, 1705840370, -1494486420, 685081844, -217052717, 2135175328, -195798506, -602945317, -492972341, 531547772, -980374399, -302800160, 2071969830, -867389445, 339027569, 597796143, -394963930, 1767178549, 77221665, 2065752739, -1213194871, 722996343, 1785306004, -1660936085, 826539024, 1982268404, -164254130, 495975175, -2007643542, 469927088, 1188072217, 2019473954, 166800506, -1404446770, 1949454633, -580882826, 1398485720, -1591725491, -2134302244, 126626888, -1812463077, -1264109935, 1144140980, -1829328353, -551181272, -807286353, -323641707, 866113768, -1216561853, -1102744223, 921586892, 1555135034, -938750458, -66324807, 249029411, 1571772817, 812947, -2124969533, 277390314, -653859048, 119775854, -1140984530, 1469728805, 1232452606, -1257790362, 834232640, 2079236109, 153064074, -1197036479, 96916287, 154603692, 525967790, 698673529, 491839377, 562286346, -1542255928, 1875860873, 76918912, -1107090343, 137301185, 766137088, 1872609500, -142713330, 1401623039, 141625621, -301476823, -1631113101, 1016698743, 1927836374, -1827971145, 329752910, -946379860, 1356594418, 265148615, 1185548140, 252265707, -352914014, -2142694543, -1000195764, -258677479, -720416975, -2100690262, -1481181639, -1265518023, 902106682, -2030982954, -1635970663, 1426122525, 650980355, -1818953177, 1722253202, -1537211911, 751639810, 343967174, 246791963, -1363748187, 934847714, -1505492694, -443883831, 814350772, -45612537, 882438552, 1422502653, 1559581554, -1030260378, -1015221279, 33434675, -2007778007, -378362110, 1923247729, 1816101949, -1602795078, -913600601, 1365930436, 1313100234, 1363601961, 1264700379, -1633478378, -28271879, 764604600, -757894481, 142494708, -198865571, -250997200, -1639903430, 1264057140, 160987910, 1210630524, 1309359472, 677886133, -608715126, 104103727, -653306194, 858442085, 862684158, -1761606820, 1415619645, -811013676, 1806258940, 404890875, -1306530766, 290316572, 2029375033, -2015472058, -1564578045, -1819257195, -2006320444, -328341424, 1995838962, -1099254253, -128978966, -1706272221, 524433980, -1376839708, 1114146295, -1800961464, 316015469, 171946301, -1247439794, 1690579002, -187458426, 971173817, -488532162, 463163987, 1201334274, -1034148237, 1274879093, 641880074, -45813703, -631778518, 918962806, 1325621464, 756570344, 545734100, 1446894321, 1562497790, 825997290, 560057250, 1794968379, 1735227956, 403347004, -1841863680, -395474657, -514124190, 814792604, -1393944860, 652615959, 471949165, -1925776036, -1176811918, -649806707, -1863818140, 1345598621, -721141780, -462609748, 1298618477, -754208513, -1405636144, 887131199, 1901989441, 1937498535, 254533350, -1763571417, 1511353091, -976925643, 2048522682, -889086924, 1841107745, -2135642609]
this.mti one of { 0, 624 }
arg0 == 1743920671166L
===========================================================================
utilities.MersenneTwister.setSeed(long):::EXIT
this.__nextNextGaussian == orig(this.__nextNextGaussian)
this.__haveNextNextGaussian == orig(this.__haveNextNextGaussian)
this.mt[] == [163948990, 1862575607, -1688199152, 915687709, 527195509, 1308064814, 1835148689, 1958928855, -795304074, -1312848334, -1968201478, -1154008605, -336970031, -1094243609, -1563723417, 201388520, -1154705256, -629629229, -700188638, -1652453864, 1407122006, -145599640, 235678797, -1063407752, 293342879, -1004676140, 290376429, -2027297636, -1489911694, 430758989, 624107391, 2038391866, -1115480473, 1623329530, 894150697, 1760971088, 1671317017, 194805661, 240410135, 340028986, 429033226, 1784258843, 1279883628, -1192018644, 938918226, 51193735, 1191761777, -438833313, -1731351684, 844961511, -1001609131, 1521381409, -1313645356, -364108125, -1089020586, 499336795, -1892780769, -909395542, 56275175, 633629278, -1812183726, 147794125, -265564641, -1520874165, -275345651, -363401529, 829364118, -510815119, -395668674, 2105719894, 1438637465, -1318009537, 2075555417, -793130751, 485253140, -113730513, 1948068264, -630464262, 449053579, 839371046, 1874965070, -201285508, -1852028563, -335650786, 429289669, -870913266, -1305497225, 150708352, -1750412584, -47064485, -1427358446, 1196533675, 597106798, 905750979, 1809667405, 1712083803, 451808482, -1224865909, 620776047, -1644444370, 84760256, -2131756507, -1768058679, 1479787390, 1820596355, 80297395, -917560567, -213963427, -1396296574, -1412745491, -602172487, 453366481, -1227553307, -1081805932, -1494654816, -1153969571, -1858873617, -470572810, 318021151, -906364494, -166314931, -1959950017, -1005335925, -588664797, -2007786212, 2078542675, -767206952, -345004314, -811571751, -2118133373, 983423335, -9444058, -2000079587, 749243584, -1424865210, -255924389, -1735958976, 178750099, 1862021001, 1806076211, 1887298374, -348345712, -197331059, -1452627563, 1123530787, 1580455931, 1222574132, 1955230332, -280031003, 948355411, -1209749163, 2105706218, 857734735, -1830773564, -135409480, -1364955806, 1661437820, -1981457938, 705676986, -257363455, -768045718, 1574697998, -99124851, 1982985129, -424539668, 1696060144, 316682939, -1263069330, 2075724356, 979565282, 897445332, 1874938191, 1889446514, -2064266484, 1946524468, 1622710680, -1305052403, 683840668, 378543678, 45948201, 1633055457, 1320497941, -614540390, -585071340, -55651893, 1538575521, 137780186, -812652611, 1694309554, -1726144932, 2052016596, -1868685624, -1134411662, -363897615, -1934938564, -2030408391, 635350027, 1933100060, 1864623415, 458052885, 1469959953, 1854030361, 1030417474, -1049851691, 1793491770, 63527444, 640761522, 987299593, 492269661, -1389618558, -1508575918, 851220835, -399278109, 719344693, -1593534785, -693789080, -905198577, 1860355477, -230676418, -1098676756, -1642973758, -1808599651, -1998192743, 2042940422, -469418333, -84584959, 2145386924, 1543585572, 1296807805, 1484046545, 1726964470, -1591133350, 1701741216, -1494699154, -641231226, -185692060, -1271457649, -1111808626, 415350058, 1456544897, -264192144, 807736400, 615502978, 967207485, 1898811397, -1456998775, -2122209075, 1831297442, -1824603833, 303246898, -1062732620, 92644398, -1747426014, -94501219, -285922476, 1582082386, -534693441, 421880877, -1483236413, -277758680, -1505188357, 290110786, -695009776, 1216047494, 2061165131, 58384955, 908711249, -1025473792, -507163589, 1579748133, -1692161470, -219255729, 1981376268, 2105974322, 1747629617, 799642115, -820037821, -291369643, -2073277948, -1065325707, 1684442278, -900997636, 263523765, -759740796, 415109983, 385121432, 1833599254, 958086706, -412726054, -1335135298, -1787279794, 1378248991, 2134542330, 549059116, -680181630, -263291636, -1890754797, -1226990626, -790938890, -1312923436, -272057446, -1278876278, 2074171350, 965392386, -801002502, 247470958, -931483240, 11601498, 649309366, -313881853, 1338759222, -1348289046, 1949177280, -2078679202, -499032954, -504385868, 1662049903, -1716346717, -1948874301, 732144484, 1908145076, -1227805526, 704939914, -317172555, -1461136622, -1036069227, 1773858932, -1331528592, 600972354, 819099987, 993806857, 1957103576, 738736873, -1356533702, 262717286, -1077208435, 1782645435, 1093770931, -1252073588, 1492333145, -1102318068, 1560777435, -1115055272, -1562151463, -1697860673, 1159598058, -288486383, 1748919925, 1117684000, -1886741406, -1778445506, -2054048757, 1679022573, -1595390083, 1382034813, -2035462321, -1997832251, 2126244328, 1102052179, -1893004607, 336763735, -740697668, -1296883515, 916942574, -1695669422, 1208598525, 863673306, 666708081, -1352896763, -1542222284, -565443904, -1194560670, -100145580, -540839736, -1727716211, 1937831138, 186849799, -671611588, -1469986219, 4089038, 640812226, -812272633, -1618859246, -2066313521, -1632826015, 1478837392, -1000560713, -1808171129, -661619203, 1583391931, -312571672, 536791358, -1578527490, 1153869045, -481187378, -2085505940, 1705840370, -1494486420, 685081844, -217052717, 2135175328, -195798506, -602945317, -492972341, 531547772, -980374399, -302800160, 2071969830, -867389445, 339027569, 597796143, -394963930, 1767178549, 77221665, 2065752739, -1213194871, 722996343, 1785306004, -1660936085, 826539024, 1982268404, -164254130, 495975175, -2007643542, 469927088, 1188072217, 2019473954, 166800506, -1404446770, 1949454633, -580882826, 1398485720, -1591725491, -2134302244, 126626888, -1812463077, -1264109935, 1144140980, -1829328353, -551181272, -807286353, -323641707, 866113768, -1216561853, -1102744223, 921586892, 1555135034, -938750458, -66324807, 249029411, 1571772817, 812947, -2124969533, 277390314, -653859048, 119775854, -1140984530, 1469728805, 1232452606, -1257790362, 834232640, 2079236109, 153064074, -1197036479, 96916287, 154603692, 525967790, 698673529, 491839377, 562286346, -1542255928, 1875860873, 76918912, -1107090343, 137301185, 766137088, 1872609500, -142713330, 1401623039, 141625621, -301476823, -1631113101, 1016698743, 1927836374, -1827971145, 329752910, -946379860, 1356594418, 265148615, 1185548140, 252265707, -352914014, -2142694543, -1000195764, -258677479, -720416975, -2100690262, -1481181639, -1265518023, 902106682, -2030982954, -1635970663, 1426122525, 650980355, -1818953177, 1722253202, -1537211911, 751639810, 343967174, 246791963, -1363748187, 934847714, -1505492694, -443883831, 814350772, -45612537, 882438552, 1422502653, 1559581554, -1030260378, -1015221279, 33434675, -2007778007, -378362110, 1923247729, 1816101949, -1602795078, -913600601, 1365930436, 1313100234, 1363601961, 1264700379, -1633478378, -28271879, 764604600, -757894481, 142494708, -198865571, -250997200, -1639903430, 1264057140, 160987910, 1210630524, 1309359472, 677886133, -608715126, 104103727, -653306194, 858442085, 862684158, -1761606820, 1415619645, -811013676, 1806258940, 404890875, -1306530766, 290316572, 2029375033, -2015472058, -1564578045, -1819257195, -2006320444, -328341424, 1995838962, -1099254253, -128978966, -1706272221, 524433980, -1376839708, 1114146295, -1800961464, 316015469, 171946301, -1247439794, 1690579002, -187458426, 971173817, -488532162, 463163987, 1201334274, -1034148237, 1274879093, 641880074, -45813703, -631778518, 918962806, 1325621464, 756570344, 545734100, 1446894321, 1562497790, 825997290, 560057250, 1794968379, 1735227956, 403347004, -1841863680, -395474657, -514124190, 814792604, -1393944860, 652615959, 471949165, -1925776036, -1176811918, -649806707, -1863818140, 1345598621, -721141780, -462609748, 1298618477, -754208513, -1405636144, 887131199, 1901989441, 1937498535, 254533350, -1763571417, 1511353091, -976925643, 2048522682, -889086924, 1841107745, -2135642609]
this.mti == 624
this.mt[] == orig(this.mt[]) (elementwise)
this.mag01[] == orig(this.mag01[]) (elementwise)
Exiting Daikon.
